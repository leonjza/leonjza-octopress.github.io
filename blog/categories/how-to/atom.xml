<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: how to | #!/slash/note]]></title>
  <link href="http://leonjza.github.io/blog/categories/how-to/atom.xml" rel="self"/>
  <link href="http://leonjza.github.io/"/>
  <updated>2014-10-27T06:07:12+02:00</updated>
  <id>http://leonjza.github.io/</id>
  <author>
    <name><![CDATA[Leon Jacobs]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Kali Linux Oracle Support]]></title>
    <link href="http://leonjza.github.io/blog/2014/08/17/kali-linux-oracle-support/"/>
    <updated>2014-08-17T15:46:49+02:00</updated>
    <id>http://leonjza.github.io/blog/2014/08/17/kali-linux-oracle-support</id>
    <content type="html"><![CDATA[<p>Recently I have had to get Oracle support sorted in my Kali Linux install. I will try not to rant about the reasons why it doesn&rsquo;t just work out of the box and just get the steps written down quickly. Typically, when you try to use a module such as <code>oracle_login</code>, metasploit may error out with:</p>

<p>```bash Metasploit Oracle Error
msf auxiliary(oracle_login) > run</p>

<p>[&ndash;] Failed to load the OCI library: cannot load such file &mdash; oci8
[&ndash;] See <a href="http://www.metasploit.com/redmine/projects/framework/wiki/OracleUsage">http://www.metasploit.com/redmine/projects/framework/wiki/OracleUsage</a> for installation instructions
[*] Auxiliary module execution completed
msf auxiliary(oracle_login) > run</p>

<p>```</p>

<p>The link provided seems a little out of date, so here is an updated guide.</p>

<h2>getting started</h2>

<p>First, if you dont have an account at oracle.com, you will <em>unfortunately</em> need one here. If you don&rsquo;t want to create one, don’t worry, a temp email works as well as you luckily don’t have to confirm ownership of it before you can download.</p>

<h2>sorting oracle first</h2>

<p>Anyways. Create yourself a directory <code>/opt/oracle</code> and <code>cd</code> there. In a browser, navigate to the <a href="http://www.oracle.com/technetwork/database/features/instant-client/index-097480.html">instant client downloads</a> url and choose your architecture. If you hate 32bit Kali, choose <a href="http://www.oracle.com/technetwork/database/features/instant-client/index-097480.html">Linux x86</a>, and 64bit Kali choose <a href="http://www.oracle.com/technetwork/topics/linuxx86-64soft-092277.html">Linux x86-64</a>.</p>

<p>Next, download the following packages and save them to <code>/opt/oracle</code>:</p>

<ul>
<li>instantclient-basic-linux-12.1.0.1.0.zip</li>
<li>instantclient-sqlplus-linux-12.1.0.1.0.zip</li>
<li>instantclient-sdk-linux-12.1.0.1.0.zip</li>
</ul>


<p>With those downloaded, extract the archives with the <code>unzip</code> command. This should leave you with a directory <code>/opt/oracle/instantclient_12_1/</code>. This is all the files needed to at least get the <code>sqlplus</code> client going. However, when we build the ruby stuff needed for Metasploit, we will need to hax a .so. Do this with:</p>

<p>```bash so symlink
root@kali:/opt/oracle/instantclient_12_1# ln libclntsh.so.12.1 libclntsh.so</p>

<p>root@kali:/opt/oracle/instantclient_12_1# ls -lh libclntsh.so
lrwxrwxrwx 1 root root 17 Aug 17 15:37 libclntsh.so &ndash;> libclntsh.so.12.1
```</p>

<p>The last step is to configure the environment so that your shell is&hellip; <em>oracle aware</em>. We do this by setting a few environment variables. I have chosen to just append the lines to the end of my <code>.bashrc</code> file</p>

<p>```bash .bashrc
root@kali:/opt/oracle/instantclient_12_1# tail ~/.bashrc</p>

<h1>ORACLE</h1>

<p>export PATH=$PATH:/opt/oracle/instantclient_12_1
export SQLPATH=/opt/oracle/instantclient_12_1
export TNS_ADMIN=/opt/oracle/instantclient_12_1
export LD_LIBRARY_PATH=/opt/oracle/instantclient_12_1
export ORACLE_HOME=/opt/oracle/instantclient_12_1
```</p>

<p>Done! Log out and back and check that these are present in the output of <code>env</code>.</p>

<h2>sorting out metasploit</h2>

<p>The last thing we need to do is setup the metasploit part. For this we need to download <a href="https://github.com/kubo/ruby-oci8/archive/ruby-oci8-2.1.7.zip">ruby-oci8</a>. In <code>/opt/oracle</code>, download it:</p>

<p><code>``bash download ruby-oci8
root@kali:/opt/oracle# wget https://github.com/kubo/ruby-oci8/archive/ruby-oci8-2.1.7.zip
[...]
2014-08-17 16:11:31 (42.8 KB/s) -</code>ruby-oci8-2.1.7.zip' saved [278270]</p>

<p>root@kali:/opt/oracle# unzip ruby-oci8-2.1.7.zip
Archive:  ruby-oci8-2.1.7.zip
fb913e32d8a09bd46e5bf549bd8e554f0870d384
   creating: ruby-oci8-ruby-oci8-2.1.7/
  inflating: ruby-oci8-ruby-oci8-2.1.7/.gitignore<br/>
  inflating: ruby-oci8-ruby-oci8-2.1.7/.yardopts<br/>
[&hellip;]
  inflating: ruby-oci8-ruby-oci8-2.1.7/test/test_rowid.rb<br/>
root@kali:/opt/oracle#
<code>``
Next, move to the extracted directory and install the</code>ruby-dev` package if you have not already done so:</p>

<p>```bash ruby-dev
root@kali:/opt/oracle# cd ruby-oci8-ruby-oci8-2.1.7/</p>

<p>root@kali:/opt/oracle/ruby-oci8-ruby-oci8-2.1.7# apt-get install ruby-dev
```</p>

<p>Lastly, we will <code>make</code> &amp;&amp; <code>make install</code>. Logout and back in and test that the oracle tools in metasploit are functional :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KVM - Redirecting CentOS Kernel and tty output to a virtual serial console]]></title>
    <link href="http://leonjza.github.io/blog/2013/08/03/kvm-redirecting-centos-kernel-and-tty-output-to-a-virtual-serial-console/"/>
    <updated>2013-08-03T08:27:00+02:00</updated>
    <id>http://leonjza.github.io/blog/2013/08/03/kvm-redirecting-centos-kernel-and-tty-output-to-a-virtual-serial-console</id>
    <content type="html"><![CDATA[<h3>Console all the things!</h3>

<p>First and foremost, I will start with a warning. Like any other virtualization software, you risk leaving the console open. This is a often overlooked part of securing your infrastructure. An administrator may have been required to do some work on the virtual console, and forget to log out. What if that account that is still logged in, is r00t? Having administrative access to a VM Host gives you access to the consoles, but not necessarily to the guests. Remember to log out! Or, setup shells to auto-logout after a few minutes of inactivity.</p>

<h3>Example virsh console access</h3>

<p>Once setup, accessing consoles can be as easy as connecting via SSH to your server. Firing up the virsh client, and connecting to the console:</p>

<p>```bash a primitive virsh console access example
$ virsh &mdash;connect qemu:///system
Welcome to virsh, the virtualization interactive terminal.</p>

<p>Type:  &lsquo;help&rsquo; for help with commands</p>

<pre><code>   'quit' to quit
</code></pre>

<h2> Id    Name                           State</h2>

<p> 6     console-test                   running</p>

<p>virsh # console console-test
Connected to domain console-test
Escape character is ^]</p>

<p>CentOS release 6.4 (Final)
Kernel 2.6.32-358.el6.x86_64 on an x86_64</p>

<p>localhost.localdomain login: root
Password:
Last login: Sat Aug  3 08:31:13 on ttyS0
[root@localhost ~]$
```</p>

<p>You can escape the console by pressing <code>^]</code>, which will drop you back into the virsh shell.</p>

<p><code>bash virsh guest console escape
[root@localhost ~]$ echo "testing123"
testing123
[root@localhost ~]$                       # I pressed ^] here  
virsh #
</code></p>

<h3>Ok, gimme ze commands already&hellip;</h3>

<p>This I have tested on CentOS 6.4. The 2 commands to get it setup would be:</p>

<p>```bash Enabling KVM Console access
$ cat > /etc/init/ttyS0.conf &lt;&lt; EOL</p>

<h1>ttyS0 &ndash; agetty</h1>

<p>#</p>

<h1>This service maintains a agetty on ttyS0.</h1>

<p>stop on runlevel [S016]
start on runlevel [23]</p>

<p>respawn
exec agetty -h -L -w /dev/ttyS0 115200 vt102
EOL
$ grubby &mdash;update-kernel=ALL &mdash;args=&lsquo;console=ttyS0,115200n8 console=tty0&rsquo;
```</p>

<p>Now, you can reboot the server and connect to the domains console via virsh. If all went well, you <em>should</em> be seeing kernel messages and eventually service starts up&rsquo;s, followed by a login prompt in the console.</p>

<p>If rebooting is not a option, you can enable it on the fly, after saving <code>ttyS0.conf</code> with <code>$ initctl start ttyS0</code> as root.</p>

<p>The <code>grubby</code> command is not mandatory, however this is what allows you to see the kernel messages as the guest boots. I <strong>highly</strong> recommend it.</p>

<h3>I have console, but can&rsquo;t log in as root</h3>

<p>If you followed this guide, then that would in fact be the case. Logging in directly as root is not something I would recommend. Rather log in as a unprivileged user, and su/sudo up to root. In some cases however it is actually necessary. So, to fix this problem, simply add <code>ttyS0</code> as a &ldquo;securetty&rdquo; in <code>/etc/securetty</code> by running: <code>$ echo "ttyS0" &gt;&gt; /etc/securetty</code>. This will allow root logins via the virsh console.</p>

<h3>serial.conf has the answers</h3>

<p>If you are looking for more in-depth explanations as to how this works, I suggest you take a look at <code>/etc/init/serial.conf</code> (again on CentOS 6.4). You&rsquo;ll notice the configuration for <code>ttyS0.conf</code> also comes from here :)</p>
]]></content>
  </entry>
  
</feed>
